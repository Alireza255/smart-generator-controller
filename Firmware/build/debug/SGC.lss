
build/debug/SGC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b734  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000a04  0800b8d4  0800b8d4  0000c8d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c2d8  0800c2d8  0000e1b0  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800c2d8  0800c2d8  0000d2d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c2e0  0800c2e0  0000e1b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c2e0  0800c2e0  0000d2e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800c2e4  0800c2e4  0000d2e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001b0  20000000  0800c2e8  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00008700  200001b0  0800c498  0000e1b0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200088b0  0800c498  0000e8b0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000e1b0  2**0
                  CONTENTS, READONLY
 12 .comment      00000039  00000000  00000000  0000e1e0  2**0
                  CONTENTS, READONLY
 13 .debug_info   0003a4cd  00000000  00000000  0000e219  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00008db9  00000000  00000000  000486e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loclists 0001a99b  00000000  00000000  0005149f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00002430  00000000  00000000  0006be40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00001d35  00000000  00000000  0006e270  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002ad6d  00000000  00000000  0006ffa5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0000c8df  00000000  00000000  0009ad12  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006358  00000000  00000000  000a75f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000001a1  00000000  00000000  000ad94c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <strlen>:
 80001a0:	4603      	mov	r3, r0
 80001a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001a6:	2a00      	cmp	r2, #0
 80001a8:	d1fb      	bne.n	80001a2 <strlen+0x2>
 80001aa:	1a18      	subs	r0, r3, r0
 80001ac:	3801      	subs	r0, #1
 80001ae:	4770      	bx	lr

080001b0 <memchr>:
 80001b0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001b4:	2a10      	cmp	r2, #16
 80001b6:	db2b      	blt.n	8000210 <memchr+0x60>
 80001b8:	f010 0f07 	tst.w	r0, #7
 80001bc:	d008      	beq.n	80001d0 <memchr+0x20>
 80001be:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001c2:	3a01      	subs	r2, #1
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d02d      	beq.n	8000224 <memchr+0x74>
 80001c8:	f010 0f07 	tst.w	r0, #7
 80001cc:	b342      	cbz	r2, 8000220 <memchr+0x70>
 80001ce:	d1f6      	bne.n	80001be <memchr+0xe>
 80001d0:	b4f0      	push	{r4, r5, r6, r7}
 80001d2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001d6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001da:	f022 0407 	bic.w	r4, r2, #7
 80001de:	f07f 0700 	mvns.w	r7, #0
 80001e2:	2300      	movs	r3, #0
 80001e4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001e8:	3c08      	subs	r4, #8
 80001ea:	ea85 0501 	eor.w	r5, r5, r1
 80001ee:	ea86 0601 	eor.w	r6, r6, r1
 80001f2:	fa85 f547 	uadd8	r5, r5, r7
 80001f6:	faa3 f587 	sel	r5, r3, r7
 80001fa:	fa86 f647 	uadd8	r6, r6, r7
 80001fe:	faa5 f687 	sel	r6, r5, r7
 8000202:	b98e      	cbnz	r6, 8000228 <memchr+0x78>
 8000204:	d1ee      	bne.n	80001e4 <memchr+0x34>
 8000206:	bcf0      	pop	{r4, r5, r6, r7}
 8000208:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800020c:	f002 0207 	and.w	r2, r2, #7
 8000210:	b132      	cbz	r2, 8000220 <memchr+0x70>
 8000212:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000216:	3a01      	subs	r2, #1
 8000218:	ea83 0301 	eor.w	r3, r3, r1
 800021c:	b113      	cbz	r3, 8000224 <memchr+0x74>
 800021e:	d1f8      	bne.n	8000212 <memchr+0x62>
 8000220:	2000      	movs	r0, #0
 8000222:	4770      	bx	lr
 8000224:	3801      	subs	r0, #1
 8000226:	4770      	bx	lr
 8000228:	2d00      	cmp	r5, #0
 800022a:	bf06      	itte	eq
 800022c:	4635      	moveq	r5, r6
 800022e:	3803      	subeq	r0, #3
 8000230:	3807      	subne	r0, #7
 8000232:	f015 0f01 	tst.w	r5, #1
 8000236:	d107      	bne.n	8000248 <memchr+0x98>
 8000238:	3001      	adds	r0, #1
 800023a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800023e:	bf02      	ittt	eq
 8000240:	3001      	addeq	r0, #1
 8000242:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000246:	3001      	addeq	r0, #1
 8000248:	bcf0      	pop	{r4, r5, r6, r7}
 800024a:	3801      	subs	r0, #1
 800024c:	4770      	bx	lr
 800024e:	bf00      	nop

08000250 <__aeabi_drsub>:
 8000250:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000254:	e002      	b.n	800025c <__adddf3>
 8000256:	bf00      	nop

08000258 <__aeabi_dsub>:
 8000258:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800025c <__adddf3>:
 800025c:	b530      	push	{r4, r5, lr}
 800025e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000262:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000266:	ea94 0f05 	teq	r4, r5
 800026a:	bf08      	it	eq
 800026c:	ea90 0f02 	teqeq	r0, r2
 8000270:	bf1f      	itttt	ne
 8000272:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000276:	ea55 0c02 	orrsne.w	ip, r5, r2
 800027a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800027e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000282:	f000 80e2 	beq.w	800044a <__adddf3+0x1ee>
 8000286:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800028a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800028e:	bfb8      	it	lt
 8000290:	426d      	neglt	r5, r5
 8000292:	dd0c      	ble.n	80002ae <__adddf3+0x52>
 8000294:	442c      	add	r4, r5
 8000296:	ea80 0202 	eor.w	r2, r0, r2
 800029a:	ea81 0303 	eor.w	r3, r1, r3
 800029e:	ea82 0000 	eor.w	r0, r2, r0
 80002a2:	ea83 0101 	eor.w	r1, r3, r1
 80002a6:	ea80 0202 	eor.w	r2, r0, r2
 80002aa:	ea81 0303 	eor.w	r3, r1, r3
 80002ae:	2d36      	cmp	r5, #54	@ 0x36
 80002b0:	bf88      	it	hi
 80002b2:	bd30      	pophi	{r4, r5, pc}
 80002b4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002bc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002c4:	d002      	beq.n	80002cc <__adddf3+0x70>
 80002c6:	4240      	negs	r0, r0
 80002c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002cc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80002d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002d8:	d002      	beq.n	80002e0 <__adddf3+0x84>
 80002da:	4252      	negs	r2, r2
 80002dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002e0:	ea94 0f05 	teq	r4, r5
 80002e4:	f000 80a7 	beq.w	8000436 <__adddf3+0x1da>
 80002e8:	f1a4 0401 	sub.w	r4, r4, #1
 80002ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80002f0:	db0d      	blt.n	800030e <__adddf3+0xb2>
 80002f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002f6:	fa22 f205 	lsr.w	r2, r2, r5
 80002fa:	1880      	adds	r0, r0, r2
 80002fc:	f141 0100 	adc.w	r1, r1, #0
 8000300:	fa03 f20e 	lsl.w	r2, r3, lr
 8000304:	1880      	adds	r0, r0, r2
 8000306:	fa43 f305 	asr.w	r3, r3, r5
 800030a:	4159      	adcs	r1, r3
 800030c:	e00e      	b.n	800032c <__adddf3+0xd0>
 800030e:	f1a5 0520 	sub.w	r5, r5, #32
 8000312:	f10e 0e20 	add.w	lr, lr, #32
 8000316:	2a01      	cmp	r2, #1
 8000318:	fa03 fc0e 	lsl.w	ip, r3, lr
 800031c:	bf28      	it	cs
 800031e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000322:	fa43 f305 	asr.w	r3, r3, r5
 8000326:	18c0      	adds	r0, r0, r3
 8000328:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800032c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000330:	d507      	bpl.n	8000342 <__adddf3+0xe6>
 8000332:	f04f 0e00 	mov.w	lr, #0
 8000336:	f1dc 0c00 	rsbs	ip, ip, #0
 800033a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800033e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000342:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000346:	d31b      	bcc.n	8000380 <__adddf3+0x124>
 8000348:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800034c:	d30c      	bcc.n	8000368 <__adddf3+0x10c>
 800034e:	0849      	lsrs	r1, r1, #1
 8000350:	ea5f 0030 	movs.w	r0, r0, rrx
 8000354:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000358:	f104 0401 	add.w	r4, r4, #1
 800035c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000360:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000364:	f080 809a 	bcs.w	800049c <__adddf3+0x240>
 8000368:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800036c:	bf08      	it	eq
 800036e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000372:	f150 0000 	adcs.w	r0, r0, #0
 8000376:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800037a:	ea41 0105 	orr.w	r1, r1, r5
 800037e:	bd30      	pop	{r4, r5, pc}
 8000380:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000384:	4140      	adcs	r0, r0
 8000386:	eb41 0101 	adc.w	r1, r1, r1
 800038a:	3c01      	subs	r4, #1
 800038c:	bf28      	it	cs
 800038e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000392:	d2e9      	bcs.n	8000368 <__adddf3+0x10c>
 8000394:	f091 0f00 	teq	r1, #0
 8000398:	bf04      	itt	eq
 800039a:	4601      	moveq	r1, r0
 800039c:	2000      	moveq	r0, #0
 800039e:	fab1 f381 	clz	r3, r1
 80003a2:	bf08      	it	eq
 80003a4:	3320      	addeq	r3, #32
 80003a6:	f1a3 030b 	sub.w	r3, r3, #11
 80003aa:	f1b3 0220 	subs.w	r2, r3, #32
 80003ae:	da0c      	bge.n	80003ca <__adddf3+0x16e>
 80003b0:	320c      	adds	r2, #12
 80003b2:	dd08      	ble.n	80003c6 <__adddf3+0x16a>
 80003b4:	f102 0c14 	add.w	ip, r2, #20
 80003b8:	f1c2 020c 	rsb	r2, r2, #12
 80003bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003c0:	fa21 f102 	lsr.w	r1, r1, r2
 80003c4:	e00c      	b.n	80003e0 <__adddf3+0x184>
 80003c6:	f102 0214 	add.w	r2, r2, #20
 80003ca:	bfd8      	it	le
 80003cc:	f1c2 0c20 	rsble	ip, r2, #32
 80003d0:	fa01 f102 	lsl.w	r1, r1, r2
 80003d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003d8:	bfdc      	itt	le
 80003da:	ea41 010c 	orrle.w	r1, r1, ip
 80003de:	4090      	lslle	r0, r2
 80003e0:	1ae4      	subs	r4, r4, r3
 80003e2:	bfa2      	ittt	ge
 80003e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003e8:	4329      	orrge	r1, r5
 80003ea:	bd30      	popge	{r4, r5, pc}
 80003ec:	ea6f 0404 	mvn.w	r4, r4
 80003f0:	3c1f      	subs	r4, #31
 80003f2:	da1c      	bge.n	800042e <__adddf3+0x1d2>
 80003f4:	340c      	adds	r4, #12
 80003f6:	dc0e      	bgt.n	8000416 <__adddf3+0x1ba>
 80003f8:	f104 0414 	add.w	r4, r4, #20
 80003fc:	f1c4 0220 	rsb	r2, r4, #32
 8000400:	fa20 f004 	lsr.w	r0, r0, r4
 8000404:	fa01 f302 	lsl.w	r3, r1, r2
 8000408:	ea40 0003 	orr.w	r0, r0, r3
 800040c:	fa21 f304 	lsr.w	r3, r1, r4
 8000410:	ea45 0103 	orr.w	r1, r5, r3
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	f1c4 040c 	rsb	r4, r4, #12
 800041a:	f1c4 0220 	rsb	r2, r4, #32
 800041e:	fa20 f002 	lsr.w	r0, r0, r2
 8000422:	fa01 f304 	lsl.w	r3, r1, r4
 8000426:	ea40 0003 	orr.w	r0, r0, r3
 800042a:	4629      	mov	r1, r5
 800042c:	bd30      	pop	{r4, r5, pc}
 800042e:	fa21 f004 	lsr.w	r0, r1, r4
 8000432:	4629      	mov	r1, r5
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f094 0f00 	teq	r4, #0
 800043a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800043e:	bf06      	itte	eq
 8000440:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000444:	3401      	addeq	r4, #1
 8000446:	3d01      	subne	r5, #1
 8000448:	e74e      	b.n	80002e8 <__adddf3+0x8c>
 800044a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800044e:	bf18      	it	ne
 8000450:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000454:	d029      	beq.n	80004aa <__adddf3+0x24e>
 8000456:	ea94 0f05 	teq	r4, r5
 800045a:	bf08      	it	eq
 800045c:	ea90 0f02 	teqeq	r0, r2
 8000460:	d005      	beq.n	800046e <__adddf3+0x212>
 8000462:	ea54 0c00 	orrs.w	ip, r4, r0
 8000466:	bf04      	itt	eq
 8000468:	4619      	moveq	r1, r3
 800046a:	4610      	moveq	r0, r2
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	ea91 0f03 	teq	r1, r3
 8000472:	bf1e      	ittt	ne
 8000474:	2100      	movne	r1, #0
 8000476:	2000      	movne	r0, #0
 8000478:	bd30      	popne	{r4, r5, pc}
 800047a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800047e:	d105      	bne.n	800048c <__adddf3+0x230>
 8000480:	0040      	lsls	r0, r0, #1
 8000482:	4149      	adcs	r1, r1
 8000484:	bf28      	it	cs
 8000486:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800048a:	bd30      	pop	{r4, r5, pc}
 800048c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000490:	bf3c      	itt	cc
 8000492:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000496:	bd30      	popcc	{r4, r5, pc}
 8000498:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800049c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004a0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004a4:	f04f 0000 	mov.w	r0, #0
 80004a8:	bd30      	pop	{r4, r5, pc}
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf1a      	itte	ne
 80004b0:	4619      	movne	r1, r3
 80004b2:	4610      	movne	r0, r2
 80004b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004b8:	bf1c      	itt	ne
 80004ba:	460b      	movne	r3, r1
 80004bc:	4602      	movne	r2, r0
 80004be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004c2:	bf06      	itte	eq
 80004c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004c8:	ea91 0f03 	teqeq	r1, r3
 80004cc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80004d0:	bd30      	pop	{r4, r5, pc}
 80004d2:	bf00      	nop

080004d4 <__aeabi_ui2d>:
 80004d4:	f090 0f00 	teq	r0, #0
 80004d8:	bf04      	itt	eq
 80004da:	2100      	moveq	r1, #0
 80004dc:	4770      	bxeq	lr
 80004de:	b530      	push	{r4, r5, lr}
 80004e0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004e4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004e8:	f04f 0500 	mov.w	r5, #0
 80004ec:	f04f 0100 	mov.w	r1, #0
 80004f0:	e750      	b.n	8000394 <__adddf3+0x138>
 80004f2:	bf00      	nop

080004f4 <__aeabi_i2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000508:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800050c:	bf48      	it	mi
 800050e:	4240      	negmi	r0, r0
 8000510:	f04f 0100 	mov.w	r1, #0
 8000514:	e73e      	b.n	8000394 <__adddf3+0x138>
 8000516:	bf00      	nop

08000518 <__aeabi_f2d>:
 8000518:	0042      	lsls	r2, r0, #1
 800051a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800051e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000522:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000526:	bf1f      	itttt	ne
 8000528:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800052c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000530:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000534:	4770      	bxne	lr
 8000536:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800053a:	bf08      	it	eq
 800053c:	4770      	bxeq	lr
 800053e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000542:	bf04      	itt	eq
 8000544:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000548:	4770      	bxeq	lr
 800054a:	b530      	push	{r4, r5, lr}
 800054c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000550:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000554:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000558:	e71c      	b.n	8000394 <__adddf3+0x138>
 800055a:	bf00      	nop

0800055c <__aeabi_ul2d>:
 800055c:	ea50 0201 	orrs.w	r2, r0, r1
 8000560:	bf08      	it	eq
 8000562:	4770      	bxeq	lr
 8000564:	b530      	push	{r4, r5, lr}
 8000566:	f04f 0500 	mov.w	r5, #0
 800056a:	e00a      	b.n	8000582 <__aeabi_l2d+0x16>

0800056c <__aeabi_l2d>:
 800056c:	ea50 0201 	orrs.w	r2, r0, r1
 8000570:	bf08      	it	eq
 8000572:	4770      	bxeq	lr
 8000574:	b530      	push	{r4, r5, lr}
 8000576:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800057a:	d502      	bpl.n	8000582 <__aeabi_l2d+0x16>
 800057c:	4240      	negs	r0, r0
 800057e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000582:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000586:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800058a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800058e:	f43f aed8 	beq.w	8000342 <__adddf3+0xe6>
 8000592:	f04f 0203 	mov.w	r2, #3
 8000596:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800059a:	bf18      	it	ne
 800059c:	3203      	addne	r2, #3
 800059e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005a2:	bf18      	it	ne
 80005a4:	3203      	addne	r2, #3
 80005a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005aa:	f1c2 0320 	rsb	r3, r2, #32
 80005ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80005b2:	fa20 f002 	lsr.w	r0, r0, r2
 80005b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ba:	ea40 000e 	orr.w	r0, r0, lr
 80005be:	fa21 f102 	lsr.w	r1, r1, r2
 80005c2:	4414      	add	r4, r2
 80005c4:	e6bd      	b.n	8000342 <__adddf3+0xe6>
 80005c6:	bf00      	nop

080005c8 <__aeabi_dmul>:
 80005c8:	b570      	push	{r4, r5, r6, lr}
 80005ca:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005ce:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80005d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005d6:	bf1d      	ittte	ne
 80005d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005dc:	ea94 0f0c 	teqne	r4, ip
 80005e0:	ea95 0f0c 	teqne	r5, ip
 80005e4:	f000 f8de 	bleq	80007a4 <__aeabi_dmul+0x1dc>
 80005e8:	442c      	add	r4, r5
 80005ea:	ea81 0603 	eor.w	r6, r1, r3
 80005ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005fa:	bf18      	it	ne
 80005fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000600:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000604:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000608:	d038      	beq.n	800067c <__aeabi_dmul+0xb4>
 800060a:	fba0 ce02 	umull	ip, lr, r0, r2
 800060e:	f04f 0500 	mov.w	r5, #0
 8000612:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000616:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800061a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800061e:	f04f 0600 	mov.w	r6, #0
 8000622:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000626:	f09c 0f00 	teq	ip, #0
 800062a:	bf18      	it	ne
 800062c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000630:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000634:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000638:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800063c:	d204      	bcs.n	8000648 <__aeabi_dmul+0x80>
 800063e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000642:	416d      	adcs	r5, r5
 8000644:	eb46 0606 	adc.w	r6, r6, r6
 8000648:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800064c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000650:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000654:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000658:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800065c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000660:	bf88      	it	hi
 8000662:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000666:	d81e      	bhi.n	80006a6 <__aeabi_dmul+0xde>
 8000668:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800066c:	bf08      	it	eq
 800066e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000672:	f150 0000 	adcs.w	r0, r0, #0
 8000676:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800067a:	bd70      	pop	{r4, r5, r6, pc}
 800067c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000680:	ea46 0101 	orr.w	r1, r6, r1
 8000684:	ea40 0002 	orr.w	r0, r0, r2
 8000688:	ea81 0103 	eor.w	r1, r1, r3
 800068c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000690:	bfc2      	ittt	gt
 8000692:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000696:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800069a:	bd70      	popgt	{r4, r5, r6, pc}
 800069c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006a0:	f04f 0e00 	mov.w	lr, #0
 80006a4:	3c01      	subs	r4, #1
 80006a6:	f300 80ab 	bgt.w	8000800 <__aeabi_dmul+0x238>
 80006aa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ae:	bfde      	ittt	le
 80006b0:	2000      	movle	r0, #0
 80006b2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006b6:	bd70      	pople	{r4, r5, r6, pc}
 80006b8:	f1c4 0400 	rsb	r4, r4, #0
 80006bc:	3c20      	subs	r4, #32
 80006be:	da35      	bge.n	800072c <__aeabi_dmul+0x164>
 80006c0:	340c      	adds	r4, #12
 80006c2:	dc1b      	bgt.n	80006fc <__aeabi_dmul+0x134>
 80006c4:	f104 0414 	add.w	r4, r4, #20
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f305 	lsl.w	r3, r0, r5
 80006d0:	fa20 f004 	lsr.w	r0, r0, r4
 80006d4:	fa01 f205 	lsl.w	r2, r1, r5
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006e0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e8:	fa21 f604 	lsr.w	r6, r1, r4
 80006ec:	eb42 0106 	adc.w	r1, r2, r6
 80006f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006f4:	bf08      	it	eq
 80006f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f1c4 040c 	rsb	r4, r4, #12
 8000700:	f1c4 0520 	rsb	r5, r4, #32
 8000704:	fa00 f304 	lsl.w	r3, r0, r4
 8000708:	fa20 f005 	lsr.w	r0, r0, r5
 800070c:	fa01 f204 	lsl.w	r2, r1, r4
 8000710:	ea40 0002 	orr.w	r0, r0, r2
 8000714:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000718:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800071c:	f141 0100 	adc.w	r1, r1, #0
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 0520 	rsb	r5, r4, #32
 8000730:	fa00 f205 	lsl.w	r2, r0, r5
 8000734:	ea4e 0e02 	orr.w	lr, lr, r2
 8000738:	fa20 f304 	lsr.w	r3, r0, r4
 800073c:	fa01 f205 	lsl.w	r2, r1, r5
 8000740:	ea43 0302 	orr.w	r3, r3, r2
 8000744:	fa21 f004 	lsr.w	r0, r1, r4
 8000748:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800074c:	fa21 f204 	lsr.w	r2, r1, r4
 8000750:	ea20 0002 	bic.w	r0, r0, r2
 8000754:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000758:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800075c:	bf08      	it	eq
 800075e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000762:	bd70      	pop	{r4, r5, r6, pc}
 8000764:	f094 0f00 	teq	r4, #0
 8000768:	d10f      	bne.n	800078a <__aeabi_dmul+0x1c2>
 800076a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800076e:	0040      	lsls	r0, r0, #1
 8000770:	eb41 0101 	adc.w	r1, r1, r1
 8000774:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000778:	bf08      	it	eq
 800077a:	3c01      	subeq	r4, #1
 800077c:	d0f7      	beq.n	800076e <__aeabi_dmul+0x1a6>
 800077e:	ea41 0106 	orr.w	r1, r1, r6
 8000782:	f095 0f00 	teq	r5, #0
 8000786:	bf18      	it	ne
 8000788:	4770      	bxne	lr
 800078a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800078e:	0052      	lsls	r2, r2, #1
 8000790:	eb43 0303 	adc.w	r3, r3, r3
 8000794:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000798:	bf08      	it	eq
 800079a:	3d01      	subeq	r5, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1c6>
 800079e:	ea43 0306 	orr.w	r3, r3, r6
 80007a2:	4770      	bx	lr
 80007a4:	ea94 0f0c 	teq	r4, ip
 80007a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ac:	bf18      	it	ne
 80007ae:	ea95 0f0c 	teqne	r5, ip
 80007b2:	d00c      	beq.n	80007ce <__aeabi_dmul+0x206>
 80007b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007b8:	bf18      	it	ne
 80007ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007be:	d1d1      	bne.n	8000764 <__aeabi_dmul+0x19c>
 80007c0:	ea81 0103 	eor.w	r1, r1, r3
 80007c4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007c8:	f04f 0000 	mov.w	r0, #0
 80007cc:	bd70      	pop	{r4, r5, r6, pc}
 80007ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d2:	bf06      	itte	eq
 80007d4:	4610      	moveq	r0, r2
 80007d6:	4619      	moveq	r1, r3
 80007d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007dc:	d019      	beq.n	8000812 <__aeabi_dmul+0x24a>
 80007de:	ea94 0f0c 	teq	r4, ip
 80007e2:	d102      	bne.n	80007ea <__aeabi_dmul+0x222>
 80007e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007e8:	d113      	bne.n	8000812 <__aeabi_dmul+0x24a>
 80007ea:	ea95 0f0c 	teq	r5, ip
 80007ee:	d105      	bne.n	80007fc <__aeabi_dmul+0x234>
 80007f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007f4:	bf1c      	itt	ne
 80007f6:	4610      	movne	r0, r2
 80007f8:	4619      	movne	r1, r3
 80007fa:	d10a      	bne.n	8000812 <__aeabi_dmul+0x24a>
 80007fc:	ea81 0103 	eor.w	r1, r1, r3
 8000800:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000804:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000808:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800080c:	f04f 0000 	mov.w	r0, #0
 8000810:	bd70      	pop	{r4, r5, r6, pc}
 8000812:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000816:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800081a:	bd70      	pop	{r4, r5, r6, pc}

0800081c <__aeabi_ddiv>:
 800081c:	b570      	push	{r4, r5, r6, lr}
 800081e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000822:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000826:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800082a:	bf1d      	ittte	ne
 800082c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000830:	ea94 0f0c 	teqne	r4, ip
 8000834:	ea95 0f0c 	teqne	r5, ip
 8000838:	f000 f8a7 	bleq	800098a <__aeabi_ddiv+0x16e>
 800083c:	eba4 0405 	sub.w	r4, r4, r5
 8000840:	ea81 0e03 	eor.w	lr, r1, r3
 8000844:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000848:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800084c:	f000 8088 	beq.w	8000960 <__aeabi_ddiv+0x144>
 8000850:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000854:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000858:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800085c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000860:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000864:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000868:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800086c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000870:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000874:	429d      	cmp	r5, r3
 8000876:	bf08      	it	eq
 8000878:	4296      	cmpeq	r6, r2
 800087a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800087e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000882:	d202      	bcs.n	800088a <__aeabi_ddiv+0x6e>
 8000884:	085b      	lsrs	r3, r3, #1
 8000886:	ea4f 0232 	mov.w	r2, r2, rrx
 800088a:	1ab6      	subs	r6, r6, r2
 800088c:	eb65 0503 	sbc.w	r5, r5, r3
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800089a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008be:	bf22      	ittt	cs
 80008c0:	1ab6      	subcs	r6, r6, r2
 80008c2:	4675      	movcs	r5, lr
 80008c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008c8:	085b      	lsrs	r3, r3, #1
 80008ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008fc:	d018      	beq.n	8000930 <__aeabi_ddiv+0x114>
 80008fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000902:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000906:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800090a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800090e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000912:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000916:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800091a:	d1c0      	bne.n	800089e <__aeabi_ddiv+0x82>
 800091c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000920:	d10b      	bne.n	800093a <__aeabi_ddiv+0x11e>
 8000922:	ea41 0100 	orr.w	r1, r1, r0
 8000926:	f04f 0000 	mov.w	r0, #0
 800092a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800092e:	e7b6      	b.n	800089e <__aeabi_ddiv+0x82>
 8000930:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000934:	bf04      	itt	eq
 8000936:	4301      	orreq	r1, r0
 8000938:	2000      	moveq	r0, #0
 800093a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800093e:	bf88      	it	hi
 8000940:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000944:	f63f aeaf 	bhi.w	80006a6 <__aeabi_dmul+0xde>
 8000948:	ebb5 0c03 	subs.w	ip, r5, r3
 800094c:	bf04      	itt	eq
 800094e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000952:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000956:	f150 0000 	adcs.w	r0, r0, #0
 800095a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800095e:	bd70      	pop	{r4, r5, r6, pc}
 8000960:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000964:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000968:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800096c:	bfc2      	ittt	gt
 800096e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000972:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000976:	bd70      	popgt	{r4, r5, r6, pc}
 8000978:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800097c:	f04f 0e00 	mov.w	lr, #0
 8000980:	3c01      	subs	r4, #1
 8000982:	e690      	b.n	80006a6 <__aeabi_dmul+0xde>
 8000984:	ea45 0e06 	orr.w	lr, r5, r6
 8000988:	e68d      	b.n	80006a6 <__aeabi_dmul+0xde>
 800098a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800098e:	ea94 0f0c 	teq	r4, ip
 8000992:	bf08      	it	eq
 8000994:	ea95 0f0c 	teqeq	r5, ip
 8000998:	f43f af3b 	beq.w	8000812 <__aeabi_dmul+0x24a>
 800099c:	ea94 0f0c 	teq	r4, ip
 80009a0:	d10a      	bne.n	80009b8 <__aeabi_ddiv+0x19c>
 80009a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009a6:	f47f af34 	bne.w	8000812 <__aeabi_dmul+0x24a>
 80009aa:	ea95 0f0c 	teq	r5, ip
 80009ae:	f47f af25 	bne.w	80007fc <__aeabi_dmul+0x234>
 80009b2:	4610      	mov	r0, r2
 80009b4:	4619      	mov	r1, r3
 80009b6:	e72c      	b.n	8000812 <__aeabi_dmul+0x24a>
 80009b8:	ea95 0f0c 	teq	r5, ip
 80009bc:	d106      	bne.n	80009cc <__aeabi_ddiv+0x1b0>
 80009be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009c2:	f43f aefd 	beq.w	80007c0 <__aeabi_dmul+0x1f8>
 80009c6:	4610      	mov	r0, r2
 80009c8:	4619      	mov	r1, r3
 80009ca:	e722      	b.n	8000812 <__aeabi_dmul+0x24a>
 80009cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009d0:	bf18      	it	ne
 80009d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009d6:	f47f aec5 	bne.w	8000764 <__aeabi_dmul+0x19c>
 80009da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009de:	f47f af0d 	bne.w	80007fc <__aeabi_dmul+0x234>
 80009e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009e6:	f47f aeeb 	bne.w	80007c0 <__aeabi_dmul+0x1f8>
 80009ea:	e712      	b.n	8000812 <__aeabi_dmul+0x24a>

080009ec <__aeabi_d2uiz>:
 80009ec:	004a      	lsls	r2, r1, #1
 80009ee:	d211      	bcs.n	8000a14 <__aeabi_d2uiz+0x28>
 80009f0:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 80009f4:	d211      	bcs.n	8000a1a <__aeabi_d2uiz+0x2e>
 80009f6:	d50d      	bpl.n	8000a14 <__aeabi_d2uiz+0x28>
 80009f8:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 80009fc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a00:	d40e      	bmi.n	8000a20 <__aeabi_d2uiz+0x34>
 8000a02:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a06:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a0a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a0e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a12:	4770      	bx	lr
 8000a14:	f04f 0000 	mov.w	r0, #0
 8000a18:	4770      	bx	lr
 8000a1a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a1e:	d102      	bne.n	8000a26 <__aeabi_d2uiz+0x3a>
 8000a20:	f04f 30ff 	mov.w	r0, #4294967295
 8000a24:	4770      	bx	lr
 8000a26:	f04f 0000 	mov.w	r0, #0
 8000a2a:	4770      	bx	lr

08000a2c <__aeabi_uldivmod>:
 8000a2c:	b953      	cbnz	r3, 8000a44 <__aeabi_uldivmod+0x18>
 8000a2e:	b94a      	cbnz	r2, 8000a44 <__aeabi_uldivmod+0x18>
 8000a30:	2900      	cmp	r1, #0
 8000a32:	bf08      	it	eq
 8000a34:	2800      	cmpeq	r0, #0
 8000a36:	bf1c      	itt	ne
 8000a38:	f04f 31ff 	movne.w	r1, #4294967295
 8000a3c:	f04f 30ff 	movne.w	r0, #4294967295
 8000a40:	f000 b80c 	b.w	8000a5c <__aeabi_idiv0>
 8000a44:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a48:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a4c:	f00a fdba 	bl	800b5c4 <__udivmoddi4>
 8000a50:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a54:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a58:	b004      	add	sp, #16
 8000a5a:	4770      	bx	lr

08000a5c <__aeabi_idiv0>:
 8000a5c:	4770      	bx	lr
 8000a5e:	bf00      	nop

08000a60 <__do_global_dtors_aux>:
 8000a60:	b510      	push	{r4, lr}
 8000a62:	4c05      	ldr	r4, [pc, #20]	@ (8000a78 <__do_global_dtors_aux+0x18>)
 8000a64:	7823      	ldrb	r3, [r4, #0]
 8000a66:	b933      	cbnz	r3, 8000a76 <__do_global_dtors_aux+0x16>
 8000a68:	4b04      	ldr	r3, [pc, #16]	@ (8000a7c <__do_global_dtors_aux+0x1c>)
 8000a6a:	b113      	cbz	r3, 8000a72 <__do_global_dtors_aux+0x12>
 8000a6c:	4804      	ldr	r0, [pc, #16]	@ (8000a80 <__do_global_dtors_aux+0x20>)
 8000a6e:	f3af 8000 	nop.w
 8000a72:	2301      	movs	r3, #1
 8000a74:	7023      	strb	r3, [r4, #0]
 8000a76:	bd10      	pop	{r4, pc}
 8000a78:	200001b0 	.word	0x200001b0
 8000a7c:	00000000 	.word	0x00000000
 8000a80:	0800b8bc 	.word	0x0800b8bc

08000a84 <frame_dummy>:
 8000a84:	b508      	push	{r3, lr}
 8000a86:	4b03      	ldr	r3, [pc, #12]	@ (8000a94 <frame_dummy+0x10>)
 8000a88:	b11b      	cbz	r3, 8000a92 <frame_dummy+0xe>
 8000a8a:	4903      	ldr	r1, [pc, #12]	@ (8000a98 <frame_dummy+0x14>)
 8000a8c:	4803      	ldr	r0, [pc, #12]	@ (8000a9c <frame_dummy+0x18>)
 8000a8e:	f3af 8000 	nop.w
 8000a92:	bd08      	pop	{r3, pc}
 8000a94:	00000000 	.word	0x00000000
 8000a98:	200001b4 	.word	0x200001b4
 8000a9c:	0800b8bc 	.word	0x0800b8bc

08000aa0 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000aa0:	b510      	push	{r4, lr}
 8000aa2:	b08c      	sub	sp, #48	@ 0x30

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000aa4:	2400      	movs	r4, #0
 8000aa6:	9408      	str	r4, [sp, #32]
 8000aa8:	9409      	str	r4, [sp, #36]	@ 0x24
 8000aaa:	940a      	str	r4, [sp, #40]	@ 0x28
 8000aac:	940b      	str	r4, [sp, #44]	@ 0x2c
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8000aae:	2220      	movs	r2, #32
 8000ab0:	4621      	mov	r1, r4
 8000ab2:	4668      	mov	r0, sp
 8000ab4:	f009 ffd2 	bl	800aa5c <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000ab8:	4883      	ldr	r0, [pc, #524]	@ (8000cc8 <MX_ADC1_Init+0x228>)
 8000aba:	4b84      	ldr	r3, [pc, #528]	@ (8000ccc <MX_ADC1_Init+0x22c>)
 8000abc:	6003      	str	r3, [r0, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000abe:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000ac2:	6043      	str	r3, [r0, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000ac4:	6084      	str	r4, [r0, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000ac6:	2301      	movs	r3, #1
 8000ac8:	6103      	str	r3, [r0, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000aca:	7604      	strb	r4, [r0, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000acc:	f880 4020 	strb.w	r4, [r0, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000ad0:	62c4      	str	r4, [r0, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000ad2:	4a7f      	ldr	r2, [pc, #508]	@ (8000cd0 <MX_ADC1_Init+0x230>)
 8000ad4:	6282      	str	r2, [r0, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000ad6:	60c4      	str	r4, [r0, #12]
  hadc1.Init.NbrOfConversion = 13;
 8000ad8:	220d      	movs	r2, #13
 8000ada:	61c2      	str	r2, [r0, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000adc:	f880 4030 	strb.w	r4, [r0, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000ae0:	6143      	str	r3, [r0, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000ae2:	f003 f9e1 	bl	8003ea8 <HAL_ADC_Init>
 8000ae6:	2800      	cmp	r0, #0
 8000ae8:	f040 80b8 	bne.w	8000c5c <MX_ADC1_Init+0x1bc>
    Error_Handler();
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000aec:	2300      	movs	r3, #0
 8000aee:	9308      	str	r3, [sp, #32]
  sConfig.Rank = 1;
 8000af0:	2201      	movs	r2, #1
 8000af2:	9209      	str	r2, [sp, #36]	@ 0x24
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000af4:	930a      	str	r3, [sp, #40]	@ 0x28
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000af6:	a908      	add	r1, sp, #32
 8000af8:	4873      	ldr	r0, [pc, #460]	@ (8000cc8 <MX_ADC1_Init+0x228>)
 8000afa:	f003 faff 	bl	80040fc <HAL_ADC_ConfigChannel>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	f040 80af 	bne.w	8000c62 <MX_ADC1_Init+0x1c2>
    Error_Handler();
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000b04:	2301      	movs	r3, #1
 8000b06:	9308      	str	r3, [sp, #32]
  sConfig.Rank = 2;
 8000b08:	2302      	movs	r3, #2
 8000b0a:	9309      	str	r3, [sp, #36]	@ 0x24
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b0c:	a908      	add	r1, sp, #32
 8000b0e:	486e      	ldr	r0, [pc, #440]	@ (8000cc8 <MX_ADC1_Init+0x228>)
 8000b10:	f003 faf4 	bl	80040fc <HAL_ADC_ConfigChannel>
 8000b14:	2800      	cmp	r0, #0
 8000b16:	f040 80a7 	bne.w	8000c68 <MX_ADC1_Init+0x1c8>
    Error_Handler();
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000b1a:	2302      	movs	r3, #2
 8000b1c:	9308      	str	r3, [sp, #32]
  sConfig.Rank = 3;
 8000b1e:	2303      	movs	r3, #3
 8000b20:	9309      	str	r3, [sp, #36]	@ 0x24
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b22:	a908      	add	r1, sp, #32
 8000b24:	4868      	ldr	r0, [pc, #416]	@ (8000cc8 <MX_ADC1_Init+0x228>)
 8000b26:	f003 fae9 	bl	80040fc <HAL_ADC_ConfigChannel>
 8000b2a:	2800      	cmp	r0, #0
 8000b2c:	f040 809f 	bne.w	8000c6e <MX_ADC1_Init+0x1ce>
    Error_Handler();
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000b30:	2303      	movs	r3, #3
 8000b32:	9308      	str	r3, [sp, #32]
  sConfig.Rank = 4;
 8000b34:	2304      	movs	r3, #4
 8000b36:	9309      	str	r3, [sp, #36]	@ 0x24
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b38:	a908      	add	r1, sp, #32
 8000b3a:	4863      	ldr	r0, [pc, #396]	@ (8000cc8 <MX_ADC1_Init+0x228>)
 8000b3c:	f003 fade 	bl	80040fc <HAL_ADC_ConfigChannel>
 8000b40:	2800      	cmp	r0, #0
 8000b42:	f040 8097 	bne.w	8000c74 <MX_ADC1_Init+0x1d4>
    Error_Handler();
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000b46:	2304      	movs	r3, #4
 8000b48:	9308      	str	r3, [sp, #32]
  sConfig.Rank = 5;
 8000b4a:	2305      	movs	r3, #5
 8000b4c:	9309      	str	r3, [sp, #36]	@ 0x24
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b4e:	a908      	add	r1, sp, #32
 8000b50:	485d      	ldr	r0, [pc, #372]	@ (8000cc8 <MX_ADC1_Init+0x228>)
 8000b52:	f003 fad3 	bl	80040fc <HAL_ADC_ConfigChannel>
 8000b56:	2800      	cmp	r0, #0
 8000b58:	f040 808f 	bne.w	8000c7a <MX_ADC1_Init+0x1da>
    Error_Handler();
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000b5c:	2305      	movs	r3, #5
 8000b5e:	9308      	str	r3, [sp, #32]
  sConfig.Rank = 6;
 8000b60:	2306      	movs	r3, #6
 8000b62:	9309      	str	r3, [sp, #36]	@ 0x24
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b64:	a908      	add	r1, sp, #32
 8000b66:	4858      	ldr	r0, [pc, #352]	@ (8000cc8 <MX_ADC1_Init+0x228>)
 8000b68:	f003 fac8 	bl	80040fc <HAL_ADC_ConfigChannel>
 8000b6c:	2800      	cmp	r0, #0
 8000b6e:	f040 8087 	bne.w	8000c80 <MX_ADC1_Init+0x1e0>
    Error_Handler();
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000b72:	2306      	movs	r3, #6
 8000b74:	9308      	str	r3, [sp, #32]
  sConfig.Rank = 7;
 8000b76:	2307      	movs	r3, #7
 8000b78:	9309      	str	r3, [sp, #36]	@ 0x24
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b7a:	a908      	add	r1, sp, #32
 8000b7c:	4852      	ldr	r0, [pc, #328]	@ (8000cc8 <MX_ADC1_Init+0x228>)
 8000b7e:	f003 fabd 	bl	80040fc <HAL_ADC_ConfigChannel>
 8000b82:	2800      	cmp	r0, #0
 8000b84:	d17f      	bne.n	8000c86 <MX_ADC1_Init+0x1e6>
    Error_Handler();
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8000b86:	2307      	movs	r3, #7
 8000b88:	9308      	str	r3, [sp, #32]
  sConfig.Rank = 8;
 8000b8a:	2308      	movs	r3, #8
 8000b8c:	9309      	str	r3, [sp, #36]	@ 0x24
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b8e:	a908      	add	r1, sp, #32
 8000b90:	484d      	ldr	r0, [pc, #308]	@ (8000cc8 <MX_ADC1_Init+0x228>)
 8000b92:	f003 fab3 	bl	80040fc <HAL_ADC_ConfigChannel>
 8000b96:	2800      	cmp	r0, #0
 8000b98:	d178      	bne.n	8000c8c <MX_ADC1_Init+0x1ec>
    Error_Handler();
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8000b9a:	230e      	movs	r3, #14
 8000b9c:	9308      	str	r3, [sp, #32]
  sConfig.Rank = 9;
 8000b9e:	2309      	movs	r3, #9
 8000ba0:	9309      	str	r3, [sp, #36]	@ 0x24
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ba2:	a908      	add	r1, sp, #32
 8000ba4:	4848      	ldr	r0, [pc, #288]	@ (8000cc8 <MX_ADC1_Init+0x228>)
 8000ba6:	f003 faa9 	bl	80040fc <HAL_ADC_ConfigChannel>
 8000baa:	2800      	cmp	r0, #0
 8000bac:	d171      	bne.n	8000c92 <MX_ADC1_Init+0x1f2>
    Error_Handler();
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000bae:	230a      	movs	r3, #10
 8000bb0:	9308      	str	r3, [sp, #32]
  sConfig.Rank = 10;
 8000bb2:	9309      	str	r3, [sp, #36]	@ 0x24
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000bb4:	a908      	add	r1, sp, #32
 8000bb6:	4844      	ldr	r0, [pc, #272]	@ (8000cc8 <MX_ADC1_Init+0x228>)
 8000bb8:	f003 faa0 	bl	80040fc <HAL_ADC_ConfigChannel>
 8000bbc:	2800      	cmp	r0, #0
 8000bbe:	d16b      	bne.n	8000c98 <MX_ADC1_Init+0x1f8>
    Error_Handler();
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8000bc0:	230b      	movs	r3, #11
 8000bc2:	9308      	str	r3, [sp, #32]
  sConfig.Rank = 11;
 8000bc4:	9309      	str	r3, [sp, #36]	@ 0x24
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000bc6:	a908      	add	r1, sp, #32
 8000bc8:	483f      	ldr	r0, [pc, #252]	@ (8000cc8 <MX_ADC1_Init+0x228>)
 8000bca:	f003 fa97 	bl	80040fc <HAL_ADC_ConfigChannel>
 8000bce:	2800      	cmp	r0, #0
 8000bd0:	d165      	bne.n	8000c9e <MX_ADC1_Init+0x1fe>
    Error_Handler();
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8000bd2:	230c      	movs	r3, #12
 8000bd4:	9308      	str	r3, [sp, #32]
  sConfig.Rank = 12;
 8000bd6:	9309      	str	r3, [sp, #36]	@ 0x24
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000bd8:	a908      	add	r1, sp, #32
 8000bda:	483b      	ldr	r0, [pc, #236]	@ (8000cc8 <MX_ADC1_Init+0x228>)
 8000bdc:	f003 fa8e 	bl	80040fc <HAL_ADC_ConfigChannel>
 8000be0:	2800      	cmp	r0, #0
 8000be2:	d15f      	bne.n	8000ca4 <MX_ADC1_Init+0x204>
    Error_Handler();
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8000be4:	230d      	movs	r3, #13
 8000be6:	9308      	str	r3, [sp, #32]
  sConfig.Rank = 13;
 8000be8:	9309      	str	r3, [sp, #36]	@ 0x24
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000bea:	a908      	add	r1, sp, #32
 8000bec:	4836      	ldr	r0, [pc, #216]	@ (8000cc8 <MX_ADC1_Init+0x228>)
 8000bee:	f003 fa85 	bl	80040fc <HAL_ADC_ConfigChannel>
 8000bf2:	2800      	cmp	r0, #0
 8000bf4:	d159      	bne.n	8000caa <MX_ADC1_Init+0x20a>
    Error_Handler();
  }

  /** Configures for the selected ADC injected channel its corresponding rank in the sequencer and its sample time
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_0;
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	9300      	str	r3, [sp, #0]
  sConfigInjected.InjectedRank = 1;
 8000bfa:	2201      	movs	r2, #1
 8000bfc:	9201      	str	r2, [sp, #4]
  sConfigInjected.InjectedNbrOfConversion = 4;
 8000bfe:	2204      	movs	r2, #4
 8000c00:	9204      	str	r2, [sp, #16]
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000c02:	9302      	str	r3, [sp, #8]
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONVEDGE_NONE;
 8000c04:	9307      	str	r3, [sp, #28]
  sConfigInjected.ExternalTrigInjecConv = ADC_INJECTED_SOFTWARE_START;
 8000c06:	4a33      	ldr	r2, [pc, #204]	@ (8000cd4 <MX_ADC1_Init+0x234>)
 8000c08:	9206      	str	r2, [sp, #24]
  sConfigInjected.AutoInjectedConv = DISABLE;
 8000c0a:	f88d 3015 	strb.w	r3, [sp, #21]
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 8000c0e:	f88d 3014 	strb.w	r3, [sp, #20]
  sConfigInjected.InjectedOffset = 0;
 8000c12:	9303      	str	r3, [sp, #12]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8000c14:	4669      	mov	r1, sp
 8000c16:	482c      	ldr	r0, [pc, #176]	@ (8000cc8 <MX_ADC1_Init+0x228>)
 8000c18:	f003 fb3a 	bl	8004290 <HAL_ADCEx_InjectedConfigChannel>
 8000c1c:	2800      	cmp	r0, #0
 8000c1e:	d147      	bne.n	8000cb0 <MX_ADC1_Init+0x210>
    Error_Handler();
  }

  /** Configures for the selected ADC injected channel its corresponding rank in the sequencer and its sample time
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_1;
 8000c20:	2301      	movs	r3, #1
 8000c22:	9300      	str	r3, [sp, #0]
  sConfigInjected.InjectedRank = 2;
 8000c24:	2302      	movs	r3, #2
 8000c26:	9301      	str	r3, [sp, #4]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8000c28:	4669      	mov	r1, sp
 8000c2a:	4827      	ldr	r0, [pc, #156]	@ (8000cc8 <MX_ADC1_Init+0x228>)
 8000c2c:	f003 fb30 	bl	8004290 <HAL_ADCEx_InjectedConfigChannel>
 8000c30:	2800      	cmp	r0, #0
 8000c32:	d140      	bne.n	8000cb6 <MX_ADC1_Init+0x216>
    Error_Handler();
  }

  /** Configures for the selected ADC injected channel its corresponding rank in the sequencer and its sample time
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_2;
 8000c34:	2302      	movs	r3, #2
 8000c36:	9300      	str	r3, [sp, #0]
  sConfigInjected.InjectedRank = 3;
 8000c38:	2303      	movs	r3, #3
 8000c3a:	9301      	str	r3, [sp, #4]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8000c3c:	4669      	mov	r1, sp
 8000c3e:	4822      	ldr	r0, [pc, #136]	@ (8000cc8 <MX_ADC1_Init+0x228>)
 8000c40:	f003 fb26 	bl	8004290 <HAL_ADCEx_InjectedConfigChannel>
 8000c44:	bbd0      	cbnz	r0, 8000cbc <MX_ADC1_Init+0x21c>
    Error_Handler();
  }

  /** Configures for the selected ADC injected channel its corresponding rank in the sequencer and its sample time
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_3;
 8000c46:	2303      	movs	r3, #3
 8000c48:	9300      	str	r3, [sp, #0]
  sConfigInjected.InjectedRank = 4;
 8000c4a:	2304      	movs	r3, #4
 8000c4c:	9301      	str	r3, [sp, #4]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8000c4e:	4669      	mov	r1, sp
 8000c50:	481d      	ldr	r0, [pc, #116]	@ (8000cc8 <MX_ADC1_Init+0x228>)
 8000c52:	f003 fb1d 	bl	8004290 <HAL_ADCEx_InjectedConfigChannel>
 8000c56:	bba0      	cbnz	r0, 8000cc2 <MX_ADC1_Init+0x222>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000c58:	b00c      	add	sp, #48	@ 0x30
 8000c5a:	bd10      	pop	{r4, pc}
    Error_Handler();
 8000c5c:	f001 ff86 	bl	8002b6c <Error_Handler>
 8000c60:	e744      	b.n	8000aec <MX_ADC1_Init+0x4c>
    Error_Handler();
 8000c62:	f001 ff83 	bl	8002b6c <Error_Handler>
 8000c66:	e74d      	b.n	8000b04 <MX_ADC1_Init+0x64>
    Error_Handler();
 8000c68:	f001 ff80 	bl	8002b6c <Error_Handler>
 8000c6c:	e755      	b.n	8000b1a <MX_ADC1_Init+0x7a>
    Error_Handler();
 8000c6e:	f001 ff7d 	bl	8002b6c <Error_Handler>
 8000c72:	e75d      	b.n	8000b30 <MX_ADC1_Init+0x90>
    Error_Handler();
 8000c74:	f001 ff7a 	bl	8002b6c <Error_Handler>
 8000c78:	e765      	b.n	8000b46 <MX_ADC1_Init+0xa6>
    Error_Handler();
 8000c7a:	f001 ff77 	bl	8002b6c <Error_Handler>
 8000c7e:	e76d      	b.n	8000b5c <MX_ADC1_Init+0xbc>
    Error_Handler();
 8000c80:	f001 ff74 	bl	8002b6c <Error_Handler>
 8000c84:	e775      	b.n	8000b72 <MX_ADC1_Init+0xd2>
    Error_Handler();
 8000c86:	f001 ff71 	bl	8002b6c <Error_Handler>
 8000c8a:	e77c      	b.n	8000b86 <MX_ADC1_Init+0xe6>
    Error_Handler();
 8000c8c:	f001 ff6e 	bl	8002b6c <Error_Handler>
 8000c90:	e783      	b.n	8000b9a <MX_ADC1_Init+0xfa>
    Error_Handler();
 8000c92:	f001 ff6b 	bl	8002b6c <Error_Handler>
 8000c96:	e78a      	b.n	8000bae <MX_ADC1_Init+0x10e>
    Error_Handler();
 8000c98:	f001 ff68 	bl	8002b6c <Error_Handler>
 8000c9c:	e790      	b.n	8000bc0 <MX_ADC1_Init+0x120>
    Error_Handler();
 8000c9e:	f001 ff65 	bl	8002b6c <Error_Handler>
 8000ca2:	e796      	b.n	8000bd2 <MX_ADC1_Init+0x132>
    Error_Handler();
 8000ca4:	f001 ff62 	bl	8002b6c <Error_Handler>
 8000ca8:	e79c      	b.n	8000be4 <MX_ADC1_Init+0x144>
    Error_Handler();
 8000caa:	f001 ff5f 	bl	8002b6c <Error_Handler>
 8000cae:	e7a2      	b.n	8000bf6 <MX_ADC1_Init+0x156>
    Error_Handler();
 8000cb0:	f001 ff5c 	bl	8002b6c <Error_Handler>
 8000cb4:	e7b4      	b.n	8000c20 <MX_ADC1_Init+0x180>
    Error_Handler();
 8000cb6:	f001 ff59 	bl	8002b6c <Error_Handler>
 8000cba:	e7bb      	b.n	8000c34 <MX_ADC1_Init+0x194>
    Error_Handler();
 8000cbc:	f001 ff56 	bl	8002b6c <Error_Handler>
 8000cc0:	e7c1      	b.n	8000c46 <MX_ADC1_Init+0x1a6>
    Error_Handler();
 8000cc2:	f001 ff53 	bl	8002b6c <Error_Handler>
}
 8000cc6:	e7c7      	b.n	8000c58 <MX_ADC1_Init+0x1b8>
 8000cc8:	2000022c 	.word	0x2000022c
 8000ccc:	40012000 	.word	0x40012000
 8000cd0:	0f000001 	.word	0x0f000001
 8000cd4:	000f0001 	.word	0x000f0001

08000cd8 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000cd8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000cda:	b089      	sub	sp, #36	@ 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cdc:	2300      	movs	r3, #0
 8000cde:	9303      	str	r3, [sp, #12]
 8000ce0:	9304      	str	r3, [sp, #16]
 8000ce2:	9305      	str	r3, [sp, #20]
 8000ce4:	9306      	str	r3, [sp, #24]
 8000ce6:	9307      	str	r3, [sp, #28]
  if(adcHandle->Instance==ADC1)
 8000ce8:	6802      	ldr	r2, [r0, #0]
 8000cea:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8000cee:	f503 3390 	add.w	r3, r3, #73728	@ 0x12000
 8000cf2:	429a      	cmp	r2, r3
 8000cf4:	d001      	beq.n	8000cfa <HAL_ADC_MspInit+0x22>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000cf6:	b009      	add	sp, #36	@ 0x24
 8000cf8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000cfa:	4604      	mov	r4, r0
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000cfc:	2500      	movs	r5, #0
 8000cfe:	9500      	str	r5, [sp, #0]
 8000d00:	f503 338c 	add.w	r3, r3, #71680	@ 0x11800
 8000d04:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8000d06:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8000d0a:	645a      	str	r2, [r3, #68]	@ 0x44
 8000d0c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8000d0e:	f402 7280 	and.w	r2, r2, #256	@ 0x100
 8000d12:	9200      	str	r2, [sp, #0]
 8000d14:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d16:	9501      	str	r5, [sp, #4]
 8000d18:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000d1a:	f042 0204 	orr.w	r2, r2, #4
 8000d1e:	631a      	str	r2, [r3, #48]	@ 0x30
 8000d20:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000d22:	f002 0204 	and.w	r2, r2, #4
 8000d26:	9201      	str	r2, [sp, #4]
 8000d28:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d2a:	9502      	str	r5, [sp, #8]
 8000d2c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000d2e:	f042 0201 	orr.w	r2, r2, #1
 8000d32:	631a      	str	r2, [r3, #48]	@ 0x30
 8000d34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d36:	f003 0301 	and.w	r3, r3, #1
 8000d3a:	9302      	str	r3, [sp, #8]
 8000d3c:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = SENSOR_EGT_PIN_Pin|ETB1_SENSE1_Pin|ETB1_SENSE2_Pin|ETB2_SENSE1_Pin
 8000d3e:	231f      	movs	r3, #31
 8000d40:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d42:	2703      	movs	r7, #3
 8000d44:	9704      	str	r7, [sp, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d46:	ae03      	add	r6, sp, #12
 8000d48:	4631      	mov	r1, r6
 8000d4a:	4814      	ldr	r0, [pc, #80]	@ (8000d9c <HAL_ADC_MspInit+0xc4>)
 8000d4c:	f003 fe1c 	bl	8004988 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = ETB2_SENSE2_Pin|SENSOR_MAP_PIN_Pin|SENSOR_IAT_PIN_Pin|SENSOR_CLT_PIN_Pin
 8000d50:	23ff      	movs	r3, #255	@ 0xff
 8000d52:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d54:	9704      	str	r7, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d56:	9505      	str	r5, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d58:	4631      	mov	r1, r6
 8000d5a:	4811      	ldr	r0, [pc, #68]	@ (8000da0 <HAL_ADC_MspInit+0xc8>)
 8000d5c:	f003 fe14 	bl	8004988 <HAL_GPIO_Init>
    hdma_adc1.Instance = DMA2_Stream0;
 8000d60:	4810      	ldr	r0, [pc, #64]	@ (8000da4 <HAL_ADC_MspInit+0xcc>)
 8000d62:	4b11      	ldr	r3, [pc, #68]	@ (8000da8 <HAL_ADC_MspInit+0xd0>)
 8000d64:	6003      	str	r3, [r0, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000d66:	6045      	str	r5, [r0, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000d68:	6085      	str	r5, [r0, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d6a:	60c5      	str	r5, [r0, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000d6c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000d70:	6103      	str	r3, [r0, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000d72:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000d76:	6143      	str	r3, [r0, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000d78:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000d7c:	6183      	str	r3, [r0, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8000d7e:	61c5      	str	r5, [r0, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 8000d80:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000d84:	6203      	str	r3, [r0, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000d86:	6245      	str	r5, [r0, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000d88:	f003 fc76 	bl	8004678 <HAL_DMA_Init>
 8000d8c:	b918      	cbnz	r0, 8000d96 <HAL_ADC_MspInit+0xbe>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000d8e:	4b05      	ldr	r3, [pc, #20]	@ (8000da4 <HAL_ADC_MspInit+0xcc>)
 8000d90:	63a3      	str	r3, [r4, #56]	@ 0x38
 8000d92:	639c      	str	r4, [r3, #56]	@ 0x38
}
 8000d94:	e7af      	b.n	8000cf6 <HAL_ADC_MspInit+0x1e>
      Error_Handler();
 8000d96:	f001 fee9 	bl	8002b6c <Error_Handler>
 8000d9a:	e7f8      	b.n	8000d8e <HAL_ADC_MspInit+0xb6>
 8000d9c:	40020800 	.word	0x40020800
 8000da0:	40020000 	.word	0x40020000
 8000da4:	200001cc 	.word	0x200001cc
 8000da8:	40026410 	.word	0x40026410

08000dac <analog_inputs_start_conversion>:
 * 
 * This function triggers the ADC to begin converting the analog signals
 * to digital values.
 */
void analog_inputs_start_conversion()
{
 8000dac:	b508      	push	{r3, lr}
    if (hadc == NULL)
 8000dae:	4b04      	ldr	r3, [pc, #16]	@ (8000dc0 <analog_inputs_start_conversion+0x14>)
 8000db0:	6818      	ldr	r0, [r3, #0]
 8000db2:	b118      	cbz	r0, 8000dbc <analog_inputs_start_conversion+0x10>
    {
        return;
    }
    
    HAL_ADC_Start_DMA(hadc, (uint32_t*)&analog_data, ANALOG_INPUTS_MAX * ANALOG_INPUTS_NUMBER_OF_SAMPLES);
 8000db4:	2268      	movs	r2, #104	@ 0x68
 8000db6:	4903      	ldr	r1, [pc, #12]	@ (8000dc4 <analog_inputs_start_conversion+0x18>)
 8000db8:	f003 f8a2 	bl	8003f00 <HAL_ADC_Start_DMA>
}
 8000dbc:	bd08      	pop	{r3, pc}
 8000dbe:	bf00      	nop
 8000dc0:	20000344 	.word	0x20000344
 8000dc4:	20000274 	.word	0x20000274

08000dc8 <HAL_ADC_ConvCpltCallback>:
}
 8000dc8:	4770      	bx	lr
	...

08000dcc <analog_inputs_init>:
{
 8000dcc:	b508      	push	{r3, lr}
    if (adc_handle == NULL)
 8000dce:	b158      	cbz	r0, 8000de8 <analog_inputs_init+0x1c>
    hadc = adc_handle;
 8000dd0:	4a07      	ldr	r2, [pc, #28]	@ (8000df0 <analog_inputs_init+0x24>)
 8000dd2:	6010      	str	r0, [r2, #0]
    osTimerId_t timer_id = osTimerNew(
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	461a      	mov	r2, r3
 8000dd8:	2101      	movs	r1, #1
 8000dda:	4806      	ldr	r0, [pc, #24]	@ (8000df4 <analog_inputs_init+0x28>)
 8000ddc:	f000 f8d8 	bl	8000f90 <osTimerNew>
    osTimerStart(timer_id, 1);
 8000de0:	2101      	movs	r1, #1
 8000de2:	f000 f929 	bl	8001038 <osTimerStart>
}
 8000de6:	bd08      	pop	{r3, pc}
        log_error("Analog input init failed! adc handle is null.");
 8000de8:	4803      	ldr	r0, [pc, #12]	@ (8000df8 <analog_inputs_init+0x2c>)
 8000dea:	f001 f8d7 	bl	8001f9c <log_error>
        return;
 8000dee:	e7fa      	b.n	8000de6 <analog_inputs_init+0x1a>
 8000df0:	20000344 	.word	0x20000344
 8000df4:	08000dad 	.word	0x08000dad
 8000df8:	0800b91c 	.word	0x0800b91c

08000dfc <analog_inputs_get_data>:
 * @param input_index The index of the analog input to retrieve data from.
 *                    This index corresponds to the specific channel of the ADC.
 * @return The digital value of the specified analog input.
 */
uint16_t analog_inputs_get_data(analog_input_channel_t input_index)
{
 8000dfc:	b510      	push	{r4, lr}
    if (input_index >= ANALOG_INPUTS_MAX)
 8000dfe:	280c      	cmp	r0, #12
 8000e00:	d802      	bhi.n	8000e08 <analog_inputs_get_data+0xc>
    {
        log_error("Invalid index in analog input.");
        return 0;
    }
    uint_fast32_t sum = 0;
    for (uint_fast8_t i = 0; i < ANALOG_INPUTS_NUMBER_OF_SAMPLES; i++)
 8000e02:	2300      	movs	r3, #0
    uint_fast32_t sum = 0;
 8000e04:	4619      	mov	r1, r3
 8000e06:	e00f      	b.n	8000e28 <analog_inputs_get_data+0x2c>
        log_error("Invalid index in analog input.");
 8000e08:	480a      	ldr	r0, [pc, #40]	@ (8000e34 <analog_inputs_get_data+0x38>)
 8000e0a:	f001 f8c7 	bl	8001f9c <log_error>
        return 0;
 8000e0e:	2000      	movs	r0, #0
 8000e10:	e00e      	b.n	8000e30 <analog_inputs_get_data+0x34>
    {
        sum += analog_data[i * ANALOG_INPUTS_MAX + input_index];
 8000e12:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8000e16:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 8000e1a:	4402      	add	r2, r0
 8000e1c:	4c06      	ldr	r4, [pc, #24]	@ (8000e38 <analog_inputs_get_data+0x3c>)
 8000e1e:	f834 2012 	ldrh.w	r2, [r4, r2, lsl #1]
 8000e22:	fa11 f182 	uxtah	r1, r1, r2
    for (uint_fast8_t i = 0; i < ANALOG_INPUTS_NUMBER_OF_SAMPLES; i++)
 8000e26:	3301      	adds	r3, #1
 8000e28:	2b07      	cmp	r3, #7
 8000e2a:	d9f2      	bls.n	8000e12 <analog_inputs_get_data+0x16>
    }
    
    return sum / ANALOG_INPUTS_NUMBER_OF_SAMPLES;
 8000e2c:	f3c1 00cf 	ubfx	r0, r1, #3, #16
}
 8000e30:	bd10      	pop	{r4, pc}
 8000e32:	bf00      	nop
 8000e34:	0800b94c 	.word	0x0800b94c
 8000e38:	20000274 	.word	0x20000274

08000e3c <TimerCallback>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_TIMER == 1)

static void TimerCallback (TimerHandle_t hTimer) {
 8000e3c:	b508      	push	{r3, lr}
  TimerCallback_t *callb;

  callb = (TimerCallback_t *)pvTimerGetTimerID (hTimer);
 8000e3e:	f007 ffe4 	bl	8008e0a <pvTimerGetTimerID>

  if (callb != NULL) {
 8000e42:	b110      	cbz	r0, 8000e4a <TimerCallback+0xe>
    callb->func (callb->arg);
 8000e44:	6802      	ldr	r2, [r0, #0]
 8000e46:	6840      	ldr	r0, [r0, #4]
 8000e48:	4790      	blx	r2
  }
}
 8000e4a:	bd08      	pop	{r3, pc}

08000e4c <SysTick_Handler>:
void SysTick_Handler (void) {
 8000e4c:	b508      	push	{r3, lr}
  SysTick->CTRL;
 8000e4e:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8000e52:	691b      	ldr	r3, [r3, #16]
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8000e54:	f007 fa78 	bl	8008348 <xTaskGetSchedulerState>
 8000e58:	2801      	cmp	r0, #1
 8000e5a:	d100      	bne.n	8000e5e <SysTick_Handler+0x12>
}
 8000e5c:	bd08      	pop	{r3, pc}
    xPortSysTickHandler();
 8000e5e:	f002 f859 	bl	8002f14 <xPortSysTickHandler>
}
 8000e62:	e7fb      	b.n	8000e5c <SysTick_Handler+0x10>

08000e64 <osKernelInitialize>:
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8000e64:	f3ef 8305 	mrs	r3, IPSR
  if (IS_IRQ()) {
 8000e68:	b92b      	cbnz	r3, 8000e76 <osKernelInitialize+0x12>
    if (KernelState == osKernelInactive) {
 8000e6a:	4b06      	ldr	r3, [pc, #24]	@ (8000e84 <osKernelInitialize+0x20>)
 8000e6c:	6818      	ldr	r0, [r3, #0]
 8000e6e:	b928      	cbnz	r0, 8000e7c <osKernelInitialize+0x18>
      KernelState = osKernelReady;
 8000e70:	2201      	movs	r2, #1
 8000e72:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8000e74:	4770      	bx	lr
    stat = osErrorISR;
 8000e76:	f06f 0005 	mvn.w	r0, #5
 8000e7a:	4770      	bx	lr
      stat = osError;
 8000e7c:	f04f 30ff 	mov.w	r0, #4294967295
}
 8000e80:	4770      	bx	lr
 8000e82:	bf00      	nop
 8000e84:	20000a00 	.word	0x20000a00

08000e88 <osKernelStart>:
 8000e88:	f3ef 8305 	mrs	r3, IPSR
  if (IS_IRQ()) {
 8000e8c:	b973      	cbnz	r3, 8000eac <osKernelStart+0x24>
    if (KernelState == osKernelReady) {
 8000e8e:	4b0a      	ldr	r3, [pc, #40]	@ (8000eb8 <osKernelStart+0x30>)
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	2b01      	cmp	r3, #1
 8000e94:	d10d      	bne.n	8000eb2 <osKernelStart+0x2a>
osStatus_t osKernelStart (void) {
 8000e96:	b510      	push	{r4, lr}
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e98:	2400      	movs	r4, #0
 8000e9a:	4b08      	ldr	r3, [pc, #32]	@ (8000ebc <osKernelStart+0x34>)
 8000e9c:	77dc      	strb	r4, [r3, #31]
      KernelState = osKernelRunning;
 8000e9e:	4b06      	ldr	r3, [pc, #24]	@ (8000eb8 <osKernelStart+0x30>)
 8000ea0:	2202      	movs	r2, #2
 8000ea2:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8000ea4:	f006 ffac 	bl	8007e00 <vTaskStartScheduler>
      stat = osOK;
 8000ea8:	4620      	mov	r0, r4
}
 8000eaa:	bd10      	pop	{r4, pc}
    stat = osErrorISR;
 8000eac:	f06f 0005 	mvn.w	r0, #5
 8000eb0:	4770      	bx	lr
      stat = osError;
 8000eb2:	f04f 30ff 	mov.w	r0, #4294967295
}
 8000eb6:	4770      	bx	lr
 8000eb8:	20000a00 	.word	0x20000a00
 8000ebc:	e000ed00 	.word	0xe000ed00

08000ec0 <osThreadNew>:
osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8000ec0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000ec2:	b087      	sub	sp, #28
  hTask = NULL;
 8000ec4:	2400      	movs	r4, #0
 8000ec6:	9405      	str	r4, [sp, #20]
 8000ec8:	f3ef 8405 	mrs	r4, IPSR
  if (!IS_IRQ() && (func != NULL)) {
 8000ecc:	bb04      	cbnz	r4, 8000f10 <osThreadNew+0x50>
 8000ece:	b1f8      	cbz	r0, 8000f10 <osThreadNew+0x50>
    if (attr != NULL) {
 8000ed0:	2a00      	cmp	r2, #0
 8000ed2:	d034      	beq.n	8000f3e <osThreadNew+0x7e>
      if (attr->name != NULL) {
 8000ed4:	6815      	ldr	r5, [r2, #0]
      if (attr->priority != osPriorityNone) {
 8000ed6:	6993      	ldr	r3, [r2, #24]
 8000ed8:	b12b      	cbz	r3, 8000ee6 <osThreadNew+0x26>
        prio = (UBaseType_t)attr->priority;
 8000eda:	461e      	mov	r6, r3
      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8000edc:	3b01      	subs	r3, #1
 8000ede:	2b37      	cmp	r3, #55	@ 0x37
 8000ee0:	d902      	bls.n	8000ee8 <osThreadNew+0x28>
        return (NULL);
 8000ee2:	2000      	movs	r0, #0
 8000ee4:	e015      	b.n	8000f12 <osThreadNew+0x52>
    prio  = (UBaseType_t)osPriorityNormal;
 8000ee6:	2618      	movs	r6, #24
      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8000ee8:	6853      	ldr	r3, [r2, #4]
 8000eea:	f013 0f01 	tst.w	r3, #1
 8000eee:	d13f      	bne.n	8000f70 <osThreadNew+0xb0>
      if (attr->stack_size > 0U) {
 8000ef0:	6954      	ldr	r4, [r2, #20]
 8000ef2:	b184      	cbz	r4, 8000f16 <osThreadNew+0x56>
        stack = attr->stack_size / sizeof(StackType_t);
 8000ef4:	ea4f 0c94 	mov.w	ip, r4, lsr #2
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8000ef8:	6893      	ldr	r3, [r2, #8]
 8000efa:	b12b      	cbz	r3, 8000f08 <osThreadNew+0x48>
 8000efc:	68d7      	ldr	r7, [r2, #12]
 8000efe:	2f5b      	cmp	r7, #91	@ 0x5b
 8000f00:	d902      	bls.n	8000f08 <osThreadNew+0x48>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8000f02:	6917      	ldr	r7, [r2, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8000f04:	b107      	cbz	r7, 8000f08 <osThreadNew+0x48>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8000f06:	b984      	cbnz	r4, 8000f2a <osThreadNew+0x6a>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8000f08:	b143      	cbz	r3, 8000f1c <osThreadNew+0x5c>
    mem  = -1;
 8000f0a:	f04f 33ff 	mov.w	r3, #4294967295
      if (mem == 0) {
 8000f0e:	b30b      	cbz	r3, 8000f54 <osThreadNew+0x94>
  return ((osThreadId_t)hTask);
 8000f10:	9805      	ldr	r0, [sp, #20]
}
 8000f12:	b007      	add	sp, #28
 8000f14:	bdf0      	pop	{r4, r5, r6, r7, pc}
    stack = configMINIMAL_STACK_SIZE;
 8000f16:	f04f 0c80 	mov.w	ip, #128	@ 0x80
 8000f1a:	e7ed      	b.n	8000ef8 <osThreadNew+0x38>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8000f1c:	68d3      	ldr	r3, [r2, #12]
 8000f1e:	b9a3      	cbnz	r3, 8000f4a <osThreadNew+0x8a>
 8000f20:	6913      	ldr	r3, [r2, #16]
 8000f22:	b1ab      	cbz	r3, 8000f50 <osThreadNew+0x90>
    mem  = -1;
 8000f24:	f04f 33ff 	mov.w	r3, #4294967295
 8000f28:	e7f1      	b.n	8000f0e <osThreadNew+0x4e>
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8000f2a:	9302      	str	r3, [sp, #8]
 8000f2c:	9701      	str	r7, [sp, #4]
 8000f2e:	9600      	str	r6, [sp, #0]
 8000f30:	460b      	mov	r3, r1
 8000f32:	4662      	mov	r2, ip
 8000f34:	4629      	mov	r1, r5
 8000f36:	f006 fef5 	bl	8007d24 <xTaskCreateStatic>
 8000f3a:	9005      	str	r0, [sp, #20]
 8000f3c:	e7e8      	b.n	8000f10 <osThreadNew+0x50>
    name = NULL;
 8000f3e:	4615      	mov	r5, r2
      mem = 0;
 8000f40:	2300      	movs	r3, #0
    prio  = (UBaseType_t)osPriorityNormal;
 8000f42:	2618      	movs	r6, #24
    stack = configMINIMAL_STACK_SIZE;
 8000f44:	f04f 0c80 	mov.w	ip, #128	@ 0x80
 8000f48:	e7e1      	b.n	8000f0e <osThreadNew+0x4e>
    mem  = -1;
 8000f4a:	f04f 33ff 	mov.w	r3, #4294967295
 8000f4e:	e7de      	b.n	8000f0e <osThreadNew+0x4e>
          mem = 0;
 8000f50:	2300      	movs	r3, #0
 8000f52:	e7dc      	b.n	8000f0e <osThreadNew+0x4e>
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8000f54:	ab05      	add	r3, sp, #20
 8000f56:	9301      	str	r3, [sp, #4]
 8000f58:	9600      	str	r6, [sp, #0]
 8000f5a:	460b      	mov	r3, r1
 8000f5c:	fa1f f28c 	uxth.w	r2, ip
 8000f60:	4629      	mov	r1, r5
 8000f62:	f006 ff1a 	bl	8007d9a <xTaskCreate>
 8000f66:	2801      	cmp	r0, #1
 8000f68:	d0d2      	beq.n	8000f10 <osThreadNew+0x50>
            hTask = NULL;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	9305      	str	r3, [sp, #20]
 8000f6e:	e7cf      	b.n	8000f10 <osThreadNew+0x50>
        return (NULL);
 8000f70:	2000      	movs	r0, #0
 8000f72:	e7ce      	b.n	8000f12 <osThreadNew+0x52>

08000f74 <osDelay>:
osStatus_t osDelay (uint32_t ticks) {
 8000f74:	b508      	push	{r3, lr}
 8000f76:	f3ef 8305 	mrs	r3, IPSR
  if (IS_IRQ()) {
 8000f7a:	b933      	cbnz	r3, 8000f8a <osDelay+0x16>
    if (ticks != 0U) {
 8000f7c:	b908      	cbnz	r0, 8000f82 <osDelay+0xe>
    stat = osOK;
 8000f7e:	2000      	movs	r0, #0
}
 8000f80:	bd08      	pop	{r3, pc}
      vTaskDelay(ticks);
 8000f82:	f007 f89f 	bl	80080c4 <vTaskDelay>
    stat = osOK;
 8000f86:	2000      	movs	r0, #0
 8000f88:	e7fa      	b.n	8000f80 <osDelay+0xc>
    stat = osErrorISR;
 8000f8a:	f06f 0005 	mvn.w	r0, #5
 8000f8e:	e7f7      	b.n	8000f80 <osDelay+0xc>

08000f90 <osTimerNew>:

osTimerId_t osTimerNew (osTimerFunc_t func, osTimerType_t type, void *argument, const osTimerAttr_t *attr) {
 8000f90:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000f94:	b083      	sub	sp, #12
 8000f96:	f3ef 8705 	mrs	r7, IPSR
  UBaseType_t reload;
  int32_t mem;

  hTimer = NULL;

  if (!IS_IRQ() && (func != NULL)) {
 8000f9a:	2f00      	cmp	r7, #0
 8000f9c:	d143      	bne.n	8001026 <osTimerNew+0x96>
 8000f9e:	4606      	mov	r6, r0
 8000fa0:	4689      	mov	r9, r1
 8000fa2:	4615      	mov	r5, r2
 8000fa4:	461c      	mov	r4, r3
 8000fa6:	2800      	cmp	r0, #0
 8000fa8:	d03f      	beq.n	800102a <osTimerNew+0x9a>
    /* Allocate memory to store callback function and argument */
    callb = pvPortMalloc (sizeof(TimerCallback_t));
 8000faa:	2008      	movs	r0, #8
 8000fac:	f001 fa60 	bl	8002470 <pvPortMalloc>

    if (callb != NULL) {
 8000fb0:	4680      	mov	r8, r0
 8000fb2:	2800      	cmp	r0, #0
 8000fb4:	d03b      	beq.n	800102e <osTimerNew+0x9e>
      callb->func = func;
 8000fb6:	6006      	str	r6, [r0, #0]
      callb->arg  = argument;
 8000fb8:	6045      	str	r5, [r0, #4]

      if (type == osTimerOnce) {
 8000fba:	f1b9 0f00 	cmp.w	r9, #0
 8000fbe:	d000      	beq.n	8000fc2 <osTimerNew+0x32>
        reload = pdFALSE;
      } else {
        reload = pdTRUE;
 8000fc0:	2701      	movs	r7, #1
      }

      mem  = -1;
      name = NULL;

      if (attr != NULL) {
 8000fc2:	b304      	cbz	r4, 8001006 <osTimerNew+0x76>
        if (attr->name != NULL) {
 8000fc4:	6820      	ldr	r0, [r4, #0]
          name = attr->name;
        }

        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticTimer_t))) {
 8000fc6:	68a3      	ldr	r3, [r4, #8]
 8000fc8:	b113      	cbz	r3, 8000fd0 <osTimerNew+0x40>
 8000fca:	68e2      	ldr	r2, [r4, #12]
 8000fcc:	2a2b      	cmp	r2, #43	@ 0x2b
 8000fce:	d810      	bhi.n	8000ff2 <osTimerNew+0x62>
          mem = 1;
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8000fd0:	b153      	cbz	r3, 8000fe8 <osTimerNew+0x58>
      mem  = -1;
 8000fd2:	f04f 33ff 	mov.w	r3, #4294967295
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          hTimer = xTimerCreateStatic (name, 1, reload, callb, TimerCallback, (StaticTimer_t *)attr->cb_mem);
        #endif
      }
      else {
        if (mem == 0) {
 8000fd6:	b1db      	cbz	r3, 8001010 <osTimerNew+0x80>
  hTimer = NULL;
 8000fd8:	2400      	movs	r4, #0
          #endif
        }
      }

      if ((hTimer == NULL) && (callb != NULL)) {
        vPortFree (callb);
 8000fda:	4640      	mov	r0, r8
 8000fdc:	f001 faca 	bl	8002574 <vPortFree>
      }
    }
  }

  return ((osTimerId_t)hTimer);
}
 8000fe0:	4620      	mov	r0, r4
 8000fe2:	b003      	add	sp, #12
 8000fe4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8000fe8:	68e3      	ldr	r3, [r4, #12]
 8000fea:	b17b      	cbz	r3, 800100c <osTimerNew+0x7c>
      mem  = -1;
 8000fec:	f04f 33ff 	mov.w	r3, #4294967295
 8000ff0:	e7f1      	b.n	8000fd6 <osTimerNew+0x46>
          hTimer = xTimerCreateStatic (name, 1, reload, callb, TimerCallback, (StaticTimer_t *)attr->cb_mem);
 8000ff2:	9301      	str	r3, [sp, #4]
 8000ff4:	4b0f      	ldr	r3, [pc, #60]	@ (8001034 <osTimerNew+0xa4>)
 8000ff6:	9300      	str	r3, [sp, #0]
 8000ff8:	4643      	mov	r3, r8
 8000ffa:	463a      	mov	r2, r7
 8000ffc:	2101      	movs	r1, #1
 8000ffe:	f007 fd4f 	bl	8008aa0 <xTimerCreateStatic>
 8001002:	4604      	mov	r4, r0
 8001004:	e00c      	b.n	8001020 <osTimerNew+0x90>
      name = NULL;
 8001006:	4620      	mov	r0, r4
        mem = 0;
 8001008:	2300      	movs	r3, #0
 800100a:	e7e4      	b.n	8000fd6 <osTimerNew+0x46>
            mem = 0;
 800100c:	2300      	movs	r3, #0
 800100e:	e7e2      	b.n	8000fd6 <osTimerNew+0x46>
            hTimer = xTimerCreate (name, 1, reload, callb, TimerCallback);
 8001010:	4b08      	ldr	r3, [pc, #32]	@ (8001034 <osTimerNew+0xa4>)
 8001012:	9300      	str	r3, [sp, #0]
 8001014:	4643      	mov	r3, r8
 8001016:	463a      	mov	r2, r7
 8001018:	2101      	movs	r1, #1
 800101a:	f007 fd25 	bl	8008a68 <xTimerCreate>
 800101e:	4604      	mov	r4, r0
      if ((hTimer == NULL) && (callb != NULL)) {
 8001020:	2c00      	cmp	r4, #0
 8001022:	d1dd      	bne.n	8000fe0 <osTimerNew+0x50>
 8001024:	e7d9      	b.n	8000fda <osTimerNew+0x4a>
  hTimer = NULL;
 8001026:	2400      	movs	r4, #0
 8001028:	e7da      	b.n	8000fe0 <osTimerNew+0x50>
 800102a:	2400      	movs	r4, #0
 800102c:	e7d8      	b.n	8000fe0 <osTimerNew+0x50>
 800102e:	4604      	mov	r4, r0
  return ((osTimerId_t)hTimer);
 8001030:	e7d6      	b.n	8000fe0 <osTimerNew+0x50>
 8001032:	bf00      	nop
 8001034:	08000e3d 	.word	0x08000e3d

08001038 <osTimerStart>:
 8001038:	f3ef 8305 	mrs	r3, IPSR

osStatus_t osTimerStart (osTimerId_t timer_id, uint32_t ticks) {
  TimerHandle_t hTimer = (TimerHandle_t)timer_id;
  osStatus_t stat;

  if (IS_IRQ()) {
 800103c:	b96b      	cbnz	r3, 800105a <osTimerStart+0x22>
 800103e:	460a      	mov	r2, r1
    stat = osErrorISR;
  }
  else if (hTimer == NULL) {
 8001040:	b170      	cbz	r0, 8001060 <osTimerStart+0x28>
osStatus_t osTimerStart (osTimerId_t timer_id, uint32_t ticks) {
 8001042:	b500      	push	{lr}
 8001044:	b083      	sub	sp, #12
    stat = osErrorParameter;
  }
  else {
    if (xTimerChangePeriod (hTimer, ticks, 0) == pdPASS) {
 8001046:	9300      	str	r3, [sp, #0]
 8001048:	2104      	movs	r1, #4
 800104a:	f007 fd53 	bl	8008af4 <xTimerGenericCommand>
 800104e:	2801      	cmp	r0, #1
 8001050:	d109      	bne.n	8001066 <osTimerStart+0x2e>
      stat = osOK;
 8001052:	2000      	movs	r0, #0
      stat = osErrorResource;
    }
  }

  return (stat);
}
 8001054:	b003      	add	sp, #12
 8001056:	f85d fb04 	ldr.w	pc, [sp], #4
    stat = osErrorISR;
 800105a:	f06f 0005 	mvn.w	r0, #5
 800105e:	4770      	bx	lr
    stat = osErrorParameter;
 8001060:	f06f 0003 	mvn.w	r0, #3
}
 8001064:	4770      	bx	lr
      stat = osErrorResource;
 8001066:	f06f 0002 	mvn.w	r0, #2
  return (stat);
 800106a:	e7f3      	b.n	8001054 <osTimerStart+0x1c>

0800106c <osEventFlagsNew>:
}
#endif /* (configUSE_OS2_TIMER == 1) */

/*---------------------------------------------------------------------------*/

osEventFlagsId_t osEventFlagsNew (const osEventFlagsAttr_t *attr) {
 800106c:	b508      	push	{r3, lr}
 800106e:	f3ef 8305 	mrs	r3, IPSR
  EventGroupHandle_t hEventGroup;
  int32_t mem;

  hEventGroup = NULL;

  if (!IS_IRQ()) {
 8001072:	b9cb      	cbnz	r3, 80010a8 <osEventFlagsNew+0x3c>
    mem = -1;

    if (attr != NULL) {
 8001074:	b1a0      	cbz	r0, 80010a0 <osEventFlagsNew+0x34>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticEventGroup_t))) {
 8001076:	6883      	ldr	r3, [r0, #8]
 8001078:	b113      	cbz	r3, 8001080 <osEventFlagsNew+0x14>
 800107a:	68c2      	ldr	r2, [r0, #12]
 800107c:	2a1f      	cmp	r2, #31
 800107e:	d80b      	bhi.n	8001098 <osEventFlagsNew+0x2c>
        mem = 1;
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8001080:	b12b      	cbz	r3, 800108e <osEventFlagsNew+0x22>
    mem = -1;
 8001082:	f04f 33ff 	mov.w	r3, #4294967295
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
      hEventGroup = xEventGroupCreateStatic (attr->cb_mem);
      #endif
    }
    else {
      if (mem == 0) {
 8001086:	b98b      	cbnz	r3, 80010ac <osEventFlagsNew+0x40>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hEventGroup = xEventGroupCreate();
 8001088:	f000 ffe9 	bl	800205e <xEventGroupCreate>
      }
    }
  }

  return ((osEventFlagsId_t)hEventGroup);
}
 800108c:	bd08      	pop	{r3, pc}
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800108e:	68c3      	ldr	r3, [r0, #12]
 8001090:	b143      	cbz	r3, 80010a4 <osEventFlagsNew+0x38>
    mem = -1;
 8001092:	f04f 33ff 	mov.w	r3, #4294967295
 8001096:	e7f6      	b.n	8001086 <osEventFlagsNew+0x1a>
      hEventGroup = xEventGroupCreateStatic (attr->cb_mem);
 8001098:	4618      	mov	r0, r3
 800109a:	f000 ffbb 	bl	8002014 <xEventGroupCreateStatic>
 800109e:	e7f5      	b.n	800108c <osEventFlagsNew+0x20>
      mem = 0;
 80010a0:	2300      	movs	r3, #0
 80010a2:	e7f0      	b.n	8001086 <osEventFlagsNew+0x1a>
          mem = 0;
 80010a4:	2300      	movs	r3, #0
 80010a6:	e7ee      	b.n	8001086 <osEventFlagsNew+0x1a>
  hEventGroup = NULL;
 80010a8:	2000      	movs	r0, #0
 80010aa:	e7ef      	b.n	800108c <osEventFlagsNew+0x20>
 80010ac:	2000      	movs	r0, #0
  return ((osEventFlagsId_t)hEventGroup);
 80010ae:	e7ed      	b.n	800108c <osEventFlagsNew+0x20>

080010b0 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 80010b0:	b570      	push	{r4, r5, r6, lr}
 80010b2:	b082      	sub	sp, #8
 80010b4:	f3ef 8305 	mrs	r3, IPSR
  const char *name;
  #endif

  hQueue = NULL;

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d13a      	bne.n	8001132 <osMessageQueueNew+0x82>
 80010bc:	4614      	mov	r4, r2
 80010be:	2800      	cmp	r0, #0
 80010c0:	d03b      	beq.n	800113a <osMessageQueueNew+0x8a>
 80010c2:	2900      	cmp	r1, #0
 80010c4:	d03b      	beq.n	800113e <osMessageQueueNew+0x8e>
    mem = -1;

    if (attr != NULL) {
 80010c6:	b36a      	cbz	r2, 8001124 <osMessageQueueNew+0x74>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80010c8:	6893      	ldr	r3, [r2, #8]
 80010ca:	b14b      	cbz	r3, 80010e0 <osMessageQueueNew+0x30>
 80010cc:	68d2      	ldr	r2, [r2, #12]
 80010ce:	2a4f      	cmp	r2, #79	@ 0x4f
 80010d0:	d906      	bls.n	80010e0 <osMessageQueueNew+0x30>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80010d2:	6922      	ldr	r2, [r4, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80010d4:	b122      	cbz	r2, 80010e0 <osMessageQueueNew+0x30>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80010d6:	fb01 f500 	mul.w	r5, r1, r0
 80010da:	6966      	ldr	r6, [r4, #20]
 80010dc:	42ae      	cmp	r6, r5
 80010de:	d21b      	bcs.n	8001118 <osMessageQueueNew+0x68>
        mem = 1;
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80010e0:	b173      	cbz	r3, 8001100 <osMessageQueueNew+0x50>
    mem = -1;
 80010e2:	f04f 33ff 	mov.w	r3, #4294967295
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
      #endif
    }
    else {
      if (mem == 0) {
 80010e6:	bb63      	cbnz	r3, 8001142 <osMessageQueueNew+0x92>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 80010e8:	2200      	movs	r2, #0
 80010ea:	f002 f934 	bl	8003356 <xQueueGenericCreate>
 80010ee:	4605      	mov	r5, r0
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 80010f0:	b305      	cbz	r5, 8001134 <osMessageQueueNew+0x84>
      if (attr != NULL) {
 80010f2:	b104      	cbz	r4, 80010f6 <osMessageQueueNew+0x46>
        name = attr->name;
 80010f4:	6824      	ldr	r4, [r4, #0]
      } else {
        name = NULL;
      }
      vQueueAddToRegistry (hQueue, name);
 80010f6:	4621      	mov	r1, r4
 80010f8:	4628      	mov	r0, r5
 80010fa:	f002 fb81 	bl	8003800 <vQueueAddToRegistry>
 80010fe:	e019      	b.n	8001134 <osMessageQueueNew+0x84>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8001100:	68e3      	ldr	r3, [r4, #12]
 8001102:	b98b      	cbnz	r3, 8001128 <osMessageQueueNew+0x78>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8001104:	6923      	ldr	r3, [r4, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8001106:	b113      	cbz	r3, 800110e <osMessageQueueNew+0x5e>
    mem = -1;
 8001108:	f04f 33ff 	mov.w	r3, #4294967295
 800110c:	e7eb      	b.n	80010e6 <osMessageQueueNew+0x36>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800110e:	6963      	ldr	r3, [r4, #20]
 8001110:	b16b      	cbz	r3, 800112e <osMessageQueueNew+0x7e>
    mem = -1;
 8001112:	f04f 33ff 	mov.w	r3, #4294967295
 8001116:	e7e6      	b.n	80010e6 <osMessageQueueNew+0x36>
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8001118:	2500      	movs	r5, #0
 800111a:	9500      	str	r5, [sp, #0]
 800111c:	f002 f8d1 	bl	80032c2 <xQueueGenericCreateStatic>
 8001120:	4605      	mov	r5, r0
 8001122:	e7e5      	b.n	80010f0 <osMessageQueueNew+0x40>
      mem = 0;
 8001124:	2300      	movs	r3, #0
 8001126:	e7de      	b.n	80010e6 <osMessageQueueNew+0x36>
    mem = -1;
 8001128:	f04f 33ff 	mov.w	r3, #4294967295
 800112c:	e7db      	b.n	80010e6 <osMessageQueueNew+0x36>
          mem = 0;
 800112e:	2300      	movs	r3, #0
 8001130:	e7d9      	b.n	80010e6 <osMessageQueueNew+0x36>
  hQueue = NULL;
 8001132:	2500      	movs	r5, #0
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
}
 8001134:	4628      	mov	r0, r5
 8001136:	b002      	add	sp, #8
 8001138:	bd70      	pop	{r4, r5, r6, pc}
  hQueue = NULL;
 800113a:	2500      	movs	r5, #0
 800113c:	e7fa      	b.n	8001134 <osMessageQueueNew+0x84>
 800113e:	2500      	movs	r5, #0
 8001140:	e7f8      	b.n	8001134 <osMessageQueueNew+0x84>
 8001142:	2500      	movs	r5, #0
  return ((osMessageQueueId_t)hQueue);
 8001144:	e7f6      	b.n	8001134 <osMessageQueueNew+0x84>

08001146 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8001146:	b510      	push	{r4, lr}
 8001148:	b082      	sub	sp, #8
 800114a:	461c      	mov	r4, r3
 800114c:	f3ef 8305 	mrs	r3, IPSR

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;

  if (IS_IRQ()) {
 8001150:	b1c3      	cbz	r3, 8001184 <osMessageQueuePut+0x3e>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8001152:	b318      	cbz	r0, 800119c <osMessageQueuePut+0x56>
 8001154:	b329      	cbz	r1, 80011a2 <osMessageQueuePut+0x5c>
 8001156:	bb3c      	cbnz	r4, 80011a8 <osMessageQueuePut+0x62>
      stat = osErrorParameter;
    }
    else {
      yield = pdFALSE;
 8001158:	2300      	movs	r3, #0
 800115a:	9301      	str	r3, [sp, #4]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800115c:	aa01      	add	r2, sp, #4
 800115e:	f002 f9e2 	bl	8003526 <xQueueGenericSendFromISR>
 8001162:	2801      	cmp	r0, #1
 8001164:	d123      	bne.n	80011ae <osMessageQueuePut+0x68>
        stat = osErrorResource;
      } else {
        portYIELD_FROM_ISR (yield);
 8001166:	9801      	ldr	r0, [sp, #4]
 8001168:	b150      	cbz	r0, 8001180 <osMessageQueuePut+0x3a>
 800116a:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800116e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001172:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8001176:	f3bf 8f4f 	dsb	sy
 800117a:	f3bf 8f6f 	isb	sy
  stat = osOK;
 800117e:	2000      	movs	r0, #0
      }
    }
  }

  return (stat);
}
 8001180:	b002      	add	sp, #8
 8001182:	bd10      	pop	{r4, pc}
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8001184:	b1b0      	cbz	r0, 80011b4 <osMessageQueuePut+0x6e>
 8001186:	b1c1      	cbz	r1, 80011ba <osMessageQueuePut+0x74>
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8001188:	2300      	movs	r3, #0
 800118a:	4622      	mov	r2, r4
 800118c:	f002 f907 	bl	800339e <xQueueGenericSend>
 8001190:	2801      	cmp	r0, #1
 8001192:	d015      	beq.n	80011c0 <osMessageQueuePut+0x7a>
        if (timeout != 0U) {
 8001194:	b1b4      	cbz	r4, 80011c4 <osMessageQueuePut+0x7e>
          stat = osErrorTimeout;
 8001196:	f06f 0001 	mvn.w	r0, #1
 800119a:	e7f1      	b.n	8001180 <osMessageQueuePut+0x3a>
      stat = osErrorParameter;
 800119c:	f06f 0003 	mvn.w	r0, #3
 80011a0:	e7ee      	b.n	8001180 <osMessageQueuePut+0x3a>
 80011a2:	f06f 0003 	mvn.w	r0, #3
 80011a6:	e7eb      	b.n	8001180 <osMessageQueuePut+0x3a>
 80011a8:	f06f 0003 	mvn.w	r0, #3
 80011ac:	e7e8      	b.n	8001180 <osMessageQueuePut+0x3a>
        stat = osErrorResource;
 80011ae:	f06f 0002 	mvn.w	r0, #2
 80011b2:	e7e5      	b.n	8001180 <osMessageQueuePut+0x3a>
      stat = osErrorParameter;
 80011b4:	f06f 0003 	mvn.w	r0, #3
 80011b8:	e7e2      	b.n	8001180 <osMessageQueuePut+0x3a>
 80011ba:	f06f 0003 	mvn.w	r0, #3
 80011be:	e7df      	b.n	8001180 <osMessageQueuePut+0x3a>
  stat = osOK;
 80011c0:	2000      	movs	r0, #0
 80011c2:	e7dd      	b.n	8001180 <osMessageQueuePut+0x3a>
          stat = osErrorResource;
 80011c4:	f06f 0002 	mvn.w	r0, #2
  return (stat);
 80011c8:	e7da      	b.n	8001180 <osMessageQueuePut+0x3a>

080011ca <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 80011ca:	b510      	push	{r4, lr}
 80011cc:	b082      	sub	sp, #8
 80011ce:	461c      	mov	r4, r3
 80011d0:	f3ef 8305 	mrs	r3, IPSR

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;

  if (IS_IRQ()) {
 80011d4:	b1c3      	cbz	r3, 8001208 <osMessageQueueGet+0x3e>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80011d6:	b310      	cbz	r0, 800121e <osMessageQueueGet+0x54>
 80011d8:	b321      	cbz	r1, 8001224 <osMessageQueueGet+0x5a>
 80011da:	bb34      	cbnz	r4, 800122a <osMessageQueueGet+0x60>
      stat = osErrorParameter;
    }
    else {
      yield = pdFALSE;
 80011dc:	2300      	movs	r3, #0
 80011de:	9301      	str	r3, [sp, #4]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 80011e0:	aa01      	add	r2, sp, #4
 80011e2:	f002 fab6 	bl	8003752 <xQueueReceiveFromISR>
 80011e6:	2801      	cmp	r0, #1
 80011e8:	d122      	bne.n	8001230 <osMessageQueueGet+0x66>
        stat = osErrorResource;
      } else {
        portYIELD_FROM_ISR (yield);
 80011ea:	9801      	ldr	r0, [sp, #4]
 80011ec:	b150      	cbz	r0, 8001204 <osMessageQueueGet+0x3a>
 80011ee:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80011f2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80011f6:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 80011fa:	f3bf 8f4f 	dsb	sy
 80011fe:	f3bf 8f6f 	isb	sy
  stat = osOK;
 8001202:	2000      	movs	r0, #0
      }
    }
  }

  return (stat);
}
 8001204:	b002      	add	sp, #8
 8001206:	bd10      	pop	{r4, pc}
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8001208:	b1a8      	cbz	r0, 8001236 <osMessageQueueGet+0x6c>
 800120a:	b1b9      	cbz	r1, 800123c <osMessageQueueGet+0x72>
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800120c:	4622      	mov	r2, r4
 800120e:	f002 f9f1 	bl	80035f4 <xQueueReceive>
 8001212:	2801      	cmp	r0, #1
 8001214:	d015      	beq.n	8001242 <osMessageQueueGet+0x78>
        if (timeout != 0U) {
 8001216:	b1b4      	cbz	r4, 8001246 <osMessageQueueGet+0x7c>
          stat = osErrorTimeout;
 8001218:	f06f 0001 	mvn.w	r0, #1
 800121c:	e7f2      	b.n	8001204 <osMessageQueueGet+0x3a>
      stat = osErrorParameter;
 800121e:	f06f 0003 	mvn.w	r0, #3
 8001222:	e7ef      	b.n	8001204 <osMessageQueueGet+0x3a>
 8001224:	f06f 0003 	mvn.w	r0, #3
 8001228:	e7ec      	b.n	8001204 <osMessageQueueGet+0x3a>
 800122a:	f06f 0003 	mvn.w	r0, #3
 800122e:	e7e9      	b.n	8001204 <osMessageQueueGet+0x3a>
        stat = osErrorResource;
 8001230:	f06f 0002 	mvn.w	r0, #2
 8001234:	e7e6      	b.n	8001204 <osMessageQueueGet+0x3a>
      stat = osErrorParameter;
 8001236:	f06f 0003 	mvn.w	r0, #3
 800123a:	e7e3      	b.n	8001204 <osMessageQueueGet+0x3a>
 800123c:	f06f 0003 	mvn.w	r0, #3
 8001240:	e7e0      	b.n	8001204 <osMessageQueueGet+0x3a>
  stat = osOK;
 8001242:	2000      	movs	r0, #0
 8001244:	e7de      	b.n	8001204 <osMessageQueueGet+0x3a>
          stat = osErrorResource;
 8001246:	f06f 0002 	mvn.w	r0, #2
  return (stat);
 800124a:	e7db      	b.n	8001204 <osMessageQueueGet+0x3a>

0800124c <vApplicationGetIdleTaskMemory>:
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800124c:	4b03      	ldr	r3, [pc, #12]	@ (800125c <vApplicationGetIdleTaskMemory+0x10>)
 800124e:	6003      	str	r3, [r0, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8001250:	4b03      	ldr	r3, [pc, #12]	@ (8001260 <vApplicationGetIdleTaskMemory+0x14>)
 8001252:	600b      	str	r3, [r1, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8001254:	2380      	movs	r3, #128	@ 0x80
 8001256:	6013      	str	r3, [r2, #0]
}
 8001258:	4770      	bx	lr
 800125a:	bf00      	nop
 800125c:	200009a4 	.word	0x200009a4
 8001260:	200007a4 	.word	0x200007a4

08001264 <vApplicationGetTimerTaskMemory>:
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8001264:	4b03      	ldr	r3, [pc, #12]	@ (8001274 <vApplicationGetTimerTaskMemory+0x10>)
 8001266:	6003      	str	r3, [r0, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8001268:	4b03      	ldr	r3, [pc, #12]	@ (8001278 <vApplicationGetTimerTaskMemory+0x14>)
 800126a:	600b      	str	r3, [r1, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800126c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001270:	6013      	str	r3, [r2, #0]
}
 8001272:	4770      	bx	lr
 8001274:	20000748 	.word	0x20000748
 8001278:	20000348 	.word	0x20000348

0800127c <transmit_crc_packet>:
    }
	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
}

void transmit_crc_packet(uint8_t flag, const uint8_t *buf, size_t size)
{
 800127c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001280:	b083      	sub	sp, #12
 8001282:	460f      	mov	r7, r1
 8001284:	4615      	mov	r5, r2
 8001286:	f88d 0007 	strb.w	r0, [sp, #7]
	/* We first calculate the prefix */
    uint16_t packet_size = 0;
	packet_size += 2; // prefix
	packet_size += 1; // flag
	packet_size += 4; // CRC
	packet_size += size; // payload
 800128a:	b296      	uxth	r6, r2
 800128c:	f106 0807 	add.w	r8, r6, #7
 8001290:	fa1f f888 	uxth.w	r8, r8

	/* Converte the size to big endian */
	uint16_t prefix = 0;
	prefix = swap_endian_uint16(sizeof(flag) + size);
 8001294:	3601      	adds	r6, #1
}

// http://en.wikipedia.org/wiki/Endianness
inline uint16_t swap_endian_uint16(uint16_t x)
{
    return ((x << 8) | (x >> 8));
 8001296:	ba76      	rev16	r6, r6

	/* Now we calculate the CRC, over the flag and payload */
	uint32_t crc = 0;
	crc = crc32_inc(0, (void*)&flag, 1); // flag
 8001298:	2201      	movs	r2, #1
 800129a:	f10d 0107 	add.w	r1, sp, #7
 800129e:	2000      	movs	r0, #0
 80012a0:	f009 fb60 	bl	800a964 <crc32_inc>
	crc = crc32_inc(crc, buf, size); // payload
 80012a4:	462a      	mov	r2, r5
 80012a6:	4639      	mov	r1, r7
 80012a8:	f009 fb5c 	bl	800a964 <crc32_inc>
}
inline uint32_t swap_endian_uint32(uint32_t x)
{
    return (((x >> 24) & 0x000000ff) | ((x << 8) & 0x00ff0000) |
 80012ac:	0204      	lsls	r4, r0, #8
 80012ae:	f404 047f 	and.w	r4, r4, #16711680	@ 0xff0000
 80012b2:	ea44 6410 	orr.w	r4, r4, r0, lsr #24
            ((x >> 8) & 0x0000ff00) | ((x << 24) & 0xff000000));
 80012b6:	0a03      	lsrs	r3, r0, #8
 80012b8:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    return (((x >> 24) & 0x000000ff) | ((x << 8) & 0x00ff0000) |
 80012bc:	431c      	orrs	r4, r3
            ((x >> 8) & 0x0000ff00) | ((x << 24) & 0xff000000));
 80012be:	ea44 6400 	orr.w	r4, r4, r0, lsl #24
	uint32_t suffix = 0;
	suffix = swap_endian_uint32(crc);

	/* Form the packet in the transmit buffer */
	size_t tx_buffer_index = 0;
	memcpy(tx_buffer, &prefix, sizeof(prefix)); // prefix to buffer
 80012c2:	f8df 9030 	ldr.w	r9, [pc, #48]	@ 80012f4 <transmit_crc_packet+0x78>
 80012c6:	f8a9 6000 	strh.w	r6, [r9]
	tx_buffer_index += sizeof(prefix);
	memcpy(tx_buffer + tx_buffer_index, &flag, sizeof(flag)); // flag to buffer
 80012ca:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80012ce:	f889 3002 	strb.w	r3, [r9, #2]
	tx_buffer_index += sizeof(flag);
	memcpy(tx_buffer + tx_buffer_index, buf, size); // payload to buffer
 80012d2:	462a      	mov	r2, r5
 80012d4:	4639      	mov	r1, r7
 80012d6:	f109 0003 	add.w	r0, r9, #3
 80012da:	f009 fbf3 	bl	800aac4 <memcpy>
	tx_buffer_index += size;
 80012de:	3503      	adds	r5, #3
	memcpy(tx_buffer + tx_buffer_index, &suffix, sizeof(suffix)); // suffix to buffer
 80012e0:	f849 4005 	str.w	r4, [r9, r5]
	tx_buffer_index += sizeof(suffix);

	/* Finally transmit over USB */

	CDC_Transmit_FS(tx_buffer, packet_size);
 80012e4:	4641      	mov	r1, r8
 80012e6:	4648      	mov	r0, r9
 80012e8:	f008 fb52 	bl	8009990 <CDC_Transmit_FS>
}
 80012ec:	b003      	add	sp, #12
 80012ee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80012f2:	bf00      	nop
 80012f4:	20000e24 	.word	0x20000e24

080012f8 <send_response>:
{
 80012f8:	b538      	push	{r3, r4, r5, lr}
 80012fa:	4614      	mov	r4, r2
    if (mode == TS_CRC)
 80012fc:	2b01      	cmp	r3, #1
 80012fe:	d007      	beq.n	8001310 <send_response+0x18>
        if (size > 0)
 8001300:	b94a      	cbnz	r2, 8001316 <send_response+0x1e>
	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8001302:	2201      	movs	r2, #1
 8001304:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001308:	4807      	ldr	r0, [pc, #28]	@ (8001328 <send_response+0x30>)
 800130a:	f003 fc28 	bl	8004b5e <HAL_GPIO_WritePin>
}
 800130e:	bd38      	pop	{r3, r4, r5, pc}
        transmit_crc_packet(flag, data, size);
 8001310:	f7ff ffb4 	bl	800127c <transmit_crc_packet>
 8001314:	e7f5      	b.n	8001302 <send_response+0xa>
			memcpy(tx_buffer, data, size);
 8001316:	4d05      	ldr	r5, [pc, #20]	@ (800132c <send_response+0x34>)
 8001318:	4628      	mov	r0, r5
 800131a:	f009 fbd3 	bl	800aac4 <memcpy>
            CDC_Transmit_FS(tx_buffer, size);
 800131e:	b2a1      	uxth	r1, r4
 8001320:	4628      	mov	r0, r5
 8001322:	f008 fb35 	bl	8009990 <CDC_Transmit_FS>
 8001326:	e7ec      	b.n	8001302 <send_response+0xa>
 8001328:	40020800 	.word	0x40020800
 800132c:	20000e24 	.word	0x20000e24

08001330 <comms_init>:



// ==================== Initialization ====================
void comms_init(void)
{
 8001330:	b510      	push	{r4, lr}
 8001332:	b08a      	sub	sp, #40	@ 0x28
	usb_rx_queue = osMessageQueueNew(10, sizeof(usb_packet_ptr_t), NULL);
 8001334:	2200      	movs	r2, #0
 8001336:	2108      	movs	r1, #8
 8001338:	200a      	movs	r0, #10
 800133a:	f7ff feb9 	bl	80010b0 <osMessageQueueNew>
 800133e:	4b0b      	ldr	r3, [pc, #44]	@ (800136c <comms_init+0x3c>)
 8001340:	6018      	str	r0, [r3, #0]

    const osThreadAttr_t comms_task_attrs = {
 8001342:	ac01      	add	r4, sp, #4
 8001344:	2224      	movs	r2, #36	@ 0x24
 8001346:	2100      	movs	r1, #0
 8001348:	4620      	mov	r0, r4
 800134a:	f009 fb87 	bl	800aa5c <memset>
 800134e:	4b08      	ldr	r3, [pc, #32]	@ (8001370 <comms_init+0x40>)
 8001350:	9301      	str	r3, [sp, #4]
 8001352:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001356:	9306      	str	r3, [sp, #24]
 8001358:	2318      	movs	r3, #24
 800135a:	9307      	str	r3, [sp, #28]
        .name = "comms_task",
        .stack_size = 1024 * 4,
        .priority = osPriorityNormal,
    };
    osThreadNew(comms_task, NULL, &comms_task_attrs);
 800135c:	4622      	mov	r2, r4
 800135e:	2100      	movs	r1, #0
 8001360:	4804      	ldr	r0, [pc, #16]	@ (8001374 <comms_init+0x44>)
 8001362:	f7ff fdad 	bl	8000ec0 <osThreadNew>

}
 8001366:	b00a      	add	sp, #40	@ 0x28
 8001368:	bd10      	pop	{r4, pc}
 800136a:	bf00      	nop
 800136c:	20001244 	.word	0x20001244
 8001370:	0800b96c 	.word	0x0800b96c
 8001374:	08001591 	.word	0x08001591

08001378 <process_plain_command>:
    }
}

// ==================== Command Processing ====================
bool process_plain_command(uint8_t *request, uint16_t size)
{
 8001378:	b508      	push	{r3, lr}
    uint8_t first_byte = request[0];
 800137a:	7803      	ldrb	r3, [r0, #0]
    switch (first_byte)
 800137c:	3b43      	subs	r3, #67	@ 0x43
 800137e:	2b10      	cmp	r3, #16
 8001380:	d832      	bhi.n	80013e8 <process_plain_command+0x70>
 8001382:	e8df f003 	tbb	[pc, r3]
 8001386:	3121      	.short	0x3121
 8001388:	31310931 	.word	0x31310931
 800138c:	31313129 	.word	0x31313129
 8001390:	31313131 	.word	0x31313131
 8001394:	3119      	.short	0x3119
 8001396:	11          	.byte	0x11
 8001397:	00          	.byte	0x00
    {
    case TS_COMMAND_F:
    #ifndef TS_USE_OLD_PROTOCOL
        send_response(0, (uint8_t*)TS_PROTOCOL, sizeof(TS_PROTOCOL) - 1, TS_PLAIN);
 8001398:	2300      	movs	r3, #0
 800139a:	2203      	movs	r2, #3
 800139c:	4913      	ldr	r1, [pc, #76]	@ (80013ec <process_plain_command+0x74>)
 800139e:	4618      	mov	r0, r3
 80013a0:	f7ff ffaa 	bl	80012f8 <send_response>
        return true;
 80013a4:	2001      	movs	r0, #1
 80013a6:	e020      	b.n	80013ea <process_plain_command+0x72>
    #endif
        break;
    case TS_HELLO_COMMAND:
        send_response(0, (uint8_t*)TS_SIGNATURE, sizeof(TS_SIGNATURE) - 1, TS_PLAIN);
 80013a8:	2300      	movs	r3, #0
 80013aa:	2213      	movs	r2, #19
 80013ac:	4910      	ldr	r1, [pc, #64]	@ (80013f0 <process_plain_command+0x78>)
 80013ae:	4618      	mov	r0, r3
 80013b0:	f7ff ffa2 	bl	80012f8 <send_response>
        return true;
 80013b4:	2001      	movs	r0, #1
 80013b6:	e018      	b.n	80013ea <process_plain_command+0x72>
        break;
    case TS_QUERY_COMMAND:
        send_response(0, (uint8_t*)TS_SIGNATURE, sizeof(TS_SIGNATURE) - 1, TS_PLAIN);
 80013b8:	2300      	movs	r3, #0
 80013ba:	2213      	movs	r2, #19
 80013bc:	490c      	ldr	r1, [pc, #48]	@ (80013f0 <process_plain_command+0x78>)
 80013be:	4618      	mov	r0, r3
 80013c0:	f7ff ff9a 	bl	80012f8 <send_response>
        return true;
 80013c4:	2001      	movs	r0, #1
 80013c6:	e010      	b.n	80013ea <process_plain_command+0x72>
        break;
    case TS_TEST_COMMS_COMMAND:
        send_response(0, (uint8_t *)0xFF, 1, TS_PLAIN);
 80013c8:	2300      	movs	r3, #0
 80013ca:	2201      	movs	r2, #1
 80013cc:	21ff      	movs	r1, #255	@ 0xff
 80013ce:	4618      	mov	r0, r3
 80013d0:	f7ff ff92 	bl	80012f8 <send_response>
        return true;
 80013d4:	2001      	movs	r0, #1
 80013d6:	e008      	b.n	80013ea <process_plain_command+0x72>
        break;
    case TS_CAN_ID_COMMAND:
        send_response(0, (uint8_t*)TS_CAN_ID, sizeof(TS_CAN_ID) - 1, TS_PLAIN);
 80013d8:	2300      	movs	r3, #0
 80013da:	461a      	mov	r2, r3
 80013dc:	4619      	mov	r1, r3
 80013de:	4618      	mov	r0, r3
 80013e0:	f7ff ff8a 	bl	80012f8 <send_response>
        return true;
 80013e4:	2001      	movs	r0, #1
 80013e6:	e000      	b.n	80013ea <process_plain_command+0x72>
    switch (first_byte)
 80013e8:	2000      	movs	r0, #0
        break;
    }
        // This wasn't a valid command
        return false;
    
}
 80013ea:	bd08      	pop	{r3, pc}
 80013ec:	0800b978 	.word	0x0800b978
 80013f0:	0800b97c 	.word	0x0800b97c

080013f4 <handle_page_read_command>:
    HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
}

void handle_page_read_command(uint16_t page, uint16_t offset, uint16_t count)
{
	if (page > 1)
 80013f4:	2801      	cmp	r0, #1
 80013f6:	d80d      	bhi.n	8001414 <handle_page_read_command+0x20>
{
 80013f8:	b508      	push	{r3, lr}
	{
		return;
	}
	if ((offset + count) > TS_PAGE_SIZE)
 80013fa:	1888      	adds	r0, r1, r2
 80013fc:	f640 1338 	movw	r3, #2360	@ 0x938
 8001400:	4298      	cmp	r0, r3
 8001402:	dd00      	ble.n	8001406 <handle_page_read_command+0x12>
	{
		return;
	}

	send_response(TS_RESPONSE_OK, (uint8_t*)&config + offset, count, TS_CRC);
}
 8001404:	bd08      	pop	{r3, pc}
	send_response(TS_RESPONSE_OK, (uint8_t*)&config + offset, count, TS_CRC);
 8001406:	2301      	movs	r3, #1
 8001408:	4803      	ldr	r0, [pc, #12]	@ (8001418 <handle_page_read_command+0x24>)
 800140a:	4401      	add	r1, r0
 800140c:	2000      	movs	r0, #0
 800140e:	f7ff ff73 	bl	80012f8 <send_response>
 8001412:	e7f7      	b.n	8001404 <handle_page_read_command+0x10>
 8001414:	4770      	bx	lr
 8001416:	bf00      	nop
 8001418:	20001344 	.word	0x20001344

0800141c <process_command>:
{
 800141c:	b530      	push	{r4, r5, lr}
 800141e:	b083      	sub	sp, #12
 8001420:	4605      	mov	r5, r0
 8001422:	460c      	mov	r4, r1
    if (process_plain_command(request, size))
 8001424:	f7ff ffa8 	bl	8001378 <process_plain_command>
 8001428:	2800      	cmp	r0, #0
 800142a:	f040 80a4 	bne.w	8001576 <process_command+0x15a>
    if (size > 5)
 800142e:	2c05      	cmp	r4, #5
 8001430:	d821      	bhi.n	8001476 <process_command+0x5a>
    uint8_t command = request[2];
 8001432:	78ab      	ldrb	r3, [r5, #2]
    switch (command)
 8001434:	3b42      	subs	r3, #66	@ 0x42
 8001436:	2b35      	cmp	r3, #53	@ 0x35
 8001438:	f200 8098 	bhi.w	800156c <process_command+0x150>
 800143c:	e8df f003 	tbb	[pc, r3]
 8001440:	9696208f 	.word	0x9696208f
 8001444:	2e969627 	.word	0x2e969627
 8001448:	96969696 	.word	0x96969696
 800144c:	35965296 	.word	0x35965296
 8001450:	96963c96 	.word	0x96963c96
 8001454:	96966f96 	.word	0x96966f96
 8001458:	96969696 	.word	0x96969696
 800145c:	96969696 	.word	0x96969696
 8001460:	96969696 	.word	0x96969696
 8001464:	96969643 	.word	0x96969643
 8001468:	96966196 	.word	0x96966196
 800146c:	96969696 	.word	0x96969696
 8001470:	96969659 	.word	0x96969659
 8001474:	7f96      	.short	0x7f96
        calculated_packet_crc = crc32_inc(0, (void *)(request + TS_PACKET_PREFIX_SIZE), size - TS_PACKET_PREFIX_SIZE - TS_PACKET_CRC_SIZE);
 8001476:	1fa2      	subs	r2, r4, #6
 8001478:	1ca9      	adds	r1, r5, #2
 800147a:	f009 fa73 	bl	800a964 <crc32_inc>
 800147e:	e7d8      	b.n	8001432 <process_command+0x16>
        send_response(TS_RESPONSE_OK, (uint8_t *)0xFF, 1, TS_CRC);
 8001480:	2301      	movs	r3, #1
 8001482:	461a      	mov	r2, r3
 8001484:	21ff      	movs	r1, #255	@ 0xff
 8001486:	2000      	movs	r0, #0
 8001488:	f7ff ff36 	bl	80012f8 <send_response>
        return;
 800148c:	e073      	b.n	8001576 <process_command+0x15a>
        send_response(TS_RESPONSE_OK, (uint8_t *)TS_PROTOCOL, sizeof(TS_PROTOCOL) - 1, TS_CRC);
 800148e:	2301      	movs	r3, #1
 8001490:	2203      	movs	r2, #3
 8001492:	493a      	ldr	r1, [pc, #232]	@ (800157c <process_command+0x160>)
 8001494:	2000      	movs	r0, #0
 8001496:	f7ff ff2f 	bl	80012f8 <send_response>
        return;
 800149a:	e06c      	b.n	8001576 <process_command+0x15a>
        send_response(TS_RESPONSE_OK, (uint8_t *)TS_CAN_ID, sizeof(TS_CAN_ID), TS_CRC);
 800149c:	2301      	movs	r3, #1
 800149e:	461a      	mov	r2, r3
 80014a0:	2100      	movs	r1, #0
 80014a2:	4608      	mov	r0, r1
 80014a4:	f7ff ff28 	bl	80012f8 <send_response>
        return;
 80014a8:	e065      	b.n	8001576 <process_command+0x15a>
        send_response(TS_RESPONSE_OK, (uint8_t *)TS_SIGNATURE, sizeof(TS_SIGNATURE) - 1, TS_CRC);
 80014aa:	2301      	movs	r3, #1
 80014ac:	2213      	movs	r2, #19
 80014ae:	4934      	ldr	r1, [pc, #208]	@ (8001580 <process_command+0x164>)
 80014b0:	2000      	movs	r0, #0
 80014b2:	f7ff ff21 	bl	80012f8 <send_response>
        return;
 80014b6:	e05e      	b.n	8001576 <process_command+0x15a>
        send_response(TS_RESPONSE_OK, (uint8_t *)TS_SIGNATURE, sizeof(TS_SIGNATURE), TS_CRC);
 80014b8:	2301      	movs	r3, #1
 80014ba:	2214      	movs	r2, #20
 80014bc:	4930      	ldr	r1, [pc, #192]	@ (8001580 <process_command+0x164>)
 80014be:	2000      	movs	r0, #0
 80014c0:	f7ff ff1a 	bl	80012f8 <send_response>
        return;
 80014c4:	e057      	b.n	8001576 <process_command+0x15a>
        response[0] = 2; // serial version
 80014c6:	2302      	movs	r3, #2
 80014c8:	f88d 3000 	strb.w	r3, [sp]
        *(uint16_t *)&response[1] = swap_endian_uint16(TS_TABLE_BLOCKING_FACTOR);
 80014cc:	2304      	movs	r3, #4
 80014ce:	f8ad 3001 	strh.w	r3, [sp, #1]
        *(uint16_t *)&response[3] = swap_endian_uint16(TS_BLOCKING_FACTOR);
 80014d2:	f8ad 3003 	strh.w	r3, [sp, #3]
        send_response(TS_RESPONSE_OK, (uint8_t *)response, sizeof(response), TS_CRC);
 80014d6:	2301      	movs	r3, #1
 80014d8:	2205      	movs	r2, #5
 80014da:	4669      	mov	r1, sp
 80014dc:	2000      	movs	r0, #0
 80014de:	f7ff ff0b 	bl	80012f8 <send_response>
        return;
 80014e2:	e048      	b.n	8001576 <process_command+0x15a>
        send_response(TS_RESPONSE_OK, (uint8_t *)&runtime, sizeof(runtime), TS_CRC);
 80014e4:	2301      	movs	r3, #1
 80014e6:	2250      	movs	r2, #80	@ 0x50
 80014e8:	4926      	ldr	r1, [pc, #152]	@ (8001584 <process_command+0x168>)
 80014ea:	2000      	movs	r0, #0
 80014ec:	f7ff ff04 	bl	80012f8 <send_response>
        return;
 80014f0:	e041      	b.n	8001576 <process_command+0x15a>
        handle_page_read_command(page, offset, size);
 80014f2:	f8b5 2005 	ldrh.w	r2, [r5, #5]
 80014f6:	f8b5 1003 	ldrh.w	r1, [r5, #3]
 80014fa:	2000      	movs	r0, #0
 80014fc:	f7ff ff7a 	bl	80013f4 <handle_page_read_command>
        return;
 8001500:	e039      	b.n	8001576 <process_command+0x15a>
        uint32_t page_crc = crc32_inc(0, (uint8_t *)&config, sizeof(config));
 8001502:	f241 3234 	movw	r2, #4916	@ 0x1334
 8001506:	4920      	ldr	r1, [pc, #128]	@ (8001588 <process_command+0x16c>)
 8001508:	2000      	movs	r0, #0
 800150a:	f009 fa2b 	bl	800a964 <crc32_inc>
 800150e:	9000      	str	r0, [sp, #0]
        send_response(TS_RESPONSE_OK, (uint8_t *)&page_crc, sizeof(page_crc), TS_CRC);
 8001510:	2301      	movs	r3, #1
 8001512:	2204      	movs	r2, #4
 8001514:	4669      	mov	r1, sp
 8001516:	2000      	movs	r0, #0
 8001518:	f7ff feee 	bl	80012f8 <send_response>
        return;
 800151c:	e02b      	b.n	8001576 <process_command+0x15a>
        uint16_t offset = *(uint16_t *)&request[3];
 800151e:	f8b5 3003 	ldrh.w	r3, [r5, #3]
        memcpy((uint8_t *)&config + offset, &request[7], size);
 8001522:	f8b5 2005 	ldrh.w	r2, [r5, #5]
 8001526:	1de9      	adds	r1, r5, #7
 8001528:	4817      	ldr	r0, [pc, #92]	@ (8001588 <process_command+0x16c>)
 800152a:	4418      	add	r0, r3
 800152c:	f009 faca 	bl	800aac4 <memcpy>
        send_response(TS_RESPONSE_OK, NULL, 0, TS_CRC);
 8001530:	2301      	movs	r3, #1
 8001532:	2200      	movs	r2, #0
 8001534:	4611      	mov	r1, r2
 8001536:	4610      	mov	r0, r2
 8001538:	f7ff fede 	bl	80012f8 <send_response>
        return;
 800153c:	e01b      	b.n	8001576 <process_command+0x15a>
        uint16_t offset = *(uint16_t *)&request[3];
 800153e:	f8b5 3003 	ldrh.w	r3, [r5, #3]
        memcpy((uint8_t *)&config + offset, &request[7], size);
 8001542:	f8b5 2005 	ldrh.w	r2, [r5, #5]
 8001546:	1de9      	adds	r1, r5, #7
 8001548:	480f      	ldr	r0, [pc, #60]	@ (8001588 <process_command+0x16c>)
 800154a:	4418      	add	r0, r3
 800154c:	f009 faba 	bl	800aac4 <memcpy>
        send_response(TS_RESPONSE_OK, NULL, 0, TS_CRC);
 8001550:	2301      	movs	r3, #1
 8001552:	2200      	movs	r2, #0
 8001554:	4611      	mov	r1, r2
 8001556:	4610      	mov	r0, r2
 8001558:	f7ff fece 	bl	80012f8 <send_response>
        return;
 800155c:	e00b      	b.n	8001576 <process_command+0x15a>
        send_response(TS_RESPONSE_BURN_OK, NULL, 0, TS_CRC);
 800155e:	2301      	movs	r3, #1
 8001560:	2200      	movs	r2, #0
 8001562:	4611      	mov	r1, r2
 8001564:	2004      	movs	r0, #4
 8001566:	f7ff fec7 	bl	80012f8 <send_response>
        return;
 800156a:	e004      	b.n	8001576 <process_command+0x15a>
    HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 800156c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001570:	4806      	ldr	r0, [pc, #24]	@ (800158c <process_command+0x170>)
 8001572:	f003 fafa 	bl	8004b6a <HAL_GPIO_TogglePin>
}
 8001576:	b003      	add	sp, #12
 8001578:	bd30      	pop	{r4, r5, pc}
 800157a:	bf00      	nop
 800157c:	0800b978 	.word	0x0800b978
 8001580:	0800b97c 	.word	0x0800b97c
 8001584:	200012f4 	.word	0x200012f4
 8001588:	20001344 	.word	0x20001344
 800158c:	40020800 	.word	0x40020800

08001590 <comms_task>:
{
 8001590:	b500      	push	{lr}
 8001592:	b083      	sub	sp, #12
        if (osMessageQueueGet(usb_rx_queue, &packet, NULL, osWaitForever) == osOK)
 8001594:	f04f 33ff 	mov.w	r3, #4294967295
 8001598:	2200      	movs	r2, #0
 800159a:	4669      	mov	r1, sp
 800159c:	4805      	ldr	r0, [pc, #20]	@ (80015b4 <comms_task+0x24>)
 800159e:	6800      	ldr	r0, [r0, #0]
 80015a0:	f7ff fe13 	bl	80011ca <osMessageQueueGet>
 80015a4:	2800      	cmp	r0, #0
 80015a6:	d1f5      	bne.n	8001594 <comms_task+0x4>
            process_command(packet.data, packet.len);
 80015a8:	f8bd 1004 	ldrh.w	r1, [sp, #4]
 80015ac:	9800      	ldr	r0, [sp, #0]
 80015ae:	f7ff ff35 	bl	800141c <process_command>
 80015b2:	e7ef      	b.n	8001594 <comms_task+0x4>
 80015b4:	20001244 	.word	0x20001244

080015b8 <controller_test_task>:
void controller_save_configuration()
{
}

void controller_test_task(void *arg)
{
 80015b8:	b508      	push	{r3, lr}
  osDelay(100);
 80015ba:	2064      	movs	r0, #100	@ 0x64
 80015bc:	f7ff fcda 	bl	8000f74 <osDelay>
  trigger_simulator_init(60, 2, trigger_tooth_handle, &trigger1);
 80015c0:	4b10      	ldr	r3, [pc, #64]	@ (8001604 <controller_test_task+0x4c>)
 80015c2:	4a11      	ldr	r2, [pc, #68]	@ (8001608 <controller_test_task+0x50>)
 80015c4:	2102      	movs	r1, #2
 80015c6:	203c      	movs	r0, #60	@ 0x3c
 80015c8:	f007 fe7c 	bl	80092c4 <trigger_simulator_init>
  static rpm_t simulated_rpm = 1000;
  for (;;)
  {
    simulated_rpm = (rpm_t)mapf((float)analog_inputs_get_data(ANALOG_INPUT_ETB2_SENSE2), 0.0f, 4095.0f, 10.0f, 1000.0f);
 80015cc:	2003      	movs	r0, #3
 80015ce:	f7ff fc15 	bl	8000dfc <analog_inputs_get_data>
 80015d2:	ee07 0a90 	vmov	s15, r0
 80015d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
    return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 80015da:	ed9f 7a0c 	vldr	s14, [pc, #48]	@ 800160c <controller_test_task+0x54>
 80015de:	ee67 7a87 	vmul.f32	s15, s15, s14
 80015e2:	ed9f 7a0b 	vldr	s14, [pc, #44]	@ 8001610 <controller_test_task+0x58>
 80015e6:	ee87 0a87 	vdiv.f32	s0, s15, s14
 80015ea:	eef2 7a04 	vmov.f32	s15, #36	@ 0x41200000  10.0
 80015ee:	ee30 0a27 	vadd.f32	s0, s0, s15
 80015f2:	4b08      	ldr	r3, [pc, #32]	@ (8001614 <controller_test_task+0x5c>)
 80015f4:	ed83 0a00 	vstr	s0, [r3]
    //simulated_rpm = 500;
    trigger_simulator_update(simulated_rpm);
 80015f8:	f007 fe78 	bl	80092ec <trigger_simulator_update>
    osDelay(1);
 80015fc:	2001      	movs	r0, #1
 80015fe:	f7ff fcb9 	bl	8000f74 <osDelay>
  for (;;)
 8001602:	e7e3      	b.n	80015cc <controller_test_task+0x14>
 8001604:	2000124c 	.word	0x2000124c
 8001608:	080090f1 	.word	0x080090f1
 800160c:	44778000 	.word	0x44778000
 8001610:	457ff000 	.word	0x457ff000
 8001614:	20001248 	.word	0x20001248

08001618 <controller_load_test_configuration>:
{
 8001618:	b500      	push	{lr}
  config.cranking_rpm_threshold = 400.0f;
 800161a:	4b58      	ldr	r3, [pc, #352]	@ (800177c <controller_load_test_configuration+0x164>)
 800161c:	4a58      	ldr	r2, [pc, #352]	@ (8001780 <controller_load_test_configuration+0x168>)
 800161e:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
  config.cranking_advance = 8.0f;
 8001622:	f04f 4282 	mov.w	r2, #1090519040	@ 0x41000000
 8001626:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
  config.cranking_throttle = 10.0f;
 800162a:	4956      	ldr	r1, [pc, #344]	@ (8001784 <controller_load_test_configuration+0x16c>)
 800162c:	f8c3 1208 	str.w	r1, [r3, #520]	@ 0x208
  config.ignition_dwell = 1.0f;
 8001630:	f04f 5c7e 	mov.w	ip, #1065353216	@ 0x3f800000
 8001634:	f8c3 c20c 	str.w	ip, [r3, #524]	@ 0x20c
  config.multi_spark_rpm_threshold = 3500.0f;
 8001638:	4a53      	ldr	r2, [pc, #332]	@ (8001788 <controller_load_test_configuration+0x170>)
 800163a:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210
  config.multi_spark_rest_time_ms = 0.5f;
 800163e:	f04f 527c 	mov.w	r2, #1056964608	@ 0x3f000000
 8001642:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  config.multi_spark_max_trailing_angle = 15.0f;
 8001646:	4851      	ldr	r0, [pc, #324]	@ (800178c <controller_load_test_configuration+0x174>)
 8001648:	f8c3 0218 	str.w	r0, [r3, #536]	@ 0x218
  config.stoich_afr_gas = 14.7f;
 800164c:	4850      	ldr	r0, [pc, #320]	@ (8001790 <controller_load_test_configuration+0x178>)
 800164e:	f8c3 021c 	str.w	r0, [r3, #540]	@ 0x21c
  config.stoich_afr_petrol = 14.7f;
 8001652:	f8c3 0220 	str.w	r0, [r3, #544]	@ 0x220
  config.governer_target_rpm = 1500.0f;
 8001656:	484f      	ldr	r0, [pc, #316]	@ (8001794 <controller_load_test_configuration+0x17c>)
 8001658:	f8c3 0224 	str.w	r0, [r3, #548]	@ 0x224
  config.governer_idle_rpm = 850.0f;
 800165c:	484e      	ldr	r0, [pc, #312]	@ (8001798 <controller_load_test_configuration+0x180>)
 800165e:	f8c3 0228 	str.w	r0, [r3, #552]	@ 0x228
  config.governer_pid_Kp = 10.0f;
 8001662:	f8c3 122c 	str.w	r1, [r3, #556]	@ 0x22c
  config.governer_pid_Ki = 0.5f;
 8001666:	f8c3 2230 	str.w	r2, [r3, #560]	@ 0x230
  config.governer_pid_Kd = 0.1f;
 800166a:	4a4c      	ldr	r2, [pc, #304]	@ (800179c <controller_load_test_configuration+0x184>)
 800166c:	f8c3 2234 	str.w	r2, [r3, #564]	@ 0x234
  config.governer_pid_limit_integrator_min = -100.0f;
 8001670:	494b      	ldr	r1, [pc, #300]	@ (80017a0 <controller_load_test_configuration+0x188>)
 8001672:	f8c3 1238 	str.w	r1, [r3, #568]	@ 0x238
  config.governer_pid_limit_integrator_max = 100.0f;
 8001676:	484b      	ldr	r0, [pc, #300]	@ (80017a4 <controller_load_test_configuration+0x18c>)
 8001678:	f8c3 023c 	str.w	r0, [r3, #572]	@ 0x23c
  config.governer_pid_derivative_filter_tau = 0.1f;
 800167c:	f8c3 2240 	str.w	r2, [r3, #576]	@ 0x240
  config.etb1_pid_Kp = 20.0f;
 8001680:	eef3 7a04 	vmov.f32	s15, #52	@ 0x41a00000  20.0
 8001684:	edc3 7a91 	vstr	s15, [r3, #580]	@ 0x244
  config.etb1_pid_Ki = 1.0f;
 8001688:	f8c3 c248 	str.w	ip, [r3, #584]	@ 0x248
  config.etb1_pid_Kd = 0.0f;
 800168c:	2100      	movs	r1, #0
 800168e:	f8c3 124c 	str.w	r1, [r3, #588]	@ 0x24c
  config.etb1_pid_limit_integrator_min = 0.0f;
 8001692:	f8c3 1250 	str.w	r1, [r3, #592]	@ 0x250
  config.etb1_pid_limit_integrator_max = 255.0f;
 8001696:	f8df e11c 	ldr.w	lr, [pc, #284]	@ 80017b4 <controller_load_test_configuration+0x19c>
 800169a:	f8c3 e254 	str.w	lr, [r3, #596]	@ 0x254
  config.etb1_pid_derivative_filter_tau = 0.1f;
 800169e:	f8c3 2258 	str.w	r2, [r3, #600]	@ 0x258
  config.etb2_pid_Kp = 20.0f;
 80016a2:	edc3 7a97 	vstr	s15, [r3, #604]	@ 0x25c
  config.etb2_pid_Ki = 1.0f;
 80016a6:	f8c3 c260 	str.w	ip, [r3, #608]	@ 0x260
  config.etb2_pid_Kd = 0.0f;
 80016aa:	f8c3 1264 	str.w	r1, [r3, #612]	@ 0x264
  config.etb2_pid_limit_integrator_min = 0.0f;
 80016ae:	f8c3 1268 	str.w	r1, [r3, #616]	@ 0x268
  config.etb2_pid_limit_integrator_max = 255.0f;
 80016b2:	f8c3 e26c 	str.w	lr, [r3, #620]	@ 0x26c
  config.etb2_pid_derivative_filter_tau = 0.1f;
 80016b6:	f8c3 2270 	str.w	r2, [r3, #624]	@ 0x270
  config.protection_clt_shutdown_temprature = 110.0f;
 80016ba:	4a3b      	ldr	r2, [pc, #236]	@ (80017a8 <controller_load_test_configuration+0x190>)
 80016bc:	f8c3 2274 	str.w	r2, [r3, #628]	@ 0x274
  config.protection_clt_load_disconnect_temprature = 100.0f;
 80016c0:	f8c3 0278 	str.w	r0, [r3, #632]	@ 0x278
  config.fan1_on_temp = 95.0f;
 80016c4:	4a39      	ldr	r2, [pc, #228]	@ (80017ac <controller_load_test_configuration+0x194>)
 80016c6:	f8c3 227c 	str.w	r2, [r3, #636]	@ 0x27c
  config.fan1_off_temp = 90.0f;
 80016ca:	4939      	ldr	r1, [pc, #228]	@ (80017b0 <controller_load_test_configuration+0x198>)
 80016cc:	f8c3 1280 	str.w	r1, [r3, #640]	@ 0x280
  config.fan2_on_temp = 100.0f;
 80016d0:	f8c3 0284 	str.w	r0, [r3, #644]	@ 0x284
  config.fan2_off_temp = 95.0f;
 80016d4:	f8c3 2288 	str.w	r2, [r3, #648]	@ 0x288
  config.rpm_limiter = 4000;
 80016d8:	f44f 627a 	mov.w	r2, #4000	@ 0xfa0
 80016dc:	f8a3 230c 	strh.w	r2, [r3, #780]	@ 0x30c
  config.engine_displacement_cc = 2400;
 80016e0:	f44f 6216 	mov.w	r2, #2400	@ 0x960
 80016e4:	f8a3 230e 	strh.w	r2, [r3, #782]	@ 0x30e
  config.tps1_calib_wide_open_throttle_adc_value = 3000;
 80016e8:	f640 31b8 	movw	r1, #3000	@ 0xbb8
 80016ec:	f8a3 1310 	strh.w	r1, [r3, #784]	@ 0x310
  config.tps1_calib_closed_throttle_adc_value = 1700;
 80016f0:	f240 62a4 	movw	r2, #1700	@ 0x6a4
 80016f4:	f8a3 2312 	strh.w	r2, [r3, #786]	@ 0x312
  config.tps2_calib_wide_open_throttle_adc_value = 3000;
 80016f8:	f8a3 1314 	strh.w	r1, [r3, #788]	@ 0x314
  config.tps2_calib_closed_throttle_adc_value = 1700;
 80016fc:	f8a3 2316 	strh.w	r2, [r3, #790]	@ 0x316
  config.firing_order = FO_1342;
 8001700:	2200      	movs	r2, #0
 8001702:	f883 2318 	strb.w	r2, [r3, #792]	@ 0x318
  config.fuel_type = FUEL_TYPE_GAS;
 8001706:	f883 2319 	strb.w	r2, [r3, #793]	@ 0x319
  config.trigger1_type = 0; // e.g. TRIGGER_TYPE_60_2
 800170a:	f883 231a 	strb.w	r2, [r3, #794]	@ 0x31a
  config.trigger1_filtering = TRIGGER_FILTERING_NONE;
 800170e:	f883 231b 	strb.w	r2, [r3, #795]	@ 0x31b
  config.trigger2_type = 0;
 8001712:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
  config.trigger2_filtering = 0;
 8001716:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d
  config.trigger2_enabled = 0;
 800171a:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
  config.number_of_injectors = 4;
 800171e:	2104      	movs	r1, #4
 8001720:	f883 131f 	strb.w	r1, [r3, #799]	@ 0x31f
  config.injection_mode = IM_SIMULTANEOUS;
 8001724:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  config.ignition_mode = IM_WASTED_SPARK;
 8001728:	2003      	movs	r0, #3
 800172a:	f883 0321 	strb.w	r0, [r3, #801]	@ 0x321
  config.multi_spark_enabled = 1;
 800172e:	2101      	movs	r1, #1
 8001730:	f883 1322 	strb.w	r1, [r3, #802]	@ 0x322
  config.multi_spark_number_of_sparks = 5;
 8001734:	f04f 0c05 	mov.w	ip, #5
 8001738:	f883 c323 	strb.w	ip, [r3, #803]	@ 0x323
  config.tps1_calib_is_inverted = 0;
 800173c:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324
  config.tps2_calib_is_inverted = 0;
 8001740:	f883 2325 	strb.w	r2, [r3, #805]	@ 0x325
  config.sensor_clt_type = SENSOR_CLT_TYPE_TEST;
 8001744:	f883 2326 	strb.w	r2, [r3, #806]	@ 0x326
  config.sensor_iat_type = SENSOR_IAT_TYPE_TEST;
 8001748:	f883 2327 	strb.w	r2, [r3, #807]	@ 0x327
  config.sensor_map_type = SENSOR_MAP_TYPE_TEST;
 800174c:	f883 2328 	strb.w	r2, [r3, #808]	@ 0x328
  config.protection_oil_pressure_time = 3;
 8001750:	f883 0329 	strb.w	r0, [r3, #809]	@ 0x329
  config.protection_oil_pressure_enabled = 0;
 8001754:	f883 232a 	strb.w	r2, [r3, #810]	@ 0x32a
  config.protection_clt_enabled = 0;
 8001758:	f883 232b 	strb.w	r2, [r3, #811]	@ 0x32b
  config.protection_clt_load_disconnect_enabled = 0;
 800175c:	f883 232c 	strb.w	r2, [r3, #812]	@ 0x32c
  config.etb1_enabled = 1;
 8001760:	f883 132d 	strb.w	r1, [r3, #813]	@ 0x32d
  config.etb2_enabled = 0;
 8001764:	f883 232e 	strb.w	r2, [r3, #814]	@ 0x32e
  config.etb1_motor_inverted = 0;
 8001768:	f883 232f 	strb.w	r2, [r3, #815]	@ 0x32f
  config.etb2_motor_inverted = 0;
 800176c:	f883 2330 	strb.w	r2, [r3, #816]	@ 0x330
  config.fan1_enabled = 1;
 8001770:	f883 1331 	strb.w	r1, [r3, #817]	@ 0x331
  config.fan2_enabled = 0;
 8001774:	f883 2332 	strb.w	r2, [r3, #818]	@ 0x332
}
 8001778:	f85d fb04 	ldr.w	pc, [sp], #4
 800177c:	20002344 	.word	0x20002344
 8001780:	43c80000 	.word	0x43c80000
 8001784:	41200000 	.word	0x41200000
 8001788:	455ac000 	.word	0x455ac000
 800178c:	41700000 	.word	0x41700000
 8001790:	416b3333 	.word	0x416b3333
 8001794:	44bb8000 	.word	0x44bb8000
 8001798:	44548000 	.word	0x44548000
 800179c:	3dcccccd 	.word	0x3dcccccd
 80017a0:	c2c80000 	.word	0xc2c80000
 80017a4:	42c80000 	.word	0x42c80000
 80017a8:	42dc0000 	.word	0x42dc0000
 80017ac:	42be0000 	.word	0x42be0000
 80017b0:	42b40000 	.word	0x42b40000
 80017b4:	437f0000 	.word	0x437f0000

080017b8 <controller_init_with_defaults>:
{
 80017b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80017ba:	b08f      	sub	sp, #60	@ 0x3c
  memset(&runtime, 0, sizeof(runtime));
 80017bc:	2250      	movs	r2, #80	@ 0x50
 80017be:	2100      	movs	r1, #0
 80017c0:	482f      	ldr	r0, [pc, #188]	@ (8001880 <controller_init_with_defaults+0xc8>)
 80017c2:	f009 f94b 	bl	800aa5c <memset>
  controller_timing_start(&htim2);
 80017c6:	482f      	ldr	r0, [pc, #188]	@ (8001884 <controller_init_with_defaults+0xcc>)
 80017c8:	f007 fb32 	bl	8008e30 <controller_timing_start>
  analog_inputs_init(&hadc1);
 80017cc:	482e      	ldr	r0, [pc, #184]	@ (8001888 <controller_init_with_defaults+0xd0>)
 80017ce:	f7ff fafd 	bl	8000dcc <analog_inputs_init>
  controller_load_test_configuration();
 80017d2:	f7ff ff21 	bl	8001618 <controller_load_test_configuration>
  trigger_init(&trigger1, config.trigger1_type, &config.trigger1_filtering, STATUS_TRIGGER1_SYNCED, 1);
 80017d6:	4c2d      	ldr	r4, [pc, #180]	@ (800188c <controller_init_with_defaults+0xd4>)
 80017d8:	2301      	movs	r3, #1
 80017da:	9300      	str	r3, [sp, #0]
 80017dc:	2303      	movs	r3, #3
 80017de:	f204 321b 	addw	r2, r4, #795	@ 0x31b
 80017e2:	f894 131a 	ldrb.w	r1, [r4, #794]	@ 0x31a
 80017e6:	482a      	ldr	r0, [pc, #168]	@ (8001890 <controller_init_with_defaults+0xd8>)
 80017e8:	f007 fc26 	bl	8009038 <trigger_init>
  dc_motor_init_simple_Hbridge(&etb1_motor, &htim3, TIM_CHANNEL_1, TIM_CHANNEL_2, TIM_CHANNEL_3, TIM_CHANNEL_4, 25000);
 80017ec:	4f29      	ldr	r7, [pc, #164]	@ (8001894 <controller_init_with_defaults+0xdc>)
 80017ee:	f246 13a8 	movw	r3, #25000	@ 0x61a8
 80017f2:	9302      	str	r3, [sp, #8]
 80017f4:	230c      	movs	r3, #12
 80017f6:	9301      	str	r3, [sp, #4]
 80017f8:	2308      	movs	r3, #8
 80017fa:	9300      	str	r3, [sp, #0]
 80017fc:	2304      	movs	r3, #4
 80017fe:	2200      	movs	r2, #0
 8001800:	4925      	ldr	r1, [pc, #148]	@ (8001898 <controller_init_with_defaults+0xe0>)
 8001802:	4638      	mov	r0, r7
 8001804:	f000 fa26 	bl	8001c54 <dc_motor_init_simple_Hbridge>
  pid_init(&etb1_pid);
 8001808:	4e24      	ldr	r6, [pc, #144]	@ (800189c <controller_init_with_defaults+0xe4>)
 800180a:	4630      	mov	r0, r6
 800180c:	f001 fa22 	bl	8002c54 <pid_init>
  electronic_throttle_init(&etb1, &etb1_pid, &tps1, &etb1_motor);
 8001810:	4d23      	ldr	r5, [pc, #140]	@ (80018a0 <controller_init_with_defaults+0xe8>)
 8001812:	463b      	mov	r3, r7
 8001814:	4a23      	ldr	r2, [pc, #140]	@ (80018a4 <controller_init_with_defaults+0xec>)
 8001816:	4631      	mov	r1, r6
 8001818:	4628      	mov	r0, r5
 800181a:	f000 fb79 	bl	8001f10 <electronic_throttle_init>
  electronic_throttle_set(&etb1, 70);
 800181e:	ed9f 0a22 	vldr	s0, [pc, #136]	@ 80018a8 <controller_init_with_defaults+0xf0>
 8001822:	4628      	mov	r0, r5
 8001824:	f000 fba6 	bl	8001f74 <electronic_throttle_set>
  sensor_clt_init(&sensor_clt, config.sensor_clt_type);
 8001828:	f894 1326 	ldrb.w	r1, [r4, #806]	@ 0x326
 800182c:	481f      	ldr	r0, [pc, #124]	@ (80018ac <controller_init_with_defaults+0xf4>)
 800182e:	f002 f997 	bl	8003b60 <sensor_clt_init>
  sensor_iat_init(&sensor_iat, config.sensor_iat_type);
 8001832:	f894 1327 	ldrb.w	r1, [r4, #807]	@ 0x327
 8001836:	481e      	ldr	r0, [pc, #120]	@ (80018b0 <controller_init_with_defaults+0xf8>)
 8001838:	f002 f914 	bl	8003a64 <sensor_iat_init>
  sensor_map_init(&sensor_map, config.sensor_map_type);
 800183c:	f894 1328 	ldrb.w	r1, [r4, #808]	@ 0x328
 8001840:	481c      	ldr	r0, [pc, #112]	@ (80018b4 <controller_init_with_defaults+0xfc>)
 8001842:	f002 f8e9 	bl	8003a18 <sensor_map_init>
  sensor_ops_init(&sensor_ops);
 8001846:	481c      	ldr	r0, [pc, #112]	@ (80018b8 <controller_init_with_defaults+0x100>)
 8001848:	f002 fa0c 	bl	8003c64 <sensor_ops_init>
  ignition_init(ignition_output_pins);
 800184c:	481b      	ldr	r0, [pc, #108]	@ (80018bc <controller_init_with_defaults+0x104>)
 800184e:	f000 ff89 	bl	8002764 <ignition_init>
  comms_init();
 8001852:	f7ff fd6d 	bl	8001330 <comms_init>
  const osThreadAttr_t controller_test_attr = {
 8001856:	ac05      	add	r4, sp, #20
 8001858:	2224      	movs	r2, #36	@ 0x24
 800185a:	2100      	movs	r1, #0
 800185c:	4620      	mov	r0, r4
 800185e:	f009 f8fd 	bl	800aa5c <memset>
 8001862:	4b17      	ldr	r3, [pc, #92]	@ (80018c0 <controller_init_with_defaults+0x108>)
 8001864:	9305      	str	r3, [sp, #20]
 8001866:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800186a:	930a      	str	r3, [sp, #40]	@ 0x28
 800186c:	2318      	movs	r3, #24
 800186e:	930b      	str	r3, [sp, #44]	@ 0x2c
  osThreadNew(controller_test_task, NULL, &controller_test_attr);
 8001870:	4622      	mov	r2, r4
 8001872:	2100      	movs	r1, #0
 8001874:	4813      	ldr	r0, [pc, #76]	@ (80018c4 <controller_init_with_defaults+0x10c>)
 8001876:	f7ff fb23 	bl	8000ec0 <osThreadNew>
}
 800187a:	b00f      	add	sp, #60	@ 0x3c
 800187c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800187e:	bf00      	nop
 8001880:	200012f4 	.word	0x200012f4
 8001884:	20006dc4 	.word	0x20006dc4
 8001888:	2000022c 	.word	0x2000022c
 800188c:	20002344 	.word	0x20002344
 8001890:	2000124c 	.word	0x2000124c
 8001894:	200012b8 	.word	0x200012b8
 8001898:	20006d7c 	.word	0x20006d7c
 800189c:	20000020 	.word	0x20000020
 80018a0:	200012d0 	.word	0x200012d0
 80018a4:	2000005c 	.word	0x2000005c
 80018a8:	428c0000 	.word	0x428c0000
 80018ac:	200012a0 	.word	0x200012a0
 80018b0:	20001288 	.word	0x20001288
 80018b4:	20001280 	.word	0x20001280
 80018b8:	20001278 	.word	0x20001278
 80018bc:	20000000 	.word	0x20000000
 80018c0:	0800b990 	.word	0x0800b990
 80018c4:	080015b9 	.word	0x080015b9

080018c8 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 80018c8:	b508      	push	{r3, lr}
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */
  
  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80018ca:	4805      	ldr	r0, [pc, #20]	@ (80018e0 <MX_CRC_Init+0x18>)
 80018cc:	4b05      	ldr	r3, [pc, #20]	@ (80018e4 <MX_CRC_Init+0x1c>)
 80018ce:	6003      	str	r3, [r0, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80018d0:	f002 fe46 	bl	8004560 <HAL_CRC_Init>
 80018d4:	b900      	cbnz	r0, 80018d8 <MX_CRC_Init+0x10>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80018d6:	bd08      	pop	{r3, pc}
    Error_Handler();
 80018d8:	f001 f948 	bl	8002b6c <Error_Handler>
}
 80018dc:	e7fb      	b.n	80018d6 <MX_CRC_Init+0xe>
 80018de:	bf00      	nop
 80018e0:	20002678 	.word	0x20002678
 80018e4:	40023000 	.word	0x40023000

080018e8 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{

  if(crcHandle->Instance==CRC)
 80018e8:	6802      	ldr	r2, [r0, #0]
 80018ea:	4b09      	ldr	r3, [pc, #36]	@ (8001910 <HAL_CRC_MspInit+0x28>)
 80018ec:	429a      	cmp	r2, r3
 80018ee:	d000      	beq.n	80018f2 <HAL_CRC_MspInit+0xa>
 80018f0:	4770      	bx	lr
{
 80018f2:	b082      	sub	sp, #8
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80018f4:	2300      	movs	r3, #0
 80018f6:	9301      	str	r3, [sp, #4]
 80018f8:	4b06      	ldr	r3, [pc, #24]	@ (8001914 <HAL_CRC_MspInit+0x2c>)
 80018fa:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80018fc:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8001900:	631a      	str	r2, [r3, #48]	@ 0x30
 8001902:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001904:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001908:	9301      	str	r3, [sp, #4]
 800190a:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 800190c:	b002      	add	sp, #8
 800190e:	4770      	bx	lr
 8001910:	40023000 	.word	0x40023000
 8001914:	40023800 	.word	0x40023800

08001918 <dc_motor_set>:
 * @param dir the desired direction of the motor
 * @param duty_cycle a number between 0 and 255 not a percentage
 */
void dc_motor_set(dc_motor_t *motor, dc_motor_direction_t dir, uint8_t duty_cycle)
{
	if (motor == NULL || motor->timer == NULL)
 8001918:	2800      	cmp	r0, #0
 800191a:	f000 8138 	beq.w	8001b8e <dc_motor_set+0x276>
{
 800191e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001922:	460d      	mov	r5, r1
 8001924:	4616      	mov	r6, r2
 8001926:	4604      	mov	r4, r0
	if (motor == NULL || motor->timer == NULL)
 8001928:	6807      	ldr	r7, [r0, #0]
 800192a:	2f00      	cmp	r7, #0
 800192c:	d052      	beq.n	80019d4 <dc_motor_set+0xbc>
	if (duty_cycle < 0 || duty_cycle > 255)
	{
		return;
	}
	// Map duty cycle (0-255) to timer compare value
	uint32_t compare_value = (uint32_t)((duty_cycle / 255.0) * __HAL_TIM_GET_AUTORELOAD((TIM_HandleTypeDef *)motor->timer));
 800192e:	4610      	mov	r0, r2
 8001930:	f7fe fde0 	bl	80004f4 <__aeabi_i2d>
 8001934:	a396      	add	r3, pc, #600	@ (adr r3, 8001b90 <dc_motor_set+0x278>)
 8001936:	e9d3 2300 	ldrd	r2, r3, [r3]
 800193a:	f7fe ff6f 	bl	800081c <__aeabi_ddiv>
 800193e:	4680      	mov	r8, r0
 8001940:	4689      	mov	r9, r1
 8001942:	683f      	ldr	r7, [r7, #0]
 8001944:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8001946:	f7fe fdc5 	bl	80004d4 <__aeabi_ui2d>
 800194a:	4642      	mov	r2, r8
 800194c:	464b      	mov	r3, r9
 800194e:	f7fe fe3b 	bl	80005c8 <__aeabi_dmul>
 8001952:	f7ff f84b 	bl	80009ec <__aeabi_d2uiz>
	
	switch (dir)
 8001956:	b1fd      	cbz	r5, 8001998 <dc_motor_set+0x80>
 8001958:	2d01      	cmp	r5, #1
 800195a:	d079      	beq.n	8001a50 <dc_motor_set+0x138>
		}
		__HAL_TIM_SET_COMPARE((TIM_HandleTypeDef *)motor->timer, motor->timer_channel_output_1, 0);
		__HAL_TIM_SET_COMPARE((TIM_HandleTypeDef *)motor->timer, motor->timer_channel_output_2, compare_value);
		break;
	default:
		__HAL_TIM_SET_COMPARE((TIM_HandleTypeDef *)motor->timer, motor->timer_channel_output_1, 0);
 800195c:	6863      	ldr	r3, [r4, #4]
 800195e:	2b00      	cmp	r3, #0
 8001960:	f040 80cf 	bne.w	8001b02 <dc_motor_set+0x1ea>
 8001964:	637b      	str	r3, [r7, #52]	@ 0x34
		__HAL_TIM_SET_COMPARE((TIM_HandleTypeDef *)motor->timer, motor->timer_channel_output_2, 0);
 8001966:	68a3      	ldr	r3, [r4, #8]
 8001968:	2b00      	cmp	r3, #0
 800196a:	f040 80d7 	bne.w	8001b1c <dc_motor_set+0x204>
 800196e:	6823      	ldr	r3, [r4, #0]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	2200      	movs	r2, #0
 8001974:	635a      	str	r2, [r3, #52]	@ 0x34
		__HAL_TIM_SET_COMPARE((TIM_HandleTypeDef *)motor->timer, motor->timer_channel_output_3, 0);
 8001976:	68e3      	ldr	r3, [r4, #12]
 8001978:	2b00      	cmp	r3, #0
 800197a:	f040 80e2 	bne.w	8001b42 <dc_motor_set+0x22a>
 800197e:	6823      	ldr	r3, [r4, #0]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	2200      	movs	r2, #0
 8001984:	635a      	str	r2, [r3, #52]	@ 0x34
		__HAL_TIM_SET_COMPARE((TIM_HandleTypeDef *)motor->timer, motor->timer_channel_output_4, 0);
 8001986:	6923      	ldr	r3, [r4, #16]
 8001988:	2b00      	cmp	r3, #0
 800198a:	f040 80ed 	bne.w	8001b68 <dc_motor_set+0x250>
 800198e:	6823      	ldr	r3, [r4, #0]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	2200      	movs	r2, #0
 8001994:	635a      	str	r2, [r3, #52]	@ 0x34
 8001996:	e01b      	b.n	80019d0 <dc_motor_set+0xb8>
		if (motor->timer_channel_output_3 != 0 && motor->timer_channel_output_4 != 0)
 8001998:	68e3      	ldr	r3, [r4, #12]
 800199a:	b16b      	cbz	r3, 80019b8 <dc_motor_set+0xa0>
 800199c:	6922      	ldr	r2, [r4, #16]
 800199e:	b15a      	cbz	r2, 80019b8 <dc_motor_set+0xa0>
			__HAL_TIM_SET_COMPARE((TIM_HandleTypeDef *)motor->timer, motor->timer_channel_output_3, 0);
 80019a0:	2b04      	cmp	r3, #4
 80019a2:	d019      	beq.n	80019d8 <dc_motor_set+0xc0>
 80019a4:	2b08      	cmp	r3, #8
 80019a6:	d01a      	beq.n	80019de <dc_motor_set+0xc6>
 80019a8:	2300      	movs	r3, #0
 80019aa:	643b      	str	r3, [r7, #64]	@ 0x40
			__HAL_TIM_SET_COMPARE((TIM_HandleTypeDef *)motor->timer, motor->timer_channel_output_4, __HAL_TIM_GET_AUTORELOAD((TIM_HandleTypeDef *)motor->timer));
 80019ac:	6923      	ldr	r3, [r4, #16]
 80019ae:	b9cb      	cbnz	r3, 80019e4 <dc_motor_set+0xcc>
 80019b0:	6823      	ldr	r3, [r4, #0]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80019b6:	635a      	str	r2, [r3, #52]	@ 0x34
		__HAL_TIM_SET_COMPARE((TIM_HandleTypeDef *)motor->timer, motor->timer_channel_output_2, 0);
 80019b8:	68a3      	ldr	r3, [r4, #8]
 80019ba:	bb33      	cbnz	r3, 8001a0a <dc_motor_set+0xf2>
 80019bc:	6823      	ldr	r3, [r4, #0]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	2200      	movs	r2, #0
 80019c2:	635a      	str	r2, [r3, #52]	@ 0x34
		__HAL_TIM_SET_COMPARE((TIM_HandleTypeDef *)motor->timer, motor->timer_channel_output_1, compare_value);
 80019c4:	6863      	ldr	r3, [r4, #4]
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d132      	bne.n	8001a30 <dc_motor_set+0x118>
 80019ca:	6823      	ldr	r3, [r4, #0]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	6358      	str	r0, [r3, #52]	@ 0x34
		/**
		 * @todo throw an error
		 */
		break;
	}
	motor->current_duty_cycle = duty_cycle;
 80019d0:	7566      	strb	r6, [r4, #21]
	motor->current_direction = dir;
 80019d2:	7525      	strb	r5, [r4, #20]
}
 80019d4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			__HAL_TIM_SET_COMPARE((TIM_HandleTypeDef *)motor->timer, motor->timer_channel_output_3, 0);
 80019d8:	2300      	movs	r3, #0
 80019da:	63bb      	str	r3, [r7, #56]	@ 0x38
 80019dc:	e7e6      	b.n	80019ac <dc_motor_set+0x94>
 80019de:	2300      	movs	r3, #0
 80019e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80019e2:	e7e3      	b.n	80019ac <dc_motor_set+0x94>
			__HAL_TIM_SET_COMPARE((TIM_HandleTypeDef *)motor->timer, motor->timer_channel_output_4, __HAL_TIM_GET_AUTORELOAD((TIM_HandleTypeDef *)motor->timer));
 80019e4:	2b04      	cmp	r3, #4
 80019e6:	d006      	beq.n	80019f6 <dc_motor_set+0xde>
 80019e8:	2b08      	cmp	r3, #8
 80019ea:	d009      	beq.n	8001a00 <dc_motor_set+0xe8>
 80019ec:	6823      	ldr	r3, [r4, #0]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80019f2:	641a      	str	r2, [r3, #64]	@ 0x40
 80019f4:	e7e0      	b.n	80019b8 <dc_motor_set+0xa0>
 80019f6:	6823      	ldr	r3, [r4, #0]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80019fc:	639a      	str	r2, [r3, #56]	@ 0x38
 80019fe:	e7db      	b.n	80019b8 <dc_motor_set+0xa0>
 8001a00:	6823      	ldr	r3, [r4, #0]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001a06:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001a08:	e7d6      	b.n	80019b8 <dc_motor_set+0xa0>
		__HAL_TIM_SET_COMPARE((TIM_HandleTypeDef *)motor->timer, motor->timer_channel_output_2, 0);
 8001a0a:	2b04      	cmp	r3, #4
 8001a0c:	d006      	beq.n	8001a1c <dc_motor_set+0x104>
 8001a0e:	2b08      	cmp	r3, #8
 8001a10:	d009      	beq.n	8001a26 <dc_motor_set+0x10e>
 8001a12:	6823      	ldr	r3, [r4, #0]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	2200      	movs	r2, #0
 8001a18:	641a      	str	r2, [r3, #64]	@ 0x40
 8001a1a:	e7d3      	b.n	80019c4 <dc_motor_set+0xac>
 8001a1c:	6823      	ldr	r3, [r4, #0]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	2200      	movs	r2, #0
 8001a22:	639a      	str	r2, [r3, #56]	@ 0x38
 8001a24:	e7ce      	b.n	80019c4 <dc_motor_set+0xac>
 8001a26:	6823      	ldr	r3, [r4, #0]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001a2e:	e7c9      	b.n	80019c4 <dc_motor_set+0xac>
		__HAL_TIM_SET_COMPARE((TIM_HandleTypeDef *)motor->timer, motor->timer_channel_output_1, compare_value);
 8001a30:	2b04      	cmp	r3, #4
 8001a32:	d005      	beq.n	8001a40 <dc_motor_set+0x128>
 8001a34:	2b08      	cmp	r3, #8
 8001a36:	d007      	beq.n	8001a48 <dc_motor_set+0x130>
 8001a38:	6823      	ldr	r3, [r4, #0]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	6418      	str	r0, [r3, #64]	@ 0x40
 8001a3e:	e7c7      	b.n	80019d0 <dc_motor_set+0xb8>
 8001a40:	6823      	ldr	r3, [r4, #0]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	6398      	str	r0, [r3, #56]	@ 0x38
 8001a46:	e7c3      	b.n	80019d0 <dc_motor_set+0xb8>
 8001a48:	6823      	ldr	r3, [r4, #0]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	63d8      	str	r0, [r3, #60]	@ 0x3c
 8001a4e:	e7bf      	b.n	80019d0 <dc_motor_set+0xb8>
		if (motor->timer_channel_output_3 != 0 && motor->timer_channel_output_4 != 0)
 8001a50:	68e3      	ldr	r3, [r4, #12]
 8001a52:	b16b      	cbz	r3, 8001a70 <dc_motor_set+0x158>
 8001a54:	6923      	ldr	r3, [r4, #16]
 8001a56:	b15b      	cbz	r3, 8001a70 <dc_motor_set+0x158>
			__HAL_TIM_SET_COMPARE((TIM_HandleTypeDef *)motor->timer, motor->timer_channel_output_4, 0);
 8001a58:	2b04      	cmp	r3, #4
 8001a5a:	d016      	beq.n	8001a8a <dc_motor_set+0x172>
 8001a5c:	2b08      	cmp	r3, #8
 8001a5e:	d017      	beq.n	8001a90 <dc_motor_set+0x178>
 8001a60:	2300      	movs	r3, #0
 8001a62:	643b      	str	r3, [r7, #64]	@ 0x40
			__HAL_TIM_SET_COMPARE((TIM_HandleTypeDef *)motor->timer, motor->timer_channel_output_3, __HAL_TIM_GET_AUTORELOAD((TIM_HandleTypeDef *)motor->timer));
 8001a64:	68e3      	ldr	r3, [r4, #12]
 8001a66:	b9b3      	cbnz	r3, 8001a96 <dc_motor_set+0x17e>
 8001a68:	6823      	ldr	r3, [r4, #0]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001a6e:	635a      	str	r2, [r3, #52]	@ 0x34
		__HAL_TIM_SET_COMPARE((TIM_HandleTypeDef *)motor->timer, motor->timer_channel_output_1, 0);
 8001a70:	6863      	ldr	r3, [r4, #4]
 8001a72:	bb1b      	cbnz	r3, 8001abc <dc_motor_set+0x1a4>
 8001a74:	6823      	ldr	r3, [r4, #0]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	2200      	movs	r2, #0
 8001a7a:	635a      	str	r2, [r3, #52]	@ 0x34
		__HAL_TIM_SET_COMPARE((TIM_HandleTypeDef *)motor->timer, motor->timer_channel_output_2, compare_value);
 8001a7c:	68a3      	ldr	r3, [r4, #8]
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d12f      	bne.n	8001ae2 <dc_motor_set+0x1ca>
 8001a82:	6823      	ldr	r3, [r4, #0]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	6358      	str	r0, [r3, #52]	@ 0x34
 8001a88:	e7a2      	b.n	80019d0 <dc_motor_set+0xb8>
			__HAL_TIM_SET_COMPARE((TIM_HandleTypeDef *)motor->timer, motor->timer_channel_output_4, 0);
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001a8e:	e7e9      	b.n	8001a64 <dc_motor_set+0x14c>
 8001a90:	2300      	movs	r3, #0
 8001a92:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001a94:	e7e6      	b.n	8001a64 <dc_motor_set+0x14c>
			__HAL_TIM_SET_COMPARE((TIM_HandleTypeDef *)motor->timer, motor->timer_channel_output_3, __HAL_TIM_GET_AUTORELOAD((TIM_HandleTypeDef *)motor->timer));
 8001a96:	2b04      	cmp	r3, #4
 8001a98:	d006      	beq.n	8001aa8 <dc_motor_set+0x190>
 8001a9a:	2b08      	cmp	r3, #8
 8001a9c:	d009      	beq.n	8001ab2 <dc_motor_set+0x19a>
 8001a9e:	6823      	ldr	r3, [r4, #0]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001aa4:	641a      	str	r2, [r3, #64]	@ 0x40
 8001aa6:	e7e3      	b.n	8001a70 <dc_motor_set+0x158>
 8001aa8:	6823      	ldr	r3, [r4, #0]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001aae:	639a      	str	r2, [r3, #56]	@ 0x38
 8001ab0:	e7de      	b.n	8001a70 <dc_motor_set+0x158>
 8001ab2:	6823      	ldr	r3, [r4, #0]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001ab8:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001aba:	e7d9      	b.n	8001a70 <dc_motor_set+0x158>
		__HAL_TIM_SET_COMPARE((TIM_HandleTypeDef *)motor->timer, motor->timer_channel_output_1, 0);
 8001abc:	2b04      	cmp	r3, #4
 8001abe:	d006      	beq.n	8001ace <dc_motor_set+0x1b6>
 8001ac0:	2b08      	cmp	r3, #8
 8001ac2:	d009      	beq.n	8001ad8 <dc_motor_set+0x1c0>
 8001ac4:	6823      	ldr	r3, [r4, #0]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	2200      	movs	r2, #0
 8001aca:	641a      	str	r2, [r3, #64]	@ 0x40
 8001acc:	e7d6      	b.n	8001a7c <dc_motor_set+0x164>
 8001ace:	6823      	ldr	r3, [r4, #0]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	639a      	str	r2, [r3, #56]	@ 0x38
 8001ad6:	e7d1      	b.n	8001a7c <dc_motor_set+0x164>
 8001ad8:	6823      	ldr	r3, [r4, #0]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	2200      	movs	r2, #0
 8001ade:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001ae0:	e7cc      	b.n	8001a7c <dc_motor_set+0x164>
		__HAL_TIM_SET_COMPARE((TIM_HandleTypeDef *)motor->timer, motor->timer_channel_output_2, compare_value);
 8001ae2:	2b04      	cmp	r3, #4
 8001ae4:	d005      	beq.n	8001af2 <dc_motor_set+0x1da>
 8001ae6:	2b08      	cmp	r3, #8
 8001ae8:	d007      	beq.n	8001afa <dc_motor_set+0x1e2>
 8001aea:	6823      	ldr	r3, [r4, #0]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	6418      	str	r0, [r3, #64]	@ 0x40
 8001af0:	e76e      	b.n	80019d0 <dc_motor_set+0xb8>
 8001af2:	6823      	ldr	r3, [r4, #0]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	6398      	str	r0, [r3, #56]	@ 0x38
 8001af8:	e76a      	b.n	80019d0 <dc_motor_set+0xb8>
 8001afa:	6823      	ldr	r3, [r4, #0]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	63d8      	str	r0, [r3, #60]	@ 0x3c
 8001b00:	e766      	b.n	80019d0 <dc_motor_set+0xb8>
		__HAL_TIM_SET_COMPARE((TIM_HandleTypeDef *)motor->timer, motor->timer_channel_output_1, 0);
 8001b02:	2b04      	cmp	r3, #4
 8001b04:	d004      	beq.n	8001b10 <dc_motor_set+0x1f8>
 8001b06:	2b08      	cmp	r3, #8
 8001b08:	d005      	beq.n	8001b16 <dc_motor_set+0x1fe>
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	643b      	str	r3, [r7, #64]	@ 0x40
 8001b0e:	e72a      	b.n	8001966 <dc_motor_set+0x4e>
 8001b10:	2300      	movs	r3, #0
 8001b12:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001b14:	e727      	b.n	8001966 <dc_motor_set+0x4e>
 8001b16:	2300      	movs	r3, #0
 8001b18:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001b1a:	e724      	b.n	8001966 <dc_motor_set+0x4e>
		__HAL_TIM_SET_COMPARE((TIM_HandleTypeDef *)motor->timer, motor->timer_channel_output_2, 0);
 8001b1c:	2b04      	cmp	r3, #4
 8001b1e:	d006      	beq.n	8001b2e <dc_motor_set+0x216>
 8001b20:	2b08      	cmp	r3, #8
 8001b22:	d009      	beq.n	8001b38 <dc_motor_set+0x220>
 8001b24:	6823      	ldr	r3, [r4, #0]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	2200      	movs	r2, #0
 8001b2a:	641a      	str	r2, [r3, #64]	@ 0x40
 8001b2c:	e723      	b.n	8001976 <dc_motor_set+0x5e>
 8001b2e:	6823      	ldr	r3, [r4, #0]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	2200      	movs	r2, #0
 8001b34:	639a      	str	r2, [r3, #56]	@ 0x38
 8001b36:	e71e      	b.n	8001976 <dc_motor_set+0x5e>
 8001b38:	6823      	ldr	r3, [r4, #0]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001b40:	e719      	b.n	8001976 <dc_motor_set+0x5e>
		__HAL_TIM_SET_COMPARE((TIM_HandleTypeDef *)motor->timer, motor->timer_channel_output_3, 0);
 8001b42:	2b04      	cmp	r3, #4
 8001b44:	d006      	beq.n	8001b54 <dc_motor_set+0x23c>
 8001b46:	2b08      	cmp	r3, #8
 8001b48:	d009      	beq.n	8001b5e <dc_motor_set+0x246>
 8001b4a:	6823      	ldr	r3, [r4, #0]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	2200      	movs	r2, #0
 8001b50:	641a      	str	r2, [r3, #64]	@ 0x40
 8001b52:	e718      	b.n	8001986 <dc_motor_set+0x6e>
 8001b54:	6823      	ldr	r3, [r4, #0]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	2200      	movs	r2, #0
 8001b5a:	639a      	str	r2, [r3, #56]	@ 0x38
 8001b5c:	e713      	b.n	8001986 <dc_motor_set+0x6e>
 8001b5e:	6823      	ldr	r3, [r4, #0]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	2200      	movs	r2, #0
 8001b64:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001b66:	e70e      	b.n	8001986 <dc_motor_set+0x6e>
		__HAL_TIM_SET_COMPARE((TIM_HandleTypeDef *)motor->timer, motor->timer_channel_output_4, 0);
 8001b68:	2b04      	cmp	r3, #4
 8001b6a:	d006      	beq.n	8001b7a <dc_motor_set+0x262>
 8001b6c:	2b08      	cmp	r3, #8
 8001b6e:	d009      	beq.n	8001b84 <dc_motor_set+0x26c>
 8001b70:	6823      	ldr	r3, [r4, #0]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	2200      	movs	r2, #0
 8001b76:	641a      	str	r2, [r3, #64]	@ 0x40
 8001b78:	e72a      	b.n	80019d0 <dc_motor_set+0xb8>
 8001b7a:	6823      	ldr	r3, [r4, #0]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	2200      	movs	r2, #0
 8001b80:	639a      	str	r2, [r3, #56]	@ 0x38
 8001b82:	e725      	b.n	80019d0 <dc_motor_set+0xb8>
 8001b84:	6823      	ldr	r3, [r4, #0]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	2200      	movs	r2, #0
 8001b8a:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001b8c:	e720      	b.n	80019d0 <dc_motor_set+0xb8>
 8001b8e:	4770      	bx	lr
 8001b90:	00000000 	.word	0x00000000
 8001b94:	406fe000 	.word	0x406fe000

08001b98 <dc_motor_disable>:
/**
 * @brief disables the motor.
 */
void dc_motor_disable(dc_motor_t *motor)
{
	if (motor == NULL || motor->timer == NULL)
 8001b98:	4603      	mov	r3, r0
 8001b9a:	b178      	cbz	r0, 8001bbc <dc_motor_disable+0x24>
 8001b9c:	6802      	ldr	r2, [r0, #0]
 8001b9e:	b16a      	cbz	r2, 8001bbc <dc_motor_disable+0x24>
		 * @todo throw an error
		 */
	}

	// Set duty cycle to 0 for both channels
	__HAL_TIM_SET_COMPARE((TIM_HandleTypeDef *)motor->timer, motor->timer_channel_output_1, 0);
 8001ba0:	6841      	ldr	r1, [r0, #4]
 8001ba2:	b961      	cbnz	r1, 8001bbe <dc_motor_disable+0x26>
 8001ba4:	6812      	ldr	r2, [r2, #0]
 8001ba6:	6351      	str	r1, [r2, #52]	@ 0x34
	__HAL_TIM_SET_COMPARE((TIM_HandleTypeDef *)motor->timer, motor->timer_channel_output_2, 0);
 8001ba8:	689a      	ldr	r2, [r3, #8]
 8001baa:	b9c2      	cbnz	r2, 8001bde <dc_motor_disable+0x46>
 8001bac:	681a      	ldr	r2, [r3, #0]
 8001bae:	6812      	ldr	r2, [r2, #0]
 8001bb0:	2100      	movs	r1, #0
 8001bb2:	6351      	str	r1, [r2, #52]	@ 0x34
	motor->current_duty_cycle = 0;
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	755a      	strb	r2, [r3, #21]
	motor->status = MOTOR_STATE_DISABLED;
 8001bb8:	2202      	movs	r2, #2
 8001bba:	759a      	strb	r2, [r3, #22]
}
 8001bbc:	4770      	bx	lr
	__HAL_TIM_SET_COMPARE((TIM_HandleTypeDef *)motor->timer, motor->timer_channel_output_1, 0);
 8001bbe:	2904      	cmp	r1, #4
 8001bc0:	d005      	beq.n	8001bce <dc_motor_disable+0x36>
 8001bc2:	2908      	cmp	r1, #8
 8001bc4:	d007      	beq.n	8001bd6 <dc_motor_disable+0x3e>
 8001bc6:	6812      	ldr	r2, [r2, #0]
 8001bc8:	2100      	movs	r1, #0
 8001bca:	6411      	str	r1, [r2, #64]	@ 0x40
 8001bcc:	e7ec      	b.n	8001ba8 <dc_motor_disable+0x10>
 8001bce:	6812      	ldr	r2, [r2, #0]
 8001bd0:	2100      	movs	r1, #0
 8001bd2:	6391      	str	r1, [r2, #56]	@ 0x38
 8001bd4:	e7e8      	b.n	8001ba8 <dc_motor_disable+0x10>
 8001bd6:	6812      	ldr	r2, [r2, #0]
 8001bd8:	2100      	movs	r1, #0
 8001bda:	63d1      	str	r1, [r2, #60]	@ 0x3c
 8001bdc:	e7e4      	b.n	8001ba8 <dc_motor_disable+0x10>
	__HAL_TIM_SET_COMPARE((TIM_HandleTypeDef *)motor->timer, motor->timer_channel_output_2, 0);
 8001bde:	2a04      	cmp	r2, #4
 8001be0:	d006      	beq.n	8001bf0 <dc_motor_disable+0x58>
 8001be2:	2a08      	cmp	r2, #8
 8001be4:	d009      	beq.n	8001bfa <dc_motor_disable+0x62>
 8001be6:	681a      	ldr	r2, [r3, #0]
 8001be8:	6812      	ldr	r2, [r2, #0]
 8001bea:	2100      	movs	r1, #0
 8001bec:	6411      	str	r1, [r2, #64]	@ 0x40
 8001bee:	e7e1      	b.n	8001bb4 <dc_motor_disable+0x1c>
 8001bf0:	681a      	ldr	r2, [r3, #0]
 8001bf2:	6812      	ldr	r2, [r2, #0]
 8001bf4:	2100      	movs	r1, #0
 8001bf6:	6391      	str	r1, [r2, #56]	@ 0x38
 8001bf8:	e7dc      	b.n	8001bb4 <dc_motor_disable+0x1c>
 8001bfa:	681a      	ldr	r2, [r3, #0]
 8001bfc:	6812      	ldr	r2, [r2, #0]
 8001bfe:	2100      	movs	r1, #0
 8001c00:	63d1      	str	r1, [r2, #60]	@ 0x3c
 8001c02:	e7d7      	b.n	8001bb4 <dc_motor_disable+0x1c>

08001c04 <dc_motor_set_timer_freq>:
{
 8001c04:	b538      	push	{r3, r4, r5, lr}
 8001c06:	4605      	mov	r5, r0
	if (frequency == 0)
 8001c08:	b199      	cbz	r1, 8001c32 <dc_motor_set_timer_freq+0x2e>
 8001c0a:	460c      	mov	r4, r1
	if (frequency > DC_MOTOR_MAX_FREQUENCY)
 8001c0c:	f644 6320 	movw	r3, #20000	@ 0x4e20
 8001c10:	4299      	cmp	r1, r3
 8001c12:	d900      	bls.n	8001c16 <dc_motor_set_timer_freq+0x12>
		frequency = DC_MOTOR_MAX_FREQUENCY;
 8001c14:	461c      	mov	r4, r3
	uint32_t timer_clock = HAL_RCC_GetSysClockFreq(); // Get the timer clock frequency
 8001c16:	f004 f8f7 	bl	8005e08 <HAL_RCC_GetSysClockFreq>
	for (prescaler = 0; prescaler <= 0xFFFF; prescaler++)
 8001c1a:	2200      	movs	r2, #0
		auto_reload = (timer_clock / ((prescaler + 1) * frequency)) - 1;
 8001c1c:	fb02 4304 	mla	r3, r2, r4, r4
 8001c20:	fbb0 f3f3 	udiv	r3, r0, r3
 8001c24:	3b01      	subs	r3, #1
		if (auto_reload <= 0xFFFF)
 8001c26:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001c2a:	d305      	bcc.n	8001c38 <dc_motor_set_timer_freq+0x34>
	for (prescaler = 0; prescaler <= 0xFFFF; prescaler++)
 8001c2c:	3201      	adds	r2, #1
 8001c2e:	b292      	uxth	r2, r2
		auto_reload = (timer_clock / ((prescaler + 1) * frequency)) - 1;
 8001c30:	e7f4      	b.n	8001c1c <dc_motor_set_timer_freq+0x18>
		dc_motor_disable(motor);
 8001c32:	f7ff ffb1 	bl	8001b98 <dc_motor_disable>
		return;
 8001c36:	e00c      	b.n	8001c52 <dc_motor_set_timer_freq+0x4e>
	__HAL_TIM_SET_PRESCALER((TIM_HandleTypeDef *)motor->timer, prescaler);
 8001c38:	6829      	ldr	r1, [r5, #0]
 8001c3a:	6809      	ldr	r1, [r1, #0]
 8001c3c:	628a      	str	r2, [r1, #40]	@ 0x28
	__HAL_TIM_SET_AUTORELOAD((TIM_HandleTypeDef *)motor->timer, auto_reload);
 8001c3e:	682a      	ldr	r2, [r5, #0]
 8001c40:	6812      	ldr	r2, [r2, #0]
 8001c42:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8001c44:	682a      	ldr	r2, [r5, #0]
 8001c46:	60d3      	str	r3, [r2, #12]
	dc_motor_set(motor, motor->current_direction, motor->current_duty_cycle);
 8001c48:	7d6a      	ldrb	r2, [r5, #21]
 8001c4a:	7d29      	ldrb	r1, [r5, #20]
 8001c4c:	4628      	mov	r0, r5
 8001c4e:	f7ff fe63 	bl	8001918 <dc_motor_set>
}
 8001c52:	bd38      	pop	{r3, r4, r5, pc}

08001c54 <dc_motor_init_simple_Hbridge>:
    if (motor == NULL || timer == NULL)
 8001c54:	2800      	cmp	r0, #0
 8001c56:	f000 8091 	beq.w	8001d7c <dc_motor_init_simple_Hbridge+0x128>
{
 8001c5a:	b510      	push	{r4, lr}
 8001c5c:	4604      	mov	r4, r0
    if (motor == NULL || timer == NULL)
 8001c5e:	2900      	cmp	r1, #0
 8001c60:	d03f      	beq.n	8001ce2 <dc_motor_init_simple_Hbridge+0x8e>
    motor->timer = timer;
 8001c62:	6001      	str	r1, [r0, #0]
    motor->timer_channel_output_1 = timer_channel_output_1;
 8001c64:	6042      	str	r2, [r0, #4]
    motor->timer_channel_output_2 = timer_channel_output_2;
 8001c66:	6083      	str	r3, [r0, #8]
	motor->timer_channel_output_3 = timer_channel_output_3;
 8001c68:	9b02      	ldr	r3, [sp, #8]
 8001c6a:	60c3      	str	r3, [r0, #12]
    motor->timer_channel_output_4 = timer_channel_output_4;
 8001c6c:	9b03      	ldr	r3, [sp, #12]
 8001c6e:	6103      	str	r3, [r0, #16]
	motor->current_direction = MOTOR_DIRECTION_FORWARD;
 8001c70:	2300      	movs	r3, #0
 8001c72:	7503      	strb	r3, [r0, #20]
	motor->status = MOTOR_STATE_NORMAL;
 8001c74:	7583      	strb	r3, [r0, #22]
	HAL_TIM_Base_Start((TIM_HandleTypeDef *)motor->timer);
 8001c76:	4608      	mov	r0, r1
 8001c78:	f004 faba 	bl	80061f0 <HAL_TIM_Base_Start>
	dc_motor_set_timer_freq(motor, frequency);
 8001c7c:	f8bd 1010 	ldrh.w	r1, [sp, #16]
 8001c80:	4620      	mov	r0, r4
 8001c82:	f7ff ffbf 	bl	8001c04 <dc_motor_set_timer_freq>
	__HAL_TIM_SET_COMPARE((TIM_HandleTypeDef *)motor->timer, motor->timer_channel_output_1, 0);
 8001c86:	6863      	ldr	r3, [r4, #4]
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d12b      	bne.n	8001ce4 <dc_motor_init_simple_Hbridge+0x90>
 8001c8c:	6823      	ldr	r3, [r4, #0]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	2200      	movs	r2, #0
 8001c92:	635a      	str	r2, [r3, #52]	@ 0x34
	__HAL_TIM_SET_COMPARE((TIM_HandleTypeDef *)motor->timer, motor->timer_channel_output_2, 0);
 8001c94:	68a3      	ldr	r3, [r4, #8]
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d137      	bne.n	8001d0a <dc_motor_init_simple_Hbridge+0xb6>
 8001c9a:	6823      	ldr	r3, [r4, #0]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	635a      	str	r2, [r3, #52]	@ 0x34
	__HAL_TIM_SET_COMPARE((TIM_HandleTypeDef *)motor->timer, motor->timer_channel_output_3, 0);
 8001ca2:	68e3      	ldr	r3, [r4, #12]
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d143      	bne.n	8001d30 <dc_motor_init_simple_Hbridge+0xdc>
 8001ca8:	6823      	ldr	r3, [r4, #0]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	2200      	movs	r2, #0
 8001cae:	635a      	str	r2, [r3, #52]	@ 0x34
	__HAL_TIM_SET_COMPARE((TIM_HandleTypeDef *)motor->timer, motor->timer_channel_output_4, 0);
 8001cb0:	6923      	ldr	r3, [r4, #16]
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d14f      	bne.n	8001d56 <dc_motor_init_simple_Hbridge+0x102>
 8001cb6:	6823      	ldr	r3, [r4, #0]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	2200      	movs	r2, #0
 8001cbc:	635a      	str	r2, [r3, #52]	@ 0x34
	HAL_TIM_PWM_Start((TIM_HandleTypeDef *)motor->timer, motor->timer_channel_output_1);
 8001cbe:	6861      	ldr	r1, [r4, #4]
 8001cc0:	6820      	ldr	r0, [r4, #0]
 8001cc2:	f004 fea3 	bl	8006a0c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start((TIM_HandleTypeDef *)motor->timer, motor->timer_channel_output_2);
 8001cc6:	68a1      	ldr	r1, [r4, #8]
 8001cc8:	6820      	ldr	r0, [r4, #0]
 8001cca:	f004 fe9f 	bl	8006a0c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start((TIM_HandleTypeDef *)motor->timer, motor->timer_channel_output_3);
 8001cce:	68e1      	ldr	r1, [r4, #12]
 8001cd0:	6820      	ldr	r0, [r4, #0]
 8001cd2:	f004 fe9b 	bl	8006a0c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start((TIM_HandleTypeDef *)motor->timer, motor->timer_channel_output_4);
 8001cd6:	6921      	ldr	r1, [r4, #16]
 8001cd8:	6820      	ldr	r0, [r4, #0]
 8001cda:	f004 fe97 	bl	8006a0c <HAL_TIM_PWM_Start>
	motor->current_duty_cycle = 0;
 8001cde:	2300      	movs	r3, #0
 8001ce0:	7563      	strb	r3, [r4, #21]
}
 8001ce2:	bd10      	pop	{r4, pc}
	__HAL_TIM_SET_COMPARE((TIM_HandleTypeDef *)motor->timer, motor->timer_channel_output_1, 0);
 8001ce4:	2b04      	cmp	r3, #4
 8001ce6:	d006      	beq.n	8001cf6 <dc_motor_init_simple_Hbridge+0xa2>
 8001ce8:	2b08      	cmp	r3, #8
 8001cea:	d009      	beq.n	8001d00 <dc_motor_init_simple_Hbridge+0xac>
 8001cec:	6823      	ldr	r3, [r4, #0]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	641a      	str	r2, [r3, #64]	@ 0x40
 8001cf4:	e7ce      	b.n	8001c94 <dc_motor_init_simple_Hbridge+0x40>
 8001cf6:	6823      	ldr	r3, [r4, #0]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	639a      	str	r2, [r3, #56]	@ 0x38
 8001cfe:	e7c9      	b.n	8001c94 <dc_motor_init_simple_Hbridge+0x40>
 8001d00:	6823      	ldr	r3, [r4, #0]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	2200      	movs	r2, #0
 8001d06:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001d08:	e7c4      	b.n	8001c94 <dc_motor_init_simple_Hbridge+0x40>
	__HAL_TIM_SET_COMPARE((TIM_HandleTypeDef *)motor->timer, motor->timer_channel_output_2, 0);
 8001d0a:	2b04      	cmp	r3, #4
 8001d0c:	d006      	beq.n	8001d1c <dc_motor_init_simple_Hbridge+0xc8>
 8001d0e:	2b08      	cmp	r3, #8
 8001d10:	d009      	beq.n	8001d26 <dc_motor_init_simple_Hbridge+0xd2>
 8001d12:	6823      	ldr	r3, [r4, #0]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	2200      	movs	r2, #0
 8001d18:	641a      	str	r2, [r3, #64]	@ 0x40
 8001d1a:	e7c2      	b.n	8001ca2 <dc_motor_init_simple_Hbridge+0x4e>
 8001d1c:	6823      	ldr	r3, [r4, #0]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	2200      	movs	r2, #0
 8001d22:	639a      	str	r2, [r3, #56]	@ 0x38
 8001d24:	e7bd      	b.n	8001ca2 <dc_motor_init_simple_Hbridge+0x4e>
 8001d26:	6823      	ldr	r3, [r4, #0]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001d2e:	e7b8      	b.n	8001ca2 <dc_motor_init_simple_Hbridge+0x4e>
	__HAL_TIM_SET_COMPARE((TIM_HandleTypeDef *)motor->timer, motor->timer_channel_output_3, 0);
 8001d30:	2b04      	cmp	r3, #4
 8001d32:	d006      	beq.n	8001d42 <dc_motor_init_simple_Hbridge+0xee>
 8001d34:	2b08      	cmp	r3, #8
 8001d36:	d009      	beq.n	8001d4c <dc_motor_init_simple_Hbridge+0xf8>
 8001d38:	6823      	ldr	r3, [r4, #0]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	641a      	str	r2, [r3, #64]	@ 0x40
 8001d40:	e7b6      	b.n	8001cb0 <dc_motor_init_simple_Hbridge+0x5c>
 8001d42:	6823      	ldr	r3, [r4, #0]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	2200      	movs	r2, #0
 8001d48:	639a      	str	r2, [r3, #56]	@ 0x38
 8001d4a:	e7b1      	b.n	8001cb0 <dc_motor_init_simple_Hbridge+0x5c>
 8001d4c:	6823      	ldr	r3, [r4, #0]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	2200      	movs	r2, #0
 8001d52:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001d54:	e7ac      	b.n	8001cb0 <dc_motor_init_simple_Hbridge+0x5c>
	__HAL_TIM_SET_COMPARE((TIM_HandleTypeDef *)motor->timer, motor->timer_channel_output_4, 0);
 8001d56:	2b04      	cmp	r3, #4
 8001d58:	d006      	beq.n	8001d68 <dc_motor_init_simple_Hbridge+0x114>
 8001d5a:	2b08      	cmp	r3, #8
 8001d5c:	d009      	beq.n	8001d72 <dc_motor_init_simple_Hbridge+0x11e>
 8001d5e:	6823      	ldr	r3, [r4, #0]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	2200      	movs	r2, #0
 8001d64:	641a      	str	r2, [r3, #64]	@ 0x40
 8001d66:	e7aa      	b.n	8001cbe <dc_motor_init_simple_Hbridge+0x6a>
 8001d68:	6823      	ldr	r3, [r4, #0]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	639a      	str	r2, [r3, #56]	@ 0x38
 8001d70:	e7a5      	b.n	8001cbe <dc_motor_init_simple_Hbridge+0x6a>
 8001d72:	6823      	ldr	r3, [r4, #0]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	2200      	movs	r2, #0
 8001d78:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001d7a:	e7a0      	b.n	8001cbe <dc_motor_init_simple_Hbridge+0x6a>
 8001d7c:	4770      	bx	lr
	...

08001d80 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001d80:	b500      	push	{lr}
 8001d82:	b083      	sub	sp, #12

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001d84:	2200      	movs	r2, #0
 8001d86:	9201      	str	r2, [sp, #4]
 8001d88:	4b09      	ldr	r3, [pc, #36]	@ (8001db0 <MX_DMA_Init+0x30>)
 8001d8a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001d8c:	f441 0180 	orr.w	r1, r1, #4194304	@ 0x400000
 8001d90:	6319      	str	r1, [r3, #48]	@ 0x30
 8001d92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d94:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001d98:	9301      	str	r3, [sp, #4]
 8001d9a:	9b01      	ldr	r3, [sp, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 8001d9c:	2105      	movs	r1, #5
 8001d9e:	2038      	movs	r0, #56	@ 0x38
 8001da0:	f002 fbca 	bl	8004538 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001da4:	2038      	movs	r0, #56	@ 0x38
 8001da6:	f002 fbd7 	bl	8004558 <HAL_NVIC_EnableIRQ>

}
 8001daa:	b003      	add	sp, #12
 8001dac:	f85d fb04 	ldr.w	pc, [sp], #4
 8001db0:	40023800 	.word	0x40023800

08001db4 <electronic_throttle_update>:
    }
    etb->target_position = position;
}

void electronic_throttle_update(void *arg)
{
 8001db4:	b530      	push	{r4, r5, lr}
 8001db6:	ed2d 8b02 	vpush	{d8}
 8001dba:	b083      	sub	sp, #12
    
    electronic_throttle_t *etb = (electronic_throttle_t *)arg;
    if (etb == NULL || etb->pid == NULL || etb->sensor == NULL || etb->motor == NULL)
 8001dbc:	2800      	cmp	r0, #0
 8001dbe:	d04a      	beq.n	8001e56 <electronic_throttle_update+0xa2>
 8001dc0:	4604      	mov	r4, r0
 8001dc2:	6883      	ldr	r3, [r0, #8]
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d046      	beq.n	8001e56 <electronic_throttle_update+0xa2>
 8001dc8:	68c0      	ldr	r0, [r0, #12]
 8001dca:	2800      	cmp	r0, #0
 8001dcc:	d043      	beq.n	8001e56 <electronic_throttle_update+0xa2>
 8001dce:	6863      	ldr	r3, [r4, #4]
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d040      	beq.n	8001e56 <electronic_throttle_update+0xa2>
    {
        log_error("Electronic throttle not initialized");
        return;
    }
    percent_t position = sensor_tps_get(etb->sensor);
 8001dd4:	f001 fdaa 	bl	800392c <sensor_tps_get>
 8001dd8:	eeb0 8a40 	vmov.f32	s16, s0
    etb->current_position = position;
 8001ddc:	ed84 0a05 	vstr	s0, [r4, #20]
    pid_set_setpoint(etb->pid, etb->target_position);
 8001de0:	ed94 0a04 	vldr	s0, [r4, #16]
 8001de4:	68a0      	ldr	r0, [r4, #8]
 8001de6:	f000 ff3e 	bl	8002c66 <pid_set_setpoint>
    percent_t motor_effort = pid_compute(etb->pid, get_time_us(), position);
 8001dea:	68a5      	ldr	r5, [r4, #8]
 8001dec:	f007 f84e 	bl	8008e8c <get_time_us>
 8001df0:	4601      	mov	r1, r0
 8001df2:	eeb0 0a48 	vmov.f32	s0, s16
 8001df6:	4628      	mov	r0, r5
 8001df8:	f000 ff38 	bl	8002c6c <pid_compute>
    dc_motor_direction_t dir = motor_effort > 0 ? MOTOR_DIRECTION_FORWARD : MOTOR_DIRECTION_REVERSE;
 8001dfc:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8001e00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e04:	bfd4      	ite	le
 8001e06:	2101      	movle	r1, #1
 8001e08:	2100      	movgt	r1, #0
    /* Limiting the end of travel duty cycle for protection */
    if (etb->is_duty_cycle_limiting_enabled)
 8001e0a:	f894 3020 	ldrb.w	r3, [r4, #32]
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d051      	beq.n	8001eb6 <electronic_throttle_update+0x102>
    {
        if (ABS(position - 100.0f) < ELECTRONIC_THROTTLE_NEAR_END_OF_TRAVEL_THRESHOLD)
 8001e12:	eddf 7a3c 	vldr	s15, [pc, #240]	@ 8001f04 <electronic_throttle_update+0x150>
 8001e16:	ee78 7a67 	vsub.f32	s15, s16, s15
 8001e1a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001e1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e22:	d41f      	bmi.n	8001e64 <electronic_throttle_update+0xb0>
 8001e24:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8001e28:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001e2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e30:	bf4c      	ite	mi
 8001e32:	2301      	movmi	r3, #1
 8001e34:	2300      	movpl	r3, #0
 8001e36:	b30b      	cbz	r3, 8001e7c <electronic_throttle_update+0xc8>
        {
            motor_effort = CLAMP(motor_effort, 0, etb->duty_cycle_limiting_upper);
 8001e38:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8001e3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e40:	d41a      	bmi.n	8001e78 <electronic_throttle_update+0xc4>
 8001e42:	edd4 7a07 	vldr	s15, [r4, #28]
 8001e46:	eef4 7ac0 	vcmpe.f32	s15, s0
 8001e4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e4e:	d515      	bpl.n	8001e7c <electronic_throttle_update+0xc8>
 8001e50:	eeb0 0a67 	vmov.f32	s0, s15
 8001e54:	e012      	b.n	8001e7c <electronic_throttle_update+0xc8>
        log_error("Electronic throttle not initialized");
 8001e56:	482c      	ldr	r0, [pc, #176]	@ (8001f08 <electronic_throttle_update+0x154>)
 8001e58:	f000 f8a0 	bl	8001f9c <log_error>
        {
            motor_effort = CLAMP(motor_effort, 0, etb->duty_cycle_limiting_lower);
        }
    }
    dc_motor_set(etb->motor, dir ,  (uint8_t)ABS(motor_effort));
}
 8001e5c:	b003      	add	sp, #12
 8001e5e:	ecbd 8b02 	vpop	{d8}
 8001e62:	bd30      	pop	{r4, r5, pc}
        if (ABS(position - 100.0f) < ELECTRONIC_THROTTLE_NEAR_END_OF_TRAVEL_THRESHOLD)
 8001e64:	eebe 7a00 	vmov.f32	s14, #224	@ 0xbf000000 -0.5
 8001e68:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001e6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e70:	bfcc      	ite	gt
 8001e72:	2301      	movgt	r3, #1
 8001e74:	2300      	movle	r3, #0
 8001e76:	e7de      	b.n	8001e36 <electronic_throttle_update+0x82>
            motor_effort = CLAMP(motor_effort, 0, etb->duty_cycle_limiting_upper);
 8001e78:	ed9f 0a24 	vldr	s0, [pc, #144]	@ 8001f0c <electronic_throttle_update+0x158>
        if (ABS(position - 0.0f) < ELECTRONIC_THROTTLE_NEAR_END_OF_TRAVEL_THRESHOLD)
 8001e7c:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8001e80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e84:	d426      	bmi.n	8001ed4 <electronic_throttle_update+0x120>
 8001e86:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8001e8a:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8001e8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e92:	bf4c      	ite	mi
 8001e94:	2301      	movmi	r3, #1
 8001e96:	2300      	movpl	r3, #0
 8001e98:	b16b      	cbz	r3, 8001eb6 <electronic_throttle_update+0x102>
            motor_effort = CLAMP(motor_effort, 0, etb->duty_cycle_limiting_lower);
 8001e9a:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8001e9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ea2:	d421      	bmi.n	8001ee8 <electronic_throttle_update+0x134>
 8001ea4:	edd4 7a06 	vldr	s15, [r4, #24]
 8001ea8:	eef4 7ac0 	vcmpe.f32	s15, s0
 8001eac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001eb0:	d501      	bpl.n	8001eb6 <electronic_throttle_update+0x102>
 8001eb2:	eeb0 0a67 	vmov.f32	s0, s15
    dc_motor_set(etb->motor, dir ,  (uint8_t)ABS(motor_effort));
 8001eb6:	6860      	ldr	r0, [r4, #4]
 8001eb8:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8001ebc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ec0:	d416      	bmi.n	8001ef0 <electronic_throttle_update+0x13c>
 8001ec2:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 8001ec6:	edcd 7a01 	vstr	s15, [sp, #4]
 8001eca:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8001ece:	f7ff fd23 	bl	8001918 <dc_motor_set>
 8001ed2:	e7c3      	b.n	8001e5c <electronic_throttle_update+0xa8>
        if (ABS(position - 0.0f) < ELECTRONIC_THROTTLE_NEAR_END_OF_TRAVEL_THRESHOLD)
 8001ed4:	eefe 7a00 	vmov.f32	s15, #224	@ 0xbf000000 -0.5
 8001ed8:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8001edc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ee0:	bfcc      	ite	gt
 8001ee2:	2301      	movgt	r3, #1
 8001ee4:	2300      	movle	r3, #0
 8001ee6:	e7d7      	b.n	8001e98 <electronic_throttle_update+0xe4>
    dc_motor_set(etb->motor, dir ,  (uint8_t)ABS(motor_effort));
 8001ee8:	6860      	ldr	r0, [r4, #4]
            motor_effort = CLAMP(motor_effort, 0, etb->duty_cycle_limiting_lower);
 8001eea:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 8001f0c <electronic_throttle_update+0x158>
 8001eee:	e7e8      	b.n	8001ec2 <electronic_throttle_update+0x10e>
    dc_motor_set(etb->motor, dir ,  (uint8_t)ABS(motor_effort));
 8001ef0:	eeb1 0a40 	vneg.f32	s0, s0
 8001ef4:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 8001ef8:	edcd 7a01 	vstr	s15, [sp, #4]
 8001efc:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8001f00:	e7e5      	b.n	8001ece <electronic_throttle_update+0x11a>
 8001f02:	bf00      	nop
 8001f04:	42c80000 	.word	0x42c80000
 8001f08:	0800b99c 	.word	0x0800b99c
 8001f0c:	00000000 	.word	0x00000000

08001f10 <electronic_throttle_init>:
{
 8001f10:	b510      	push	{r4, lr}
    if (etb == NULL || sensor == NULL || motor == NULL)
 8001f12:	b1f0      	cbz	r0, 8001f52 <electronic_throttle_init+0x42>
 8001f14:	4604      	mov	r4, r0
 8001f16:	b1e2      	cbz	r2, 8001f52 <electronic_throttle_init+0x42>
 8001f18:	b1db      	cbz	r3, 8001f52 <electronic_throttle_init+0x42>
    etb->pid = pid;
 8001f1a:	6081      	str	r1, [r0, #8]
    etb->sensor = sensor;
 8001f1c:	60c2      	str	r2, [r0, #12]
    etb->motor = motor;
 8001f1e:	6043      	str	r3, [r0, #4]
    etb->target_position = ELECTRONIC_THROTTLE_FAIL_SAFE_POSITION;
 8001f20:	2300      	movs	r3, #0
 8001f22:	6103      	str	r3, [r0, #16]
    etb->pid->limit_output_max = (float)255;
 8001f24:	4b0d      	ldr	r3, [pc, #52]	@ (8001f5c <electronic_throttle_init+0x4c>)
 8001f26:	614b      	str	r3, [r1, #20]
    etb->pid->limit_output_min = (float)-255;
 8001f28:	6883      	ldr	r3, [r0, #8]
 8001f2a:	4a0d      	ldr	r2, [pc, #52]	@ (8001f60 <electronic_throttle_init+0x50>)
 8001f2c:	611a      	str	r2, [r3, #16]
    etb->pid->limit_integrator_max = (float)250;
 8001f2e:	6883      	ldr	r3, [r0, #8]
 8001f30:	4a0c      	ldr	r2, [pc, #48]	@ (8001f64 <electronic_throttle_init+0x54>)
 8001f32:	61da      	str	r2, [r3, #28]
    etb->pid->limit_integrator_min = (float)-250;
 8001f34:	6883      	ldr	r3, [r0, #8]
 8001f36:	4a0c      	ldr	r2, [pc, #48]	@ (8001f68 <electronic_throttle_init+0x58>)
 8001f38:	619a      	str	r2, [r3, #24]
    osTimerId_t timer_id = osTimerNew(
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	4602      	mov	r2, r0
 8001f3e:	2101      	movs	r1, #1
 8001f40:	480a      	ldr	r0, [pc, #40]	@ (8001f6c <electronic_throttle_init+0x5c>)
 8001f42:	f7ff f825 	bl	8000f90 <osTimerNew>
    osTimerStart(timer_id, 1); // every 1 tick = every 1ms = 1000Hz
 8001f46:	2101      	movs	r1, #1
 8001f48:	f7ff f876 	bl	8001038 <osTimerStart>
    etb->state = ETB_STATE_NORMAL;
 8001f4c:	2301      	movs	r3, #1
 8001f4e:	7023      	strb	r3, [r4, #0]
}
 8001f50:	bd10      	pop	{r4, pc}
        log_error("Electronic throttle init failed");
 8001f52:	4807      	ldr	r0, [pc, #28]	@ (8001f70 <electronic_throttle_init+0x60>)
 8001f54:	f000 f822 	bl	8001f9c <log_error>
        return;
 8001f58:	e7fa      	b.n	8001f50 <electronic_throttle_init+0x40>
 8001f5a:	bf00      	nop
 8001f5c:	437f0000 	.word	0x437f0000
 8001f60:	c37f0000 	.word	0xc37f0000
 8001f64:	437a0000 	.word	0x437a0000
 8001f68:	c37a0000 	.word	0xc37a0000
 8001f6c:	08001db5 	.word	0x08001db5
 8001f70:	0800b9c0 	.word	0x0800b9c0

08001f74 <electronic_throttle_set>:
    if (!IS_IN_RANGE(position, (percent_t)0, (percent_t)100))
 8001f74:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8001f78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f7c:	db06      	blt.n	8001f8c <electronic_throttle_set+0x18>
 8001f7e:	eddf 7a06 	vldr	s15, [pc, #24]	@ 8001f98 <electronic_throttle_set+0x24>
 8001f82:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8001f86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f8a:	d901      	bls.n	8001f90 <electronic_throttle_set+0x1c>
        etb->target_position = ELECTRONIC_THROTTLE_FAIL_SAFE_POSITION;
 8001f8c:	2300      	movs	r3, #0
 8001f8e:	6103      	str	r3, [r0, #16]
    etb->target_position = position;
 8001f90:	ed80 0a04 	vstr	s0, [r0, #16]
}
 8001f94:	4770      	bx	lr
 8001f96:	bf00      	nop
 8001f98:	42c80000 	.word	0x42c80000

08001f9c <log_error>:
#include "error_handling.h"


void log_error(const char* message)
{
    if (message == NULL) return;
 8001f9c:	b1c0      	cbz	r0, 8001fd0 <log_error+0x34>
{
 8001f9e:	b570      	push	{r4, r5, r6, lr}
 8001fa0:	b09a      	sub	sp, #104	@ 0x68
 8001fa2:	4606      	mov	r6, r0

    uint8_t buffer[ERROR_HANDLING_BUFFER_SIZE] = {0};
 8001fa4:	ac01      	add	r4, sp, #4
 8001fa6:	2564      	movs	r5, #100	@ 0x64
 8001fa8:	462a      	mov	r2, r5
 8001faa:	2100      	movs	r1, #0
 8001fac:	4620      	mov	r0, r4
 8001fae:	f008 fd55 	bl	800aa5c <memset>

    snprintf((char*)buffer, ERROR_HANDLING_BUFFER_SIZE, "Error: %s\n", message);
 8001fb2:	4633      	mov	r3, r6
 8001fb4:	4a07      	ldr	r2, [pc, #28]	@ (8001fd4 <log_error+0x38>)
 8001fb6:	4629      	mov	r1, r5
 8001fb8:	4620      	mov	r0, r4
 8001fba:	f008 fd19 	bl	800a9f0 <sniprintf>

    CDC_Transmit_FS(buffer, strlen((char*)buffer));
 8001fbe:	4620      	mov	r0, r4
 8001fc0:	f7fe f8ee 	bl	80001a0 <strlen>
 8001fc4:	b281      	uxth	r1, r0
 8001fc6:	4620      	mov	r0, r4
 8001fc8:	f007 fce2 	bl	8009990 <CDC_Transmit_FS>
}
 8001fcc:	b01a      	add	sp, #104	@ 0x68
 8001fce:	bd70      	pop	{r4, r5, r6, pc}
 8001fd0:	4770      	bx	lr
 8001fd2:	bf00      	nop
 8001fd4:	0800b9e0 	.word	0x0800b9e0

08001fd8 <log_warning>:

void log_warning(const char* message)
{
    if (message == NULL) return;
 8001fd8:	b1c0      	cbz	r0, 800200c <log_warning+0x34>
{
 8001fda:	b570      	push	{r4, r5, r6, lr}
 8001fdc:	b09a      	sub	sp, #104	@ 0x68
 8001fde:	4606      	mov	r6, r0

    uint8_t buffer[ERROR_HANDLING_BUFFER_SIZE] = {0};
 8001fe0:	ac01      	add	r4, sp, #4
 8001fe2:	2564      	movs	r5, #100	@ 0x64
 8001fe4:	462a      	mov	r2, r5
 8001fe6:	2100      	movs	r1, #0
 8001fe8:	4620      	mov	r0, r4
 8001fea:	f008 fd37 	bl	800aa5c <memset>

    snprintf((char*)buffer, ERROR_HANDLING_BUFFER_SIZE, "Warning: %s\n", message);
 8001fee:	4633      	mov	r3, r6
 8001ff0:	4a07      	ldr	r2, [pc, #28]	@ (8002010 <log_warning+0x38>)
 8001ff2:	4629      	mov	r1, r5
 8001ff4:	4620      	mov	r0, r4
 8001ff6:	f008 fcfb 	bl	800a9f0 <sniprintf>

    CDC_Transmit_FS(buffer, strlen((char*)buffer));
 8001ffa:	4620      	mov	r0, r4
 8001ffc:	f7fe f8d0 	bl	80001a0 <strlen>
 8002000:	b281      	uxth	r1, r0
 8002002:	4620      	mov	r0, r4
 8002004:	f007 fcc4 	bl	8009990 <CDC_Transmit_FS>
 8002008:	b01a      	add	sp, #104	@ 0x68
 800200a:	bd70      	pop	{r4, r5, r6, pc}
 800200c:	4770      	bx	lr
 800200e:	bf00      	nop
 8002010:	0800b9ec 	.word	0x0800b9ec

08002014 <xEventGroupCreateStatic>:
	EventGroupHandle_t xEventGroupCreateStatic( StaticEventGroup_t *pxEventGroupBuffer )
	{
	EventGroup_t *pxEventBits;

		/* A StaticEventGroup_t object must be provided. */
		configASSERT( pxEventGroupBuffer );
 8002014:	b180      	cbz	r0, 8002038 <xEventGroupCreateStatic+0x24>
	{
 8002016:	b510      	push	{r4, lr}
 8002018:	b082      	sub	sp, #8
 800201a:	4604      	mov	r4, r0
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticEventGroup_t equals the size of the real
			event group structure. */
			volatile size_t xSize = sizeof( StaticEventGroup_t );
 800201c:	2320      	movs	r3, #32
 800201e:	9301      	str	r3, [sp, #4]
			configASSERT( xSize == sizeof( EventGroup_t ) );
 8002020:	9b01      	ldr	r3, [sp, #4]
 8002022:	2b20      	cmp	r3, #32
 8002024:	d011      	beq.n	800204a <xEventGroupCreateStatic+0x36>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002026:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800202a:	f383 8811 	msr	BASEPRI, r3
 800202e:	f3bf 8f6f 	isb	sy
 8002032:	f3bf 8f4f 	dsb	sy
 8002036:	e7fe      	b.n	8002036 <xEventGroupCreateStatic+0x22>
 8002038:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800203c:	f383 8811 	msr	BASEPRI, r3
 8002040:	f3bf 8f6f 	isb	sy
 8002044:	f3bf 8f4f 	dsb	sy
		configASSERT( pxEventGroupBuffer );
 8002048:	e7fe      	b.n	8002048 <xEventGroupCreateStatic+0x34>
		/* The user has provided a statically allocated event group - use it. */
		pxEventBits = ( EventGroup_t * ) pxEventGroupBuffer; /*lint !e740 !e9087 EventGroup_t and StaticEventGroup_t are deliberately aliased for data hiding purposes and guaranteed to have the same size and alignment requirement - checked by configASSERT(). */

		if( pxEventBits != NULL )
		{
			pxEventBits->uxEventBits = 0;
 800204a:	2300      	movs	r3, #0
 800204c:	f840 3b04 	str.w	r3, [r0], #4
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8002050:	f000 fd2e 	bl	8002ab0 <vListInitialise>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note that
				this event group was created statically in case the event group
				is later deleted. */
				pxEventBits->ucStaticallyAllocated = pdTRUE;
 8002054:	2301      	movs	r3, #1
 8002056:	7723      	strb	r3, [r4, #28]
			allocated) StaticEventGroup_t variable. */
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return pxEventBits;
	}
 8002058:	4620      	mov	r0, r4
 800205a:	b002      	add	sp, #8
 800205c:	bd10      	pop	{r4, pc}

0800205e <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 800205e:	b538      	push	{r3, r4, r5, lr}
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 8002060:	2020      	movs	r0, #32
 8002062:	f000 fa05 	bl	8002470 <pvPortMalloc>

		if( pxEventBits != NULL )
 8002066:	4604      	mov	r4, r0
 8002068:	b128      	cbz	r0, 8002076 <xEventGroupCreate+0x18>
		{
			pxEventBits->uxEventBits = 0;
 800206a:	2500      	movs	r5, #0
 800206c:	f840 5b04 	str.w	r5, [r0], #4
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8002070:	f000 fd1e 	bl	8002ab0 <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 8002074:	7725      	strb	r5, [r4, #28]
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
	}
 8002076:	4620      	mov	r0, r4
 8002078:	bd38      	pop	{r3, r4, r5, pc}

0800207a <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 800207a:	b508      	push	{r3, lr}
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 800207c:	f007 f98c 	bl	8009398 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN StartDefaultTask */

  osDelay(100);
 8002080:	2064      	movs	r0, #100	@ 0x64
 8002082:	f7fe ff77 	bl	8000f74 <osDelay>
  
  /* Infinite loop */
  for(;;)
  {

    osDelay(1);
 8002086:	2001      	movs	r0, #1
 8002088:	f7fe ff74 	bl	8000f74 <osDelay>
  for(;;)
 800208c:	e7fb      	b.n	8002086 <StartDefaultTask+0xc>

0800208e <trigger_simulator_task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_trigger_simulator_task */
void trigger_simulator_task(void *argument)
{
 800208e:	b508      	push	{r3, lr}
  /* USER CODE BEGIN trigger_simulator_task */

  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8002090:	2001      	movs	r0, #1
 8002092:	f7fe ff6f 	bl	8000f74 <osDelay>
  for(;;)
 8002096:	e7fb      	b.n	8002090 <trigger_simulator_task+0x2>

08002098 <start_fuel_task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_start_fuel_task */
void start_fuel_task(void *argument)
{
 8002098:	b508      	push	{r3, lr}


  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800209a:	2001      	movs	r0, #1
 800209c:	f7fe ff6a 	bl	8000f74 <osDelay>
  for(;;)
 80020a0:	e7fb      	b.n	800209a <start_fuel_task+0x2>
	...

080020a4 <controller_init_task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_controller_init_task */
void controller_init_task(void *argument)
{
 80020a4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN controller_init_task */

  controller_init_with_defaults();
 80020a6:	f7ff fb87 	bl	80017b8 <controller_init_with_defaults>


  for (size_t i = 0; i < (sizeof(test_table.x_bins) / sizeof(test_table.x_bins[0])); i++)
 80020aa:	2200      	movs	r2, #0
 80020ac:	e00e      	b.n	80020cc <controller_init_task+0x28>
  {
    test_table.x_bins[i] = i * 100;  // Example values
 80020ae:	2364      	movs	r3, #100	@ 0x64
 80020b0:	fb02 f303 	mul.w	r3, r2, r3
 80020b4:	f502 7080 	add.w	r0, r2, #256	@ 0x100
 80020b8:	492d      	ldr	r1, [pc, #180]	@ (8002170 <controller_init_task+0xcc>)
 80020ba:	eb01 0180 	add.w	r1, r1, r0, lsl #2
 80020be:	ee07 3a90 	vmov	s15, r3
 80020c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80020c6:	edc1 7a00 	vstr	s15, [r1]
  for (size_t i = 0; i < (sizeof(test_table.x_bins) / sizeof(test_table.x_bins[0])); i++)
 80020ca:	3201      	adds	r2, #1
 80020cc:	2a0f      	cmp	r2, #15
 80020ce:	d9ee      	bls.n	80020ae <controller_init_task+0xa>
  }
  for (size_t i = 0; i < (sizeof(test_table.y_bins) / sizeof(test_table.y_bins[0])); i++)
 80020d0:	2300      	movs	r3, #0
 80020d2:	e00e      	b.n	80020f2 <controller_init_task+0x4e>
  {
    test_table.y_bins[i] = i * 10;  // Example values
 80020d4:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 80020d8:	0052      	lsls	r2, r2, #1
 80020da:	f503 7088 	add.w	r0, r3, #272	@ 0x110
 80020de:	4924      	ldr	r1, [pc, #144]	@ (8002170 <controller_init_task+0xcc>)
 80020e0:	eb01 0180 	add.w	r1, r1, r0, lsl #2
 80020e4:	ee07 2a90 	vmov	s15, r2
 80020e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80020ec:	edc1 7a00 	vstr	s15, [r1]
  for (size_t i = 0; i < (sizeof(test_table.y_bins) / sizeof(test_table.y_bins[0])); i++)
 80020f0:	3301      	adds	r3, #1
 80020f2:	2b0f      	cmp	r3, #15
 80020f4:	d9ee      	bls.n	80020d4 <controller_init_task+0x30>
  }
  for (size_t i = 0; i < (sizeof(test_table.data) / sizeof(test_table.data[0])); i++)
 80020f6:	2000      	movs	r0, #0
 80020f8:	e011      	b.n	800211e <controller_init_task+0x7a>
  {
    for (size_t j = 0; j < (sizeof(test_table.data[0]) / sizeof(test_table.data[0][0])); j++)
    {
      test_table.data[i][j] = (i + 1) * (j + 1);  // Example values
 80020fa:	1c5a      	adds	r2, r3, #1
 80020fc:	fb00 2102 	mla	r1, r0, r2, r2
 8002100:	ee07 1a90 	vmov	s15, r1
 8002104:	eb03 1300 	add.w	r3, r3, r0, lsl #4
 8002108:	4919      	ldr	r1, [pc, #100]	@ (8002170 <controller_init_task+0xcc>)
 800210a:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 800210e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002112:	edc3 7a00 	vstr	s15, [r3]
    for (size_t j = 0; j < (sizeof(test_table.data[0]) / sizeof(test_table.data[0][0])); j++)
 8002116:	4613      	mov	r3, r2
 8002118:	2b0f      	cmp	r3, #15
 800211a:	d9ee      	bls.n	80020fa <controller_init_task+0x56>
  for (size_t i = 0; i < (sizeof(test_table.data) / sizeof(test_table.data[0])); i++)
 800211c:	3001      	adds	r0, #1
 800211e:	280f      	cmp	r0, #15
 8002120:	d80c      	bhi.n	800213c <controller_init_task+0x98>
    for (size_t j = 0; j < (sizeof(test_table.data[0]) / sizeof(test_table.data[0][0])); j++)
 8002122:	2300      	movs	r3, #0
 8002124:	e7f8      	b.n	8002118 <controller_init_task+0x74>
    load = 11.25f;  // Simulate load increase
    if (rpm > 5000)
    {
      rpm = -1000;
    }
    table_value = table_2d_get_value(&test_table, rpm, load);
 8002126:	eddf 0a13 	vldr	s1, [pc, #76]	@ 8002174 <controller_init_task+0xd0>
 800212a:	4b13      	ldr	r3, [pc, #76]	@ (8002178 <controller_init_task+0xd4>)
 800212c:	ed93 0a00 	vldr	s0, [r3]
 8002130:	480f      	ldr	r0, [pc, #60]	@ (8002170 <controller_init_task+0xcc>)
 8002132:	f005 fbab 	bl	800788c <table_2d_get_value>
 8002136:	4b11      	ldr	r3, [pc, #68]	@ (800217c <controller_init_task+0xd8>)
 8002138:	ed83 0a00 	vstr	s0, [r3]
    osDelay(1);
 800213c:	2001      	movs	r0, #1
 800213e:	f7fe ff19 	bl	8000f74 <osDelay>
    rpm += 10;  // Simulate RPM increase
 8002142:	4b0d      	ldr	r3, [pc, #52]	@ (8002178 <controller_init_task+0xd4>)
 8002144:	edd3 7a00 	vldr	s15, [r3]
 8002148:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 800214c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002150:	edc3 7a00 	vstr	s15, [r3]
    load = 11.25f;  // Simulate load increase
 8002154:	4b0a      	ldr	r3, [pc, #40]	@ (8002180 <controller_init_task+0xdc>)
 8002156:	4a0b      	ldr	r2, [pc, #44]	@ (8002184 <controller_init_task+0xe0>)
 8002158:	601a      	str	r2, [r3, #0]
    if (rpm > 5000)
 800215a:	ed9f 7a0b 	vldr	s14, [pc, #44]	@ 8002188 <controller_init_task+0xe4>
 800215e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002162:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002166:	ddde      	ble.n	8002126 <controller_init_task+0x82>
      rpm = -1000;
 8002168:	4b03      	ldr	r3, [pc, #12]	@ (8002178 <controller_init_task+0xd4>)
 800216a:	4a08      	ldr	r2, [pc, #32]	@ (800218c <controller_init_task+0xe8>)
 800216c:	601a      	str	r2, [r3, #0]
 800216e:	e7da      	b.n	8002126 <controller_init_task+0x82>
 8002170:	200026c4 	.word	0x200026c4
 8002174:	41340000 	.word	0x41340000
 8002178:	20002684 	.word	0x20002684
 800217c:	200026c0 	.word	0x200026c0
 8002180:	20002680 	.word	0x20002680
 8002184:	41340000 	.word	0x41340000
 8002188:	459c4000 	.word	0x459c4000
 800218c:	c47a0000 	.word	0xc47a0000

08002190 <sensors_task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_sensors_task */
void sensors_task(void *argument)
{
 8002190:	b508      	push	{r3, lr}
  /* USER CODE BEGIN sensors_task */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8002192:	2001      	movs	r0, #1
 8002194:	f7fe feee 	bl	8000f74 <osDelay>
    runtime.clt_degc = sensor_clt_get();
 8002198:	f001 fd38 	bl	8003c0c <sensor_clt_get>
 800219c:	4c05      	ldr	r4, [pc, #20]	@ (80021b4 <sensors_task+0x24>)
 800219e:	ed84 0a0d 	vstr	s0, [r4, #52]	@ 0x34
    runtime.iat_degc = sensor_iat_get();
 80021a2:	f001 fcaf 	bl	8003b04 <sensor_iat_get>
 80021a6:	ed84 0a0e 	vstr	s0, [r4, #56]	@ 0x38
    runtime.oil_pressure_ok = sensor_ops_get();
 80021aa:	f001 fd6f 	bl	8003c8c <sensor_ops_get>
 80021ae:	f884 004b 	strb.w	r0, [r4, #75]	@ 0x4b
  for(;;)
 80021b2:	e7ee      	b.n	8002192 <sensors_task+0x2>
 80021b4:	200012f4 	.word	0x200012f4

080021b8 <MX_FREERTOS_Init>:
void MX_FREERTOS_Init(void) {
 80021b8:	b508      	push	{r3, lr}
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80021ba:	4a14      	ldr	r2, [pc, #80]	@ (800220c <MX_FREERTOS_Init+0x54>)
 80021bc:	2100      	movs	r1, #0
 80021be:	4814      	ldr	r0, [pc, #80]	@ (8002210 <MX_FREERTOS_Init+0x58>)
 80021c0:	f7fe fe7e 	bl	8000ec0 <osThreadNew>
 80021c4:	4b13      	ldr	r3, [pc, #76]	@ (8002214 <MX_FREERTOS_Init+0x5c>)
 80021c6:	6018      	str	r0, [r3, #0]
  trig_simHandle = osThreadNew(trigger_simulator_task, NULL, &trig_sim_attributes);
 80021c8:	4a13      	ldr	r2, [pc, #76]	@ (8002218 <MX_FREERTOS_Init+0x60>)
 80021ca:	2100      	movs	r1, #0
 80021cc:	4813      	ldr	r0, [pc, #76]	@ (800221c <MX_FREERTOS_Init+0x64>)
 80021ce:	f7fe fe77 	bl	8000ec0 <osThreadNew>
 80021d2:	4b13      	ldr	r3, [pc, #76]	@ (8002220 <MX_FREERTOS_Init+0x68>)
 80021d4:	6018      	str	r0, [r3, #0]
  fuel_taskHandle = osThreadNew(start_fuel_task, NULL, &fuel_task_attributes);
 80021d6:	4a13      	ldr	r2, [pc, #76]	@ (8002224 <MX_FREERTOS_Init+0x6c>)
 80021d8:	2100      	movs	r1, #0
 80021da:	4813      	ldr	r0, [pc, #76]	@ (8002228 <MX_FREERTOS_Init+0x70>)
 80021dc:	f7fe fe70 	bl	8000ec0 <osThreadNew>
 80021e0:	4b12      	ldr	r3, [pc, #72]	@ (800222c <MX_FREERTOS_Init+0x74>)
 80021e2:	6018      	str	r0, [r3, #0]
  init_taskHandle = osThreadNew(controller_init_task, NULL, &init_task_attributes);
 80021e4:	4a12      	ldr	r2, [pc, #72]	@ (8002230 <MX_FREERTOS_Init+0x78>)
 80021e6:	2100      	movs	r1, #0
 80021e8:	4812      	ldr	r0, [pc, #72]	@ (8002234 <MX_FREERTOS_Init+0x7c>)
 80021ea:	f7fe fe69 	bl	8000ec0 <osThreadNew>
 80021ee:	4b12      	ldr	r3, [pc, #72]	@ (8002238 <MX_FREERTOS_Init+0x80>)
 80021f0:	6018      	str	r0, [r3, #0]
  sensor_taskHandle = osThreadNew(sensors_task, NULL, &sensor_task_attributes);
 80021f2:	4a12      	ldr	r2, [pc, #72]	@ (800223c <MX_FREERTOS_Init+0x84>)
 80021f4:	2100      	movs	r1, #0
 80021f6:	4812      	ldr	r0, [pc, #72]	@ (8002240 <MX_FREERTOS_Init+0x88>)
 80021f8:	f7fe fe62 	bl	8000ec0 <osThreadNew>
 80021fc:	4b11      	ldr	r3, [pc, #68]	@ (8002244 <MX_FREERTOS_Init+0x8c>)
 80021fe:	6018      	str	r0, [r3, #0]
  engine_flagsHandle = osEventFlagsNew(&engine_flags_attributes);
 8002200:	4811      	ldr	r0, [pc, #68]	@ (8002248 <MX_FREERTOS_Init+0x90>)
 8002202:	f7fe ff33 	bl	800106c <osEventFlagsNew>
 8002206:	4b11      	ldr	r3, [pc, #68]	@ (800224c <MX_FREERTOS_Init+0x94>)
 8002208:	6018      	str	r0, [r3, #0]
}
 800220a:	bd08      	pop	{r3, pc}
 800220c:	0800be60 	.word	0x0800be60
 8002210:	0800207b 	.word	0x0800207b
 8002214:	200026bc 	.word	0x200026bc
 8002218:	0800be3c 	.word	0x0800be3c
 800221c:	0800208f 	.word	0x0800208f
 8002220:	200026b8 	.word	0x200026b8
 8002224:	0800be18 	.word	0x0800be18
 8002228:	08002099 	.word	0x08002099
 800222c:	200026b4 	.word	0x200026b4
 8002230:	0800bdf4 	.word	0x0800bdf4
 8002234:	080020a5 	.word	0x080020a5
 8002238:	200026b0 	.word	0x200026b0
 800223c:	0800bdd0 	.word	0x0800bdd0
 8002240:	08002191 	.word	0x08002191
 8002244:	200026ac 	.word	0x200026ac
 8002248:	0800bdc0 	.word	0x0800bdc0
 800224c:	200026a8 	.word	0x200026a8

08002250 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8002250:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002254:	b08a      	sub	sp, #40	@ 0x28

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002256:	ad05      	add	r5, sp, #20
 8002258:	2400      	movs	r4, #0
 800225a:	9405      	str	r4, [sp, #20]
 800225c:	9406      	str	r4, [sp, #24]
 800225e:	9407      	str	r4, [sp, #28]
 8002260:	9408      	str	r4, [sp, #32]
 8002262:	9409      	str	r4, [sp, #36]	@ 0x24

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002264:	9400      	str	r4, [sp, #0]
 8002266:	4b4b      	ldr	r3, [pc, #300]	@ (8002394 <MX_GPIO_Init+0x144>)
 8002268:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800226a:	f042 0204 	orr.w	r2, r2, #4
 800226e:	631a      	str	r2, [r3, #48]	@ 0x30
 8002270:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002272:	f002 0204 	and.w	r2, r2, #4
 8002276:	9200      	str	r2, [sp, #0]
 8002278:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800227a:	9401      	str	r4, [sp, #4]
 800227c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800227e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002282:	631a      	str	r2, [r3, #48]	@ 0x30
 8002284:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002286:	f002 0280 	and.w	r2, r2, #128	@ 0x80
 800228a:	9201      	str	r2, [sp, #4]
 800228c:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800228e:	9402      	str	r4, [sp, #8]
 8002290:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002292:	f042 0201 	orr.w	r2, r2, #1
 8002296:	631a      	str	r2, [r3, #48]	@ 0x30
 8002298:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800229a:	f002 0201 	and.w	r2, r2, #1
 800229e:	9202      	str	r2, [sp, #8]
 80022a0:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80022a2:	9403      	str	r4, [sp, #12]
 80022a4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80022a6:	f042 0202 	orr.w	r2, r2, #2
 80022aa:	631a      	str	r2, [r3, #48]	@ 0x30
 80022ac:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80022ae:	f002 0202 	and.w	r2, r2, #2
 80022b2:	9203      	str	r2, [sp, #12]
 80022b4:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80022b6:	9404      	str	r4, [sp, #16]
 80022b8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80022ba:	f042 0208 	orr.w	r2, r2, #8
 80022be:	631a      	str	r2, [r3, #48]	@ 0x30
 80022c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022c2:	f003 0308 	and.w	r3, r3, #8
 80022c6:	9304      	str	r3, [sp, #16]
 80022c8:	9b04      	ldr	r3, [sp, #16]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_Pin|INJECTOR_OUPUT_3_Pin|INJECTOR_OUPUT_2_Pin|INJECTOR_OUPUT_1_Pin, GPIO_PIN_RESET);
 80022ca:	f8df a0d0 	ldr.w	sl, [pc, #208]	@ 800239c <MX_GPIO_Init+0x14c>
 80022ce:	4622      	mov	r2, r4
 80022d0:	f44f 5170 	mov.w	r1, #15360	@ 0x3c00
 80022d4:	4650      	mov	r0, sl
 80022d6:	f002 fc42 	bl	8004b5e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LOW_SIDE_1_Pin|LOW_SIDE_2_Pin|FAN_1_Pin|FAN_2_Pin
 80022da:	4e2f      	ldr	r6, [pc, #188]	@ (8002398 <MX_GPIO_Init+0x148>)
 80022dc:	4622      	mov	r2, r4
 80022de:	f24f 413f 	movw	r1, #62527	@ 0xf43f
 80022e2:	4630      	mov	r0, r6
 80022e4:	f002 fc3b 	bl	8004b5e <HAL_GPIO_WritePin>
                          |AUX_RELAY_Pin|GAS_SOLENOID_RELAY_Pin|FUEL_PUMP_RELAY_Pin|MAIN_RELAY_Pin
                          |IGNITION_OUTPUT_3_Pin|IGNITION_OUTPUT_2_Pin|IGNITION_OUTPUT_1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(INJECTOR_OUPUT_4_GPIO_Port, INJECTOR_OUPUT_4_Pin, GPIO_PIN_RESET);
 80022e8:	f8df 90b4 	ldr.w	r9, [pc, #180]	@ 80023a0 <MX_GPIO_Init+0x150>
 80022ec:	4622      	mov	r2, r4
 80022ee:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80022f2:	4648      	mov	r0, r9
 80022f4:	f002 fc33 	bl	8004b5e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(IGNITION_OUTPUT_4_GPIO_Port, IGNITION_OUTPUT_4_Pin, GPIO_PIN_RESET);
 80022f8:	f8df 80a8 	ldr.w	r8, [pc, #168]	@ 80023a4 <MX_GPIO_Init+0x154>
 80022fc:	4622      	mov	r2, r4
 80022fe:	2104      	movs	r1, #4
 8002300:	4640      	mov	r0, r8
 8002302:	f002 fc2c 	bl	8004b5e <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED_Pin INJECTOR_OUPUT_3_Pin INJECTOR_OUPUT_2_Pin INJECTOR_OUPUT_1_Pin */
  GPIO_InitStruct.Pin = LED_Pin|INJECTOR_OUPUT_3_Pin|INJECTOR_OUPUT_2_Pin|INJECTOR_OUPUT_1_Pin;
 8002306:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800230a:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800230c:	2701      	movs	r7, #1
 800230e:	9706      	str	r7, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002310:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002312:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002314:	4629      	mov	r1, r5
 8002316:	4650      	mov	r0, sl
 8002318:	f002 fb36 	bl	8004988 <HAL_GPIO_Init>

  /*Configure GPIO pins : LOW_SIDE_1_Pin LOW_SIDE_2_Pin FAN_1_Pin FAN_2_Pin
                           AUX_RELAY_Pin GAS_SOLENOID_RELAY_Pin FUEL_PUMP_RELAY_Pin MAIN_RELAY_Pin
                           IGNITION_OUTPUT_3_Pin IGNITION_OUTPUT_2_Pin IGNITION_OUTPUT_1_Pin */
  GPIO_InitStruct.Pin = LOW_SIDE_1_Pin|LOW_SIDE_2_Pin|FAN_1_Pin|FAN_2_Pin
 800231c:	f24f 433f 	movw	r3, #62527	@ 0xf43f
 8002320:	9305      	str	r3, [sp, #20]
                          |AUX_RELAY_Pin|GAS_SOLENOID_RELAY_Pin|FUEL_PUMP_RELAY_Pin|MAIN_RELAY_Pin
                          |IGNITION_OUTPUT_3_Pin|IGNITION_OUTPUT_2_Pin|IGNITION_OUTPUT_1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002322:	9706      	str	r7, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002324:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002326:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002328:	4629      	mov	r1, r5
 800232a:	4630      	mov	r0, r6
 800232c:	f002 fb2c 	bl	8004988 <HAL_GPIO_Init>

  /*Configure GPIO pin : INJECTOR_OUPUT_4_Pin */
  GPIO_InitStruct.Pin = INJECTOR_OUPUT_4_Pin;
 8002330:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002334:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002336:	9706      	str	r7, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002338:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800233a:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(INJECTOR_OUPUT_4_GPIO_Port, &GPIO_InitStruct);
 800233c:	4629      	mov	r1, r5
 800233e:	4648      	mov	r0, r9
 8002340:	f002 fb22 	bl	8004988 <HAL_GPIO_Init>

  /*Configure GPIO pin : IGNITION_OUTPUT_4_Pin */
  GPIO_InitStruct.Pin = IGNITION_OUTPUT_4_Pin;
 8002344:	2304      	movs	r3, #4
 8002346:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002348:	9706      	str	r7, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800234a:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800234c:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(IGNITION_OUTPUT_4_GPIO_Port, &GPIO_InitStruct);
 800234e:	4629      	mov	r1, r5
 8002350:	4640      	mov	r0, r8
 8002352:	f002 fb19 	bl	8004988 <HAL_GPIO_Init>

  /*Configure GPIO pin : SENSOR_VR_1_Pin */
  GPIO_InitStruct.Pin = SENSOR_VR_1_Pin;
 8002356:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800235a:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800235c:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800235e:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(SENSOR_VR_1_GPIO_Port, &GPIO_InitStruct);
 8002360:	4629      	mov	r1, r5
 8002362:	4630      	mov	r0, r6
 8002364:	f002 fb10 	bl	8004988 <HAL_GPIO_Init>

  /*Configure GPIO pin : SENSOR_VR2_Pin */
  GPIO_InitStruct.Pin = SENSOR_VR2_Pin;
 8002368:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800236c:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800236e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8002372:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002374:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(SENSOR_VR2_GPIO_Port, &GPIO_InitStruct);
 8002376:	4629      	mov	r1, r5
 8002378:	4630      	mov	r0, r6
 800237a:	f002 fb05 	bl	8004988 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 800237e:	4622      	mov	r2, r4
 8002380:	2105      	movs	r1, #5
 8002382:	2017      	movs	r0, #23
 8002384:	f002 f8d8 	bl	8004538 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8002388:	2017      	movs	r0, #23
 800238a:	f002 f8e5 	bl	8004558 <HAL_NVIC_EnableIRQ>

}
 800238e:	b00a      	add	sp, #40	@ 0x28
 8002390:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002394:	40023800 	.word	0x40023800
 8002398:	40020400 	.word	0x40020400
 800239c:	40020800 	.word	0x40020800
 80023a0:	40020000 	.word	0x40020000
 80023a4:	40020c00 	.word	0x40020c00

080023a8 <prvHeapInit>:
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80023a8:	4a12      	ldr	r2, [pc, #72]	@ (80023f4 <prvHeapInit+0x4c>)

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80023aa:	f012 0f07 	tst.w	r2, #7
 80023ae:	d01e      	beq.n	80023ee <prvHeapInit+0x46>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80023b0:	1dd1      	adds	r1, r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80023b2:	f021 0107 	bic.w	r1, r1, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80023b6:	f5c1 5370 	rsb	r3, r1, #15360	@ 0x3c00
 80023ba:	4413      	add	r3, r2
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80023bc:	460a      	mov	r2, r1

	pucAlignedHeap = ( uint8_t * ) uxAddress;

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80023be:	480e      	ldr	r0, [pc, #56]	@ (80023f8 <prvHeapInit+0x50>)
 80023c0:	6002      	str	r2, [r0, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80023c2:	2100      	movs	r1, #0
 80023c4:	6041      	str	r1, [r0, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80023c6:	4413      	add	r3, r2
	uxAddress -= xHeapStructSize;
 80023c8:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80023ca:	f023 0307 	bic.w	r3, r3, #7
	pxEnd = ( void * ) uxAddress;
 80023ce:	480b      	ldr	r0, [pc, #44]	@ (80023fc <prvHeapInit+0x54>)
 80023d0:	6003      	str	r3, [r0, #0]
	pxEnd->xBlockSize = 0;
 80023d2:	6059      	str	r1, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80023d4:	6019      	str	r1, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80023d6:	1a99      	subs	r1, r3, r2
 80023d8:	6051      	str	r1, [r2, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80023da:	6013      	str	r3, [r2, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80023dc:	4b08      	ldr	r3, [pc, #32]	@ (8002400 <prvHeapInit+0x58>)
 80023de:	6019      	str	r1, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80023e0:	4b08      	ldr	r3, [pc, #32]	@ (8002404 <prvHeapInit+0x5c>)
 80023e2:	6019      	str	r1, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80023e4:	4b08      	ldr	r3, [pc, #32]	@ (8002408 <prvHeapInit+0x60>)
 80023e6:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80023ea:	601a      	str	r2, [r3, #0]
}
 80023ec:	4770      	bx	lr
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80023ee:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 80023f2:	e7e4      	b.n	80023be <prvHeapInit+0x16>
 80023f4:	20002b64 	.word	0x20002b64
 80023f8:	20002b5c 	.word	0x20002b5c
 80023fc:	20002b58 	.word	0x20002b58
 8002400:	20002b50 	.word	0x20002b50
 8002404:	20002b54 	.word	0x20002b54
 8002408:	20002b44 	.word	0x20002b44

0800240c <prvInsertBlockIntoFreeList>:
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800240c:	4b16      	ldr	r3, [pc, #88]	@ (8002468 <prvInsertBlockIntoFreeList+0x5c>)
 800240e:	461a      	mov	r2, r3
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	4283      	cmp	r3, r0
 8002414:	d3fb      	bcc.n	800240e <prvInsertBlockIntoFreeList+0x2>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8002416:	6851      	ldr	r1, [r2, #4]
 8002418:	eb02 0c01 	add.w	ip, r2, r1
 800241c:	4584      	cmp	ip, r0
 800241e:	d009      	beq.n	8002434 <prvInsertBlockIntoFreeList+0x28>
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8002420:	6841      	ldr	r1, [r0, #4]
 8002422:	eb00 0c01 	add.w	ip, r0, r1
 8002426:	4563      	cmp	r3, ip
 8002428:	d009      	beq.n	800243e <prvInsertBlockIntoFreeList+0x32>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800242a:	6003      	str	r3, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800242c:	4290      	cmp	r0, r2
 800242e:	d019      	beq.n	8002464 <prvInsertBlockIntoFreeList+0x58>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8002430:	6010      	str	r0, [r2, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
 8002432:	4770      	bx	lr
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8002434:	6840      	ldr	r0, [r0, #4]
 8002436:	4401      	add	r1, r0
 8002438:	6051      	str	r1, [r2, #4]
		pxBlockToInsert = pxIterator;
 800243a:	4610      	mov	r0, r2
 800243c:	e7f0      	b.n	8002420 <prvInsertBlockIntoFreeList+0x14>
{
 800243e:	b410      	push	{r4}
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8002440:	4c0a      	ldr	r4, [pc, #40]	@ (800246c <prvInsertBlockIntoFreeList+0x60>)
 8002442:	6824      	ldr	r4, [r4, #0]
 8002444:	42a3      	cmp	r3, r4
 8002446:	d00b      	beq.n	8002460 <prvInsertBlockIntoFreeList+0x54>
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8002448:	685b      	ldr	r3, [r3, #4]
 800244a:	4419      	add	r1, r3
 800244c:	6041      	str	r1, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800244e:	6813      	ldr	r3, [r2, #0]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	6003      	str	r3, [r0, #0]
	if( pxIterator != pxBlockToInsert )
 8002454:	4290      	cmp	r0, r2
 8002456:	d000      	beq.n	800245a <prvInsertBlockIntoFreeList+0x4e>
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8002458:	6010      	str	r0, [r2, #0]
	}
}
 800245a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800245e:	4770      	bx	lr
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8002460:	6004      	str	r4, [r0, #0]
 8002462:	e7f7      	b.n	8002454 <prvInsertBlockIntoFreeList+0x48>
 8002464:	4770      	bx	lr
 8002466:	bf00      	nop
 8002468:	20002b5c 	.word	0x20002b5c
 800246c:	20002b58 	.word	0x20002b58

08002470 <pvPortMalloc>:
{
 8002470:	b538      	push	{r3, r4, r5, lr}
 8002472:	4604      	mov	r4, r0
	vTaskSuspendAll();
 8002474:	f005 fd10 	bl	8007e98 <vTaskSuspendAll>
		if( pxEnd == NULL )
 8002478:	4b38      	ldr	r3, [pc, #224]	@ (800255c <pvPortMalloc+0xec>)
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	b1b3      	cbz	r3, 80024ac <pvPortMalloc+0x3c>
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800247e:	4b38      	ldr	r3, [pc, #224]	@ (8002560 <pvPortMalloc+0xf0>)
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	421c      	tst	r4, r3
 8002484:	d150      	bne.n	8002528 <pvPortMalloc+0xb8>
			if( xWantedSize > 0 )
 8002486:	2c00      	cmp	r4, #0
 8002488:	d050      	beq.n	800252c <pvPortMalloc+0xbc>
				xWantedSize += xHeapStructSize;
 800248a:	f104 0208 	add.w	r2, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800248e:	f014 0f07 	tst.w	r4, #7
 8002492:	d002      	beq.n	800249a <pvPortMalloc+0x2a>
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8002494:	f022 0207 	bic.w	r2, r2, #7
 8002498:	3208      	adds	r2, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800249a:	2a00      	cmp	r2, #0
 800249c:	d055      	beq.n	800254a <pvPortMalloc+0xda>
 800249e:	4b31      	ldr	r3, [pc, #196]	@ (8002564 <pvPortMalloc+0xf4>)
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	4293      	cmp	r3, r2
 80024a4:	d353      	bcc.n	800254e <pvPortMalloc+0xde>
				pxBlock = xStart.pxNextFreeBlock;
 80024a6:	4930      	ldr	r1, [pc, #192]	@ (8002568 <pvPortMalloc+0xf8>)
 80024a8:	680c      	ldr	r4, [r1, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80024aa:	e004      	b.n	80024b6 <pvPortMalloc+0x46>
			prvHeapInit();
 80024ac:	f7ff ff7c 	bl	80023a8 <prvHeapInit>
 80024b0:	e7e5      	b.n	800247e <pvPortMalloc+0xe>
					pxPreviousBlock = pxBlock;
 80024b2:	4621      	mov	r1, r4
					pxBlock = pxBlock->pxNextFreeBlock;
 80024b4:	461c      	mov	r4, r3
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80024b6:	6863      	ldr	r3, [r4, #4]
 80024b8:	4293      	cmp	r3, r2
 80024ba:	d202      	bcs.n	80024c2 <pvPortMalloc+0x52>
 80024bc:	6823      	ldr	r3, [r4, #0]
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d1f7      	bne.n	80024b2 <pvPortMalloc+0x42>
				if( pxBlock != pxEnd )
 80024c2:	4b26      	ldr	r3, [pc, #152]	@ (800255c <pvPortMalloc+0xec>)
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	42a3      	cmp	r3, r4
 80024c8:	d043      	beq.n	8002552 <pvPortMalloc+0xe2>
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80024ca:	680d      	ldr	r5, [r1, #0]
 80024cc:	3508      	adds	r5, #8
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80024ce:	6823      	ldr	r3, [r4, #0]
 80024d0:	600b      	str	r3, [r1, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80024d2:	6863      	ldr	r3, [r4, #4]
 80024d4:	1a9b      	subs	r3, r3, r2
 80024d6:	2b10      	cmp	r3, #16
 80024d8:	d910      	bls.n	80024fc <pvPortMalloc+0x8c>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80024da:	18a0      	adds	r0, r4, r2
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80024dc:	f010 0f07 	tst.w	r0, #7
 80024e0:	d008      	beq.n	80024f4 <pvPortMalloc+0x84>
 80024e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80024e6:	f383 8811 	msr	BASEPRI, r3
 80024ea:	f3bf 8f6f 	isb	sy
 80024ee:	f3bf 8f4f 	dsb	sy
 80024f2:	e7fe      	b.n	80024f2 <pvPortMalloc+0x82>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80024f4:	6043      	str	r3, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 80024f6:	6062      	str	r2, [r4, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80024f8:	f7ff ff88 	bl	800240c <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80024fc:	6862      	ldr	r2, [r4, #4]
 80024fe:	4919      	ldr	r1, [pc, #100]	@ (8002564 <pvPortMalloc+0xf4>)
 8002500:	680b      	ldr	r3, [r1, #0]
 8002502:	1a9b      	subs	r3, r3, r2
 8002504:	600b      	str	r3, [r1, #0]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8002506:	4919      	ldr	r1, [pc, #100]	@ (800256c <pvPortMalloc+0xfc>)
 8002508:	6809      	ldr	r1, [r1, #0]
 800250a:	428b      	cmp	r3, r1
 800250c:	d201      	bcs.n	8002512 <pvPortMalloc+0xa2>
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800250e:	4917      	ldr	r1, [pc, #92]	@ (800256c <pvPortMalloc+0xfc>)
 8002510:	600b      	str	r3, [r1, #0]
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8002512:	4b13      	ldr	r3, [pc, #76]	@ (8002560 <pvPortMalloc+0xf0>)
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	4313      	orrs	r3, r2
 8002518:	6063      	str	r3, [r4, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800251a:	2300      	movs	r3, #0
 800251c:	6023      	str	r3, [r4, #0]
					xNumberOfSuccessfulAllocations++;
 800251e:	4a14      	ldr	r2, [pc, #80]	@ (8002570 <pvPortMalloc+0x100>)
 8002520:	6813      	ldr	r3, [r2, #0]
 8002522:	3301      	adds	r3, #1
 8002524:	6013      	str	r3, [r2, #0]
 8002526:	e002      	b.n	800252e <pvPortMalloc+0xbe>
void *pvReturn = NULL;
 8002528:	2500      	movs	r5, #0
 800252a:	e000      	b.n	800252e <pvPortMalloc+0xbe>
 800252c:	2500      	movs	r5, #0
	( void ) xTaskResumeAll();
 800252e:	f005 fd4d 	bl	8007fcc <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8002532:	f015 0f07 	tst.w	r5, #7
 8002536:	d00e      	beq.n	8002556 <pvPortMalloc+0xe6>
 8002538:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800253c:	f383 8811 	msr	BASEPRI, r3
 8002540:	f3bf 8f6f 	isb	sy
 8002544:	f3bf 8f4f 	dsb	sy
 8002548:	e7fe      	b.n	8002548 <pvPortMalloc+0xd8>
void *pvReturn = NULL;
 800254a:	2500      	movs	r5, #0
 800254c:	e7ef      	b.n	800252e <pvPortMalloc+0xbe>
 800254e:	2500      	movs	r5, #0
 8002550:	e7ed      	b.n	800252e <pvPortMalloc+0xbe>
 8002552:	2500      	movs	r5, #0
 8002554:	e7eb      	b.n	800252e <pvPortMalloc+0xbe>
}
 8002556:	4628      	mov	r0, r5
 8002558:	bd38      	pop	{r3, r4, r5, pc}
 800255a:	bf00      	nop
 800255c:	20002b58 	.word	0x20002b58
 8002560:	20002b44 	.word	0x20002b44
 8002564:	20002b54 	.word	0x20002b54
 8002568:	20002b5c 	.word	0x20002b5c
 800256c:	20002b50 	.word	0x20002b50
 8002570:	20002b4c 	.word	0x20002b4c

08002574 <vPortFree>:
	if( pv != NULL )
 8002574:	2800      	cmp	r0, #0
 8002576:	d034      	beq.n	80025e2 <vPortFree+0x6e>
{
 8002578:	b538      	push	{r3, r4, r5, lr}
 800257a:	4604      	mov	r4, r0
		puc -= xHeapStructSize;
 800257c:	f1a0 0508 	sub.w	r5, r0, #8
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8002580:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8002584:	4a17      	ldr	r2, [pc, #92]	@ (80025e4 <vPortFree+0x70>)
 8002586:	6812      	ldr	r2, [r2, #0]
 8002588:	4213      	tst	r3, r2
 800258a:	d108      	bne.n	800259e <vPortFree+0x2a>
 800258c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002590:	f383 8811 	msr	BASEPRI, r3
 8002594:	f3bf 8f6f 	isb	sy
 8002598:	f3bf 8f4f 	dsb	sy
 800259c:	e7fe      	b.n	800259c <vPortFree+0x28>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800259e:	f850 1c08 	ldr.w	r1, [r0, #-8]
 80025a2:	b141      	cbz	r1, 80025b6 <vPortFree+0x42>
 80025a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80025a8:	f383 8811 	msr	BASEPRI, r3
 80025ac:	f3bf 8f6f 	isb	sy
 80025b0:	f3bf 8f4f 	dsb	sy
 80025b4:	e7fe      	b.n	80025b4 <vPortFree+0x40>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80025b6:	ea23 0302 	bic.w	r3, r3, r2
 80025ba:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 80025be:	f005 fc6b 	bl	8007e98 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 80025c2:	f854 1c04 	ldr.w	r1, [r4, #-4]
 80025c6:	4a08      	ldr	r2, [pc, #32]	@ (80025e8 <vPortFree+0x74>)
 80025c8:	6813      	ldr	r3, [r2, #0]
 80025ca:	440b      	add	r3, r1
 80025cc:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80025ce:	4628      	mov	r0, r5
 80025d0:	f7ff ff1c 	bl	800240c <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80025d4:	4a05      	ldr	r2, [pc, #20]	@ (80025ec <vPortFree+0x78>)
 80025d6:	6813      	ldr	r3, [r2, #0]
 80025d8:	3301      	adds	r3, #1
 80025da:	6013      	str	r3, [r2, #0]
				( void ) xTaskResumeAll();
 80025dc:	f005 fcf6 	bl	8007fcc <xTaskResumeAll>
}
 80025e0:	bd38      	pop	{r3, r4, r5, pc}
 80025e2:	4770      	bx	lr
 80025e4:	20002b44 	.word	0x20002b44
 80025e8:	20002b54 	.word	0x20002b54
 80025ec:	20002b48 	.word	0x20002b48

080025f0 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80025f0:	b508      	push	{r3, lr}
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80025f2:	480b      	ldr	r0, [pc, #44]	@ (8002620 <MX_I2C1_Init+0x30>)
 80025f4:	4b0b      	ldr	r3, [pc, #44]	@ (8002624 <MX_I2C1_Init+0x34>)
 80025f6:	6003      	str	r3, [r0, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80025f8:	4b0b      	ldr	r3, [pc, #44]	@ (8002628 <MX_I2C1_Init+0x38>)
 80025fa:	6043      	str	r3, [r0, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80025fc:	2300      	movs	r3, #0
 80025fe:	6083      	str	r3, [r0, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002600:	60c3      	str	r3, [r0, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002602:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002606:	6102      	str	r2, [r0, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002608:	6143      	str	r3, [r0, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800260a:	6183      	str	r3, [r0, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800260c:	61c3      	str	r3, [r0, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800260e:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002610:	f002 fac2 	bl	8004b98 <HAL_I2C_Init>
 8002614:	b900      	cbnz	r0, 8002618 <MX_I2C1_Init+0x28>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002616:	bd08      	pop	{r3, pc}
    Error_Handler();
 8002618:	f000 faa8 	bl	8002b6c <Error_Handler>
}
 800261c:	e7fb      	b.n	8002616 <MX_I2C1_Init+0x26>
 800261e:	bf00      	nop
 8002620:	20006764 	.word	0x20006764
 8002624:	40005400 	.word	0x40005400
 8002628:	000186a0 	.word	0x000186a0

0800262c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800262c:	b530      	push	{r4, r5, lr}
 800262e:	b089      	sub	sp, #36	@ 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002630:	2300      	movs	r3, #0
 8002632:	9303      	str	r3, [sp, #12]
 8002634:	9304      	str	r3, [sp, #16]
 8002636:	9305      	str	r3, [sp, #20]
 8002638:	9306      	str	r3, [sp, #24]
 800263a:	9307      	str	r3, [sp, #28]
  if(i2cHandle->Instance==I2C1)
 800263c:	6802      	ldr	r2, [r0, #0]
 800263e:	4b14      	ldr	r3, [pc, #80]	@ (8002690 <HAL_I2C_MspInit+0x64>)
 8002640:	429a      	cmp	r2, r3
 8002642:	d001      	beq.n	8002648 <HAL_I2C_MspInit+0x1c>
    __HAL_RCC_I2C1_CLK_ENABLE();
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8002644:	b009      	add	sp, #36	@ 0x24
 8002646:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002648:	2500      	movs	r5, #0
 800264a:	9501      	str	r5, [sp, #4]
 800264c:	4c11      	ldr	r4, [pc, #68]	@ (8002694 <HAL_I2C_MspInit+0x68>)
 800264e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8002650:	f043 0302 	orr.w	r3, r3, #2
 8002654:	6323      	str	r3, [r4, #48]	@ 0x30
 8002656:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8002658:	f003 0302 	and.w	r3, r3, #2
 800265c:	9301      	str	r3, [sp, #4]
 800265e:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002660:	23c0      	movs	r3, #192	@ 0xc0
 8002662:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002664:	2312      	movs	r3, #18
 8002666:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002668:	2303      	movs	r3, #3
 800266a:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800266c:	2304      	movs	r3, #4
 800266e:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002670:	a903      	add	r1, sp, #12
 8002672:	4809      	ldr	r0, [pc, #36]	@ (8002698 <HAL_I2C_MspInit+0x6c>)
 8002674:	f002 f988 	bl	8004988 <HAL_GPIO_Init>
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002678:	9502      	str	r5, [sp, #8]
 800267a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800267c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002680:	6423      	str	r3, [r4, #64]	@ 0x40
 8002682:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8002684:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002688:	9302      	str	r3, [sp, #8]
 800268a:	9b02      	ldr	r3, [sp, #8]
}
 800268c:	e7da      	b.n	8002644 <HAL_I2C_MspInit+0x18>
 800268e:	bf00      	nop
 8002690:	40005400 	.word	0x40005400
 8002694:	40023800 	.word	0x40023800
 8002698:	40020400 	.word	0x40020400

0800269c <ignition_coil_begin_charge>:
 *
 * @param coil_index The index of the coil to be charged.
 */
void ignition_coil_begin_charge(void *arg)
{
    if (arg == NULL)
 800269c:	b330      	cbz	r0, 80026ec <ignition_coil_begin_charge+0x50>
{
 800269e:	b570      	push	{r4, r5, r6, lr}
 80026a0:	4604      	mov	r4, r0
    {
        return;
    }
    uint8_t *coil_index = (uint8_t *)arg;

    if (coil_index[1] > FIRMWARE_IGNITION_OUTPUT_COUNT - 1 || coil_index[0] > FIRMWARE_IGNITION_OUTPUT_COUNT - 1)
 80026a2:	7843      	ldrb	r3, [r0, #1]
 80026a4:	2b03      	cmp	r3, #3
 80026a6:	d802      	bhi.n	80026ae <ignition_coil_begin_charge+0x12>
 80026a8:	7803      	ldrb	r3, [r0, #0]
 80026aa:	2b03      	cmp	r3, #3
 80026ac:	d903      	bls.n	80026b6 <ignition_coil_begin_charge+0x1a>
    {
        log_error("Unkown ignition output");
 80026ae:	4810      	ldr	r0, [pc, #64]	@ (80026f0 <ignition_coil_begin_charge+0x54>)
 80026b0:	f7ff fc74 	bl	8001f9c <log_error>
    }
    ignition_coil_state[coil_index[0]] = IGNITION_COIL_STATE_CHARGING;
    ignition_coil_state[coil_index[1]] = IGNITION_COIL_STATE_CHARGING;
    HAL_GPIO_WritePin(ignition_outputs[coil_index[0]].gpio, ignition_outputs[coil_index[0]].pin, GPIO_PIN_SET);
    HAL_GPIO_WritePin(ignition_outputs[coil_index[1]].gpio, ignition_outputs[coil_index[1]].pin, GPIO_PIN_SET);
}
 80026b4:	bd70      	pop	{r4, r5, r6, pc}
    ignition_coil_state[coil_index[0]] = IGNITION_COIL_STATE_CHARGING;
 80026b6:	4a0f      	ldr	r2, [pc, #60]	@ (80026f4 <ignition_coil_begin_charge+0x58>)
 80026b8:	2501      	movs	r5, #1
 80026ba:	54d5      	strb	r5, [r2, r3]
    ignition_coil_state[coil_index[1]] = IGNITION_COIL_STATE_CHARGING;
 80026bc:	7843      	ldrb	r3, [r0, #1]
 80026be:	54d5      	strb	r5, [r2, r3]
    HAL_GPIO_WritePin(ignition_outputs[coil_index[0]].gpio, ignition_outputs[coil_index[0]].pin, GPIO_PIN_SET);
 80026c0:	7800      	ldrb	r0, [r0, #0]
 80026c2:	4e0d      	ldr	r6, [pc, #52]	@ (80026f8 <ignition_coil_begin_charge+0x5c>)
 80026c4:	6833      	ldr	r3, [r6, #0]
 80026c6:	eb03 01c0 	add.w	r1, r3, r0, lsl #3
 80026ca:	462a      	mov	r2, r5
 80026cc:	8889      	ldrh	r1, [r1, #4]
 80026ce:	f853 0030 	ldr.w	r0, [r3, r0, lsl #3]
 80026d2:	f002 fa44 	bl	8004b5e <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(ignition_outputs[coil_index[1]].gpio, ignition_outputs[coil_index[1]].pin, GPIO_PIN_SET);
 80026d6:	7860      	ldrb	r0, [r4, #1]
 80026d8:	6833      	ldr	r3, [r6, #0]
 80026da:	eb03 01c0 	add.w	r1, r3, r0, lsl #3
 80026de:	462a      	mov	r2, r5
 80026e0:	8889      	ldrh	r1, [r1, #4]
 80026e2:	f853 0030 	ldr.w	r0, [r3, r0, lsl #3]
 80026e6:	f002 fa3a 	bl	8004b5e <HAL_GPIO_WritePin>
 80026ea:	e7e3      	b.n	80026b4 <ignition_coil_begin_charge+0x18>
 80026ec:	4770      	bx	lr
 80026ee:	bf00      	nop
 80026f0:	0800ba48 	.word	0x0800ba48
 80026f4:	200067c0 	.word	0x200067c0
 80026f8:	200067c4 	.word	0x200067c4

080026fc <ignition_coil_fire_spark>:
 *
 * @param coil_index The index of the coil to fire the spark from.
 */
void ignition_coil_fire_spark(void *arg)
{
    if (arg == NULL)
 80026fc:	b340      	cbz	r0, 8002750 <ignition_coil_fire_spark+0x54>
{
 80026fe:	b570      	push	{r4, r5, r6, lr}
 8002700:	4604      	mov	r4, r0
    {
        return;
    }

    uint8_t *coil_index = (uint8_t *)arg;
    if (coil_index[1] > FIRMWARE_IGNITION_OUTPUT_COUNT - 1 || coil_index[0] > FIRMWARE_IGNITION_OUTPUT_COUNT - 1)
 8002702:	7843      	ldrb	r3, [r0, #1]
 8002704:	2b03      	cmp	r3, #3
 8002706:	d802      	bhi.n	800270e <ignition_coil_fire_spark+0x12>
 8002708:	7803      	ldrb	r3, [r0, #0]
 800270a:	2b03      	cmp	r3, #3
 800270c:	d903      	bls.n	8002716 <ignition_coil_fire_spark+0x1a>
    {
        log_error("Unkown ignition output");
 800270e:	4811      	ldr	r0, [pc, #68]	@ (8002754 <ignition_coil_fire_spark+0x58>)
 8002710:	f7ff fc44 	bl	8001f9c <log_error>
    ignition_coil_state[coil_index[0]] = IGNITION_COIL_STATE_NOT_CHARGING;
    ignition_coil_state[coil_index[1]] = IGNITION_COIL_STATE_NOT_CHARGING;
    HAL_GPIO_WritePin(ignition_outputs[coil_index[0]].gpio, ignition_outputs[coil_index[0]].pin, GPIO_PIN_RESET);
    HAL_GPIO_WritePin(ignition_outputs[coil_index[1]].gpio, ignition_outputs[coil_index[1]].pin, GPIO_PIN_RESET);
    spark_is_in_progress = false;
}
 8002714:	bd70      	pop	{r4, r5, r6, pc}
    ignition_coil_state[coil_index[0]] = IGNITION_COIL_STATE_NOT_CHARGING;
 8002716:	4a10      	ldr	r2, [pc, #64]	@ (8002758 <ignition_coil_fire_spark+0x5c>)
 8002718:	2500      	movs	r5, #0
 800271a:	54d5      	strb	r5, [r2, r3]
    ignition_coil_state[coil_index[1]] = IGNITION_COIL_STATE_NOT_CHARGING;
 800271c:	7843      	ldrb	r3, [r0, #1]
 800271e:	54d5      	strb	r5, [r2, r3]
    HAL_GPIO_WritePin(ignition_outputs[coil_index[0]].gpio, ignition_outputs[coil_index[0]].pin, GPIO_PIN_RESET);
 8002720:	7800      	ldrb	r0, [r0, #0]
 8002722:	4e0e      	ldr	r6, [pc, #56]	@ (800275c <ignition_coil_fire_spark+0x60>)
 8002724:	6833      	ldr	r3, [r6, #0]
 8002726:	eb03 01c0 	add.w	r1, r3, r0, lsl #3
 800272a:	462a      	mov	r2, r5
 800272c:	8889      	ldrh	r1, [r1, #4]
 800272e:	f853 0030 	ldr.w	r0, [r3, r0, lsl #3]
 8002732:	f002 fa14 	bl	8004b5e <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(ignition_outputs[coil_index[1]].gpio, ignition_outputs[coil_index[1]].pin, GPIO_PIN_RESET);
 8002736:	7860      	ldrb	r0, [r4, #1]
 8002738:	6833      	ldr	r3, [r6, #0]
 800273a:	eb03 01c0 	add.w	r1, r3, r0, lsl #3
 800273e:	462a      	mov	r2, r5
 8002740:	8889      	ldrh	r1, [r1, #4]
 8002742:	f853 0030 	ldr.w	r0, [r3, r0, lsl #3]
 8002746:	f002 fa0a 	bl	8004b5e <HAL_GPIO_WritePin>
    spark_is_in_progress = false;
 800274a:	4b05      	ldr	r3, [pc, #20]	@ (8002760 <ignition_coil_fire_spark+0x64>)
 800274c:	701d      	strb	r5, [r3, #0]
 800274e:	e7e1      	b.n	8002714 <ignition_coil_fire_spark+0x18>
 8002750:	4770      	bx	lr
 8002752:	bf00      	nop
 8002754:	0800ba48 	.word	0x0800ba48
 8002758:	200067c0 	.word	0x200067c0
 800275c:	200067c4 	.word	0x200067c4
 8002760:	200067bb 	.word	0x200067bb

08002764 <ignition_init>:
{
 8002764:	b510      	push	{r4, lr}
    if (outputs == NULL)
 8002766:	b1a8      	cbz	r0, 8002794 <ignition_init+0x30>
    ignition_outputs = outputs;
 8002768:	4a24      	ldr	r2, [pc, #144]	@ (80027fc <ignition_init+0x98>)
 800276a:	6010      	str	r0, [r2, #0]
    switch (config.firing_order)
 800276c:	4b24      	ldr	r3, [pc, #144]	@ (8002800 <ignition_init+0x9c>)
 800276e:	f893 3318 	ldrb.w	r3, [r3, #792]	@ 0x318
 8002772:	b99b      	cbnz	r3, 800279c <ignition_init+0x38>
        number_of_cylinders = 4;
 8002774:	2204      	movs	r2, #4
 8002776:	4b23      	ldr	r3, [pc, #140]	@ (8002804 <ignition_init+0xa0>)
 8002778:	701a      	strb	r2, [r3, #0]
        ignition_order[0] = 1;
 800277a:	4b23      	ldr	r3, [pc, #140]	@ (8002808 <ignition_init+0xa4>)
 800277c:	2101      	movs	r1, #1
 800277e:	7019      	strb	r1, [r3, #0]
        ignition_order[1] = 3;
 8002780:	2103      	movs	r1, #3
 8002782:	7059      	strb	r1, [r3, #1]
        ignition_order[2] = 4;
 8002784:	709a      	strb	r2, [r3, #2]
        ignition_order[3] = 2;
 8002786:	2202      	movs	r2, #2
 8002788:	70da      	strb	r2, [r3, #3]
    runtime.firing_interval_deg = (angle_t)720 / (angle_t)number_of_cylinders;
 800278a:	4b20      	ldr	r3, [pc, #128]	@ (800280c <ignition_init+0xa8>)
 800278c:	4a20      	ldr	r2, [pc, #128]	@ (8002810 <ignition_init+0xac>)
 800278e:	61da      	str	r2, [r3, #28]
    for (size_t i = 0; i < FIRMWARE_IGNITION_OUTPUT_COUNT; i++)
 8002790:	2400      	movs	r4, #0
 8002792:	e013      	b.n	80027bc <ignition_init+0x58>
        log_error("ignition init failed. No output config");
 8002794:	481f      	ldr	r0, [pc, #124]	@ (8002814 <ignition_init+0xb0>)
 8002796:	f7ff fc01 	bl	8001f9c <log_error>
        return;
 800279a:	e002      	b.n	80027a2 <ignition_init+0x3e>
        log_error("ignition init failed. unkown firing order.");
 800279c:	481e      	ldr	r0, [pc, #120]	@ (8002818 <ignition_init+0xb4>)
 800279e:	f7ff fbfd 	bl	8001f9c <log_error>
}
 80027a2:	bd10      	pop	{r4, pc}
        ignition_coil_state[i] = HAL_GPIO_ReadPin(ignition_outputs[i].gpio, ignition_outputs[i].pin);
 80027a4:	4b15      	ldr	r3, [pc, #84]	@ (80027fc <ignition_init+0x98>)
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	eb03 02c4 	add.w	r2, r3, r4, lsl #3
 80027ac:	8891      	ldrh	r1, [r2, #4]
 80027ae:	f853 0034 	ldr.w	r0, [r3, r4, lsl #3]
 80027b2:	f002 f9cd 	bl	8004b50 <HAL_GPIO_ReadPin>
 80027b6:	4b19      	ldr	r3, [pc, #100]	@ (800281c <ignition_init+0xb8>)
 80027b8:	5518      	strb	r0, [r3, r4]
    for (size_t i = 0; i < FIRMWARE_IGNITION_OUTPUT_COUNT; i++)
 80027ba:	3401      	adds	r4, #1
 80027bc:	2c03      	cmp	r4, #3
 80027be:	d9f1      	bls.n	80027a4 <ignition_init+0x40>
    for (size_t i = 0; i < FIRMWARE_IGNITION_OUTPUT_COUNT; i++)
 80027c0:	2400      	movs	r4, #0
 80027c2:	e00a      	b.n	80027da <ignition_init+0x76>
        HAL_GPIO_WritePin(ignition_outputs[i].gpio, ignition_outputs[i].pin, GPIO_PIN_RESET);
 80027c4:	4b0d      	ldr	r3, [pc, #52]	@ (80027fc <ignition_init+0x98>)
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	eb03 01c4 	add.w	r1, r3, r4, lsl #3
 80027cc:	2200      	movs	r2, #0
 80027ce:	8889      	ldrh	r1, [r1, #4]
 80027d0:	f853 0034 	ldr.w	r0, [r3, r4, lsl #3]
 80027d4:	f002 f9c3 	bl	8004b5e <HAL_GPIO_WritePin>
    for (size_t i = 0; i < FIRMWARE_IGNITION_OUTPUT_COUNT; i++)
 80027d8:	3401      	adds	r4, #1
 80027da:	2c03      	cmp	r4, #3
 80027dc:	d9f2      	bls.n	80027c4 <ignition_init+0x60>
    if (config.multi_spark_enabled && !IS_IN_RANGE(config.multi_spark_number_of_sparks, 0, IGNITION_MULTI_SPARK_MAX_SPARKS))
 80027de:	4b08      	ldr	r3, [pc, #32]	@ (8002800 <ignition_init+0x9c>)
 80027e0:	f893 3322 	ldrb.w	r3, [r3, #802]	@ 0x322
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d0dc      	beq.n	80027a2 <ignition_init+0x3e>
 80027e8:	4b05      	ldr	r3, [pc, #20]	@ (8002800 <ignition_init+0x9c>)
 80027ea:	f893 3323 	ldrb.w	r3, [r3, #803]	@ 0x323
 80027ee:	2b08      	cmp	r3, #8
 80027f0:	d9d7      	bls.n	80027a2 <ignition_init+0x3e>
        log_warning("Multi spark is enabled but number of sparks are 0.");
 80027f2:	480b      	ldr	r0, [pc, #44]	@ (8002820 <ignition_init+0xbc>)
 80027f4:	f7ff fbf0 	bl	8001fd8 <log_warning>
 80027f8:	e7d3      	b.n	80027a2 <ignition_init+0x3e>
 80027fa:	bf00      	nop
 80027fc:	200067c4 	.word	0x200067c4
 8002800:	20002344 	.word	0x20002344
 8002804:	200067ba 	.word	0x200067ba
 8002808:	200067bc 	.word	0x200067bc
 800280c:	200012f4 	.word	0x200012f4
 8002810:	43340000 	.word	0x43340000
 8002814:	0800ba60 	.word	0x0800ba60
 8002818:	0800ba88 	.word	0x0800ba88
 800281c:	200067c0 	.word	0x200067c0
 8002820:	0800bab4 	.word	0x0800bab4

08002824 <ignition_trigger_event_handle>:
    if (config.ignition_mode == IM_NO_IGNITION)
 8002824:	4b94      	ldr	r3, [pc, #592]	@ (8002a78 <ignition_trigger_event_handle+0x254>)
 8002826:	f893 3321 	ldrb.w	r3, [r3, #801]	@ 0x321
 800282a:	2b00      	cmp	r3, #0
 800282c:	f000 8123 	beq.w	8002a76 <ignition_trigger_event_handle+0x252>
{
 8002830:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002832:	ed2d 8b02 	vpush	{d8}
 8002836:	b085      	sub	sp, #20
 8002838:	eeb0 8a60 	vmov.f32	s16, s1
    if (runtime.firing_interval_deg == 0)
 800283c:	4b8f      	ldr	r3, [pc, #572]	@ (8002a7c <ignition_trigger_event_handle+0x258>)
 800283e:	ed93 7a07 	vldr	s14, [r3, #28]
 8002842:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8002846:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800284a:	f000 80e4 	beq.w	8002a16 <ignition_trigger_event_handle+0x1f2>
    if (!IS_IN_RANGE(config.ignition_dwell, IGNITION_MIN_DWELL_TIME_MS, IGNITION_MAX_DWELL_TIME_MS))
 800284e:	4b8a      	ldr	r3, [pc, #552]	@ (8002a78 <ignition_trigger_event_handle+0x254>)
 8002850:	edd3 7a83 	vldr	s15, [r3, #524]	@ 0x20c
 8002854:	eef6 6a00 	vmov.f32	s13, #96	@ 0x3f000000  0.5
 8002858:	eef4 7ae6 	vcmpe.f32	s15, s13
 800285c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002860:	f2c0 80dd 	blt.w	8002a1e <ignition_trigger_event_handle+0x1fa>
 8002864:	eef1 6a00 	vmov.f32	s13, #16	@ 0x40800000  4.0
 8002868:	eef4 7ae6 	vcmpe.f32	s15, s13
 800286c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002870:	f200 80d5 	bhi.w	8002a1e <ignition_trigger_event_handle+0x1fa>
    uint8_t phase = (uint8_t)(crankshaft_angle / runtime.firing_interval_deg);
 8002874:	eec0 6a07 	vdiv.f32	s13, s0, s14
 8002878:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 800287c:	edcd 6a01 	vstr	s13, [sp, #4]
 8002880:	f89d 3004 	ldrb.w	r3, [sp, #4]
    volatile angle_t next_spark_angle = phase * runtime.firing_interval_deg - spark_advance + runtime.firing_interval_deg;
 8002884:	ee06 3a90 	vmov	s13, r3
 8002888:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800288c:	ee66 6a87 	vmul.f32	s13, s13, s14
 8002890:	eeb3 6a0e 	vmov.f32	s12, #62	@ 0x41f00000  30.0
 8002894:	ee76 6ac6 	vsub.f32	s13, s13, s12
 8002898:	ee37 7a26 	vadd.f32	s14, s14, s13
 800289c:	ed8d 7a03 	vstr	s14, [sp, #12]
    volatile angle_t next_dwell_angle = next_spark_angle - (float)config.ignition_dwell * (float)1000 * degrees_per_microsecond(rpm);
 80028a0:	ed9d 7a03 	vldr	s14, [sp, #12]
 80028a4:	eddf 6a76 	vldr	s13, [pc, #472]	@ 8002a80 <ignition_trigger_event_handle+0x25c>
 80028a8:	ee67 7aa6 	vmul.f32	s15, s15, s13
 * @brief Function to calculate the degrees the engine turns in one microsecond.
 * @note Returns 0 if rpm is 0.
 */
static inline angle_t degrees_per_microsecond(rpm_t rpm)
{
    if (rpm == 0)
 80028ac:	eef5 0a40 	vcmp.f32	s1, #0.0
 80028b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80028b4:	f000 80d0 	beq.w	8002a58 <ignition_trigger_event_handle+0x234>
    {
        return 0.0f;
    }
    return (angle_t)(rpm * 360.0f) / (60.0f * 1e6f);
 80028b8:	eddf 6a72 	vldr	s13, [pc, #456]	@ 8002a84 <ignition_trigger_event_handle+0x260>
 80028bc:	ee60 6aa6 	vmul.f32	s13, s1, s13
 80028c0:	eddf 5a71 	vldr	s11, [pc, #452]	@ 8002a88 <ignition_trigger_event_handle+0x264>
 80028c4:	ee86 6aa5 	vdiv.f32	s12, s13, s11
 80028c8:	ee67 7a86 	vmul.f32	s15, s15, s12
 80028cc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80028d0:	edcd 7a02 	vstr	s15, [sp, #8]
    next_firing_cylinders[0] = ignition_order[phase] - 1;
 80028d4:	4c6d      	ldr	r4, [pc, #436]	@ (8002a8c <ignition_trigger_event_handle+0x268>)
 80028d6:	5ce2      	ldrb	r2, [r4, r3]
 80028d8:	3a01      	subs	r2, #1
 80028da:	b2d2      	uxtb	r2, r2
 80028dc:	496c      	ldr	r1, [pc, #432]	@ (8002a90 <ignition_trigger_event_handle+0x26c>)
 80028de:	700a      	strb	r2, [r1, #0]
    next_firing_cylinders[1] = ignition_order[phase] - 1;
 80028e0:	704a      	strb	r2, [r1, #1]
        next_firing_cylinders[1] = ignition_order[phase + 2] - 1;
 80028e2:	3302      	adds	r3, #2
 80028e4:	5ce3      	ldrb	r3, [r4, r3]
 80028e6:	3b01      	subs	r3, #1
 80028e8:	704b      	strb	r3, [r1, #1]
    bool is_synced = runtime.trigger_sync_status == TS_FULLY_SYNCED;
 80028ea:	4b64      	ldr	r3, [pc, #400]	@ (8002a7c <ignition_trigger_event_handle+0x258>)
 80028ec:	f893 4048 	ldrb.w	r4, [r3, #72]	@ 0x48
    if (is_synced && (next_dwell_angle - crankshaft_angle) < 10 && !spark_is_in_progress && (next_dwell_angle - crankshaft_angle) > 0)
 80028f0:	2c01      	cmp	r4, #1
 80028f2:	f040 80ad 	bne.w	8002a50 <ignition_trigger_event_handle+0x22c>
 80028f6:	eddd 7a02 	vldr	s15, [sp, #8]
 80028fa:	ee77 7ac0 	vsub.f32	s15, s15, s0
 80028fe:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8002902:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002906:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800290a:	f140 80a1 	bpl.w	8002a50 <ignition_trigger_event_handle+0x22c>
 800290e:	4b61      	ldr	r3, [pc, #388]	@ (8002a94 <ignition_trigger_event_handle+0x270>)
 8002910:	781b      	ldrb	r3, [r3, #0]
 8002912:	2b00      	cmp	r3, #0
 8002914:	f040 809c 	bne.w	8002a50 <ignition_trigger_event_handle+0x22c>
 8002918:	eddd 7a02 	vldr	s15, [sp, #8]
 800291c:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8002920:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002924:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002928:	f340 8092 	ble.w	8002a50 <ignition_trigger_event_handle+0x22c>
        time_us_t dwell_start_time_us = current_time_us + (time_us_t)((next_dwell_angle - crankshaft_angle) * microseconds_per_degree(rpm));
 800292c:	eddd 7a02 	vldr	s15, [sp, #8]
 8002930:	ee77 7ac0 	vsub.f32	s15, s15, s0
    if (rpm == 0)
 8002934:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8002938:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800293c:	f000 808f 	beq.w	8002a5e <ignition_trigger_event_handle+0x23a>
    return (time_us_t)60.0f * 1e6f / (rpm * 360.0f);
 8002940:	ed9f 7a50 	vldr	s14, [pc, #320]	@ 8002a84 <ignition_trigger_event_handle+0x260>
 8002944:	ee28 7a07 	vmul.f32	s14, s16, s14
 8002948:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8002a88 <ignition_trigger_event_handle+0x264>
 800294c:	eec6 8a87 	vdiv.f32	s17, s13, s14
 8002950:	eefc 8ae8 	vcvt.u32.f32	s17, s17
 8002954:	eef8 8a68 	vcvt.f32.u32	s17, s17
 8002958:	ee67 7aa8 	vmul.f32	s15, s15, s17
 800295c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002960:	ee17 5a90 	vmov	r5, s15
 8002964:	4405      	add	r5, r0
        time_us_t spark_start_time_us = current_time_us + (time_us_t)((next_spark_angle - crankshaft_angle) * microseconds_per_degree(rpm));
 8002966:	eddd 7a03 	vldr	s15, [sp, #12]
 800296a:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800296e:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8002972:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002976:	ee17 6a90 	vmov	r6, s15
 800297a:	4406      	add	r6, r0
        scheduler_schedule_event_with_arg(dwell_start_time_us, ignition_coil_begin_charge, (void *)next_firing_cylinders);
 800297c:	4f44      	ldr	r7, [pc, #272]	@ (8002a90 <ignition_trigger_event_handle+0x26c>)
 800297e:	463a      	mov	r2, r7
 8002980:	4945      	ldr	r1, [pc, #276]	@ (8002a98 <ignition_trigger_event_handle+0x274>)
 8002982:	4628      	mov	r0, r5
 8002984:	f006 fb12 	bl	8008fac <scheduler_schedule_event_with_arg>
        scheduler_schedule_event_with_arg(spark_start_time_us, ignition_coil_fire_spark, (void *)next_firing_cylinders);
 8002988:	463a      	mov	r2, r7
 800298a:	4944      	ldr	r1, [pc, #272]	@ (8002a9c <ignition_trigger_event_handle+0x278>)
 800298c:	4630      	mov	r0, r6
 800298e:	f006 fb0d 	bl	8008fac <scheduler_schedule_event_with_arg>
        if (!config.multi_spark_enabled)
 8002992:	4b39      	ldr	r3, [pc, #228]	@ (8002a78 <ignition_trigger_event_handle+0x254>)
 8002994:	f893 3322 	ldrb.w	r3, [r3, #802]	@ 0x322
 8002998:	2b00      	cmp	r3, #0
 800299a:	d063      	beq.n	8002a64 <ignition_trigger_event_handle+0x240>
        while (number_of_scheduled_sparks < config.multi_spark_number_of_sparks)
 800299c:	4b36      	ldr	r3, [pc, #216]	@ (8002a78 <ignition_trigger_event_handle+0x254>)
 800299e:	f893 3323 	ldrb.w	r3, [r3, #803]	@ 0x323
 80029a2:	42a3      	cmp	r3, r4
 80029a4:	d963      	bls.n	8002a6e <ignition_trigger_event_handle+0x24a>
            if (rpm > config.multi_spark_rpm_threshold)
 80029a6:	4b34      	ldr	r3, [pc, #208]	@ (8002a78 <ignition_trigger_event_handle+0x254>)
 80029a8:	edd3 7a84 	vldr	s15, [r3, #528]	@ 0x210
 80029ac:	eef4 7ac8 	vcmpe.f32	s15, s16
 80029b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80029b4:	d45b      	bmi.n	8002a6e <ignition_trigger_event_handle+0x24a>
            time_us_t duration_of_spark_and_dwell = (uint32_t)((float)number_of_scheduled_sparks * (config.multi_spark_rest_time_ms + config.ignition_dwell) * (float)1000);
 80029b6:	ee07 4a90 	vmov	s15, r4
 80029ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80029be:	ed93 7a85 	vldr	s14, [r3, #532]	@ 0x214
 80029c2:	edd3 6a83 	vldr	s13, [r3, #524]	@ 0x20c
 80029c6:	ee37 7a26 	vadd.f32	s14, s14, s13
 80029ca:	ee67 7a87 	vmul.f32	s15, s15, s14
 80029ce:	ed9f 7a2c 	vldr	s14, [pc, #176]	@ 8002a80 <ignition_trigger_event_handle+0x25c>
 80029d2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80029d6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
            if (duration_of_spark_and_dwell >= config.multi_spark_max_trailing_angle * microseconds_per_degree(rpm))
 80029da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80029de:	ed93 7a86 	vldr	s14, [r3, #536]	@ 0x218
 80029e2:	ee28 7a87 	vmul.f32	s14, s17, s14
 80029e6:	eef4 6ac7 	vcmpe.f32	s13, s14
 80029ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80029ee:	da3e      	bge.n	8002a6e <ignition_trigger_event_handle+0x24a>
            dwell_start_time_us += duration_of_spark_and_dwell;
 80029f0:	ee17 3a90 	vmov	r3, s15
 80029f4:	441d      	add	r5, r3
            spark_start_time_us += duration_of_spark_and_dwell;
 80029f6:	441e      	add	r6, r3
            if (!scheduler_schedule_event_with_arg(dwell_start_time_us, ignition_coil_begin_charge, (void *)next_firing_cylinders))
 80029f8:	4a25      	ldr	r2, [pc, #148]	@ (8002a90 <ignition_trigger_event_handle+0x26c>)
 80029fa:	4927      	ldr	r1, [pc, #156]	@ (8002a98 <ignition_trigger_event_handle+0x274>)
 80029fc:	4628      	mov	r0, r5
 80029fe:	f006 fad5 	bl	8008fac <scheduler_schedule_event_with_arg>
 8002a02:	b3a0      	cbz	r0, 8002a6e <ignition_trigger_event_handle+0x24a>
            if (!scheduler_schedule_event_with_arg(spark_start_time_us, ignition_coil_fire_spark, (void *)next_firing_cylinders))
 8002a04:	4a22      	ldr	r2, [pc, #136]	@ (8002a90 <ignition_trigger_event_handle+0x26c>)
 8002a06:	4925      	ldr	r1, [pc, #148]	@ (8002a9c <ignition_trigger_event_handle+0x278>)
 8002a08:	4630      	mov	r0, r6
 8002a0a:	f006 facf 	bl	8008fac <scheduler_schedule_event_with_arg>
 8002a0e:	b370      	cbz	r0, 8002a6e <ignition_trigger_event_handle+0x24a>
            number_of_scheduled_sparks++;
 8002a10:	3401      	adds	r4, #1
 8002a12:	b2e4      	uxtb	r4, r4
 8002a14:	e7c2      	b.n	800299c <ignition_trigger_event_handle+0x178>
        log_error("ignition not initialized.");
 8002a16:	4822      	ldr	r0, [pc, #136]	@ (8002aa0 <ignition_trigger_event_handle+0x27c>)
 8002a18:	f7ff fac0 	bl	8001f9c <log_error>
        return;
 8002a1c:	e018      	b.n	8002a50 <ignition_trigger_event_handle+0x22c>
        config.ignition_dwell = CLAMP(config.ignition_dwell, IGNITION_MIN_DWELL_TIME_MS, IGNITION_MAX_DWELL_TIME_MS);
 8002a1e:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8002a22:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002a26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a2a:	d409      	bmi.n	8002a40 <ignition_trigger_event_handle+0x21c>
 8002a2c:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 8002a30:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002a34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a38:	dd04      	ble.n	8002a44 <ignition_trigger_event_handle+0x220>
 8002a3a:	eef0 7a47 	vmov.f32	s15, s14
 8002a3e:	e001      	b.n	8002a44 <ignition_trigger_event_handle+0x220>
 8002a40:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8002a44:	4b0c      	ldr	r3, [pc, #48]	@ (8002a78 <ignition_trigger_event_handle+0x254>)
 8002a46:	edc3 7a83 	vstr	s15, [r3, #524]	@ 0x20c
        log_error("ignition dwell out of bounds.");
 8002a4a:	4816      	ldr	r0, [pc, #88]	@ (8002aa4 <ignition_trigger_event_handle+0x280>)
 8002a4c:	f7ff faa6 	bl	8001f9c <log_error>
}
 8002a50:	b005      	add	sp, #20
 8002a52:	ecbd 8b02 	vpop	{d8}
 8002a56:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return 0.0f;
 8002a58:	ed9f 6a13 	vldr	s12, [pc, #76]	@ 8002aa8 <ignition_trigger_event_handle+0x284>
 8002a5c:	e734      	b.n	80028c8 <ignition_trigger_event_handle+0xa4>
        return 0;
 8002a5e:	eddf 8a13 	vldr	s17, [pc, #76]	@ 8002aac <ignition_trigger_event_handle+0x288>
 8002a62:	e777      	b.n	8002954 <ignition_trigger_event_handle+0x130>
            runtime.multi_spark_actual_spark_count = number_of_scheduled_sparks;
 8002a64:	4b05      	ldr	r3, [pc, #20]	@ (8002a7c <ignition_trigger_event_handle+0x258>)
 8002a66:	2201      	movs	r2, #1
 8002a68:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
            return;
 8002a6c:	e7f0      	b.n	8002a50 <ignition_trigger_event_handle+0x22c>
        runtime.multi_spark_actual_spark_count = number_of_scheduled_sparks;
 8002a6e:	4b03      	ldr	r3, [pc, #12]	@ (8002a7c <ignition_trigger_event_handle+0x258>)
 8002a70:	f883 404c 	strb.w	r4, [r3, #76]	@ 0x4c
 8002a74:	e7ec      	b.n	8002a50 <ignition_trigger_event_handle+0x22c>
 8002a76:	4770      	bx	lr
 8002a78:	20002344 	.word	0x20002344
 8002a7c:	200012f4 	.word	0x200012f4
 8002a80:	447a0000 	.word	0x447a0000
 8002a84:	43b40000 	.word	0x43b40000
 8002a88:	4c64e1c0 	.word	0x4c64e1c0
 8002a8c:	200067bc 	.word	0x200067bc
 8002a90:	200067b8 	.word	0x200067b8
 8002a94:	200067bb 	.word	0x200067bb
 8002a98:	0800269d 	.word	0x0800269d
 8002a9c:	080026fd 	.word	0x080026fd
 8002aa0:	0800bae8 	.word	0x0800bae8
 8002aa4:	0800bb04 	.word	0x0800bb04
	...

08002ab0 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002ab0:	f100 0308 	add.w	r3, r0, #8
 8002ab4:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002ab6:	f04f 32ff 	mov.w	r2, #4294967295
 8002aba:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002abc:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002abe:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002ac0:	2300      	movs	r3, #0
 8002ac2:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002ac4:	4770      	bx	lr

08002ac6 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002aca:	4770      	bx	lr

08002acc <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 8002acc:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002ace:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002ad0:	689a      	ldr	r2, [r3, #8]
 8002ad2:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002ad4:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002ad6:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8002ad8:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 8002ada:	6803      	ldr	r3, [r0, #0]
 8002adc:	3301      	adds	r3, #1
 8002ade:	6003      	str	r3, [r0, #0]
}
 8002ae0:	4770      	bx	lr

08002ae2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002ae2:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002ae4:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002ae6:	f1b5 3fff 	cmp.w	r5, #4294967295
 8002aea:	d011      	beq.n	8002b10 <vListInsert+0x2e>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002aec:	f100 0308 	add.w	r3, r0, #8
 8002af0:	461c      	mov	r4, r3
 8002af2:	685b      	ldr	r3, [r3, #4]
 8002af4:	681a      	ldr	r2, [r3, #0]
 8002af6:	42aa      	cmp	r2, r5
 8002af8:	d9fa      	bls.n	8002af0 <vListInsert+0xe>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002afa:	6863      	ldr	r3, [r4, #4]
 8002afc:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002afe:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002b00:	608c      	str	r4, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 8002b02:	6061      	str	r1, [r4, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8002b04:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 8002b06:	6803      	ldr	r3, [r0, #0]
 8002b08:	3301      	adds	r3, #1
 8002b0a:	6003      	str	r3, [r0, #0]
}
 8002b0c:	bc30      	pop	{r4, r5}
 8002b0e:	4770      	bx	lr
		pxIterator = pxList->xListEnd.pxPrevious;
 8002b10:	6904      	ldr	r4, [r0, #16]
 8002b12:	e7f2      	b.n	8002afa <vListInsert+0x18>

08002b14 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8002b14:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002b16:	6841      	ldr	r1, [r0, #4]
 8002b18:	6882      	ldr	r2, [r0, #8]
 8002b1a:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002b1c:	6841      	ldr	r1, [r0, #4]
 8002b1e:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002b20:	685a      	ldr	r2, [r3, #4]
 8002b22:	4282      	cmp	r2, r0
 8002b24:	d006      	beq.n	8002b34 <uxListRemove+0x20>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8002b26:	2200      	movs	r2, #0
 8002b28:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 8002b2a:	681a      	ldr	r2, [r3, #0]
 8002b2c:	3a01      	subs	r2, #1
 8002b2e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002b30:	6818      	ldr	r0, [r3, #0]
}
 8002b32:	4770      	bx	lr
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002b34:	6882      	ldr	r2, [r0, #8]
 8002b36:	605a      	str	r2, [r3, #4]
 8002b38:	e7f5      	b.n	8002b26 <uxListRemove+0x12>
	...

08002b3c <HAL_GPIO_EXTI_Callback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
  __NOP();
 8002b3c:	bf00      	nop
  if (GPIO_Pin == GPIO_PIN_9)
 8002b3e:	f5b0 7f00 	cmp.w	r0, #512	@ 0x200
 8002b42:	d000      	beq.n	8002b46 <HAL_GPIO_EXTI_Callback+0xa>
 8002b44:	4770      	bx	lr
{
 8002b46:	b508      	push	{r3, lr}
  {
    trigger_tooth_handle(&trigger1);
 8002b48:	4801      	ldr	r0, [pc, #4]	@ (8002b50 <HAL_GPIO_EXTI_Callback+0x14>)
 8002b4a:	f006 fad1 	bl	80090f0 <trigger_tooth_handle>
  }

  
}
 8002b4e:	bd08      	pop	{r3, pc}
 8002b50:	2000124c 	.word	0x2000124c

08002b54 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002b54:	b508      	push	{r3, lr}
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM11)
 8002b56:	6802      	ldr	r2, [r0, #0]
 8002b58:	4b03      	ldr	r3, [pc, #12]	@ (8002b68 <HAL_TIM_PeriodElapsedCallback+0x14>)
 8002b5a:	429a      	cmp	r2, r3
 8002b5c:	d000      	beq.n	8002b60 <HAL_TIM_PeriodElapsedCallback+0xc>
    HAL_IncTick();
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002b5e:	bd08      	pop	{r3, pc}
    HAL_IncTick();
 8002b60:	f001 f8e2 	bl	8003d28 <HAL_IncTick>
}
 8002b64:	e7fb      	b.n	8002b5e <HAL_TIM_PeriodElapsedCallback+0xa>
 8002b66:	bf00      	nop
 8002b68:	40014800 	.word	0x40014800

08002b6c <Error_Handler>:
  __ASM volatile ("cpsid i" : : : "memory");
 8002b6c:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002b6e:	e7fe      	b.n	8002b6e <Error_Handler+0x2>

08002b70 <SystemClock_Config>:
{
 8002b70:	b510      	push	{r4, lr}
 8002b72:	b094      	sub	sp, #80	@ 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002b74:	ac08      	add	r4, sp, #32
 8002b76:	2230      	movs	r2, #48	@ 0x30
 8002b78:	2100      	movs	r1, #0
 8002b7a:	4620      	mov	r0, r4
 8002b7c:	f007 ff6e 	bl	800aa5c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002b80:	2300      	movs	r3, #0
 8002b82:	9303      	str	r3, [sp, #12]
 8002b84:	9304      	str	r3, [sp, #16]
 8002b86:	9305      	str	r3, [sp, #20]
 8002b88:	9306      	str	r3, [sp, #24]
 8002b8a:	9307      	str	r3, [sp, #28]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002b8c:	9301      	str	r3, [sp, #4]
 8002b8e:	4a21      	ldr	r2, [pc, #132]	@ (8002c14 <SystemClock_Config+0xa4>)
 8002b90:	6c11      	ldr	r1, [r2, #64]	@ 0x40
 8002b92:	f041 5180 	orr.w	r1, r1, #268435456	@ 0x10000000
 8002b96:	6411      	str	r1, [r2, #64]	@ 0x40
 8002b98:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002b9a:	f002 5280 	and.w	r2, r2, #268435456	@ 0x10000000
 8002b9e:	9201      	str	r2, [sp, #4]
 8002ba0:	9a01      	ldr	r2, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8002ba2:	9302      	str	r3, [sp, #8]
 8002ba4:	4a1c      	ldr	r2, [pc, #112]	@ (8002c18 <SystemClock_Config+0xa8>)
 8002ba6:	6813      	ldr	r3, [r2, #0]
 8002ba8:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8002bac:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002bb0:	6013      	str	r3, [r2, #0]
 8002bb2:	6813      	ldr	r3, [r2, #0]
 8002bb4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8002bb8:	9302      	str	r3, [sp, #8]
 8002bba:	9b02      	ldr	r3, [sp, #8]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002bbc:	2301      	movs	r3, #1
 8002bbe:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002bc0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002bc4:	9309      	str	r3, [sp, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002bc6:	2302      	movs	r3, #2
 8002bc8:	930e      	str	r3, [sp, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002bca:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002bce:	930f      	str	r3, [sp, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8002bd0:	2319      	movs	r3, #25
 8002bd2:	9310      	str	r3, [sp, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8002bd4:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8002bd8:	9311      	str	r3, [sp, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8002bda:	2304      	movs	r3, #4
 8002bdc:	9312      	str	r3, [sp, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8002bde:	2307      	movs	r3, #7
 8002be0:	9313      	str	r3, [sp, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002be2:	4620      	mov	r0, r4
 8002be4:	f002 ff14 	bl	8005a10 <HAL_RCC_OscConfig>
 8002be8:	b978      	cbnz	r0, 8002c0a <SystemClock_Config+0x9a>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002bea:	230f      	movs	r3, #15
 8002bec:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002bee:	2102      	movs	r1, #2
 8002bf0:	9104      	str	r1, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002bf2:	2300      	movs	r3, #0
 8002bf4:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002bf6:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002bfa:	9206      	str	r2, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002bfc:	9307      	str	r3, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002bfe:	a803      	add	r0, sp, #12
 8002c00:	f003 f956 	bl	8005eb0 <HAL_RCC_ClockConfig>
 8002c04:	b918      	cbnz	r0, 8002c0e <SystemClock_Config+0x9e>
}
 8002c06:	b014      	add	sp, #80	@ 0x50
 8002c08:	bd10      	pop	{r4, pc}
    Error_Handler();
 8002c0a:	f7ff ffaf 	bl	8002b6c <Error_Handler>
    Error_Handler();
 8002c0e:	f7ff ffad 	bl	8002b6c <Error_Handler>
 8002c12:	bf00      	nop
 8002c14:	40023800 	.word	0x40023800
 8002c18:	40007000 	.word	0x40007000

08002c1c <main>:
{
 8002c1c:	b508      	push	{r3, lr}
  HAL_Init();
 8002c1e:	f001 f869 	bl	8003cf4 <HAL_Init>
  SystemClock_Config();
 8002c22:	f7ff ffa5 	bl	8002b70 <SystemClock_Config>
  MX_GPIO_Init();
 8002c26:	f7ff fb13 	bl	8002250 <MX_GPIO_Init>
  MX_DMA_Init();
 8002c2a:	f7ff f8a9 	bl	8001d80 <MX_DMA_Init>
  MX_TIM3_Init();
 8002c2e:	f005 fdfb 	bl	8008828 <MX_TIM3_Init>
  MX_ADC1_Init();
 8002c32:	f7fd ff35 	bl	8000aa0 <MX_ADC1_Init>
  MX_TIM1_Init();
 8002c36:	f005 fd89 	bl	800874c <MX_TIM1_Init>
  MX_TIM2_Init();
 8002c3a:	f005 fc97 	bl	800856c <MX_TIM2_Init>
  MX_CRC_Init();
 8002c3e:	f7fe fe43 	bl	80018c8 <MX_CRC_Init>
  MX_I2C1_Init();
 8002c42:	f7ff fcd5 	bl	80025f0 <MX_I2C1_Init>
  osKernelInitialize();
 8002c46:	f7fe f90d 	bl	8000e64 <osKernelInitialize>
  MX_FREERTOS_Init();
 8002c4a:	f7ff fab5 	bl	80021b8 <MX_FREERTOS_Init>
  osKernelStart();
 8002c4e:	f7fe f91b 	bl	8000e88 <osKernelStart>
  while (1)
 8002c52:	e7fe      	b.n	8002c52 <main+0x36>

08002c54 <pid_init>:
#include "pid.h"

void pid_init(pid_t *pid)
{
    /* Clearing controller variables */
    pid->integrator = 0.0f;
 8002c54:	2300      	movs	r3, #0
 8002c56:	6203      	str	r3, [r0, #32]
    pid->differentiator = 0.0f;
 8002c58:	6243      	str	r3, [r0, #36]	@ 0x24
    pid->prev_error = 0.0f;
 8002c5a:	6283      	str	r3, [r0, #40]	@ 0x28
    pid->prev_input = 0.0f;
 8002c5c:	62c3      	str	r3, [r0, #44]	@ 0x2c

    pid->prev_controller_time_us = 0;
 8002c5e:	2200      	movs	r2, #0
 8002c60:	6302      	str	r2, [r0, #48]	@ 0x30
    pid->output = 0.0f;
 8002c62:	6383      	str	r3, [r0, #56]	@ 0x38

    /**
     * @todo implement checks for the parameters
     */
    
}
 8002c64:	4770      	bx	lr

08002c66 <pid_set_setpoint>:

void pid_set_setpoint(pid_t *pid, float setpoint)
{
    pid->setpoint = setpoint;
 8002c66:	ed80 0a0d 	vstr	s0, [r0, #52]	@ 0x34
}
 8002c6a:	4770      	bx	lr

08002c6c <pid_compute>:

float pid_compute(pid_t *pid, time_us_t current_time_us, float input)
{
    /* Compute the time between the function calls to determine T */
    time_us_t T_us = current_time_us - pid->prev_controller_time_us;
 8002c6c:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8002c6e:	1acb      	subs	r3, r1, r3
    float T_sec = (float)T_us / (float)1e6f;
 8002c70:	ee07 3a90 	vmov	s15, r3
 8002c74:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002c78:	ed9f 7a39 	vldr	s14, [pc, #228]	@ 8002d60 <pid_compute+0xf4>
 8002c7c:	eec7 6a87 	vdiv.f32	s13, s15, s14

    /* Finding the error */
    float error = pid->setpoint - input;
 8002c80:	ed90 6a0d 	vldr	s12, [r0, #52]	@ 0x34
 8002c84:	ee36 6a40 	vsub.f32	s12, s12, s0

    /* Finding the P-term */
    float proportional = pid->Kp * error;
 8002c88:	edd0 5a00 	vldr	s11, [r0]
 8002c8c:	ee65 5a86 	vmul.f32	s11, s11, s12

    /* Finding the integral term*/
    pid->integrator = pid->integrator + 0.5f * pid->Ki * T_sec *(error + pid->prev_error);
 8002c90:	ed90 7a08 	vldr	s14, [r0, #32]
 8002c94:	edd0 7a01 	vldr	s15, [r0, #4]
 8002c98:	eeb6 5a00 	vmov.f32	s10, #96	@ 0x3f000000  0.5
 8002c9c:	ee67 7a85 	vmul.f32	s15, s15, s10
 8002ca0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002ca4:	ed90 5a0a 	vldr	s10, [r0, #40]	@ 0x28
 8002ca8:	ee35 5a06 	vadd.f32	s10, s10, s12
 8002cac:	ee67 7a85 	vmul.f32	s15, s15, s10
 8002cb0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002cb4:	edc0 7a08 	vstr	s15, [r0, #32]

    /* Anti-windup - works by clamping the integrator */
    if (pid->integrator > pid->limit_integrator_max)
 8002cb8:	ed90 7a07 	vldr	s14, [r0, #28]
 8002cbc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002cc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002cc4:	dd38      	ble.n	8002d38 <pid_compute+0xcc>
    {
        pid->integrator = pid->limit_integrator_max;
 8002cc6:	ed80 7a08 	vstr	s14, [r0, #32]

    /* Finding the derivative term @note has a low pass filter */
    /**
     * @note only derivative on input has been implemented for now
     */
    pid->differentiator = -(2.0f * pid->Kd * (input - pid->prev_input)
 8002cca:	edd0 7a02 	vldr	s15, [r0, #8]
 8002cce:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002cd2:	ed90 7a0b 	vldr	s14, [r0, #44]	@ 0x2c
 8002cd6:	ee30 7a47 	vsub.f32	s14, s0, s14
 8002cda:	ee67 7a87 	vmul.f32	s15, s15, s14
                          +(2.0f * pid->derivative_filter_tau - T_sec) * pid->differentiator)
 8002cde:	ed90 7a03 	vldr	s14, [r0, #12]
 8002ce2:	ee37 7a07 	vadd.f32	s14, s14, s14
 8002ce6:	ee37 5a66 	vsub.f32	s10, s14, s13
 8002cea:	edd0 4a09 	vldr	s9, [r0, #36]	@ 0x24
 8002cee:	ee25 5a24 	vmul.f32	s10, s10, s9
 8002cf2:	ee77 7a85 	vadd.f32	s15, s15, s10
    pid->differentiator = -(2.0f * pid->Kd * (input - pid->prev_input)
 8002cf6:	eef1 7a67 	vneg.f32	s15, s15
                          / (2.0f * pid->derivative_filter_tau + T_sec);
 8002cfa:	ee37 7a26 	vadd.f32	s14, s14, s13
 8002cfe:	eec7 6a87 	vdiv.f32	s13, s15, s14
    pid->differentiator = -(2.0f * pid->Kd * (input - pid->prev_input)
 8002d02:	edc0 6a09 	vstr	s13, [r0, #36]	@ 0x24

    /* Summing the terms to make the output */
    pid->output = proportional + pid->integrator + pid->differentiator;
 8002d06:	edd0 7a08 	vldr	s15, [r0, #32]
 8002d0a:	ee77 7aa5 	vadd.f32	s15, s15, s11
 8002d0e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002d12:	edc0 7a0e 	vstr	s15, [r0, #56]	@ 0x38

    /* Clamp the output the the output bounds */
    if (pid->output > pid->limit_output_max)
 8002d16:	ed90 7a05 	vldr	s14, [r0, #20]
 8002d1a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002d1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d22:	dd13      	ble.n	8002d4c <pid_compute+0xe0>
    {
        pid->output = pid->limit_output_max;
 8002d24:	ed80 7a0e 	vstr	s14, [r0, #56]	@ 0x38
    {
        pid->output = pid->limit_output_min;
    }

    /* Save the variables for the next function call */
    pid->prev_error = error;
 8002d28:	ed80 6a0a 	vstr	s12, [r0, #40]	@ 0x28
    pid->prev_input = input;
 8002d2c:	ed80 0a0b 	vstr	s0, [r0, #44]	@ 0x2c
    pid->prev_controller_time_us = current_time_us;
 8002d30:	6301      	str	r1, [r0, #48]	@ 0x30
    
    return pid->output;
}
 8002d32:	ed90 0a0e 	vldr	s0, [r0, #56]	@ 0x38
 8002d36:	4770      	bx	lr
    else if (pid->integrator < pid->limit_integrator_min)
 8002d38:	ed90 7a06 	vldr	s14, [r0, #24]
 8002d3c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002d40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d44:	d5c1      	bpl.n	8002cca <pid_compute+0x5e>
        pid->integrator = pid->limit_integrator_min;
 8002d46:	ed80 7a08 	vstr	s14, [r0, #32]
 8002d4a:	e7be      	b.n	8002cca <pid_compute+0x5e>
    else if (pid->output < pid->limit_output_min)
 8002d4c:	ed90 7a04 	vldr	s14, [r0, #16]
 8002d50:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002d54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d58:	d5e6      	bpl.n	8002d28 <pid_compute+0xbc>
        pid->output = pid->limit_output_min;
 8002d5a:	ed80 7a0e 	vstr	s14, [r0, #56]	@ 0x38
 8002d5e:	e7e3      	b.n	8002d28 <pid_compute+0xbc>
 8002d60:	49742400 	.word	0x49742400

08002d64 <prvTaskExitError>:
	return pxTopOfStack;
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8002d64:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
 8002d66:	2300      	movs	r3, #0
 8002d68:	9301      	str	r3, [sp, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8002d6a:	4b0d      	ldr	r3, [pc, #52]	@ (8002da0 <prvTaskExitError+0x3c>)
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d72:	d008      	beq.n	8002d86 <prvTaskExitError+0x22>
 8002d74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002d78:	f383 8811 	msr	BASEPRI, r3
 8002d7c:	f3bf 8f6f 	isb	sy
 8002d80:	f3bf 8f4f 	dsb	sy
 8002d84:	e7fe      	b.n	8002d84 <prvTaskExitError+0x20>
 8002d86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002d8a:	f383 8811 	msr	BASEPRI, r3
 8002d8e:	f3bf 8f6f 	isb	sy
 8002d92:	f3bf 8f4f 	dsb	sy
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8002d96:	9b01      	ldr	r3, [sp, #4]
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d0fc      	beq.n	8002d96 <prvTaskExitError+0x32>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8002d9c:	b002      	add	sp, #8
 8002d9e:	4770      	bx	lr
 8002da0:	20000064 	.word	0x20000064

08002da4 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8002da4:	4808      	ldr	r0, [pc, #32]	@ (8002dc8 <prvPortStartFirstTask+0x24>)
 8002da6:	6800      	ldr	r0, [r0, #0]
 8002da8:	6800      	ldr	r0, [r0, #0]
 8002daa:	f380 8808 	msr	MSP, r0
 8002dae:	f04f 0000 	mov.w	r0, #0
 8002db2:	f380 8814 	msr	CONTROL, r0
 8002db6:	b662      	cpsie	i
 8002db8:	b661      	cpsie	f
 8002dba:	f3bf 8f4f 	dsb	sy
 8002dbe:	f3bf 8f6f 	isb	sy
 8002dc2:	df00      	svc	0
 8002dc4:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8002dc6:	0000      	.short	0x0000
 8002dc8:	e000ed08 	.word	0xe000ed08

08002dcc <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8002dcc:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8002ddc <vPortEnableVFP+0x10>
 8002dd0:	6801      	ldr	r1, [r0, #0]
 8002dd2:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8002dd6:	6001      	str	r1, [r0, #0]
 8002dd8:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8002dda:	0000      	.short	0x0000
 8002ddc:	e000ed88 	.word	0xe000ed88

08002de0 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8002de0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002de4:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8002de8:	f021 0101 	bic.w	r1, r1, #1
 8002dec:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8002df0:	4b05      	ldr	r3, [pc, #20]	@ (8002e08 <pxPortInitialiseStack+0x28>)
 8002df2:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8002df6:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8002dfa:	f06f 0302 	mvn.w	r3, #2
 8002dfe:	f840 3c24 	str.w	r3, [r0, #-36]
}
 8002e02:	3844      	subs	r0, #68	@ 0x44
 8002e04:	4770      	bx	lr
 8002e06:	bf00      	nop
 8002e08:	08002d65 	.word	0x08002d65
 8002e0c:	00000000 	.word	0x00000000

08002e10 <SVC_Handler>:
	__asm volatile (
 8002e10:	4b07      	ldr	r3, [pc, #28]	@ (8002e30 <pxCurrentTCBConst2>)
 8002e12:	6819      	ldr	r1, [r3, #0]
 8002e14:	6808      	ldr	r0, [r1, #0]
 8002e16:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002e1a:	f380 8809 	msr	PSP, r0
 8002e1e:	f3bf 8f6f 	isb	sy
 8002e22:	f04f 0000 	mov.w	r0, #0
 8002e26:	f380 8811 	msr	BASEPRI, r0
 8002e2a:	4770      	bx	lr
 8002e2c:	f3af 8000 	nop.w

08002e30 <pxCurrentTCBConst2>:
 8002e30:	20006d78 	.word	0x20006d78

08002e34 <vPortEnterCritical>:
 8002e34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002e38:	f383 8811 	msr	BASEPRI, r3
 8002e3c:	f3bf 8f6f 	isb	sy
 8002e40:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
 8002e44:	4a0b      	ldr	r2, [pc, #44]	@ (8002e74 <vPortEnterCritical+0x40>)
 8002e46:	6813      	ldr	r3, [r2, #0]
 8002e48:	3301      	adds	r3, #1
 8002e4a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 8002e4c:	2b01      	cmp	r3, #1
 8002e4e:	d000      	beq.n	8002e52 <vPortEnterCritical+0x1e>
}
 8002e50:	4770      	bx	lr
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8002e52:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8002e56:	f8d3 3d04 	ldr.w	r3, [r3, #3332]	@ 0xd04
 8002e5a:	f013 0fff 	tst.w	r3, #255	@ 0xff
 8002e5e:	d0f7      	beq.n	8002e50 <vPortEnterCritical+0x1c>
 8002e60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002e64:	f383 8811 	msr	BASEPRI, r3
 8002e68:	f3bf 8f6f 	isb	sy
 8002e6c:	f3bf 8f4f 	dsb	sy
 8002e70:	e7fe      	b.n	8002e70 <vPortEnterCritical+0x3c>
 8002e72:	bf00      	nop
 8002e74:	20000064 	.word	0x20000064

08002e78 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 8002e78:	4b09      	ldr	r3, [pc, #36]	@ (8002ea0 <vPortExitCritical+0x28>)
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	b943      	cbnz	r3, 8002e90 <vPortExitCritical+0x18>
 8002e7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002e82:	f383 8811 	msr	BASEPRI, r3
 8002e86:	f3bf 8f6f 	isb	sy
 8002e8a:	f3bf 8f4f 	dsb	sy
 8002e8e:	e7fe      	b.n	8002e8e <vPortExitCritical+0x16>
	uxCriticalNesting--;
 8002e90:	3b01      	subs	r3, #1
 8002e92:	4a03      	ldr	r2, [pc, #12]	@ (8002ea0 <vPortExitCritical+0x28>)
 8002e94:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8002e96:	b90b      	cbnz	r3, 8002e9c <vPortExitCritical+0x24>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002e98:	f383 8811 	msr	BASEPRI, r3
}
 8002e9c:	4770      	bx	lr
 8002e9e:	bf00      	nop
 8002ea0:	20000064 	.word	0x20000064
	...

08002eb0 <PendSV_Handler>:
	__asm volatile
 8002eb0:	f3ef 8009 	mrs	r0, PSP
 8002eb4:	f3bf 8f6f 	isb	sy
 8002eb8:	4b15      	ldr	r3, [pc, #84]	@ (8002f10 <pxCurrentTCBConst>)
 8002eba:	681a      	ldr	r2, [r3, #0]
 8002ebc:	f01e 0f10 	tst.w	lr, #16
 8002ec0:	bf08      	it	eq
 8002ec2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8002ec6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002eca:	6010      	str	r0, [r2, #0]
 8002ecc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8002ed0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8002ed4:	f380 8811 	msr	BASEPRI, r0
 8002ed8:	f3bf 8f4f 	dsb	sy
 8002edc:	f3bf 8f6f 	isb	sy
 8002ee0:	f005 f916 	bl	8008110 <vTaskSwitchContext>
 8002ee4:	f04f 0000 	mov.w	r0, #0
 8002ee8:	f380 8811 	msr	BASEPRI, r0
 8002eec:	bc09      	pop	{r0, r3}
 8002eee:	6819      	ldr	r1, [r3, #0]
 8002ef0:	6808      	ldr	r0, [r1, #0]
 8002ef2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002ef6:	f01e 0f10 	tst.w	lr, #16
 8002efa:	bf08      	it	eq
 8002efc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8002f00:	f380 8809 	msr	PSP, r0
 8002f04:	f3bf 8f6f 	isb	sy
 8002f08:	4770      	bx	lr
 8002f0a:	bf00      	nop
 8002f0c:	f3af 8000 	nop.w

08002f10 <pxCurrentTCBConst>:
 8002f10:	20006d78 	.word	0x20006d78

08002f14 <xPortSysTickHandler>:
{
 8002f14:	b508      	push	{r3, lr}
	__asm volatile
 8002f16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002f1a:	f383 8811 	msr	BASEPRI, r3
 8002f1e:	f3bf 8f6f 	isb	sy
 8002f22:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
 8002f26:	f004 ffc5 	bl	8007eb4 <xTaskIncrementTick>
 8002f2a:	b128      	cbz	r0, 8002f38 <xPortSysTickHandler+0x24>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8002f2c:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8002f30:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002f34:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
	__asm volatile
 8002f38:	2300      	movs	r3, #0
 8002f3a:	f383 8811 	msr	BASEPRI, r3
}
 8002f3e:	bd08      	pop	{r3, pc}

08002f40 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8002f40:	f04f 22e0 	mov.w	r2, #3758153728	@ 0xe000e000
 8002f44:	2300      	movs	r3, #0
 8002f46:	6113      	str	r3, [r2, #16]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8002f48:	6193      	str	r3, [r2, #24]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8002f4a:	4b05      	ldr	r3, [pc, #20]	@ (8002f60 <vPortSetupTimerInterrupt+0x20>)
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	4905      	ldr	r1, [pc, #20]	@ (8002f64 <vPortSetupTimerInterrupt+0x24>)
 8002f50:	fba1 1303 	umull	r1, r3, r1, r3
 8002f54:	099b      	lsrs	r3, r3, #6
 8002f56:	3b01      	subs	r3, #1
 8002f58:	6153      	str	r3, [r2, #20]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8002f5a:	2307      	movs	r3, #7
 8002f5c:	6113      	str	r3, [r2, #16]
}
 8002f5e:	4770      	bx	lr
 8002f60:	20000070 	.word	0x20000070
 8002f64:	10624dd3 	.word	0x10624dd3

08002f68 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8002f68:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8002f6c:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	@ 0xd00
 8002f70:	4b3d      	ldr	r3, [pc, #244]	@ (8003068 <xPortStartScheduler+0x100>)
 8002f72:	429a      	cmp	r2, r3
 8002f74:	d01c      	beq.n	8002fb0 <xPortStartScheduler+0x48>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8002f76:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8002f7a:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	@ 0xd00
 8002f7e:	4b3b      	ldr	r3, [pc, #236]	@ (800306c <xPortStartScheduler+0x104>)
 8002f80:	429a      	cmp	r2, r3
 8002f82:	d01e      	beq.n	8002fc2 <xPortStartScheduler+0x5a>
{
 8002f84:	b530      	push	{r4, r5, lr}
 8002f86:	b083      	sub	sp, #12
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8002f88:	4b39      	ldr	r3, [pc, #228]	@ (8003070 <xPortStartScheduler+0x108>)
 8002f8a:	781a      	ldrb	r2, [r3, #0]
 8002f8c:	b2d2      	uxtb	r2, r2
 8002f8e:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8002f90:	22ff      	movs	r2, #255	@ 0xff
 8002f92:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8002f94:	781b      	ldrb	r3, [r3, #0]
 8002f96:	b2db      	uxtb	r3, r3
 8002f98:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8002f9c:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8002fa0:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8002fa4:	4a33      	ldr	r2, [pc, #204]	@ (8003074 <xPortStartScheduler+0x10c>)
 8002fa6:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8002fa8:	4b33      	ldr	r3, [pc, #204]	@ (8003078 <xPortStartScheduler+0x110>)
 8002faa:	2207      	movs	r2, #7
 8002fac:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002fae:	e01b      	b.n	8002fe8 <xPortStartScheduler+0x80>
	__asm volatile
 8002fb0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002fb4:	f383 8811 	msr	BASEPRI, r3
 8002fb8:	f3bf 8f6f 	isb	sy
 8002fbc:	f3bf 8f4f 	dsb	sy
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8002fc0:	e7fe      	b.n	8002fc0 <xPortStartScheduler+0x58>
 8002fc2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002fc6:	f383 8811 	msr	BASEPRI, r3
 8002fca:	f3bf 8f6f 	isb	sy
 8002fce:	f3bf 8f4f 	dsb	sy
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8002fd2:	e7fe      	b.n	8002fd2 <xPortStartScheduler+0x6a>
			ulMaxPRIGROUPValue--;
 8002fd4:	4a28      	ldr	r2, [pc, #160]	@ (8003078 <xPortStartScheduler+0x110>)
 8002fd6:	6813      	ldr	r3, [r2, #0]
 8002fd8:	3b01      	subs	r3, #1
 8002fda:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8002fdc:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8002fe0:	005b      	lsls	r3, r3, #1
 8002fe2:	b2db      	uxtb	r3, r3
 8002fe4:	f88d 3003 	strb.w	r3, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002fe8:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8002fec:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8002ff0:	d1f0      	bne.n	8002fd4 <xPortStartScheduler+0x6c>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8002ff2:	4b21      	ldr	r3, [pc, #132]	@ (8003078 <xPortStartScheduler+0x110>)
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	2b03      	cmp	r3, #3
 8002ff8:	d008      	beq.n	800300c <xPortStartScheduler+0xa4>
 8002ffa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002ffe:	f383 8811 	msr	BASEPRI, r3
 8003002:	f3bf 8f6f 	isb	sy
 8003006:	f3bf 8f4f 	dsb	sy
 800300a:	e7fe      	b.n	800300a <xPortStartScheduler+0xa2>
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800300c:	021b      	lsls	r3, r3, #8
 800300e:	4a1a      	ldr	r2, [pc, #104]	@ (8003078 <xPortStartScheduler+0x110>)
 8003010:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003012:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003016:	6013      	str	r3, [r2, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8003018:	9b01      	ldr	r3, [sp, #4]
 800301a:	b2db      	uxtb	r3, r3
 800301c:	4a14      	ldr	r2, [pc, #80]	@ (8003070 <xPortStartScheduler+0x108>)
 800301e:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8003020:	f04f 24e0 	mov.w	r4, #3758153728	@ 0xe000e000
 8003024:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	@ 0xd20
 8003028:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800302c:	f8c4 3d20 	str.w	r3, [r4, #3360]	@ 0xd20
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8003030:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	@ 0xd20
 8003034:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8003038:	f8c4 3d20 	str.w	r3, [r4, #3360]	@ 0xd20
	vPortSetupTimerInterrupt();
 800303c:	f7ff ff80 	bl	8002f40 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 8003040:	2500      	movs	r5, #0
 8003042:	4b0e      	ldr	r3, [pc, #56]	@ (800307c <xPortStartScheduler+0x114>)
 8003044:	601d      	str	r5, [r3, #0]
	vPortEnableVFP();
 8003046:	f7ff fec1 	bl	8002dcc <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800304a:	f8d4 3f34 	ldr.w	r3, [r4, #3892]	@ 0xf34
 800304e:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8003052:	f8c4 3f34 	str.w	r3, [r4, #3892]	@ 0xf34
	prvPortStartFirstTask();
 8003056:	f7ff fea5 	bl	8002da4 <prvPortStartFirstTask>
	vTaskSwitchContext();
 800305a:	f005 f859 	bl	8008110 <vTaskSwitchContext>
	prvTaskExitError();
 800305e:	f7ff fe81 	bl	8002d64 <prvTaskExitError>
}
 8003062:	4628      	mov	r0, r5
 8003064:	b003      	add	sp, #12
 8003066:	bd30      	pop	{r4, r5, pc}
 8003068:	410fc271 	.word	0x410fc271
 800306c:	410fc270 	.word	0x410fc270
 8003070:	e000e400 	.word	0xe000e400
 8003074:	200067cc 	.word	0x200067cc
 8003078:	200067c8 	.word	0x200067c8
 800307c:	20000064 	.word	0x20000064

08003080 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8003080:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8003084:	2b0f      	cmp	r3, #15
 8003086:	d90e      	bls.n	80030a6 <vPortValidateInterruptPriority+0x26>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8003088:	4a11      	ldr	r2, [pc, #68]	@ (80030d0 <vPortValidateInterruptPriority+0x50>)
 800308a:	5c9a      	ldrb	r2, [r3, r2]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800308c:	4b11      	ldr	r3, [pc, #68]	@ (80030d4 <vPortValidateInterruptPriority+0x54>)
 800308e:	781b      	ldrb	r3, [r3, #0]
 8003090:	429a      	cmp	r2, r3
 8003092:	d208      	bcs.n	80030a6 <vPortValidateInterruptPriority+0x26>
 8003094:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003098:	f383 8811 	msr	BASEPRI, r3
 800309c:	f3bf 8f6f 	isb	sy
 80030a0:	f3bf 8f4f 	dsb	sy
 80030a4:	e7fe      	b.n	80030a4 <vPortValidateInterruptPriority+0x24>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80030a6:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80030aa:	f8d3 3d0c 	ldr.w	r3, [r3, #3340]	@ 0xd0c
 80030ae:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80030b2:	4a09      	ldr	r2, [pc, #36]	@ (80030d8 <vPortValidateInterruptPriority+0x58>)
 80030b4:	6812      	ldr	r2, [r2, #0]
 80030b6:	4293      	cmp	r3, r2
 80030b8:	d908      	bls.n	80030cc <vPortValidateInterruptPriority+0x4c>
 80030ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80030be:	f383 8811 	msr	BASEPRI, r3
 80030c2:	f3bf 8f6f 	isb	sy
 80030c6:	f3bf 8f4f 	dsb	sy
 80030ca:	e7fe      	b.n	80030ca <vPortValidateInterruptPriority+0x4a>
	}
 80030cc:	4770      	bx	lr
 80030ce:	bf00      	nop
 80030d0:	e000e3f0 	.word	0xe000e3f0
 80030d4:	200067cc 	.word	0x200067cc
 80030d8:	200067c8 	.word	0x200067c8

080030dc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80030dc:	b510      	push	{r4, lr}
 80030de:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80030e0:	f7ff fea8 	bl	8002e34 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80030e4:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 80030e6:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 80030e8:	429a      	cmp	r2, r3
 80030ea:	d004      	beq.n	80030f6 <prvIsQueueFull+0x1a>
		{
			xReturn = pdTRUE;
		}
		else
		{
			xReturn = pdFALSE;
 80030ec:	2400      	movs	r4, #0
		}
	}
	taskEXIT_CRITICAL();
 80030ee:	f7ff fec3 	bl	8002e78 <vPortExitCritical>

	return xReturn;
}
 80030f2:	4620      	mov	r0, r4
 80030f4:	bd10      	pop	{r4, pc}
			xReturn = pdTRUE;
 80030f6:	2401      	movs	r4, #1
 80030f8:	e7f9      	b.n	80030ee <prvIsQueueFull+0x12>

080030fa <prvIsQueueEmpty>:
{
 80030fa:	b510      	push	{r4, lr}
 80030fc:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 80030fe:	f7ff fe99 	bl	8002e34 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003102:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8003104:	b923      	cbnz	r3, 8003110 <prvIsQueueEmpty+0x16>
			xReturn = pdTRUE;
 8003106:	2401      	movs	r4, #1
	taskEXIT_CRITICAL();
 8003108:	f7ff feb6 	bl	8002e78 <vPortExitCritical>
}
 800310c:	4620      	mov	r0, r4
 800310e:	bd10      	pop	{r4, pc}
			xReturn = pdFALSE;
 8003110:	2400      	movs	r4, #0
 8003112:	e7f9      	b.n	8003108 <prvIsQueueEmpty+0xe>

08003114 <prvCopyDataToQueue>:
{
 8003114:	b570      	push	{r4, r5, r6, lr}
 8003116:	4604      	mov	r4, r0
 8003118:	4615      	mov	r5, r2
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800311a:	6b86      	ldr	r6, [r0, #56]	@ 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800311c:	6c02      	ldr	r2, [r0, #64]	@ 0x40
 800311e:	b95a      	cbnz	r2, 8003138 <prvCopyDataToQueue+0x24>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003120:	6803      	ldr	r3, [r0, #0]
 8003122:	b11b      	cbz	r3, 800312c <prvCopyDataToQueue+0x18>
BaseType_t xReturn = pdFALSE;
 8003124:	2000      	movs	r0, #0
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003126:	3601      	adds	r6, #1
 8003128:	63a6      	str	r6, [r4, #56]	@ 0x38
}
 800312a:	bd70      	pop	{r4, r5, r6, pc}
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800312c:	6880      	ldr	r0, [r0, #8]
 800312e:	f005 f91b 	bl	8008368 <xTaskPriorityDisinherit>
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8003132:	2300      	movs	r3, #0
 8003134:	60a3      	str	r3, [r4, #8]
 8003136:	e7f6      	b.n	8003126 <prvCopyDataToQueue+0x12>
	else if( xPosition == queueSEND_TO_BACK )
 8003138:	b96d      	cbnz	r5, 8003156 <prvCopyDataToQueue+0x42>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800313a:	6840      	ldr	r0, [r0, #4]
 800313c:	f007 fcc2 	bl	800aac4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003140:	6863      	ldr	r3, [r4, #4]
 8003142:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8003144:	4413      	add	r3, r2
 8003146:	6063      	str	r3, [r4, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003148:	68a2      	ldr	r2, [r4, #8]
 800314a:	4293      	cmp	r3, r2
 800314c:	d319      	bcc.n	8003182 <prvCopyDataToQueue+0x6e>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800314e:	6823      	ldr	r3, [r4, #0]
 8003150:	6063      	str	r3, [r4, #4]
BaseType_t xReturn = pdFALSE;
 8003152:	4628      	mov	r0, r5
 8003154:	e7e7      	b.n	8003126 <prvCopyDataToQueue+0x12>
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8003156:	68c0      	ldr	r0, [r0, #12]
 8003158:	f007 fcb4 	bl	800aac4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800315c:	68e3      	ldr	r3, [r4, #12]
 800315e:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8003160:	4251      	negs	r1, r2
 8003162:	1a9b      	subs	r3, r3, r2
 8003164:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003166:	6822      	ldr	r2, [r4, #0]
 8003168:	4293      	cmp	r3, r2
 800316a:	d202      	bcs.n	8003172 <prvCopyDataToQueue+0x5e>
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800316c:	68a3      	ldr	r3, [r4, #8]
 800316e:	440b      	add	r3, r1
 8003170:	60e3      	str	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 8003172:	2d02      	cmp	r5, #2
 8003174:	d001      	beq.n	800317a <prvCopyDataToQueue+0x66>
BaseType_t xReturn = pdFALSE;
 8003176:	2000      	movs	r0, #0
 8003178:	e7d5      	b.n	8003126 <prvCopyDataToQueue+0x12>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800317a:	b126      	cbz	r6, 8003186 <prvCopyDataToQueue+0x72>
				--uxMessagesWaiting;
 800317c:	3e01      	subs	r6, #1
BaseType_t xReturn = pdFALSE;
 800317e:	2000      	movs	r0, #0
 8003180:	e7d1      	b.n	8003126 <prvCopyDataToQueue+0x12>
 8003182:	4628      	mov	r0, r5
 8003184:	e7cf      	b.n	8003126 <prvCopyDataToQueue+0x12>
 8003186:	2000      	movs	r0, #0
 8003188:	e7cd      	b.n	8003126 <prvCopyDataToQueue+0x12>

0800318a <prvCopyDataFromQueue>:
{
 800318a:	4603      	mov	r3, r0
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800318c:	6c02      	ldr	r2, [r0, #64]	@ 0x40
 800318e:	b16a      	cbz	r2, 80031ac <prvCopyDataFromQueue+0x22>
{
 8003190:	b510      	push	{r4, lr}
 8003192:	4608      	mov	r0, r1
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003194:	68d9      	ldr	r1, [r3, #12]
 8003196:	4411      	add	r1, r2
 8003198:	60d9      	str	r1, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800319a:	689c      	ldr	r4, [r3, #8]
 800319c:	42a1      	cmp	r1, r4
 800319e:	d301      	bcc.n	80031a4 <prvCopyDataFromQueue+0x1a>
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80031a0:	6819      	ldr	r1, [r3, #0]
 80031a2:	60d9      	str	r1, [r3, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80031a4:	68d9      	ldr	r1, [r3, #12]
 80031a6:	f007 fc8d 	bl	800aac4 <memcpy>
}
 80031aa:	bd10      	pop	{r4, pc}
 80031ac:	4770      	bx	lr

080031ae <prvUnlockQueue>:
{
 80031ae:	b538      	push	{r3, r4, r5, lr}
 80031b0:	4605      	mov	r5, r0
	taskENTER_CRITICAL();
 80031b2:	f7ff fe3f 	bl	8002e34 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 80031b6:	f895 4045 	ldrb.w	r4, [r5, #69]	@ 0x45
 80031ba:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80031bc:	e001      	b.n	80031c2 <prvUnlockQueue+0x14>
			--cTxLock;
 80031be:	3c01      	subs	r4, #1
 80031c0:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80031c2:	2c00      	cmp	r4, #0
 80031c4:	dd0a      	ble.n	80031dc <prvUnlockQueue+0x2e>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80031c6:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 80031c8:	b143      	cbz	r3, 80031dc <prvUnlockQueue+0x2e>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80031ca:	f105 0024 	add.w	r0, r5, #36	@ 0x24
 80031ce:	f005 f81f 	bl	8008210 <xTaskRemoveFromEventList>
 80031d2:	2800      	cmp	r0, #0
 80031d4:	d0f3      	beq.n	80031be <prvUnlockQueue+0x10>
						vTaskMissedYield();
 80031d6:	f005 f8b1 	bl	800833c <vTaskMissedYield>
 80031da:	e7f0      	b.n	80031be <prvUnlockQueue+0x10>
		pxQueue->cTxLock = queueUNLOCKED;
 80031dc:	23ff      	movs	r3, #255	@ 0xff
 80031de:	f885 3045 	strb.w	r3, [r5, #69]	@ 0x45
	taskEXIT_CRITICAL();
 80031e2:	f7ff fe49 	bl	8002e78 <vPortExitCritical>
	taskENTER_CRITICAL();
 80031e6:	f7ff fe25 	bl	8002e34 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 80031ea:	f895 4044 	ldrb.w	r4, [r5, #68]	@ 0x44
 80031ee:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80031f0:	e001      	b.n	80031f6 <prvUnlockQueue+0x48>
				--cRxLock;
 80031f2:	3c01      	subs	r4, #1
 80031f4:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80031f6:	2c00      	cmp	r4, #0
 80031f8:	dd0a      	ble.n	8003210 <prvUnlockQueue+0x62>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80031fa:	692b      	ldr	r3, [r5, #16]
 80031fc:	b143      	cbz	r3, 8003210 <prvUnlockQueue+0x62>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80031fe:	f105 0010 	add.w	r0, r5, #16
 8003202:	f005 f805 	bl	8008210 <xTaskRemoveFromEventList>
 8003206:	2800      	cmp	r0, #0
 8003208:	d0f3      	beq.n	80031f2 <prvUnlockQueue+0x44>
					vTaskMissedYield();
 800320a:	f005 f897 	bl	800833c <vTaskMissedYield>
 800320e:	e7f0      	b.n	80031f2 <prvUnlockQueue+0x44>
		pxQueue->cRxLock = queueUNLOCKED;
 8003210:	23ff      	movs	r3, #255	@ 0xff
 8003212:	f885 3044 	strb.w	r3, [r5, #68]	@ 0x44
	taskEXIT_CRITICAL();
 8003216:	f7ff fe2f 	bl	8002e78 <vPortExitCritical>
}
 800321a:	bd38      	pop	{r3, r4, r5, pc}

0800321c <xQueueGenericReset>:
{
 800321c:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxQueue );
 800321e:	b1e0      	cbz	r0, 800325a <xQueueGenericReset+0x3e>
 8003220:	460d      	mov	r5, r1
 8003222:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 8003224:	f7ff fe06 	bl	8002e34 <vPortEnterCritical>
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003228:	6823      	ldr	r3, [r4, #0]
 800322a:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 800322c:	6c21      	ldr	r1, [r4, #64]	@ 0x40
 800322e:	fb01 3002 	mla	r0, r1, r2, r3
 8003232:	60a0      	str	r0, [r4, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003234:	2000      	movs	r0, #0
 8003236:	63a0      	str	r0, [r4, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003238:	6063      	str	r3, [r4, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800323a:	3a01      	subs	r2, #1
 800323c:	fb02 3301 	mla	r3, r2, r1, r3
 8003240:	60e3      	str	r3, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003242:	23ff      	movs	r3, #255	@ 0xff
 8003244:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003248:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
		if( xNewQueue == pdFALSE )
 800324c:	b9fd      	cbnz	r5, 800328e <xQueueGenericReset+0x72>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800324e:	6923      	ldr	r3, [r4, #16]
 8003250:	b963      	cbnz	r3, 800326c <xQueueGenericReset+0x50>
	taskEXIT_CRITICAL();
 8003252:	f7ff fe11 	bl	8002e78 <vPortExitCritical>
}
 8003256:	2001      	movs	r0, #1
 8003258:	bd38      	pop	{r3, r4, r5, pc}
 800325a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800325e:	f383 8811 	msr	BASEPRI, r3
 8003262:	f3bf 8f6f 	isb	sy
 8003266:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 800326a:	e7fe      	b.n	800326a <xQueueGenericReset+0x4e>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800326c:	f104 0010 	add.w	r0, r4, #16
 8003270:	f004 ffce 	bl	8008210 <xTaskRemoveFromEventList>
 8003274:	2800      	cmp	r0, #0
 8003276:	d0ec      	beq.n	8003252 <xQueueGenericReset+0x36>
					queueYIELD_IF_USING_PREEMPTION();
 8003278:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800327c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003280:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8003284:	f3bf 8f4f 	dsb	sy
 8003288:	f3bf 8f6f 	isb	sy
 800328c:	e7e1      	b.n	8003252 <xQueueGenericReset+0x36>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800328e:	f104 0010 	add.w	r0, r4, #16
 8003292:	f7ff fc0d 	bl	8002ab0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003296:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 800329a:	f7ff fc09 	bl	8002ab0 <vListInitialise>
 800329e:	e7d8      	b.n	8003252 <xQueueGenericReset+0x36>

080032a0 <prvInitialiseNewQueue>:
{
 80032a0:	b538      	push	{r3, r4, r5, lr}
 80032a2:	461d      	mov	r5, r3
 80032a4:	9c04      	ldr	r4, [sp, #16]
	if( uxItemSize == ( UBaseType_t ) 0 )
 80032a6:	460b      	mov	r3, r1
 80032a8:	b949      	cbnz	r1, 80032be <prvInitialiseNewQueue+0x1e>
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80032aa:	6024      	str	r4, [r4, #0]
	pxNewQueue->uxLength = uxQueueLength;
 80032ac:	63e0      	str	r0, [r4, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80032ae:	6423      	str	r3, [r4, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80032b0:	2101      	movs	r1, #1
 80032b2:	4620      	mov	r0, r4
 80032b4:	f7ff ffb2 	bl	800321c <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 80032b8:	f884 504c 	strb.w	r5, [r4, #76]	@ 0x4c
}
 80032bc:	bd38      	pop	{r3, r4, r5, pc}
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80032be:	6022      	str	r2, [r4, #0]
 80032c0:	e7f4      	b.n	80032ac <prvInitialiseNewQueue+0xc>

080032c2 <xQueueGenericCreateStatic>:
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80032c2:	b940      	cbnz	r0, 80032d6 <xQueueGenericCreateStatic+0x14>
 80032c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80032c8:	f383 8811 	msr	BASEPRI, r3
 80032cc:	f3bf 8f6f 	isb	sy
 80032d0:	f3bf 8f4f 	dsb	sy
 80032d4:	e7fe      	b.n	80032d4 <xQueueGenericCreateStatic+0x12>
	{
 80032d6:	b510      	push	{r4, lr}
 80032d8:	b084      	sub	sp, #16
 80032da:	461c      	mov	r4, r3
 80032dc:	4684      	mov	ip, r0
		configASSERT( pxStaticQueue != NULL );
 80032de:	b153      	cbz	r3, 80032f6 <xQueueGenericCreateStatic+0x34>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80032e0:	b192      	cbz	r2, 8003308 <xQueueGenericCreateStatic+0x46>
 80032e2:	b989      	cbnz	r1, 8003308 <xQueueGenericCreateStatic+0x46>
 80032e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80032e8:	f383 8811 	msr	BASEPRI, r3
 80032ec:	f3bf 8f6f 	isb	sy
 80032f0:	f3bf 8f4f 	dsb	sy
 80032f4:	e7fe      	b.n	80032f4 <xQueueGenericCreateStatic+0x32>
 80032f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80032fa:	f383 8811 	msr	BASEPRI, r3
 80032fe:	f3bf 8f6f 	isb	sy
 8003302:	f3bf 8f4f 	dsb	sy
		configASSERT( pxStaticQueue != NULL );
 8003306:	e7fe      	b.n	8003306 <xQueueGenericCreateStatic+0x44>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8003308:	b16a      	cbz	r2, 8003326 <xQueueGenericCreateStatic+0x64>
			volatile size_t xSize = sizeof( StaticQueue_t );
 800330a:	2350      	movs	r3, #80	@ 0x50
 800330c:	9303      	str	r3, [sp, #12]
			configASSERT( xSize == sizeof( Queue_t ) );
 800330e:	9b03      	ldr	r3, [sp, #12]
 8003310:	2b50      	cmp	r3, #80	@ 0x50
 8003312:	d013      	beq.n	800333c <xQueueGenericCreateStatic+0x7a>
 8003314:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003318:	f383 8811 	msr	BASEPRI, r3
 800331c:	f3bf 8f6f 	isb	sy
 8003320:	f3bf 8f4f 	dsb	sy
 8003324:	e7fe      	b.n	8003324 <xQueueGenericCreateStatic+0x62>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8003326:	2900      	cmp	r1, #0
 8003328:	d0ef      	beq.n	800330a <xQueueGenericCreateStatic+0x48>
 800332a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800332e:	f383 8811 	msr	BASEPRI, r3
 8003332:	f3bf 8f6f 	isb	sy
 8003336:	f3bf 8f4f 	dsb	sy
 800333a:	e7fe      	b.n	800333a <xQueueGenericCreateStatic+0x78>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800333c:	9b03      	ldr	r3, [sp, #12]
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800333e:	2301      	movs	r3, #1
 8003340:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003344:	9400      	str	r4, [sp, #0]
 8003346:	f89d 3018 	ldrb.w	r3, [sp, #24]
 800334a:	4660      	mov	r0, ip
 800334c:	f7ff ffa8 	bl	80032a0 <prvInitialiseNewQueue>
	}
 8003350:	4620      	mov	r0, r4
 8003352:	b004      	add	sp, #16
 8003354:	bd10      	pop	{r4, pc}

08003356 <xQueueGenericCreate>:
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003356:	b940      	cbnz	r0, 800336a <xQueueGenericCreate+0x14>
 8003358:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800335c:	f383 8811 	msr	BASEPRI, r3
 8003360:	f3bf 8f6f 	isb	sy
 8003364:	f3bf 8f4f 	dsb	sy
 8003368:	e7fe      	b.n	8003368 <xQueueGenericCreate+0x12>
	{
 800336a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800336c:	b083      	sub	sp, #12
 800336e:	460d      	mov	r5, r1
 8003370:	4614      	mov	r4, r2
 8003372:	4606      	mov	r6, r0
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003374:	fb01 f000 	mul.w	r0, r1, r0
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8003378:	3050      	adds	r0, #80	@ 0x50
 800337a:	f7ff f879 	bl	8002470 <pvPortMalloc>
		if( pxNewQueue != NULL )
 800337e:	4607      	mov	r7, r0
 8003380:	b150      	cbz	r0, 8003398 <xQueueGenericCreate+0x42>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8003382:	2300      	movs	r3, #0
 8003384:	f880 3046 	strb.w	r3, [r0, #70]	@ 0x46
			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003388:	9000      	str	r0, [sp, #0]
 800338a:	4623      	mov	r3, r4
 800338c:	f100 0250 	add.w	r2, r0, #80	@ 0x50
 8003390:	4629      	mov	r1, r5
 8003392:	4630      	mov	r0, r6
 8003394:	f7ff ff84 	bl	80032a0 <prvInitialiseNewQueue>
	}
 8003398:	4638      	mov	r0, r7
 800339a:	b003      	add	sp, #12
 800339c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800339e <xQueueGenericSend>:
{
 800339e:	b5f0      	push	{r4, r5, r6, r7, lr}
 80033a0:	b085      	sub	sp, #20
 80033a2:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
 80033a4:	b188      	cbz	r0, 80033ca <xQueueGenericSend+0x2c>
 80033a6:	460f      	mov	r7, r1
 80033a8:	461d      	mov	r5, r3
 80033aa:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80033ac:	b1b1      	cbz	r1, 80033dc <xQueueGenericSend+0x3e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80033ae:	2d02      	cmp	r5, #2
 80033b0:	d120      	bne.n	80033f4 <xQueueGenericSend+0x56>
 80033b2:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 80033b4:	2b01      	cmp	r3, #1
 80033b6:	d01d      	beq.n	80033f4 <xQueueGenericSend+0x56>
 80033b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80033bc:	f383 8811 	msr	BASEPRI, r3
 80033c0:	f3bf 8f6f 	isb	sy
 80033c4:	f3bf 8f4f 	dsb	sy
 80033c8:	e7fe      	b.n	80033c8 <xQueueGenericSend+0x2a>
 80033ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80033ce:	f383 8811 	msr	BASEPRI, r3
 80033d2:	f3bf 8f6f 	isb	sy
 80033d6:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 80033da:	e7fe      	b.n	80033da <xQueueGenericSend+0x3c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80033dc:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d0e5      	beq.n	80033ae <xQueueGenericSend+0x10>
 80033e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80033e6:	f383 8811 	msr	BASEPRI, r3
 80033ea:	f3bf 8f6f 	isb	sy
 80033ee:	f3bf 8f4f 	dsb	sy
 80033f2:	e7fe      	b.n	80033f2 <xQueueGenericSend+0x54>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80033f4:	f004 ffa8 	bl	8008348 <xTaskGetSchedulerState>
 80033f8:	4606      	mov	r6, r0
 80033fa:	b958      	cbnz	r0, 8003414 <xQueueGenericSend+0x76>
 80033fc:	9b01      	ldr	r3, [sp, #4]
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d048      	beq.n	8003494 <xQueueGenericSend+0xf6>
 8003402:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003406:	f383 8811 	msr	BASEPRI, r3
 800340a:	f3bf 8f6f 	isb	sy
 800340e:	f3bf 8f4f 	dsb	sy
 8003412:	e7fe      	b.n	8003412 <xQueueGenericSend+0x74>
 8003414:	2600      	movs	r6, #0
 8003416:	e03d      	b.n	8003494 <xQueueGenericSend+0xf6>
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003418:	462a      	mov	r2, r5
 800341a:	4639      	mov	r1, r7
 800341c:	4620      	mov	r0, r4
 800341e:	f7ff fe79 	bl	8003114 <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003422:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8003424:	b97b      	cbnz	r3, 8003446 <xQueueGenericSend+0xa8>
					else if( xYieldRequired != pdFALSE )
 8003426:	b148      	cbz	r0, 800343c <xQueueGenericSend+0x9e>
						queueYIELD_IF_USING_PREEMPTION();
 8003428:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800342c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003430:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8003434:	f3bf 8f4f 	dsb	sy
 8003438:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 800343c:	f7ff fd1c 	bl	8002e78 <vPortExitCritical>
				return pdPASS;
 8003440:	2001      	movs	r0, #1
}
 8003442:	b005      	add	sp, #20
 8003444:	bdf0      	pop	{r4, r5, r6, r7, pc}
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003446:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 800344a:	f004 fee1 	bl	8008210 <xTaskRemoveFromEventList>
 800344e:	2800      	cmp	r0, #0
 8003450:	d0f4      	beq.n	800343c <xQueueGenericSend+0x9e>
							queueYIELD_IF_USING_PREEMPTION();
 8003452:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8003456:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800345a:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800345e:	f3bf 8f4f 	dsb	sy
 8003462:	f3bf 8f6f 	isb	sy
 8003466:	e7e9      	b.n	800343c <xQueueGenericSend+0x9e>
					taskEXIT_CRITICAL();
 8003468:	f7ff fd06 	bl	8002e78 <vPortExitCritical>
					return errQUEUE_FULL;
 800346c:	2000      	movs	r0, #0
 800346e:	e7e8      	b.n	8003442 <xQueueGenericSend+0xa4>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003470:	a802      	add	r0, sp, #8
 8003472:	f004 ff13 	bl	800829c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003476:	2601      	movs	r6, #1
 8003478:	e019      	b.n	80034ae <xQueueGenericSend+0x110>
		prvLockQueue( pxQueue );
 800347a:	2300      	movs	r3, #0
 800347c:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 8003480:	e021      	b.n	80034c6 <xQueueGenericSend+0x128>
 8003482:	2300      	movs	r3, #0
 8003484:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 8003488:	e023      	b.n	80034d2 <xQueueGenericSend+0x134>
				prvUnlockQueue( pxQueue );
 800348a:	4620      	mov	r0, r4
 800348c:	f7ff fe8f 	bl	80031ae <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003490:	f004 fd9c 	bl	8007fcc <xTaskResumeAll>
		taskENTER_CRITICAL();
 8003494:	f7ff fcce 	bl	8002e34 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003498:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 800349a:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800349c:	429a      	cmp	r2, r3
 800349e:	d3bb      	bcc.n	8003418 <xQueueGenericSend+0x7a>
 80034a0:	2d02      	cmp	r5, #2
 80034a2:	d0b9      	beq.n	8003418 <xQueueGenericSend+0x7a>
				if( xTicksToWait == ( TickType_t ) 0 )
 80034a4:	9b01      	ldr	r3, [sp, #4]
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d0de      	beq.n	8003468 <xQueueGenericSend+0xca>
				else if( xEntryTimeSet == pdFALSE )
 80034aa:	2e00      	cmp	r6, #0
 80034ac:	d0e0      	beq.n	8003470 <xQueueGenericSend+0xd2>
		taskEXIT_CRITICAL();
 80034ae:	f7ff fce3 	bl	8002e78 <vPortExitCritical>
		vTaskSuspendAll();
 80034b2:	f004 fcf1 	bl	8007e98 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80034b6:	f7ff fcbd 	bl	8002e34 <vPortEnterCritical>
 80034ba:	f894 2044 	ldrb.w	r2, [r4, #68]	@ 0x44
 80034be:	b252      	sxtb	r2, r2
 80034c0:	f1b2 3fff 	cmp.w	r2, #4294967295
 80034c4:	d0d9      	beq.n	800347a <xQueueGenericSend+0xdc>
 80034c6:	f894 2045 	ldrb.w	r2, [r4, #69]	@ 0x45
 80034ca:	b252      	sxtb	r2, r2
 80034cc:	f1b2 3fff 	cmp.w	r2, #4294967295
 80034d0:	d0d7      	beq.n	8003482 <xQueueGenericSend+0xe4>
 80034d2:	f7ff fcd1 	bl	8002e78 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80034d6:	a901      	add	r1, sp, #4
 80034d8:	a802      	add	r0, sp, #8
 80034da:	f004 feeb 	bl	80082b4 <xTaskCheckForTimeOut>
 80034de:	b9d8      	cbnz	r0, 8003518 <xQueueGenericSend+0x17a>
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80034e0:	4620      	mov	r0, r4
 80034e2:	f7ff fdfb 	bl	80030dc <prvIsQueueFull>
 80034e6:	2800      	cmp	r0, #0
 80034e8:	d0cf      	beq.n	800348a <xQueueGenericSend+0xec>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80034ea:	9901      	ldr	r1, [sp, #4]
 80034ec:	f104 0010 	add.w	r0, r4, #16
 80034f0:	f004 fe5a 	bl	80081a8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80034f4:	4620      	mov	r0, r4
 80034f6:	f7ff fe5a 	bl	80031ae <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80034fa:	f004 fd67 	bl	8007fcc <xTaskResumeAll>
 80034fe:	2800      	cmp	r0, #0
 8003500:	d1c8      	bne.n	8003494 <xQueueGenericSend+0xf6>
					portYIELD_WITHIN_API();
 8003502:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8003506:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800350a:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800350e:	f3bf 8f4f 	dsb	sy
 8003512:	f3bf 8f6f 	isb	sy
 8003516:	e7bd      	b.n	8003494 <xQueueGenericSend+0xf6>
			prvUnlockQueue( pxQueue );
 8003518:	4620      	mov	r0, r4
 800351a:	f7ff fe48 	bl	80031ae <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800351e:	f004 fd55 	bl	8007fcc <xTaskResumeAll>
			return errQUEUE_FULL;
 8003522:	2000      	movs	r0, #0
 8003524:	e78d      	b.n	8003442 <xQueueGenericSend+0xa4>

08003526 <xQueueGenericSendFromISR>:
{
 8003526:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( pxQueue );
 800352a:	b190      	cbz	r0, 8003552 <xQueueGenericSendFromISR+0x2c>
 800352c:	460f      	mov	r7, r1
 800352e:	4616      	mov	r6, r2
 8003530:	461c      	mov	r4, r3
 8003532:	4605      	mov	r5, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003534:	b1b1      	cbz	r1, 8003564 <xQueueGenericSendFromISR+0x3e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003536:	2c02      	cmp	r4, #2
 8003538:	d120      	bne.n	800357c <xQueueGenericSendFromISR+0x56>
 800353a:	6beb      	ldr	r3, [r5, #60]	@ 0x3c
 800353c:	2b01      	cmp	r3, #1
 800353e:	d01d      	beq.n	800357c <xQueueGenericSendFromISR+0x56>
 8003540:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003544:	f383 8811 	msr	BASEPRI, r3
 8003548:	f3bf 8f6f 	isb	sy
 800354c:	f3bf 8f4f 	dsb	sy
 8003550:	e7fe      	b.n	8003550 <xQueueGenericSendFromISR+0x2a>
 8003552:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003556:	f383 8811 	msr	BASEPRI, r3
 800355a:	f3bf 8f6f 	isb	sy
 800355e:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 8003562:	e7fe      	b.n	8003562 <xQueueGenericSendFromISR+0x3c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003564:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8003566:	2b00      	cmp	r3, #0
 8003568:	d0e5      	beq.n	8003536 <xQueueGenericSendFromISR+0x10>
 800356a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800356e:	f383 8811 	msr	BASEPRI, r3
 8003572:	f3bf 8f6f 	isb	sy
 8003576:	f3bf 8f4f 	dsb	sy
 800357a:	e7fe      	b.n	800357a <xQueueGenericSendFromISR+0x54>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800357c:	f7ff fd80 	bl	8003080 <vPortValidateInterruptPriority>
	__asm volatile
 8003580:	f3ef 8811 	mrs	r8, BASEPRI
 8003584:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003588:	f383 8811 	msr	BASEPRI, r3
 800358c:	f3bf 8f6f 	isb	sy
 8003590:	f3bf 8f4f 	dsb	sy
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003594:	6baa      	ldr	r2, [r5, #56]	@ 0x38
 8003596:	6beb      	ldr	r3, [r5, #60]	@ 0x3c
 8003598:	429a      	cmp	r2, r3
 800359a:	d306      	bcc.n	80035aa <xQueueGenericSendFromISR+0x84>
 800359c:	2c02      	cmp	r4, #2
 800359e:	d004      	beq.n	80035aa <xQueueGenericSendFromISR+0x84>
			xReturn = errQUEUE_FULL;
 80035a0:	2000      	movs	r0, #0
	__asm volatile
 80035a2:	f388 8811 	msr	BASEPRI, r8
}
 80035a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			const int8_t cTxLock = pxQueue->cTxLock;
 80035aa:	f895 9045 	ldrb.w	r9, [r5, #69]	@ 0x45
 80035ae:	fa4f f989 	sxtb.w	r9, r9
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80035b2:	6bab      	ldr	r3, [r5, #56]	@ 0x38
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80035b4:	4622      	mov	r2, r4
 80035b6:	4639      	mov	r1, r7
 80035b8:	4628      	mov	r0, r5
 80035ba:	f7ff fdab 	bl	8003114 <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 80035be:	f1b9 3fff 	cmp.w	r9, #4294967295
 80035c2:	d006      	beq.n	80035d2 <xQueueGenericSendFromISR+0xac>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80035c4:	f109 0301 	add.w	r3, r9, #1
 80035c8:	b25b      	sxtb	r3, r3
 80035ca:	f885 3045 	strb.w	r3, [r5, #69]	@ 0x45
			xReturn = pdPASS;
 80035ce:	2001      	movs	r0, #1
 80035d0:	e7e7      	b.n	80035a2 <xQueueGenericSendFromISR+0x7c>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80035d2:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 80035d4:	b90b      	cbnz	r3, 80035da <xQueueGenericSendFromISR+0xb4>
			xReturn = pdPASS;
 80035d6:	2001      	movs	r0, #1
 80035d8:	e7e3      	b.n	80035a2 <xQueueGenericSendFromISR+0x7c>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80035da:	f105 0024 	add.w	r0, r5, #36	@ 0x24
 80035de:	f004 fe17 	bl	8008210 <xTaskRemoveFromEventList>
 80035e2:	b118      	cbz	r0, 80035ec <xQueueGenericSendFromISR+0xc6>
							if( pxHigherPriorityTaskWoken != NULL )
 80035e4:	b126      	cbz	r6, 80035f0 <xQueueGenericSendFromISR+0xca>
								*pxHigherPriorityTaskWoken = pdTRUE;
 80035e6:	2001      	movs	r0, #1
 80035e8:	6030      	str	r0, [r6, #0]
 80035ea:	e7da      	b.n	80035a2 <xQueueGenericSendFromISR+0x7c>
			xReturn = pdPASS;
 80035ec:	2001      	movs	r0, #1
 80035ee:	e7d8      	b.n	80035a2 <xQueueGenericSendFromISR+0x7c>
 80035f0:	2001      	movs	r0, #1
 80035f2:	e7d6      	b.n	80035a2 <xQueueGenericSendFromISR+0x7c>

080035f4 <xQueueReceive>:
{
 80035f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80035f6:	b085      	sub	sp, #20
 80035f8:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 80035fa:	b190      	cbz	r0, 8003622 <xQueueReceive+0x2e>
 80035fc:	460f      	mov	r7, r1
 80035fe:	4604      	mov	r4, r0
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003600:	b1c1      	cbz	r1, 8003634 <xQueueReceive+0x40>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003602:	f004 fea1 	bl	8008348 <xTaskGetSchedulerState>
 8003606:	4606      	mov	r6, r0
 8003608:	bb00      	cbnz	r0, 800364c <xQueueReceive+0x58>
 800360a:	9b01      	ldr	r3, [sp, #4]
 800360c:	2b00      	cmp	r3, #0
 800360e:	d05e      	beq.n	80036ce <xQueueReceive+0xda>
	__asm volatile
 8003610:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003614:	f383 8811 	msr	BASEPRI, r3
 8003618:	f3bf 8f6f 	isb	sy
 800361c:	f3bf 8f4f 	dsb	sy
 8003620:	e7fe      	b.n	8003620 <xQueueReceive+0x2c>
 8003622:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003626:	f383 8811 	msr	BASEPRI, r3
 800362a:	f3bf 8f6f 	isb	sy
 800362e:	f3bf 8f4f 	dsb	sy
	configASSERT( ( pxQueue ) );
 8003632:	e7fe      	b.n	8003632 <xQueueReceive+0x3e>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003634:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8003636:	2b00      	cmp	r3, #0
 8003638:	d0e3      	beq.n	8003602 <xQueueReceive+0xe>
 800363a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800363e:	f383 8811 	msr	BASEPRI, r3
 8003642:	f3bf 8f6f 	isb	sy
 8003646:	f3bf 8f4f 	dsb	sy
 800364a:	e7fe      	b.n	800364a <xQueueReceive+0x56>
 800364c:	2600      	movs	r6, #0
 800364e:	e03e      	b.n	80036ce <xQueueReceive+0xda>
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003650:	4639      	mov	r1, r7
 8003652:	4620      	mov	r0, r4
 8003654:	f7ff fd99 	bl	800318a <prvCopyDataFromQueue>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003658:	3d01      	subs	r5, #1
 800365a:	63a5      	str	r5, [r4, #56]	@ 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800365c:	6923      	ldr	r3, [r4, #16]
 800365e:	b923      	cbnz	r3, 800366a <xQueueReceive+0x76>
				taskEXIT_CRITICAL();
 8003660:	f7ff fc0a 	bl	8002e78 <vPortExitCritical>
				return pdPASS;
 8003664:	2001      	movs	r0, #1
}
 8003666:	b005      	add	sp, #20
 8003668:	bdf0      	pop	{r4, r5, r6, r7, pc}
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800366a:	f104 0010 	add.w	r0, r4, #16
 800366e:	f004 fdcf 	bl	8008210 <xTaskRemoveFromEventList>
 8003672:	2800      	cmp	r0, #0
 8003674:	d0f4      	beq.n	8003660 <xQueueReceive+0x6c>
						queueYIELD_IF_USING_PREEMPTION();
 8003676:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800367a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800367e:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8003682:	f3bf 8f4f 	dsb	sy
 8003686:	f3bf 8f6f 	isb	sy
 800368a:	e7e9      	b.n	8003660 <xQueueReceive+0x6c>
					taskEXIT_CRITICAL();
 800368c:	f7ff fbf4 	bl	8002e78 <vPortExitCritical>
					return errQUEUE_EMPTY;
 8003690:	2000      	movs	r0, #0
 8003692:	e7e8      	b.n	8003666 <xQueueReceive+0x72>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003694:	a802      	add	r0, sp, #8
 8003696:	f004 fe01 	bl	800829c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800369a:	2601      	movs	r6, #1
 800369c:	e021      	b.n	80036e2 <xQueueReceive+0xee>
		prvLockQueue( pxQueue );
 800369e:	2300      	movs	r3, #0
 80036a0:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 80036a4:	e029      	b.n	80036fa <xQueueReceive+0x106>
 80036a6:	2300      	movs	r3, #0
 80036a8:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 80036ac:	e02b      	b.n	8003706 <xQueueReceive+0x112>
				prvUnlockQueue( pxQueue );
 80036ae:	4620      	mov	r0, r4
 80036b0:	f7ff fd7d 	bl	80031ae <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80036b4:	f004 fc8a 	bl	8007fcc <xTaskResumeAll>
 80036b8:	e009      	b.n	80036ce <xQueueReceive+0xda>
			prvUnlockQueue( pxQueue );
 80036ba:	4620      	mov	r0, r4
 80036bc:	f7ff fd77 	bl	80031ae <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80036c0:	f004 fc84 	bl	8007fcc <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80036c4:	4620      	mov	r0, r4
 80036c6:	f7ff fd18 	bl	80030fa <prvIsQueueEmpty>
 80036ca:	2800      	cmp	r0, #0
 80036cc:	d13f      	bne.n	800374e <xQueueReceive+0x15a>
		taskENTER_CRITICAL();
 80036ce:	f7ff fbb1 	bl	8002e34 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80036d2:	6ba5      	ldr	r5, [r4, #56]	@ 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80036d4:	2d00      	cmp	r5, #0
 80036d6:	d1bb      	bne.n	8003650 <xQueueReceive+0x5c>
				if( xTicksToWait == ( TickType_t ) 0 )
 80036d8:	9b01      	ldr	r3, [sp, #4]
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d0d6      	beq.n	800368c <xQueueReceive+0x98>
				else if( xEntryTimeSet == pdFALSE )
 80036de:	2e00      	cmp	r6, #0
 80036e0:	d0d8      	beq.n	8003694 <xQueueReceive+0xa0>
		taskEXIT_CRITICAL();
 80036e2:	f7ff fbc9 	bl	8002e78 <vPortExitCritical>
		vTaskSuspendAll();
 80036e6:	f004 fbd7 	bl	8007e98 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80036ea:	f7ff fba3 	bl	8002e34 <vPortEnterCritical>
 80036ee:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 80036f2:	b25b      	sxtb	r3, r3
 80036f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036f8:	d0d1      	beq.n	800369e <xQueueReceive+0xaa>
 80036fa:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 80036fe:	b25b      	sxtb	r3, r3
 8003700:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003704:	d0cf      	beq.n	80036a6 <xQueueReceive+0xb2>
 8003706:	f7ff fbb7 	bl	8002e78 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800370a:	a901      	add	r1, sp, #4
 800370c:	a802      	add	r0, sp, #8
 800370e:	f004 fdd1 	bl	80082b4 <xTaskCheckForTimeOut>
 8003712:	2800      	cmp	r0, #0
 8003714:	d1d1      	bne.n	80036ba <xQueueReceive+0xc6>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003716:	4620      	mov	r0, r4
 8003718:	f7ff fcef 	bl	80030fa <prvIsQueueEmpty>
 800371c:	2800      	cmp	r0, #0
 800371e:	d0c6      	beq.n	80036ae <xQueueReceive+0xba>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003720:	9901      	ldr	r1, [sp, #4]
 8003722:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8003726:	f004 fd3f 	bl	80081a8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800372a:	4620      	mov	r0, r4
 800372c:	f7ff fd3f 	bl	80031ae <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003730:	f004 fc4c 	bl	8007fcc <xTaskResumeAll>
 8003734:	2800      	cmp	r0, #0
 8003736:	d1ca      	bne.n	80036ce <xQueueReceive+0xda>
					portYIELD_WITHIN_API();
 8003738:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800373c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003740:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8003744:	f3bf 8f4f 	dsb	sy
 8003748:	f3bf 8f6f 	isb	sy
 800374c:	e7bf      	b.n	80036ce <xQueueReceive+0xda>
				return errQUEUE_EMPTY;
 800374e:	2000      	movs	r0, #0
 8003750:	e789      	b.n	8003666 <xQueueReceive+0x72>

08003752 <xQueueReceiveFromISR>:
{
 8003752:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( pxQueue );
 8003756:	b1b0      	cbz	r0, 8003786 <xQueueReceiveFromISR+0x34>
 8003758:	460d      	mov	r5, r1
 800375a:	4690      	mov	r8, r2
 800375c:	4604      	mov	r4, r0
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800375e:	b1d9      	cbz	r1, 8003798 <xQueueReceiveFromISR+0x46>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003760:	f7ff fc8e 	bl	8003080 <vPortValidateInterruptPriority>
	__asm volatile
 8003764:	f3ef 8711 	mrs	r7, BASEPRI
 8003768:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800376c:	f383 8811 	msr	BASEPRI, r3
 8003770:	f3bf 8f6f 	isb	sy
 8003774:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003778:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800377a:	b9ce      	cbnz	r6, 80037b0 <xQueueReceiveFromISR+0x5e>
			xReturn = pdFAIL;
 800377c:	2000      	movs	r0, #0
	__asm volatile
 800377e:	f387 8811 	msr	BASEPRI, r7
}
 8003782:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	__asm volatile
 8003786:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800378a:	f383 8811 	msr	BASEPRI, r3
 800378e:	f3bf 8f6f 	isb	sy
 8003792:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 8003796:	e7fe      	b.n	8003796 <xQueueReceiveFromISR+0x44>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003798:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 800379a:	2b00      	cmp	r3, #0
 800379c:	d0e0      	beq.n	8003760 <xQueueReceiveFromISR+0xe>
 800379e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80037a2:	f383 8811 	msr	BASEPRI, r3
 80037a6:	f3bf 8f6f 	isb	sy
 80037aa:	f3bf 8f4f 	dsb	sy
 80037ae:	e7fe      	b.n	80037ae <xQueueReceiveFromISR+0x5c>
			const int8_t cRxLock = pxQueue->cRxLock;
 80037b0:	f894 9044 	ldrb.w	r9, [r4, #68]	@ 0x44
 80037b4:	fa4f f989 	sxtb.w	r9, r9
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80037b8:	4629      	mov	r1, r5
 80037ba:	4620      	mov	r0, r4
 80037bc:	f7ff fce5 	bl	800318a <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80037c0:	1e73      	subs	r3, r6, #1
 80037c2:	63a3      	str	r3, [r4, #56]	@ 0x38
			if( cRxLock == queueUNLOCKED )
 80037c4:	f1b9 3fff 	cmp.w	r9, #4294967295
 80037c8:	d006      	beq.n	80037d8 <xQueueReceiveFromISR+0x86>
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80037ca:	f109 0301 	add.w	r3, r9, #1
 80037ce:	b25b      	sxtb	r3, r3
 80037d0:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
			xReturn = pdPASS;
 80037d4:	2001      	movs	r0, #1
 80037d6:	e7d2      	b.n	800377e <xQueueReceiveFromISR+0x2c>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80037d8:	6923      	ldr	r3, [r4, #16]
 80037da:	b90b      	cbnz	r3, 80037e0 <xQueueReceiveFromISR+0x8e>
			xReturn = pdPASS;
 80037dc:	2001      	movs	r0, #1
 80037de:	e7ce      	b.n	800377e <xQueueReceiveFromISR+0x2c>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80037e0:	f104 0010 	add.w	r0, r4, #16
 80037e4:	f004 fd14 	bl	8008210 <xTaskRemoveFromEventList>
 80037e8:	b130      	cbz	r0, 80037f8 <xQueueReceiveFromISR+0xa6>
						if( pxHigherPriorityTaskWoken != NULL )
 80037ea:	f1b8 0f00 	cmp.w	r8, #0
 80037ee:	d005      	beq.n	80037fc <xQueueReceiveFromISR+0xaa>
							*pxHigherPriorityTaskWoken = pdTRUE;
 80037f0:	2001      	movs	r0, #1
 80037f2:	f8c8 0000 	str.w	r0, [r8]
 80037f6:	e7c2      	b.n	800377e <xQueueReceiveFromISR+0x2c>
			xReturn = pdPASS;
 80037f8:	2001      	movs	r0, #1
 80037fa:	e7c0      	b.n	800377e <xQueueReceiveFromISR+0x2c>
 80037fc:	2001      	movs	r0, #1
 80037fe:	e7be      	b.n	800377e <xQueueReceiveFromISR+0x2c>

08003800 <vQueueAddToRegistry>:
	{
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003800:	2300      	movs	r3, #0
 8003802:	2b07      	cmp	r3, #7
 8003804:	d80c      	bhi.n	8003820 <vQueueAddToRegistry+0x20>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003806:	4a07      	ldr	r2, [pc, #28]	@ (8003824 <vQueueAddToRegistry+0x24>)
 8003808:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800380c:	b10a      	cbz	r2, 8003812 <vQueueAddToRegistry+0x12>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800380e:	3301      	adds	r3, #1
 8003810:	e7f7      	b.n	8003802 <vQueueAddToRegistry+0x2>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003812:	4a04      	ldr	r2, [pc, #16]	@ (8003824 <vQueueAddToRegistry+0x24>)
 8003814:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8003818:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800381c:	6050      	str	r0, [r2, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800381e:	4770      	bx	lr
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8003820:	4770      	bx	lr
 8003822:	bf00      	nop
 8003824:	200067d0 	.word	0x200067d0

08003828 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003828:	b570      	push	{r4, r5, r6, lr}
 800382a:	4604      	mov	r4, r0
 800382c:	460d      	mov	r5, r1
 800382e:	4616      	mov	r6, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8003830:	f7ff fb00 	bl	8002e34 <vPortEnterCritical>
 8003834:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8003838:	b25b      	sxtb	r3, r3
 800383a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800383e:	d00d      	beq.n	800385c <vQueueWaitForMessageRestricted+0x34>
 8003840:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8003844:	b25b      	sxtb	r3, r3
 8003846:	f1b3 3fff 	cmp.w	r3, #4294967295
 800384a:	d00b      	beq.n	8003864 <vQueueWaitForMessageRestricted+0x3c>
 800384c:	f7ff fb14 	bl	8002e78 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003850:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8003852:	b15b      	cbz	r3, 800386c <vQueueWaitForMessageRestricted+0x44>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8003854:	4620      	mov	r0, r4
 8003856:	f7ff fcaa 	bl	80031ae <prvUnlockQueue>
	}
 800385a:	bd70      	pop	{r4, r5, r6, pc}
		prvLockQueue( pxQueue );
 800385c:	2300      	movs	r3, #0
 800385e:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 8003862:	e7ed      	b.n	8003840 <vQueueWaitForMessageRestricted+0x18>
 8003864:	2300      	movs	r3, #0
 8003866:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 800386a:	e7ef      	b.n	800384c <vQueueWaitForMessageRestricted+0x24>
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800386c:	4632      	mov	r2, r6
 800386e:	4629      	mov	r1, r5
 8003870:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8003874:	f004 fcb0 	bl	80081d8 <vTaskPlaceOnEventListRestricted>
 8003878:	e7ec      	b.n	8003854 <vQueueWaitForMessageRestricted+0x2c>
	...

0800387c <resistor_init>:
#include "resistor.h"

void resistor_init(resistor_t* resistor, float pull_resistor, resistor_pull_type_t pull_type, analog_input_channel_t analog_input)
{
 800387c:	b508      	push	{r3, lr}
    if (resistor == NULL)
 800387e:	b120      	cbz	r0, 800388a <resistor_init+0xe>
    {
        log_error("Resistor init failed!");
        return;
    }
    resistor->pull_resistor = pull_resistor;
 8003880:	ed80 0a01 	vstr	s0, [r0, #4]
    resistor->pull_type = pull_type;
 8003884:	7001      	strb	r1, [r0, #0]
    resistor->analog_input = analog_input;
 8003886:	7202      	strb	r2, [r0, #8]
}
 8003888:	bd08      	pop	{r3, pc}
        log_error("Resistor init failed!");
 800388a:	4802      	ldr	r0, [pc, #8]	@ (8003894 <resistor_init+0x18>)
 800388c:	f7fe fb86 	bl	8001f9c <log_error>
        return;
 8003890:	e7fa      	b.n	8003888 <resistor_init+0xc>
 8003892:	bf00      	nop
 8003894:	0800bb24 	.word	0x0800bb24

08003898 <resistor_get_resistance>:

/**
 * @todo div by zero will break this!
 */
float resistor_get_resistance(const resistor_t *resistor)
{
 8003898:	b510      	push	{r4, lr}
 800389a:	4604      	mov	r4, r0
    uint16_t adc_value = analog_inputs_get_data(resistor->analog_input);
 800389c:	7a00      	ldrb	r0, [r0, #8]
 800389e:	f7fd faad 	bl	8000dfc <analog_inputs_get_data>
 80038a2:	ee07 0a10 	vmov	s14, r0
    float voltage = ((float)adc_value / (float)ADC_MAX_VALUE) * (float)ADC_REF_VOLTAGE;
 80038a6:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 80038aa:	eddf 6a1a 	vldr	s13, [pc, #104]	@ 8003914 <resistor_get_resistance+0x7c>
 80038ae:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80038b2:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 8003918 <resistor_get_resistance+0x80>
 80038b6:	ee67 7a87 	vmul.f32	s15, s15, s14
    // simple check to see if the sensor is open circuit or not
    if (!IS_IN_RANGE(voltage, 0.05f * ADC_REF_VOLTAGE, 0.95f * ADC_REF_VOLTAGE))
 80038ba:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 800391c <resistor_get_resistance+0x84>
 80038be:	eef4 7ac7 	vcmpe.f32	s15, s14
 80038c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80038c6:	db13      	blt.n	80038f0 <resistor_get_resistance+0x58>
 80038c8:	ed9f 7a15 	vldr	s14, [pc, #84]	@ 8003920 <resistor_get_resistance+0x88>
 80038cc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80038d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80038d4:	d80c      	bhi.n	80038f0 <resistor_get_resistance+0x58>
    {
        log_error("Resistor open circuit.");
        return NAN;
    }
    if (resistor->pull_type == RESISTOR_PULL_UP) {
 80038d6:	7823      	ldrb	r3, [r4, #0]
 80038d8:	b983      	cbnz	r3, 80038fc <resistor_get_resistance+0x64>
        return (voltage * (float)resistor->pull_resistor) / ((float)ADC_REF_VOLTAGE - voltage);
 80038da:	edd4 6a01 	vldr	s13, [r4, #4]
 80038de:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80038e2:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 8003918 <resistor_get_resistance+0x80>
 80038e6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80038ea:	ee86 0aa7 	vdiv.f32	s0, s13, s15
 80038ee:	e004      	b.n	80038fa <resistor_get_resistance+0x62>
        log_error("Resistor open circuit.");
 80038f0:	480c      	ldr	r0, [pc, #48]	@ (8003924 <resistor_get_resistance+0x8c>)
 80038f2:	f7fe fb53 	bl	8001f9c <log_error>
        return NAN;
 80038f6:	ed9f 0a0c 	vldr	s0, [pc, #48]	@ 8003928 <resistor_get_resistance+0x90>
    } else { // PULL_DOWN
        return ((ADC_REF_VOLTAGE - voltage) * (float)resistor->pull_resistor) / voltage;
    }
}
 80038fa:	bd10      	pop	{r4, pc}
        return ((ADC_REF_VOLTAGE - voltage) * (float)resistor->pull_resistor) / voltage;
 80038fc:	ed9f 7a06 	vldr	s14, [pc, #24]	@ 8003918 <resistor_get_resistance+0x80>
 8003900:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003904:	edd4 6a01 	vldr	s13, [r4, #4]
 8003908:	ee27 7a26 	vmul.f32	s14, s14, s13
 800390c:	ee87 0a27 	vdiv.f32	s0, s14, s15
 8003910:	e7f3      	b.n	80038fa <resistor_get_resistance+0x62>
 8003912:	bf00      	nop
 8003914:	457ff000 	.word	0x457ff000
 8003918:	40533333 	.word	0x40533333
 800391c:	3e28f5c3 	.word	0x3e28f5c3
 8003920:	4048a3d7 	.word	0x4048a3d7
 8003924:	0800bb3c 	.word	0x0800bb3c
 8003928:	7fc00000 	.word	0x7fc00000

0800392c <sensor_tps_get>:
static thermistor_t *sensor_iat = NULL;
static thermistor_t *sensor_clt = NULL;
static sensor_ops_t *sensor_ops = NULL;

percent_t sensor_tps_get(sensor_tps_t *sensor)
{
 800392c:	b510      	push	{r4, lr}
    if (sensor == NULL)
 800392e:	b3b0      	cbz	r0, 800399e <sensor_tps_get+0x72>
 8003930:	4604      	mov	r4, r0
    {
        log_error("tps is null");
        return SENSOR_TPS_FAIL_SAFE;
    }
     if (sensor->wide_open_throttle_adc_value == 0 && sensor->closed_throttle_adc_value == 0)
 8003932:	8803      	ldrh	r3, [r0, #0]
 8003934:	b90b      	cbnz	r3, 800393a <sensor_tps_get+0xe>
 8003936:	8843      	ldrh	r3, [r0, #2]
 8003938:	b3bb      	cbz	r3, 80039aa <sensor_tps_get+0x7e>
    {
        log_error("tps wrong sensor calib");
        return SENSOR_TPS_FAIL_SAFE;
    }
    percent_t result = 0;
    uint16_t raw_data = analog_inputs_get_data(sensor->analog_channel);
 800393a:	7920      	ldrb	r0, [r4, #4]
 800393c:	f7fd fa5e 	bl	8000dfc <analog_inputs_get_data>
 8003940:	ee07 0a90 	vmov	s15, r0
    if (sensor->is_inverted)
 8003944:	7963      	ldrb	r3, [r4, #5]
 8003946:	b3b3      	cbz	r3, 80039b6 <sensor_tps_get+0x8a>
    {
        result = mapf((float)raw_data, (float)sensor->wide_open_throttle_adc_value, (float)sensor->closed_throttle_adc_value, (float)0, (float)100);
 8003948:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800394c:	8822      	ldrh	r2, [r4, #0]
 800394e:	ee07 2a10 	vmov	s14, r2
 8003952:	eef8 6a47 	vcvt.f32.u32	s13, s14
 8003956:	8863      	ldrh	r3, [r4, #2]
 8003958:	ee07 3a10 	vmov	s14, r3
 800395c:	eeb8 7a47 	vcvt.f32.u32	s14, s14
    if (in_max == in_min)
 8003960:	429a      	cmp	r2, r3
 8003962:	d045      	beq.n	80039f0 <sensor_tps_get+0xc4>
    return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8003964:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8003968:	ed9f 6a26 	vldr	s12, [pc, #152]	@ 8003a04 <sensor_tps_get+0xd8>
 800396c:	ee67 7a86 	vmul.f32	s15, s15, s12
 8003970:	ee37 7a66 	vsub.f32	s14, s14, s13
 8003974:	ee87 0a87 	vdiv.f32	s0, s15, s14
 8003978:	eddf 7a23 	vldr	s15, [pc, #140]	@ 8003a08 <sensor_tps_get+0xdc>
 800397c:	ee30 0a27 	vadd.f32	s0, s0, s15
    }
    else
    {
        result = mapf((float)raw_data, (float)sensor->closed_throttle_adc_value, (float)sensor->wide_open_throttle_adc_value, (float)0, (float)100);
    }
    result = CLAMP(result, (percent_t)0, (percent_t)100);
 8003980:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8003984:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003988:	d438      	bmi.n	80039fc <sensor_tps_get+0xd0>
 800398a:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 8003a04 <sensor_tps_get+0xd8>
 800398e:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8003992:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003996:	dd01      	ble.n	800399c <sensor_tps_get+0x70>
 8003998:	eeb0 0a67 	vmov.f32	s0, s15
    return result;
}
 800399c:	bd10      	pop	{r4, pc}
        log_error("tps is null");
 800399e:	481b      	ldr	r0, [pc, #108]	@ (8003a0c <sensor_tps_get+0xe0>)
 80039a0:	f7fe fafc 	bl	8001f9c <log_error>
        return SENSOR_TPS_FAIL_SAFE;
 80039a4:	ed9f 0a1a 	vldr	s0, [pc, #104]	@ 8003a10 <sensor_tps_get+0xe4>
 80039a8:	e7f8      	b.n	800399c <sensor_tps_get+0x70>
        log_error("tps wrong sensor calib");
 80039aa:	481a      	ldr	r0, [pc, #104]	@ (8003a14 <sensor_tps_get+0xe8>)
 80039ac:	f7fe faf6 	bl	8001f9c <log_error>
        return SENSOR_TPS_FAIL_SAFE;
 80039b0:	ed9f 0a17 	vldr	s0, [pc, #92]	@ 8003a10 <sensor_tps_get+0xe4>
 80039b4:	e7f2      	b.n	800399c <sensor_tps_get+0x70>
        result = mapf((float)raw_data, (float)sensor->closed_throttle_adc_value, (float)sensor->wide_open_throttle_adc_value, (float)0, (float)100);
 80039b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80039ba:	8862      	ldrh	r2, [r4, #2]
 80039bc:	ee07 2a10 	vmov	s14, r2
 80039c0:	eef8 6a47 	vcvt.f32.u32	s13, s14
 80039c4:	8823      	ldrh	r3, [r4, #0]
 80039c6:	ee07 3a10 	vmov	s14, r3
 80039ca:	eeb8 7a47 	vcvt.f32.u32	s14, s14
    if (in_max == in_min)
 80039ce:	429a      	cmp	r2, r3
 80039d0:	d011      	beq.n	80039f6 <sensor_tps_get+0xca>
    return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 80039d2:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80039d6:	ed9f 6a0b 	vldr	s12, [pc, #44]	@ 8003a04 <sensor_tps_get+0xd8>
 80039da:	ee67 7a86 	vmul.f32	s15, s15, s12
 80039de:	ee37 7a66 	vsub.f32	s14, s14, s13
 80039e2:	ee87 0a87 	vdiv.f32	s0, s15, s14
 80039e6:	eddf 7a08 	vldr	s15, [pc, #32]	@ 8003a08 <sensor_tps_get+0xdc>
 80039ea:	ee30 0a27 	vadd.f32	s0, s0, s15
 80039ee:	e7c7      	b.n	8003980 <sensor_tps_get+0x54>
        result = mapf((float)raw_data, (float)sensor->wide_open_throttle_adc_value, (float)sensor->closed_throttle_adc_value, (float)0, (float)100);
 80039f0:	ed9f 0a05 	vldr	s0, [pc, #20]	@ 8003a08 <sensor_tps_get+0xdc>
 80039f4:	e7c9      	b.n	800398a <sensor_tps_get+0x5e>
        result = mapf((float)raw_data, (float)sensor->closed_throttle_adc_value, (float)sensor->wide_open_throttle_adc_value, (float)0, (float)100);
 80039f6:	ed9f 0a04 	vldr	s0, [pc, #16]	@ 8003a08 <sensor_tps_get+0xdc>
 80039fa:	e7c6      	b.n	800398a <sensor_tps_get+0x5e>
    result = CLAMP(result, (percent_t)0, (percent_t)100);
 80039fc:	ed9f 0a02 	vldr	s0, [pc, #8]	@ 8003a08 <sensor_tps_get+0xdc>
 8003a00:	e7cc      	b.n	800399c <sensor_tps_get+0x70>
 8003a02:	bf00      	nop
 8003a04:	42c80000 	.word	0x42c80000
 8003a08:	00000000 	.word	0x00000000
 8003a0c:	0800bb54 	.word	0x0800bb54
 8003a10:	7fc00000 	.word	0x7fc00000
 8003a14:	0800bb60 	.word	0x0800bb60

08003a18 <sensor_map_init>:

void sensor_map_init(sensor_map_t *sensor, sensor_map_type_t type)
{
 8003a18:	b510      	push	{r4, lr}
    if (sensor == NULL)
 8003a1a:	b168      	cbz	r0, 8003a38 <sensor_map_init+0x20>
 8003a1c:	4604      	mov	r4, r0
    {
        log_error("map sensor is null");
        return;
    }
    switch (type)
 8003a1e:	b179      	cbz	r1, 8003a40 <sensor_map_init+0x28>
 8003a20:	2901      	cmp	r1, #1
 8003a22:	d115      	bne.n	8003a50 <sensor_map_init+0x38>
         * a simple linear sensor
         */
        /**
         * @todo actually calculate these values!
         */
        sensor->adc_value_0_bar = 100;
 8003a24:	2364      	movs	r3, #100	@ 0x64
 8003a26:	8003      	strh	r3, [r0, #0]
        sensor->adc_value_1_bar = 3000;
 8003a28:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 8003a2c:	8043      	strh	r3, [r0, #2]
        sensor->analog_channel = ANALOG_INPUT_SENSOR_MAP_PIN;
 8003a2e:	2304      	movs	r3, #4
 8003a30:	7103      	strb	r3, [r0, #4]
    
    default:
        log_error("map sensor type not configured!");
        break;
    }
    map_sensor = sensor;
 8003a32:	4b09      	ldr	r3, [pc, #36]	@ (8003a58 <sensor_map_init+0x40>)
 8003a34:	601c      	str	r4, [r3, #0]
}
 8003a36:	bd10      	pop	{r4, pc}
        log_error("map sensor is null");
 8003a38:	4808      	ldr	r0, [pc, #32]	@ (8003a5c <sensor_map_init+0x44>)
 8003a3a:	f7fe faaf 	bl	8001f9c <log_error>
        return;
 8003a3e:	e7fa      	b.n	8003a36 <sensor_map_init+0x1e>
        sensor->adc_value_0_bar = 100;
 8003a40:	2364      	movs	r3, #100	@ 0x64
 8003a42:	8003      	strh	r3, [r0, #0]
        sensor->adc_value_1_bar = 3000;
 8003a44:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 8003a48:	8043      	strh	r3, [r0, #2]
        sensor->analog_channel = ANALOG_INPUT_SENSOR_MAP_PIN;
 8003a4a:	2304      	movs	r3, #4
 8003a4c:	7103      	strb	r3, [r0, #4]
        break;
 8003a4e:	e7f0      	b.n	8003a32 <sensor_map_init+0x1a>
        log_error("map sensor type not configured!");
 8003a50:	4803      	ldr	r0, [pc, #12]	@ (8003a60 <sensor_map_init+0x48>)
 8003a52:	f7fe faa3 	bl	8001f9c <log_error>
        break;
 8003a56:	e7ec      	b.n	8003a32 <sensor_map_init+0x1a>
 8003a58:	20006828 	.word	0x20006828
 8003a5c:	0800bb78 	.word	0x0800bb78
 8003a60:	0800bb8c 	.word	0x0800bb8c

08003a64 <sensor_iat_init>:
    }
    return result;
}

void sensor_iat_init(thermistor_t *sensor, sensor_iat_type_t type)
{
 8003a64:	b570      	push	{r4, r5, r6, lr}
 8003a66:	b08a      	sub	sp, #40	@ 0x28
 8003a68:	4604      	mov	r4, r0
    switch (type)
 8003a6a:	b1e9      	cbz	r1, 8003aa8 <sensor_iat_init+0x44>
 8003a6c:	2901      	cmp	r1, #1
 8003a6e:	d138      	bne.n	8003ae2 <sensor_iat_init+0x7e>
    {
        case SENSOR_IAT_TYPE_BOSCH_816:
            resistor_init(&sensor->resistor, 10000, RESISTOR_PULL_UP, ANALOG_INPUT_SENSOR_IAT_PIN);
 8003a70:	2205      	movs	r2, #5
 8003a72:	2100      	movs	r1, #0
 8003a74:	ed9f 0a1d 	vldr	s0, [pc, #116]	@ 8003aec <sensor_iat_init+0x88>
 8003a78:	f7ff ff00 	bl	800387c <resistor_init>
            thermistor_conf_t bosch_816_iat_conf = 
 8003a7c:	ad04      	add	r5, sp, #16
 8003a7e:	4e1c      	ldr	r6, [pc, #112]	@ (8003af0 <sensor_iat_init+0x8c>)
 8003a80:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8003a82:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003a84:	e896 0003 	ldmia.w	r6, {r0, r1}
 8003a88:	e885 0003 	stmia.w	r5, {r0, r1}
                .resistance_3 = 322.5f,
                .tempC_1 = -10.0f,
                .tempC_2 = 25.0f,
                .tempC_3 = 80.0f
            };
            thermistor_init(sensor, bosch_816_iat_conf);
 8003a8c:	ab0a      	add	r3, sp, #40	@ 0x28
 8003a8e:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 8003a92:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8003a96:	ab04      	add	r3, sp, #16
 8003a98:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003a9a:	4620      	mov	r0, r4
 8003a9c:	f004 fcac 	bl	80083f8 <thermistor_init>
            sensor_iat = sensor;
 8003aa0:	4b14      	ldr	r3, [pc, #80]	@ (8003af4 <sensor_iat_init+0x90>)
 8003aa2:	601c      	str	r4, [r3, #0]
            break;
    default:
        log_error("iat sensor type not configured!");
        break;
    }
}
 8003aa4:	b00a      	add	sp, #40	@ 0x28
 8003aa6:	bd70      	pop	{r4, r5, r6, pc}
            resistor_init(&sensor->resistor, 4700, RESISTOR_PULL_UP, ANALOG_INPUT_SENSOR_IAT_PIN);
 8003aa8:	2205      	movs	r2, #5
 8003aaa:	2100      	movs	r1, #0
 8003aac:	ed9f 0a12 	vldr	s0, [pc, #72]	@ 8003af8 <sensor_iat_init+0x94>
 8003ab0:	f7ff fee4 	bl	800387c <resistor_init>
            thermistor_conf_t genric_5k =
 8003ab4:	f10d 0c10 	add.w	ip, sp, #16
 8003ab8:	4d10      	ldr	r5, [pc, #64]	@ (8003afc <sensor_iat_init+0x98>)
 8003aba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003abc:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8003ac0:	e895 0003 	ldmia.w	r5, {r0, r1}
 8003ac4:	e88c 0003 	stmia.w	ip, {r0, r1}
            thermistor_init(sensor, genric_5k);
 8003ac8:	ab0a      	add	r3, sp, #40	@ 0x28
 8003aca:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 8003ace:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8003ad2:	ab04      	add	r3, sp, #16
 8003ad4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003ad6:	4620      	mov	r0, r4
 8003ad8:	f004 fc8e 	bl	80083f8 <thermistor_init>
            sensor_iat = sensor;
 8003adc:	4b05      	ldr	r3, [pc, #20]	@ (8003af4 <sensor_iat_init+0x90>)
 8003ade:	601c      	str	r4, [r3, #0]
            break;
 8003ae0:	e7e0      	b.n	8003aa4 <sensor_iat_init+0x40>
        log_error("iat sensor type not configured!");
 8003ae2:	4807      	ldr	r0, [pc, #28]	@ (8003b00 <sensor_iat_init+0x9c>)
 8003ae4:	f7fe fa5a 	bl	8001f9c <log_error>
}
 8003ae8:	e7dc      	b.n	8003aa4 <sensor_iat_init+0x40>
 8003aea:	bf00      	nop
 8003aec:	461c4000 	.word	0x461c4000
 8003af0:	0800b8d4 	.word	0x0800b8d4
 8003af4:	20006824 	.word	0x20006824
 8003af8:	4592e000 	.word	0x4592e000
 8003afc:	0800b8ec 	.word	0x0800b8ec
 8003b00:	0800bbac 	.word	0x0800bbac

08003b04 <sensor_iat_get>:

temperature_t sensor_iat_get()
{
 8003b04:	b508      	push	{r3, lr}
    if (sensor_iat == NULL)
 8003b06:	4b10      	ldr	r3, [pc, #64]	@ (8003b48 <sensor_iat_get+0x44>)
 8003b08:	6818      	ldr	r0, [r3, #0]
 8003b0a:	b180      	cbz	r0, 8003b2e <sensor_iat_get+0x2a>
    {
        log_error("iat sensor is null");
        return SENSOR_IAT_FAIL_SAFE;
    }
    temperature_t temperature = thermistor_get_temp(sensor_iat);
 8003b0c:	f004 fce8 	bl	80084e0 <thermistor_get_temp>
    if (!IS_IN_RANGE(temperature, FIRMWARE_LIMIT_MIN_TEMP, FIRMWARE_LIMIT_MAX_TEMP))
 8003b10:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 8003b4c <sensor_iat_get+0x48>
 8003b14:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8003b18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b1c:	db0d      	blt.n	8003b3a <sensor_iat_get+0x36>
 8003b1e:	eddf 7a0c 	vldr	s15, [pc, #48]	@ 8003b50 <sensor_iat_get+0x4c>
 8003b22:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8003b26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b2a:	d806      	bhi.n	8003b3a <sensor_iat_get+0x36>
    {
        log_error("iat sensor out of range!");
        return SENSOR_IAT_FAIL_SAFE;
    }
    return temperature;
}
 8003b2c:	bd08      	pop	{r3, pc}
        log_error("iat sensor is null");
 8003b2e:	4809      	ldr	r0, [pc, #36]	@ (8003b54 <sensor_iat_get+0x50>)
 8003b30:	f7fe fa34 	bl	8001f9c <log_error>
        return SENSOR_IAT_FAIL_SAFE;
 8003b34:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 8003b58 <sensor_iat_get+0x54>
 8003b38:	e7f8      	b.n	8003b2c <sensor_iat_get+0x28>
        log_error("iat sensor out of range!");
 8003b3a:	4808      	ldr	r0, [pc, #32]	@ (8003b5c <sensor_iat_get+0x58>)
 8003b3c:	f7fe fa2e 	bl	8001f9c <log_error>
        return SENSOR_IAT_FAIL_SAFE;
 8003b40:	ed9f 0a05 	vldr	s0, [pc, #20]	@ 8003b58 <sensor_iat_get+0x54>
 8003b44:	e7f2      	b.n	8003b2c <sensor_iat_get+0x28>
 8003b46:	bf00      	nop
 8003b48:	20006824 	.word	0x20006824
 8003b4c:	c2480000 	.word	0xc2480000
 8003b50:	43160000 	.word	0x43160000
 8003b54:	0800bbcc 	.word	0x0800bbcc
 8003b58:	42200000 	.word	0x42200000
 8003b5c:	0800bbe0 	.word	0x0800bbe0

08003b60 <sensor_clt_init>:

void sensor_clt_init(thermistor_t *sensor, sensor_clt_type_t type)
{
 8003b60:	b570      	push	{r4, r5, r6, lr}
 8003b62:	b08a      	sub	sp, #40	@ 0x28
    if (sensor == NULL)
 8003b64:	b1f8      	cbz	r0, 8003ba6 <sensor_clt_init+0x46>
 8003b66:	4604      	mov	r4, r0
    {
        log_error("clt sensor is null");
        return;
    }
    switch (type)
 8003b68:	b309      	cbz	r1, 8003bae <sensor_clt_init+0x4e>
 8003b6a:	2901      	cmp	r1, #1
 8003b6c:	d13c      	bne.n	8003be8 <sensor_clt_init+0x88>
    {
    /* Actually make this a proper thing */
    case SENSOR_CLT_TYPE_NISSAN:
        resistor_init(&sensor->resistor, 10000, RESISTOR_PULL_UP, ANALOG_INPUT_SENSOR_CLT_PIN);
 8003b6e:	2206      	movs	r2, #6
 8003b70:	2100      	movs	r1, #0
 8003b72:	ed9f 0a1f 	vldr	s0, [pc, #124]	@ 8003bf0 <sensor_clt_init+0x90>
 8003b76:	f7ff fe81 	bl	800387c <resistor_init>
        thermistor_conf_t nissan_clt_conf =
 8003b7a:	ad04      	add	r5, sp, #16
 8003b7c:	4e1d      	ldr	r6, [pc, #116]	@ (8003bf4 <sensor_clt_init+0x94>)
 8003b7e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8003b80:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003b82:	e896 0003 	ldmia.w	r6, {r0, r1}
 8003b86:	e885 0003 	stmia.w	r5, {r0, r1}
            .resistance_3 = 230.0f,
            .tempC_1 = -20.0f,
            .tempC_2 = 25.0f,
            .tempC_3 = 90.0f
        };
        thermistor_init(sensor, nissan_clt_conf);
 8003b8a:	ab0a      	add	r3, sp, #40	@ 0x28
 8003b8c:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 8003b90:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8003b94:	ab04      	add	r3, sp, #16
 8003b96:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003b98:	4620      	mov	r0, r4
 8003b9a:	f004 fc2d 	bl	80083f8 <thermistor_init>
        sensor_clt = sensor;
 8003b9e:	4b16      	ldr	r3, [pc, #88]	@ (8003bf8 <sensor_clt_init+0x98>)
 8003ba0:	601c      	str	r4, [r3, #0]
        break;
    default:
        log_error("clt sensor type not configured!");
        break;
    }
}
 8003ba2:	b00a      	add	sp, #40	@ 0x28
 8003ba4:	bd70      	pop	{r4, r5, r6, pc}
        log_error("clt sensor is null");
 8003ba6:	4815      	ldr	r0, [pc, #84]	@ (8003bfc <sensor_clt_init+0x9c>)
 8003ba8:	f7fe f9f8 	bl	8001f9c <log_error>
        return;
 8003bac:	e7f9      	b.n	8003ba2 <sensor_clt_init+0x42>
        resistor_init(&sensor->resistor, 4700, RESISTOR_PULL_UP, ANALOG_INPUT_SENSOR_CLT_PIN);
 8003bae:	2206      	movs	r2, #6
 8003bb0:	2100      	movs	r1, #0
 8003bb2:	ed9f 0a13 	vldr	s0, [pc, #76]	@ 8003c00 <sensor_clt_init+0xa0>
 8003bb6:	f7ff fe61 	bl	800387c <resistor_init>
        thermistor_conf_t genric_5k =
 8003bba:	f10d 0c10 	add.w	ip, sp, #16
 8003bbe:	4d11      	ldr	r5, [pc, #68]	@ (8003c04 <sensor_clt_init+0xa4>)
 8003bc0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003bc2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8003bc6:	e895 0003 	ldmia.w	r5, {r0, r1}
 8003bca:	e88c 0003 	stmia.w	ip, {r0, r1}
        thermistor_init(sensor, genric_5k);
 8003bce:	ab0a      	add	r3, sp, #40	@ 0x28
 8003bd0:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 8003bd4:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8003bd8:	ab04      	add	r3, sp, #16
 8003bda:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003bdc:	4620      	mov	r0, r4
 8003bde:	f004 fc0b 	bl	80083f8 <thermistor_init>
        sensor_clt = sensor;
 8003be2:	4b05      	ldr	r3, [pc, #20]	@ (8003bf8 <sensor_clt_init+0x98>)
 8003be4:	601c      	str	r4, [r3, #0]
        break;
 8003be6:	e7dc      	b.n	8003ba2 <sensor_clt_init+0x42>
        log_error("clt sensor type not configured!");
 8003be8:	4807      	ldr	r0, [pc, #28]	@ (8003c08 <sensor_clt_init+0xa8>)
 8003bea:	f7fe f9d7 	bl	8001f9c <log_error>
        break;
 8003bee:	e7d8      	b.n	8003ba2 <sensor_clt_init+0x42>
 8003bf0:	461c4000 	.word	0x461c4000
 8003bf4:	0800b904 	.word	0x0800b904
 8003bf8:	20006820 	.word	0x20006820
 8003bfc:	0800bbfc 	.word	0x0800bbfc
 8003c00:	4592e000 	.word	0x4592e000
 8003c04:	0800b8ec 	.word	0x0800b8ec
 8003c08:	0800bc10 	.word	0x0800bc10

08003c0c <sensor_clt_get>:

temperature_t sensor_clt_get()
{
 8003c0c:	b508      	push	{r3, lr}
    if (sensor_clt == NULL)
 8003c0e:	4b10      	ldr	r3, [pc, #64]	@ (8003c50 <sensor_clt_get+0x44>)
 8003c10:	6818      	ldr	r0, [r3, #0]
 8003c12:	b180      	cbz	r0, 8003c36 <sensor_clt_get+0x2a>
    {
        log_error("clt sensor is null");
        return SENSOR_CLT_FAIL_SAFE;
    }
    temperature_t temperature = thermistor_get_temp(sensor_clt);
 8003c14:	f004 fc64 	bl	80084e0 <thermistor_get_temp>
    if (!IS_IN_RANGE(temperature, FIRMWARE_LIMIT_MIN_TEMP, FIRMWARE_LIMIT_MAX_TEMP))
 8003c18:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 8003c54 <sensor_clt_get+0x48>
 8003c1c:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8003c20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c24:	db0d      	blt.n	8003c42 <sensor_clt_get+0x36>
 8003c26:	eddf 7a0c 	vldr	s15, [pc, #48]	@ 8003c58 <sensor_clt_get+0x4c>
 8003c2a:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8003c2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c32:	d806      	bhi.n	8003c42 <sensor_clt_get+0x36>
    {
        log_error("clt sensor out of range!");
        return SENSOR_CLT_FAIL_SAFE;
    }
    return temperature;
}
 8003c34:	bd08      	pop	{r3, pc}
        log_error("clt sensor is null");
 8003c36:	4809      	ldr	r0, [pc, #36]	@ (8003c5c <sensor_clt_get+0x50>)
 8003c38:	f7fe f9b0 	bl	8001f9c <log_error>
        return SENSOR_CLT_FAIL_SAFE;
 8003c3c:	eeb3 0a0e 	vmov.f32	s0, #62	@ 0x41f00000  30.0
 8003c40:	e7f8      	b.n	8003c34 <sensor_clt_get+0x28>
        log_error("clt sensor out of range!");
 8003c42:	4807      	ldr	r0, [pc, #28]	@ (8003c60 <sensor_clt_get+0x54>)
 8003c44:	f7fe f9aa 	bl	8001f9c <log_error>
        return SENSOR_CLT_FAIL_SAFE;
 8003c48:	eeb3 0a0e 	vmov.f32	s0, #62	@ 0x41f00000  30.0
 8003c4c:	e7f2      	b.n	8003c34 <sensor_clt_get+0x28>
 8003c4e:	bf00      	nop
 8003c50:	20006820 	.word	0x20006820
 8003c54:	c2480000 	.word	0xc2480000
 8003c58:	43160000 	.word	0x43160000
 8003c5c:	0800bbfc 	.word	0x0800bbfc
 8003c60:	0800bc30 	.word	0x0800bc30

08003c64 <sensor_ops_init>:

void sensor_ops_init(sensor_ops_t *sensor)
{
 8003c64:	b508      	push	{r3, lr}
    if (sensor == NULL)
 8003c66:	b148      	cbz	r0, 8003c7c <sensor_ops_init+0x18>
    {
        log_error("ops sensor is null");
        return;
    }
    sensor->adc_value_threshold = 4095 / 2;
 8003c68:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8003c6c:	8002      	strh	r2, [r0, #0]
    sensor->debounce_time_ms = 200;
 8003c6e:	22c8      	movs	r2, #200	@ 0xc8
 8003c70:	8042      	strh	r2, [r0, #2]
    sensor->analog_channel = ANALOG_INPUT_SENSOR_OIL_PIN;
 8003c72:	2207      	movs	r2, #7
 8003c74:	7102      	strb	r2, [r0, #4]
    sensor_ops = sensor;
 8003c76:	4a03      	ldr	r2, [pc, #12]	@ (8003c84 <sensor_ops_init+0x20>)
 8003c78:	6010      	str	r0, [r2, #0]
}
 8003c7a:	bd08      	pop	{r3, pc}
        log_error("ops sensor is null");
 8003c7c:	4802      	ldr	r0, [pc, #8]	@ (8003c88 <sensor_ops_init+0x24>)
 8003c7e:	f7fe f98d 	bl	8001f9c <log_error>
        return;
 8003c82:	e7fa      	b.n	8003c7a <sensor_ops_init+0x16>
 8003c84:	2000681c 	.word	0x2000681c
 8003c88:	0800bc4c 	.word	0x0800bc4c

08003c8c <sensor_ops_get>:

bool sensor_ops_get()
{
 8003c8c:	b510      	push	{r4, lr}
    static uint32_t last_change_time = 0;
    static bool last_state = false;
    static bool debounced_state = false;

    if (sensor_ops == NULL)
 8003c8e:	4b14      	ldr	r3, [pc, #80]	@ (8003ce0 <sensor_ops_get+0x54>)
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	b303      	cbz	r3, 8003cd6 <sensor_ops_get+0x4a>
    {
        log_error("ops sensor is null");
        return false;
    }

    uint16_t adc_value = analog_inputs_get_data(sensor_ops->analog_channel);
 8003c94:	7918      	ldrb	r0, [r3, #4]
 8003c96:	f7fd f8b1 	bl	8000dfc <analog_inputs_get_data>
    bool current_state = adc_value > sensor_ops->adc_value_threshold;
 8003c9a:	4b11      	ldr	r3, [pc, #68]	@ (8003ce0 <sensor_ops_get+0x54>)
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	881c      	ldrh	r4, [r3, #0]
 8003ca0:	4284      	cmp	r4, r0
 8003ca2:	bf2c      	ite	cs
 8003ca4:	2400      	movcs	r4, #0
 8003ca6:	2401      	movcc	r4, #1

    uint32_t now = get_time_ms();
 8003ca8:	f005 f8f8 	bl	8008e9c <get_time_ms>

    if (current_state != last_state)
 8003cac:	4b0d      	ldr	r3, [pc, #52]	@ (8003ce4 <sensor_ops_get+0x58>)
 8003cae:	781b      	ldrb	r3, [r3, #0]
 8003cb0:	42a3      	cmp	r3, r4
 8003cb2:	d003      	beq.n	8003cbc <sensor_ops_get+0x30>
    {
        /* State changed, reset debounce timer */
        last_change_time = now;
 8003cb4:	4b0c      	ldr	r3, [pc, #48]	@ (8003ce8 <sensor_ops_get+0x5c>)
 8003cb6:	6018      	str	r0, [r3, #0]
        last_state = current_state;
 8003cb8:	4b0a      	ldr	r3, [pc, #40]	@ (8003ce4 <sensor_ops_get+0x58>)
 8003cba:	701c      	strb	r4, [r3, #0]
    }

    if ((now - last_change_time) >= sensor_ops->debounce_time_ms)
 8003cbc:	4b0a      	ldr	r3, [pc, #40]	@ (8003ce8 <sensor_ops_get+0x5c>)
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	1ac0      	subs	r0, r0, r3
 8003cc2:	4b07      	ldr	r3, [pc, #28]	@ (8003ce0 <sensor_ops_get+0x54>)
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	885b      	ldrh	r3, [r3, #2]
 8003cc8:	4298      	cmp	r0, r3
 8003cca:	d301      	bcc.n	8003cd0 <sensor_ops_get+0x44>
    {
        /* Debounce period passed, accept new state */
        debounced_state = current_state;
 8003ccc:	4b07      	ldr	r3, [pc, #28]	@ (8003cec <sensor_ops_get+0x60>)
 8003cce:	701c      	strb	r4, [r3, #0]
    }

    return debounced_state;
 8003cd0:	4b06      	ldr	r3, [pc, #24]	@ (8003cec <sensor_ops_get+0x60>)
 8003cd2:	7818      	ldrb	r0, [r3, #0]
}
 8003cd4:	bd10      	pop	{r4, pc}
        log_error("ops sensor is null");
 8003cd6:	4806      	ldr	r0, [pc, #24]	@ (8003cf0 <sensor_ops_get+0x64>)
 8003cd8:	f7fe f960 	bl	8001f9c <log_error>
        return false;
 8003cdc:	2000      	movs	r0, #0
 8003cde:	e7f9      	b.n	8003cd4 <sensor_ops_get+0x48>
 8003ce0:	2000681c 	.word	0x2000681c
 8003ce4:	20006818 	.word	0x20006818
 8003ce8:	20006814 	.word	0x20006814
 8003cec:	20006810 	.word	0x20006810
 8003cf0:	0800bc4c 	.word	0x0800bc4c

08003cf4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003cf4:	b508      	push	{r3, lr}
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003cf6:	4b0b      	ldr	r3, [pc, #44]	@ (8003d24 <HAL_Init+0x30>)
 8003cf8:	681a      	ldr	r2, [r3, #0]
 8003cfa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003cfe:	601a      	str	r2, [r3, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003d00:	681a      	ldr	r2, [r3, #0]
 8003d02:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003d06:	601a      	str	r2, [r3, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003d08:	681a      	ldr	r2, [r3, #0]
 8003d0a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003d0e:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003d10:	2003      	movs	r0, #3
 8003d12:	f000 fbff 	bl	8004514 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003d16:	200f      	movs	r0, #15
 8003d18:	f002 ff54 	bl	8006bc4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003d1c:	f001 f81a 	bl	8004d54 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 8003d20:	2000      	movs	r0, #0
 8003d22:	bd08      	pop	{r3, pc}
 8003d24:	40023c00 	.word	0x40023c00

08003d28 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8003d28:	4a03      	ldr	r2, [pc, #12]	@ (8003d38 <HAL_IncTick+0x10>)
 8003d2a:	6811      	ldr	r1, [r2, #0]
 8003d2c:	4b03      	ldr	r3, [pc, #12]	@ (8003d3c <HAL_IncTick+0x14>)
 8003d2e:	781b      	ldrb	r3, [r3, #0]
 8003d30:	440b      	add	r3, r1
 8003d32:	6013      	str	r3, [r2, #0]
}
 8003d34:	4770      	bx	lr
 8003d36:	bf00      	nop
 8003d38:	2000682c 	.word	0x2000682c
 8003d3c:	20000068 	.word	0x20000068

08003d40 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8003d40:	4b01      	ldr	r3, [pc, #4]	@ (8003d48 <HAL_GetTick+0x8>)
 8003d42:	6818      	ldr	r0, [r3, #0]
}
 8003d44:	4770      	bx	lr
 8003d46:	bf00      	nop
 8003d48:	2000682c 	.word	0x2000682c

08003d4c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003d4c:	b538      	push	{r3, r4, r5, lr}
 8003d4e:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8003d50:	f7ff fff6 	bl	8003d40 <HAL_GetTick>
 8003d54:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003d56:	f1b4 3fff 	cmp.w	r4, #4294967295
 8003d5a:	d002      	beq.n	8003d62 <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 8003d5c:	4b04      	ldr	r3, [pc, #16]	@ (8003d70 <HAL_Delay+0x24>)
 8003d5e:	781b      	ldrb	r3, [r3, #0]
 8003d60:	441c      	add	r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003d62:	f7ff ffed 	bl	8003d40 <HAL_GetTick>
 8003d66:	1b40      	subs	r0, r0, r5
 8003d68:	42a0      	cmp	r0, r4
 8003d6a:	d3fa      	bcc.n	8003d62 <HAL_Delay+0x16>
  {
  }
}
 8003d6c:	bd38      	pop	{r3, r4, r5, pc}
 8003d6e:	bf00      	nop
 8003d70:	20000068 	.word	0x20000068

08003d74 <ADC_Init>:
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003d74:	4b4a      	ldr	r3, [pc, #296]	@ (8003ea0 <ADC_Init+0x12c>)
 8003d76:	685a      	ldr	r2, [r3, #4]
 8003d78:	f422 3240 	bic.w	r2, r2, #196608	@ 0x30000
 8003d7c:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003d7e:	685a      	ldr	r2, [r3, #4]
 8003d80:	6841      	ldr	r1, [r0, #4]
 8003d82:	430a      	orrs	r2, r1
 8003d84:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003d86:	6802      	ldr	r2, [r0, #0]
 8003d88:	6853      	ldr	r3, [r2, #4]
 8003d8a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003d8e:	6053      	str	r3, [r2, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003d90:	6802      	ldr	r2, [r0, #0]
 8003d92:	6853      	ldr	r3, [r2, #4]
 8003d94:	6901      	ldr	r1, [r0, #16]
 8003d96:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8003d9a:	6053      	str	r3, [r2, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003d9c:	6802      	ldr	r2, [r0, #0]
 8003d9e:	6853      	ldr	r3, [r2, #4]
 8003da0:	f023 7340 	bic.w	r3, r3, #50331648	@ 0x3000000
 8003da4:	6053      	str	r3, [r2, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003da6:	6802      	ldr	r2, [r0, #0]
 8003da8:	6853      	ldr	r3, [r2, #4]
 8003daa:	6881      	ldr	r1, [r0, #8]
 8003dac:	430b      	orrs	r3, r1
 8003dae:	6053      	str	r3, [r2, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003db0:	6802      	ldr	r2, [r0, #0]
 8003db2:	6893      	ldr	r3, [r2, #8]
 8003db4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003db8:	6093      	str	r3, [r2, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003dba:	6802      	ldr	r2, [r0, #0]
 8003dbc:	6893      	ldr	r3, [r2, #8]
 8003dbe:	68c1      	ldr	r1, [r0, #12]
 8003dc0:	430b      	orrs	r3, r1
 8003dc2:	6093      	str	r3, [r2, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003dc4:	6a82      	ldr	r2, [r0, #40]	@ 0x28
 8003dc6:	4b37      	ldr	r3, [pc, #220]	@ (8003ea4 <ADC_Init+0x130>)
 8003dc8:	429a      	cmp	r2, r3
 8003dca:	d057      	beq.n	8003e7c <ADC_Init+0x108>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003dcc:	6802      	ldr	r2, [r0, #0]
 8003dce:	6893      	ldr	r3, [r2, #8]
 8003dd0:	f023 6370 	bic.w	r3, r3, #251658240	@ 0xf000000
 8003dd4:	6093      	str	r3, [r2, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003dd6:	6802      	ldr	r2, [r0, #0]
 8003dd8:	6893      	ldr	r3, [r2, #8]
 8003dda:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 8003ddc:	430b      	orrs	r3, r1
 8003dde:	6093      	str	r3, [r2, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003de0:	6802      	ldr	r2, [r0, #0]
 8003de2:	6893      	ldr	r3, [r2, #8]
 8003de4:	f023 5340 	bic.w	r3, r3, #805306368	@ 0x30000000
 8003de8:	6093      	str	r3, [r2, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003dea:	6802      	ldr	r2, [r0, #0]
 8003dec:	6893      	ldr	r3, [r2, #8]
 8003dee:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 8003df0:	430b      	orrs	r3, r1
 8003df2:	6093      	str	r3, [r2, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003df4:	6802      	ldr	r2, [r0, #0]
 8003df6:	6893      	ldr	r3, [r2, #8]
 8003df8:	f023 0302 	bic.w	r3, r3, #2
 8003dfc:	6093      	str	r3, [r2, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003dfe:	6802      	ldr	r2, [r0, #0]
 8003e00:	6893      	ldr	r3, [r2, #8]
 8003e02:	7e01      	ldrb	r1, [r0, #24]
 8003e04:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
 8003e08:	6093      	str	r3, [r2, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8003e0a:	f890 3020 	ldrb.w	r3, [r0, #32]
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d03f      	beq.n	8003e92 <ADC_Init+0x11e>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003e12:	6802      	ldr	r2, [r0, #0]
 8003e14:	6853      	ldr	r3, [r2, #4]
 8003e16:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8003e1a:	6053      	str	r3, [r2, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003e1c:	6802      	ldr	r2, [r0, #0]
 8003e1e:	6853      	ldr	r3, [r2, #4]
 8003e20:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 8003e24:	6053      	str	r3, [r2, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003e26:	6801      	ldr	r1, [r0, #0]
 8003e28:	684b      	ldr	r3, [r1, #4]
 8003e2a:	6a42      	ldr	r2, [r0, #36]	@ 0x24
 8003e2c:	3a01      	subs	r2, #1
 8003e2e:	ea43 3342 	orr.w	r3, r3, r2, lsl #13
 8003e32:	604b      	str	r3, [r1, #4]
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003e34:	6802      	ldr	r2, [r0, #0]
 8003e36:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 8003e38:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8003e3c:	62d3      	str	r3, [r2, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003e3e:	6801      	ldr	r1, [r0, #0]
 8003e40:	6acb      	ldr	r3, [r1, #44]	@ 0x2c
 8003e42:	69c2      	ldr	r2, [r0, #28]
 8003e44:	3a01      	subs	r2, #1
 8003e46:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 8003e4a:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003e4c:	6802      	ldr	r2, [r0, #0]
 8003e4e:	6893      	ldr	r3, [r2, #8]
 8003e50:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003e54:	6093      	str	r3, [r2, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003e56:	6802      	ldr	r2, [r0, #0]
 8003e58:	6893      	ldr	r3, [r2, #8]
 8003e5a:	f890 1030 	ldrb.w	r1, [r0, #48]	@ 0x30
 8003e5e:	ea43 2341 	orr.w	r3, r3, r1, lsl #9
 8003e62:	6093      	str	r3, [r2, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003e64:	6802      	ldr	r2, [r0, #0]
 8003e66:	6893      	ldr	r3, [r2, #8]
 8003e68:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003e6c:	6093      	str	r3, [r2, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003e6e:	6802      	ldr	r2, [r0, #0]
 8003e70:	6893      	ldr	r3, [r2, #8]
 8003e72:	6941      	ldr	r1, [r0, #20]
 8003e74:	ea43 2381 	orr.w	r3, r3, r1, lsl #10
 8003e78:	6093      	str	r3, [r2, #8]
}
 8003e7a:	4770      	bx	lr
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003e7c:	6802      	ldr	r2, [r0, #0]
 8003e7e:	6893      	ldr	r3, [r2, #8]
 8003e80:	f023 6370 	bic.w	r3, r3, #251658240	@ 0xf000000
 8003e84:	6093      	str	r3, [r2, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003e86:	6802      	ldr	r2, [r0, #0]
 8003e88:	6893      	ldr	r3, [r2, #8]
 8003e8a:	f023 5340 	bic.w	r3, r3, #805306368	@ 0x30000000
 8003e8e:	6093      	str	r3, [r2, #8]
 8003e90:	e7b0      	b.n	8003df4 <ADC_Init+0x80>
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003e92:	6802      	ldr	r2, [r0, #0]
 8003e94:	6853      	ldr	r3, [r2, #4]
 8003e96:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003e9a:	6053      	str	r3, [r2, #4]
 8003e9c:	e7ca      	b.n	8003e34 <ADC_Init+0xc0>
 8003e9e:	bf00      	nop
 8003ea0:	40012300 	.word	0x40012300
 8003ea4:	0f000001 	.word	0x0f000001

08003ea8 <HAL_ADC_Init>:
  if (hadc == NULL)
 8003ea8:	b338      	cbz	r0, 8003efa <HAL_ADC_Init+0x52>
{
 8003eaa:	b510      	push	{r4, lr}
 8003eac:	4604      	mov	r4, r0
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003eae:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8003eb0:	b143      	cbz	r3, 8003ec4 <HAL_ADC_Init+0x1c>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003eb2:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8003eb4:	f013 0f10 	tst.w	r3, #16
 8003eb8:	d00b      	beq.n	8003ed2 <HAL_ADC_Init+0x2a>
    tmp_hal_status = HAL_ERROR;
 8003eba:	2001      	movs	r0, #1
  __HAL_UNLOCK(hadc);
 8003ebc:	2300      	movs	r3, #0
 8003ebe:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
}
 8003ec2:	bd10      	pop	{r4, pc}
    HAL_ADC_MspInit(hadc);
 8003ec4:	f7fc ff08 	bl	8000cd8 <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 8003ec8:	2300      	movs	r3, #0
 8003eca:	6463      	str	r3, [r4, #68]	@ 0x44
    hadc->Lock = HAL_UNLOCKED;
 8003ecc:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
 8003ed0:	e7ef      	b.n	8003eb2 <HAL_ADC_Init+0xa>
    ADC_STATE_CLR_SET(hadc->State,
 8003ed2:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8003ed4:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8003ed8:	f023 0302 	bic.w	r3, r3, #2
 8003edc:	f043 0302 	orr.w	r3, r3, #2
 8003ee0:	6423      	str	r3, [r4, #64]	@ 0x40
    ADC_Init(hadc);
 8003ee2:	4620      	mov	r0, r4
 8003ee4:	f7ff ff46 	bl	8003d74 <ADC_Init>
    ADC_CLEAR_ERRORCODE(hadc);
 8003ee8:	2000      	movs	r0, #0
 8003eea:	6460      	str	r0, [r4, #68]	@ 0x44
    ADC_STATE_CLR_SET(hadc->State,
 8003eec:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8003eee:	f023 0303 	bic.w	r3, r3, #3
 8003ef2:	f043 0301 	orr.w	r3, r3, #1
 8003ef6:	6423      	str	r3, [r4, #64]	@ 0x40
 8003ef8:	e7e0      	b.n	8003ebc <HAL_ADC_Init+0x14>
    return HAL_ERROR;
 8003efa:	2001      	movs	r0, #1
}
 8003efc:	4770      	bx	lr
	...

08003f00 <HAL_ADC_Start_DMA>:
{
 8003f00:	b510      	push	{r4, lr}
 8003f02:	b082      	sub	sp, #8
 8003f04:	4613      	mov	r3, r2
  __IO uint32_t counter = 0U;
 8003f06:	2200      	movs	r2, #0
 8003f08:	9201      	str	r2, [sp, #4]
  __HAL_LOCK(hadc);
 8003f0a:	f890 203c 	ldrb.w	r2, [r0, #60]	@ 0x3c
 8003f0e:	2a01      	cmp	r2, #1
 8003f10:	f000 8094 	beq.w	800403c <HAL_ADC_Start_DMA+0x13c>
 8003f14:	4604      	mov	r4, r0
 8003f16:	2201      	movs	r2, #1
 8003f18:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8003f1c:	6802      	ldr	r2, [r0, #0]
 8003f1e:	6890      	ldr	r0, [r2, #8]
 8003f20:	f010 0f01 	tst.w	r0, #1
 8003f24:	d113      	bne.n	8003f4e <HAL_ADC_Start_DMA+0x4e>
    __HAL_ADC_ENABLE(hadc);
 8003f26:	6890      	ldr	r0, [r2, #8]
 8003f28:	f040 0001 	orr.w	r0, r0, #1
 8003f2c:	6090      	str	r0, [r2, #8]
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003f2e:	4a46      	ldr	r2, [pc, #280]	@ (8004048 <HAL_ADC_Start_DMA+0x148>)
 8003f30:	6810      	ldr	r0, [r2, #0]
 8003f32:	4a46      	ldr	r2, [pc, #280]	@ (800404c <HAL_ADC_Start_DMA+0x14c>)
 8003f34:	fba2 2000 	umull	r2, r0, r2, r0
 8003f38:	0c80      	lsrs	r0, r0, #18
 8003f3a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8003f3e:	9001      	str	r0, [sp, #4]
    while (counter != 0U)
 8003f40:	e002      	b.n	8003f48 <HAL_ADC_Start_DMA+0x48>
      counter--;
 8003f42:	9801      	ldr	r0, [sp, #4]
 8003f44:	3801      	subs	r0, #1
 8003f46:	9001      	str	r0, [sp, #4]
    while (counter != 0U)
 8003f48:	9801      	ldr	r0, [sp, #4]
 8003f4a:	2800      	cmp	r0, #0
 8003f4c:	d1f9      	bne.n	8003f42 <HAL_ADC_Start_DMA+0x42>
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8003f4e:	6822      	ldr	r2, [r4, #0]
 8003f50:	6890      	ldr	r0, [r2, #8]
 8003f52:	f410 7f80 	tst.w	r0, #256	@ 0x100
 8003f56:	d003      	beq.n	8003f60 <HAL_ADC_Start_DMA+0x60>
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8003f58:	6890      	ldr	r0, [r2, #8]
 8003f5a:	f420 7080 	bic.w	r0, r0, #256	@ 0x100
 8003f5e:	6090      	str	r0, [r2, #8]
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8003f60:	6822      	ldr	r2, [r4, #0]
 8003f62:	6890      	ldr	r0, [r2, #8]
 8003f64:	f010 0f01 	tst.w	r0, #1
 8003f68:	d05d      	beq.n	8004026 <HAL_ADC_Start_DMA+0x126>
    ADC_STATE_CLR_SET(hadc->State,
 8003f6a:	6c20      	ldr	r0, [r4, #64]	@ 0x40
 8003f6c:	f420 60e0 	bic.w	r0, r0, #1792	@ 0x700
 8003f70:	f020 0001 	bic.w	r0, r0, #1
 8003f74:	f440 7080 	orr.w	r0, r0, #256	@ 0x100
 8003f78:	6420      	str	r0, [r4, #64]	@ 0x40
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003f7a:	6852      	ldr	r2, [r2, #4]
 8003f7c:	f412 6f80 	tst.w	r2, #1024	@ 0x400
 8003f80:	d005      	beq.n	8003f8e <HAL_ADC_Start_DMA+0x8e>
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003f82:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8003f84:	f422 5240 	bic.w	r2, r2, #12288	@ 0x3000
 8003f88:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003f8c:	6422      	str	r2, [r4, #64]	@ 0x40
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003f8e:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8003f90:	f412 5f80 	tst.w	r2, #4096	@ 0x1000
 8003f94:	d034      	beq.n	8004000 <HAL_ADC_Start_DMA+0x100>
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003f96:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 8003f98:	f022 0206 	bic.w	r2, r2, #6
 8003f9c:	6462      	str	r2, [r4, #68]	@ 0x44
    __HAL_UNLOCK(hadc);
 8003f9e:	2200      	movs	r2, #0
 8003fa0:	f884 203c 	strb.w	r2, [r4, #60]	@ 0x3c
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003fa4:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8003fa6:	482a      	ldr	r0, [pc, #168]	@ (8004050 <HAL_ADC_Start_DMA+0x150>)
 8003fa8:	63d0      	str	r0, [r2, #60]	@ 0x3c
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003faa:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8003fac:	4829      	ldr	r0, [pc, #164]	@ (8004054 <HAL_ADC_Start_DMA+0x154>)
 8003fae:	6410      	str	r0, [r2, #64]	@ 0x40
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003fb0:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8003fb2:	4829      	ldr	r0, [pc, #164]	@ (8004058 <HAL_ADC_Start_DMA+0x158>)
 8003fb4:	64d0      	str	r0, [r2, #76]	@ 0x4c
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8003fb6:	6822      	ldr	r2, [r4, #0]
 8003fb8:	f06f 0022 	mvn.w	r0, #34	@ 0x22
 8003fbc:	6010      	str	r0, [r2, #0]
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003fbe:	6820      	ldr	r0, [r4, #0]
 8003fc0:	6842      	ldr	r2, [r0, #4]
 8003fc2:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 8003fc6:	6042      	str	r2, [r0, #4]
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8003fc8:	6820      	ldr	r0, [r4, #0]
 8003fca:	6882      	ldr	r2, [r0, #8]
 8003fcc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003fd0:	6082      	str	r2, [r0, #8]
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003fd2:	6820      	ldr	r0, [r4, #0]
 8003fd4:	460a      	mov	r2, r1
 8003fd6:	f100 014c 	add.w	r1, r0, #76	@ 0x4c
 8003fda:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8003fdc:	f000 fbb2 	bl	8004744 <HAL_DMA_Start_IT>
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8003fe0:	4b1e      	ldr	r3, [pc, #120]	@ (800405c <HAL_ADC_Start_DMA+0x15c>)
 8003fe2:	685b      	ldr	r3, [r3, #4]
 8003fe4:	f013 0f1f 	tst.w	r3, #31
 8003fe8:	d10d      	bne.n	8004006 <HAL_ADC_Start_DMA+0x106>
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8003fea:	6823      	ldr	r3, [r4, #0]
 8003fec:	689a      	ldr	r2, [r3, #8]
 8003fee:	f012 5f40 	tst.w	r2, #805306368	@ 0x30000000
 8003ff2:	d125      	bne.n	8004040 <HAL_ADC_Start_DMA+0x140>
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003ff4:	689a      	ldr	r2, [r3, #8]
 8003ff6:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8003ffa:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003ffc:	2000      	movs	r0, #0
 8003ffe:	e01b      	b.n	8004038 <HAL_ADC_Start_DMA+0x138>
      ADC_CLEAR_ERRORCODE(hadc);
 8004000:	2200      	movs	r2, #0
 8004002:	6462      	str	r2, [r4, #68]	@ 0x44
 8004004:	e7cb      	b.n	8003f9e <HAL_ADC_Start_DMA+0x9e>
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8004006:	6823      	ldr	r3, [r4, #0]
 8004008:	4a15      	ldr	r2, [pc, #84]	@ (8004060 <HAL_ADC_Start_DMA+0x160>)
 800400a:	4293      	cmp	r3, r2
 800400c:	d001      	beq.n	8004012 <HAL_ADC_Start_DMA+0x112>
  return HAL_OK;
 800400e:	2000      	movs	r0, #0
 8004010:	e012      	b.n	8004038 <HAL_ADC_Start_DMA+0x138>
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8004012:	689a      	ldr	r2, [r3, #8]
 8004014:	f012 5f40 	tst.w	r2, #805306368	@ 0x30000000
 8004018:	d114      	bne.n	8004044 <HAL_ADC_Start_DMA+0x144>
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800401a:	689a      	ldr	r2, [r3, #8]
 800401c:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8004020:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004022:	2000      	movs	r0, #0
 8004024:	e008      	b.n	8004038 <HAL_ADC_Start_DMA+0x138>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004026:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004028:	f043 0310 	orr.w	r3, r3, #16
 800402c:	6423      	str	r3, [r4, #64]	@ 0x40
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800402e:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8004030:	f043 0301 	orr.w	r3, r3, #1
 8004034:	6463      	str	r3, [r4, #68]	@ 0x44
  return HAL_OK;
 8004036:	2000      	movs	r0, #0
}
 8004038:	b002      	add	sp, #8
 800403a:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hadc);
 800403c:	2002      	movs	r0, #2
 800403e:	e7fb      	b.n	8004038 <HAL_ADC_Start_DMA+0x138>
  return HAL_OK;
 8004040:	2000      	movs	r0, #0
 8004042:	e7f9      	b.n	8004038 <HAL_ADC_Start_DMA+0x138>
 8004044:	2000      	movs	r0, #0
 8004046:	e7f7      	b.n	8004038 <HAL_ADC_Start_DMA+0x138>
 8004048:	20000070 	.word	0x20000070
 800404c:	431bde83 	.word	0x431bde83
 8004050:	08004089 	.word	0x08004089
 8004054:	08004067 	.word	0x08004067
 8004058:	08004073 	.word	0x08004073
 800405c:	40012300 	.word	0x40012300
 8004060:	40012000 	.word	0x40012000

08004064 <HAL_ADC_ConvHalfCpltCallback>:
}
 8004064:	4770      	bx	lr

08004066 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8004066:	b508      	push	{r3, lr}
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8004068:	6b80      	ldr	r0, [r0, #56]	@ 0x38
 800406a:	f7ff fffb 	bl	8004064 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800406e:	bd08      	pop	{r3, pc}

08004070 <HAL_ADC_ErrorCallback>:
}
 8004070:	4770      	bx	lr

08004072 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8004072:	b508      	push	{r3, lr}
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004074:	6b80      	ldr	r0, [r0, #56]	@ 0x38
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 8004076:	2340      	movs	r3, #64	@ 0x40
 8004078:	6403      	str	r3, [r0, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800407a:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 800407c:	f043 0304 	orr.w	r3, r3, #4
 8004080:	6443      	str	r3, [r0, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8004082:	f7ff fff5 	bl	8004070 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004086:	bd08      	pop	{r3, pc}

08004088 <ADC_DMAConvCplt>:
{
 8004088:	b508      	push	{r3, lr}
 800408a:	4603      	mov	r3, r0
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800408c:	6b80      	ldr	r0, [r0, #56]	@ 0x38
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800408e:	6c02      	ldr	r2, [r0, #64]	@ 0x40
 8004090:	f012 0f50 	tst.w	r2, #80	@ 0x50
 8004094:	d125      	bne.n	80040e2 <ADC_DMAConvCplt+0x5a>
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004096:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8004098:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800409c:	6403      	str	r3, [r0, #64]	@ 0x40
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800409e:	6803      	ldr	r3, [r0, #0]
 80040a0:	689a      	ldr	r2, [r3, #8]
 80040a2:	f012 5f40 	tst.w	r2, #805306368	@ 0x30000000
 80040a6:	d119      	bne.n	80040dc <ADC_DMAConvCplt+0x54>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80040a8:	7e02      	ldrb	r2, [r0, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80040aa:	b9ba      	cbnz	r2, 80040dc <ADC_DMAConvCplt+0x54>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80040ac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80040ae:	f412 0f70 	tst.w	r2, #15728640	@ 0xf00000
 80040b2:	d003      	beq.n	80040bc <ADC_DMAConvCplt+0x34>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 80040b4:	689a      	ldr	r2, [r3, #8]
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80040b6:	f412 6f80 	tst.w	r2, #1024	@ 0x400
 80040ba:	d10f      	bne.n	80040dc <ADC_DMAConvCplt+0x54>
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80040bc:	685a      	ldr	r2, [r3, #4]
 80040be:	f022 0220 	bic.w	r2, r2, #32
 80040c2:	605a      	str	r2, [r3, #4]
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80040c4:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 80040c6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80040ca:	6403      	str	r3, [r0, #64]	@ 0x40
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80040cc:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 80040ce:	f413 5f80 	tst.w	r3, #4096	@ 0x1000
 80040d2:	d103      	bne.n	80040dc <ADC_DMAConvCplt+0x54>
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80040d4:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 80040d6:	f043 0301 	orr.w	r3, r3, #1
 80040da:	6403      	str	r3, [r0, #64]	@ 0x40
    HAL_ADC_ConvCpltCallback(hadc);
 80040dc:	f7fc fe74 	bl	8000dc8 <HAL_ADC_ConvCpltCallback>
}
 80040e0:	bd08      	pop	{r3, pc}
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80040e2:	6c02      	ldr	r2, [r0, #64]	@ 0x40
 80040e4:	f012 0f10 	tst.w	r2, #16
 80040e8:	d104      	bne.n	80040f4 <ADC_DMAConvCplt+0x6c>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80040ea:	6b82      	ldr	r2, [r0, #56]	@ 0x38
 80040ec:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80040ee:	4618      	mov	r0, r3
 80040f0:	4790      	blx	r2
}
 80040f2:	e7f5      	b.n	80040e0 <ADC_DMAConvCplt+0x58>
      HAL_ADC_ErrorCallback(hadc);
 80040f4:	f7ff ffbc 	bl	8004070 <HAL_ADC_ErrorCallback>
 80040f8:	e7f2      	b.n	80040e0 <ADC_DMAConvCplt+0x58>
	...

080040fc <HAL_ADC_ConfigChannel>:
{
 80040fc:	b430      	push	{r4, r5}
 80040fe:	b082      	sub	sp, #8
  __IO uint32_t counter = 0U;
 8004100:	2200      	movs	r2, #0
 8004102:	9201      	str	r2, [sp, #4]
  __HAL_LOCK(hadc);
 8004104:	f890 203c 	ldrb.w	r2, [r0, #60]	@ 0x3c
 8004108:	2a01      	cmp	r2, #1
 800410a:	f000 80b6 	beq.w	800427a <HAL_ADC_ConfigChannel+0x17e>
 800410e:	4603      	mov	r3, r0
 8004110:	2201      	movs	r2, #1
 8004112:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
  if (sConfig->Channel > ADC_CHANNEL_9)
 8004116:	680a      	ldr	r2, [r1, #0]
 8004118:	2a09      	cmp	r2, #9
 800411a:	d940      	bls.n	800419e <HAL_ADC_ConfigChannel+0xa2>
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800411c:	6804      	ldr	r4, [r0, #0]
 800411e:	68e0      	ldr	r0, [r4, #12]
 8004120:	b292      	uxth	r2, r2
 8004122:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8004126:	3a1e      	subs	r2, #30
 8004128:	f04f 0c07 	mov.w	ip, #7
 800412c:	fa0c f202 	lsl.w	r2, ip, r2
 8004130:	ea20 0202 	bic.w	r2, r0, r2
 8004134:	60e2      	str	r2, [r4, #12]
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8004136:	681c      	ldr	r4, [r3, #0]
 8004138:	68e0      	ldr	r0, [r4, #12]
 800413a:	880a      	ldrh	r2, [r1, #0]
 800413c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8004140:	3a1e      	subs	r2, #30
 8004142:	688d      	ldr	r5, [r1, #8]
 8004144:	fa05 f202 	lsl.w	r2, r5, r2
 8004148:	4302      	orrs	r2, r0
 800414a:	60e2      	str	r2, [r4, #12]
  if (sConfig->Rank < 7U)
 800414c:	684a      	ldr	r2, [r1, #4]
 800414e:	2a06      	cmp	r2, #6
 8004150:	d83c      	bhi.n	80041cc <HAL_ADC_ConfigChannel+0xd0>
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8004152:	681c      	ldr	r4, [r3, #0]
 8004154:	6b60      	ldr	r0, [r4, #52]	@ 0x34
 8004156:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 800415a:	3a05      	subs	r2, #5
 800415c:	f04f 0c1f 	mov.w	ip, #31
 8004160:	fa0c f202 	lsl.w	r2, ip, r2
 8004164:	ea20 0202 	bic.w	r2, r0, r2
 8004168:	6362      	str	r2, [r4, #52]	@ 0x34
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800416a:	681c      	ldr	r4, [r3, #0]
 800416c:	6b60      	ldr	r0, [r4, #52]	@ 0x34
 800416e:	684a      	ldr	r2, [r1, #4]
 8004170:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8004174:	3a05      	subs	r2, #5
 8004176:	f8b1 c000 	ldrh.w	ip, [r1]
 800417a:	fa0c f202 	lsl.w	r2, ip, r2
 800417e:	4302      	orrs	r2, r0
 8004180:	6362      	str	r2, [r4, #52]	@ 0x34
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8004182:	6818      	ldr	r0, [r3, #0]
 8004184:	4a3e      	ldr	r2, [pc, #248]	@ (8004280 <HAL_ADC_ConfigChannel+0x184>)
 8004186:	4290      	cmp	r0, r2
 8004188:	d050      	beq.n	800422c <HAL_ADC_ConfigChannel+0x130>
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800418a:	6818      	ldr	r0, [r3, #0]
 800418c:	4a3c      	ldr	r2, [pc, #240]	@ (8004280 <HAL_ADC_ConfigChannel+0x184>)
 800418e:	4290      	cmp	r0, r2
 8004190:	d055      	beq.n	800423e <HAL_ADC_ConfigChannel+0x142>
  __HAL_UNLOCK(hadc);
 8004192:	2000      	movs	r0, #0
 8004194:	f883 003c 	strb.w	r0, [r3, #60]	@ 0x3c
}
 8004198:	b002      	add	sp, #8
 800419a:	bc30      	pop	{r4, r5}
 800419c:	4770      	bx	lr
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800419e:	6804      	ldr	r4, [r0, #0]
 80041a0:	6920      	ldr	r0, [r4, #16]
 80041a2:	b292      	uxth	r2, r2
 80041a4:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80041a8:	f04f 0c07 	mov.w	ip, #7
 80041ac:	fa0c f202 	lsl.w	r2, ip, r2
 80041b0:	ea20 0202 	bic.w	r2, r0, r2
 80041b4:	6122      	str	r2, [r4, #16]
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80041b6:	681c      	ldr	r4, [r3, #0]
 80041b8:	6920      	ldr	r0, [r4, #16]
 80041ba:	880a      	ldrh	r2, [r1, #0]
 80041bc:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80041c0:	688d      	ldr	r5, [r1, #8]
 80041c2:	fa05 f202 	lsl.w	r2, r5, r2
 80041c6:	4302      	orrs	r2, r0
 80041c8:	6122      	str	r2, [r4, #16]
 80041ca:	e7bf      	b.n	800414c <HAL_ADC_ConfigChannel+0x50>
  else if (sConfig->Rank < 13U)
 80041cc:	2a0c      	cmp	r2, #12
 80041ce:	d816      	bhi.n	80041fe <HAL_ADC_ConfigChannel+0x102>
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80041d0:	681d      	ldr	r5, [r3, #0]
 80041d2:	6b28      	ldr	r0, [r5, #48]	@ 0x30
 80041d4:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80041d8:	3a23      	subs	r2, #35	@ 0x23
 80041da:	241f      	movs	r4, #31
 80041dc:	fa04 f202 	lsl.w	r2, r4, r2
 80041e0:	ea20 0202 	bic.w	r2, r0, r2
 80041e4:	632a      	str	r2, [r5, #48]	@ 0x30
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80041e6:	681d      	ldr	r5, [r3, #0]
 80041e8:	6b28      	ldr	r0, [r5, #48]	@ 0x30
 80041ea:	684a      	ldr	r2, [r1, #4]
 80041ec:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80041f0:	3a23      	subs	r2, #35	@ 0x23
 80041f2:	880c      	ldrh	r4, [r1, #0]
 80041f4:	fa04 f202 	lsl.w	r2, r4, r2
 80041f8:	4302      	orrs	r2, r0
 80041fa:	632a      	str	r2, [r5, #48]	@ 0x30
 80041fc:	e7c1      	b.n	8004182 <HAL_ADC_ConfigChannel+0x86>
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80041fe:	681d      	ldr	r5, [r3, #0]
 8004200:	6ae8      	ldr	r0, [r5, #44]	@ 0x2c
 8004202:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8004206:	3a41      	subs	r2, #65	@ 0x41
 8004208:	241f      	movs	r4, #31
 800420a:	fa04 f202 	lsl.w	r2, r4, r2
 800420e:	ea20 0202 	bic.w	r2, r0, r2
 8004212:	62ea      	str	r2, [r5, #44]	@ 0x2c
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8004214:	681d      	ldr	r5, [r3, #0]
 8004216:	6ae8      	ldr	r0, [r5, #44]	@ 0x2c
 8004218:	684a      	ldr	r2, [r1, #4]
 800421a:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 800421e:	3a41      	subs	r2, #65	@ 0x41
 8004220:	880c      	ldrh	r4, [r1, #0]
 8004222:	fa04 f202 	lsl.w	r2, r4, r2
 8004226:	4302      	orrs	r2, r0
 8004228:	62ea      	str	r2, [r5, #44]	@ 0x2c
 800422a:	e7aa      	b.n	8004182 <HAL_ADC_ConfigChannel+0x86>
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800422c:	680a      	ldr	r2, [r1, #0]
 800422e:	2a12      	cmp	r2, #18
 8004230:	d1ab      	bne.n	800418a <HAL_ADC_ConfigChannel+0x8e>
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8004232:	4814      	ldr	r0, [pc, #80]	@ (8004284 <HAL_ADC_ConfigChannel+0x188>)
 8004234:	6842      	ldr	r2, [r0, #4]
 8004236:	f442 0280 	orr.w	r2, r2, #4194304	@ 0x400000
 800423a:	6042      	str	r2, [r0, #4]
 800423c:	e7a5      	b.n	800418a <HAL_ADC_ConfigChannel+0x8e>
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800423e:	680a      	ldr	r2, [r1, #0]
 8004240:	3a10      	subs	r2, #16
 8004242:	2a01      	cmp	r2, #1
 8004244:	d8a5      	bhi.n	8004192 <HAL_ADC_ConfigChannel+0x96>
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8004246:	480f      	ldr	r0, [pc, #60]	@ (8004284 <HAL_ADC_ConfigChannel+0x188>)
 8004248:	6842      	ldr	r2, [r0, #4]
 800424a:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 800424e:	6042      	str	r2, [r0, #4]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004250:	680a      	ldr	r2, [r1, #0]
 8004252:	2a10      	cmp	r2, #16
 8004254:	d19d      	bne.n	8004192 <HAL_ADC_ConfigChannel+0x96>
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8004256:	4a0c      	ldr	r2, [pc, #48]	@ (8004288 <HAL_ADC_ConfigChannel+0x18c>)
 8004258:	6812      	ldr	r2, [r2, #0]
 800425a:	490c      	ldr	r1, [pc, #48]	@ (800428c <HAL_ADC_ConfigChannel+0x190>)
 800425c:	fba1 1202 	umull	r1, r2, r1, r2
 8004260:	0c92      	lsrs	r2, r2, #18
 8004262:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8004266:	0052      	lsls	r2, r2, #1
 8004268:	9201      	str	r2, [sp, #4]
      while (counter != 0U)
 800426a:	e002      	b.n	8004272 <HAL_ADC_ConfigChannel+0x176>
        counter--;
 800426c:	9a01      	ldr	r2, [sp, #4]
 800426e:	3a01      	subs	r2, #1
 8004270:	9201      	str	r2, [sp, #4]
      while (counter != 0U)
 8004272:	9a01      	ldr	r2, [sp, #4]
 8004274:	2a00      	cmp	r2, #0
 8004276:	d1f9      	bne.n	800426c <HAL_ADC_ConfigChannel+0x170>
 8004278:	e78b      	b.n	8004192 <HAL_ADC_ConfigChannel+0x96>
  __HAL_LOCK(hadc);
 800427a:	2002      	movs	r0, #2
 800427c:	e78c      	b.n	8004198 <HAL_ADC_ConfigChannel+0x9c>
 800427e:	bf00      	nop
 8004280:	40012000 	.word	0x40012000
 8004284:	40012300 	.word	0x40012300
 8004288:	20000070 	.word	0x20000070
 800428c:	431bde83 	.word	0x431bde83

08004290 <HAL_ADCEx_InjectedConfigChannel>:
  {
    assert_param(IS_ADC_EXT_INJEC_TRIG_EDGE(sConfigInjected->ExternalTrigInjecConvEdge));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004290:	f890 203c 	ldrb.w	r2, [r0, #60]	@ 0x3c
 8004294:	2a01      	cmp	r2, #1
 8004296:	f000 80f2 	beq.w	800447e <HAL_ADCEx_InjectedConfigChannel+0x1ee>
{
 800429a:	b430      	push	{r4, r5}
 800429c:	4603      	mov	r3, r0
  __HAL_LOCK(hadc);
 800429e:	2201      	movs	r2, #1
 80042a0:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfigInjected->InjectedChannel > ADC_CHANNEL_9)
 80042a4:	680a      	ldr	r2, [r1, #0]
 80042a6:	2a09      	cmp	r2, #9
 80042a8:	f240 8089 	bls.w	80043be <HAL_ADCEx_InjectedConfigChannel+0x12e>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfigInjected->InjectedChannel);
 80042ac:	6805      	ldr	r5, [r0, #0]
 80042ae:	68e8      	ldr	r0, [r5, #12]
 80042b0:	b292      	uxth	r2, r2
 80042b2:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80042b6:	3a1e      	subs	r2, #30
 80042b8:	2407      	movs	r4, #7
 80042ba:	fa04 f202 	lsl.w	r2, r4, r2
 80042be:	ea20 0202 	bic.w	r2, r0, r2
 80042c2:	60ea      	str	r2, [r5, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel);
 80042c4:	681d      	ldr	r5, [r3, #0]
 80042c6:	68e8      	ldr	r0, [r5, #12]
 80042c8:	688c      	ldr	r4, [r1, #8]
 80042ca:	880a      	ldrh	r2, [r1, #0]
 80042cc:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80042d0:	3a1e      	subs	r2, #30
 80042d2:	4094      	lsls	r4, r2
 80042d4:	4320      	orrs	r0, r4
 80042d6:	60e8      	str	r0, [r5, #12]
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel);
  }

  /*---------------------------- ADCx JSQR Configuration -----------------*/
  hadc->Instance->JSQR &= ~(ADC_JSQR_JL);
 80042d8:	6818      	ldr	r0, [r3, #0]
 80042da:	6b82      	ldr	r2, [r0, #56]	@ 0x38
 80042dc:	f422 1240 	bic.w	r2, r2, #3145728	@ 0x300000
 80042e0:	6382      	str	r2, [r0, #56]	@ 0x38
  hadc->Instance->JSQR |=  ADC_SQR1(sConfigInjected->InjectedNbrOfConversion);
 80042e2:	681c      	ldr	r4, [r3, #0]
 80042e4:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 80042e6:	6908      	ldr	r0, [r1, #16]
 80042e8:	3801      	subs	r0, #1
 80042ea:	ea42 5200 	orr.w	r2, r2, r0, lsl #20
 80042ee:	63a2      	str	r2, [r4, #56]	@ 0x38

  /* Rank configuration */

  /* Clear the old SQx bits for the selected rank */
  hadc->Instance->JSQR &= ~ADC_JSQR(ADC_JSQR_JSQ1, sConfigInjected->InjectedRank, sConfigInjected->InjectedNbrOfConversion);
 80042f0:	681c      	ldr	r4, [r3, #0]
 80042f2:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 80042f4:	684a      	ldr	r2, [r1, #4]
 80042f6:	690d      	ldr	r5, [r1, #16]
 80042f8:	1b52      	subs	r2, r2, r5
 80042fa:	b2d2      	uxtb	r2, r2
 80042fc:	3203      	adds	r2, #3
 80042fe:	b2d2      	uxtb	r2, r2
 8004300:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8004304:	f04f 0c1f 	mov.w	ip, #31
 8004308:	fa0c f202 	lsl.w	r2, ip, r2
 800430c:	ea20 0202 	bic.w	r2, r0, r2
 8004310:	63a2      	str	r2, [r4, #56]	@ 0x38

  /* Set the SQx bits for the selected rank */
  hadc->Instance->JSQR |= ADC_JSQR(sConfigInjected->InjectedChannel, sConfigInjected->InjectedRank, sConfigInjected->InjectedNbrOfConversion);
 8004312:	681c      	ldr	r4, [r3, #0]
 8004314:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8004316:	684a      	ldr	r2, [r1, #4]
 8004318:	690d      	ldr	r5, [r1, #16]
 800431a:	1b52      	subs	r2, r2, r5
 800431c:	b2d2      	uxtb	r2, r2
 800431e:	3203      	adds	r2, #3
 8004320:	b2d2      	uxtb	r2, r2
 8004322:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8004326:	f8b1 c000 	ldrh.w	ip, [r1]
 800432a:	fa0c f202 	lsl.w	r2, ip, r2
 800432e:	4302      	orrs	r2, r0
 8004330:	63a2      	str	r2, [r4, #56]	@ 0x38
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 8004332:	6988      	ldr	r0, [r1, #24]
 8004334:	4a53      	ldr	r2, [pc, #332]	@ (8004484 <HAL_ADCEx_InjectedConfigChannel+0x1f4>)
 8004336:	4290      	cmp	r0, r2
 8004338:	d056      	beq.n	80043e8 <HAL_ADCEx_InjectedConfigChannel+0x158>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTSEL);
 800433a:	6818      	ldr	r0, [r3, #0]
 800433c:	6882      	ldr	r2, [r0, #8]
 800433e:	f422 2270 	bic.w	r2, r2, #983040	@ 0xf0000
 8004342:	6082      	str	r2, [r0, #8]
    hadc->Instance->CR2 |=  sConfigInjected->ExternalTrigInjecConv;
 8004344:	6818      	ldr	r0, [r3, #0]
 8004346:	6882      	ldr	r2, [r0, #8]
 8004348:	698c      	ldr	r4, [r1, #24]
 800434a:	4322      	orrs	r2, r4
 800434c:	6082      	str	r2, [r0, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTEN);
 800434e:	6818      	ldr	r0, [r3, #0]
 8004350:	6882      	ldr	r2, [r0, #8]
 8004352:	f422 1240 	bic.w	r2, r2, #3145728	@ 0x300000
 8004356:	6082      	str	r2, [r0, #8]
    hadc->Instance->CR2 |= sConfigInjected->ExternalTrigInjecConvEdge;
 8004358:	6818      	ldr	r0, [r3, #0]
 800435a:	6882      	ldr	r2, [r0, #8]
 800435c:	69cc      	ldr	r4, [r1, #28]
 800435e:	4322      	orrs	r2, r4
 8004360:	6082      	str	r2, [r0, #8]
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTSEL);
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTEN);
  }

  if (sConfigInjected->AutoInjectedConv != DISABLE)
 8004362:	7d4a      	ldrb	r2, [r1, #21]
 8004364:	2a00      	cmp	r2, #0
 8004366:	d04a      	beq.n	80043fe <HAL_ADCEx_InjectedConfigChannel+0x16e>
  {
    /* Enable the selected ADC automatic injected group conversion */
    hadc->Instance->CR1 |= ADC_CR1_JAUTO;
 8004368:	6818      	ldr	r0, [r3, #0]
 800436a:	6842      	ldr	r2, [r0, #4]
 800436c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004370:	6042      	str	r2, [r0, #4]
  {
    /* Disable the selected ADC automatic injected group conversion */
    hadc->Instance->CR1 &= ~(ADC_CR1_JAUTO);
  }

  if (sConfigInjected->InjectedDiscontinuousConvMode != DISABLE)
 8004372:	7d0a      	ldrb	r2, [r1, #20]
 8004374:	2a00      	cmp	r2, #0
 8004376:	d048      	beq.n	800440a <HAL_ADCEx_InjectedConfigChannel+0x17a>
  {
    /* Enable the selected ADC injected discontinuous mode */
    hadc->Instance->CR1 |= ADC_CR1_JDISCEN;
 8004378:	6818      	ldr	r0, [r3, #0]
 800437a:	6842      	ldr	r2, [r0, #4]
 800437c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8004380:	6042      	str	r2, [r0, #4]
  {
    /* Disable the selected ADC injected discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_JDISCEN);
  }

  switch (sConfigInjected->InjectedRank)
 8004382:	684a      	ldr	r2, [r1, #4]
 8004384:	2a02      	cmp	r2, #2
 8004386:	d046      	beq.n	8004416 <HAL_ADCEx_InjectedConfigChannel+0x186>
 8004388:	2a03      	cmp	r2, #3
 800438a:	d04f      	beq.n	800442c <HAL_ADCEx_InjectedConfigChannel+0x19c>
 800438c:	2a01      	cmp	r2, #1
 800438e:	d158      	bne.n	8004442 <HAL_ADCEx_InjectedConfigChannel+0x1b2>
  {
    case 1U:
      /* Set injected channel 1 offset */
      hadc->Instance->JOFR1 &= ~(ADC_JOFR1_JOFFSET1);
 8004390:	6818      	ldr	r0, [r3, #0]
 8004392:	6942      	ldr	r2, [r0, #20]
 8004394:	f36f 020b 	bfc	r2, #0, #12
 8004398:	6142      	str	r2, [r0, #20]
      hadc->Instance->JOFR1 |= sConfigInjected->InjectedOffset;
 800439a:	6818      	ldr	r0, [r3, #0]
 800439c:	6942      	ldr	r2, [r0, #20]
 800439e:	68cc      	ldr	r4, [r1, #12]
 80043a0:	4322      	orrs	r2, r4
 80043a2:	6142      	str	r2, [r0, #20]
  /* (Depending on STM32F4 product, there may be up to 3 ADC and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT))
 80043a4:	6818      	ldr	r0, [r3, #0]
 80043a6:	4a38      	ldr	r2, [pc, #224]	@ (8004488 <HAL_ADCEx_InjectedConfigChannel+0x1f8>)
 80043a8:	4290      	cmp	r0, r2
 80043aa:	d055      	beq.n	8004458 <HAL_ADCEx_InjectedConfigChannel+0x1c8>
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
  }

  /* if ADC1 Channel_16 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) || (sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)))
 80043ac:	6818      	ldr	r0, [r3, #0]
 80043ae:	4a36      	ldr	r2, [pc, #216]	@ (8004488 <HAL_ADCEx_InjectedConfigChannel+0x1f8>)
 80043b0:	4290      	cmp	r0, r2
 80043b2:	d05a      	beq.n	800446a <HAL_ADCEx_InjectedConfigChannel+0x1da>
    /* Enable the TSVREFE channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80043b4:	2000      	movs	r0, #0
 80043b6:	f883 003c 	strb.w	r0, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
}
 80043ba:	bc30      	pop	{r4, r5}
 80043bc:	4770      	bx	lr
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfigInjected->InjectedChannel);
 80043be:	6805      	ldr	r5, [r0, #0]
 80043c0:	6928      	ldr	r0, [r5, #16]
 80043c2:	b292      	uxth	r2, r2
 80043c4:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80043c8:	2407      	movs	r4, #7
 80043ca:	fa04 f202 	lsl.w	r2, r4, r2
 80043ce:	ea20 0202 	bic.w	r2, r0, r2
 80043d2:	612a      	str	r2, [r5, #16]
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel);
 80043d4:	681d      	ldr	r5, [r3, #0]
 80043d6:	6928      	ldr	r0, [r5, #16]
 80043d8:	688c      	ldr	r4, [r1, #8]
 80043da:	880a      	ldrh	r2, [r1, #0]
 80043dc:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80043e0:	4094      	lsls	r4, r2
 80043e2:	4320      	orrs	r0, r4
 80043e4:	6128      	str	r0, [r5, #16]
 80043e6:	e777      	b.n	80042d8 <HAL_ADCEx_InjectedConfigChannel+0x48>
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTSEL);
 80043e8:	6818      	ldr	r0, [r3, #0]
 80043ea:	6882      	ldr	r2, [r0, #8]
 80043ec:	f422 2270 	bic.w	r2, r2, #983040	@ 0xf0000
 80043f0:	6082      	str	r2, [r0, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTEN);
 80043f2:	6818      	ldr	r0, [r3, #0]
 80043f4:	6882      	ldr	r2, [r0, #8]
 80043f6:	f422 1240 	bic.w	r2, r2, #3145728	@ 0x300000
 80043fa:	6082      	str	r2, [r0, #8]
 80043fc:	e7b1      	b.n	8004362 <HAL_ADCEx_InjectedConfigChannel+0xd2>
    hadc->Instance->CR1 &= ~(ADC_CR1_JAUTO);
 80043fe:	6818      	ldr	r0, [r3, #0]
 8004400:	6842      	ldr	r2, [r0, #4]
 8004402:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004406:	6042      	str	r2, [r0, #4]
 8004408:	e7b3      	b.n	8004372 <HAL_ADCEx_InjectedConfigChannel+0xe2>
    hadc->Instance->CR1 &= ~(ADC_CR1_JDISCEN);
 800440a:	6818      	ldr	r0, [r3, #0]
 800440c:	6842      	ldr	r2, [r0, #4]
 800440e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004412:	6042      	str	r2, [r0, #4]
 8004414:	e7b5      	b.n	8004382 <HAL_ADCEx_InjectedConfigChannel+0xf2>
      hadc->Instance->JOFR2 &= ~(ADC_JOFR2_JOFFSET2);
 8004416:	6818      	ldr	r0, [r3, #0]
 8004418:	6982      	ldr	r2, [r0, #24]
 800441a:	f36f 020b 	bfc	r2, #0, #12
 800441e:	6182      	str	r2, [r0, #24]
      hadc->Instance->JOFR2 |= sConfigInjected->InjectedOffset;
 8004420:	6818      	ldr	r0, [r3, #0]
 8004422:	6982      	ldr	r2, [r0, #24]
 8004424:	68cc      	ldr	r4, [r1, #12]
 8004426:	4322      	orrs	r2, r4
 8004428:	6182      	str	r2, [r0, #24]
      break;
 800442a:	e7bb      	b.n	80043a4 <HAL_ADCEx_InjectedConfigChannel+0x114>
      hadc->Instance->JOFR3 &= ~(ADC_JOFR3_JOFFSET3);
 800442c:	6818      	ldr	r0, [r3, #0]
 800442e:	69c2      	ldr	r2, [r0, #28]
 8004430:	f36f 020b 	bfc	r2, #0, #12
 8004434:	61c2      	str	r2, [r0, #28]
      hadc->Instance->JOFR3 |= sConfigInjected->InjectedOffset;
 8004436:	6818      	ldr	r0, [r3, #0]
 8004438:	69c2      	ldr	r2, [r0, #28]
 800443a:	68cc      	ldr	r4, [r1, #12]
 800443c:	4322      	orrs	r2, r4
 800443e:	61c2      	str	r2, [r0, #28]
      break;
 8004440:	e7b0      	b.n	80043a4 <HAL_ADCEx_InjectedConfigChannel+0x114>
      hadc->Instance->JOFR4 &= ~(ADC_JOFR4_JOFFSET4);
 8004442:	6818      	ldr	r0, [r3, #0]
 8004444:	6a02      	ldr	r2, [r0, #32]
 8004446:	f36f 020b 	bfc	r2, #0, #12
 800444a:	6202      	str	r2, [r0, #32]
      hadc->Instance->JOFR4 |= sConfigInjected->InjectedOffset;
 800444c:	6818      	ldr	r0, [r3, #0]
 800444e:	6a02      	ldr	r2, [r0, #32]
 8004450:	68cc      	ldr	r4, [r1, #12]
 8004452:	4322      	orrs	r2, r4
 8004454:	6202      	str	r2, [r0, #32]
      break;
 8004456:	e7a5      	b.n	80043a4 <HAL_ADCEx_InjectedConfigChannel+0x114>
  if ((hadc->Instance == ADC1) && (sConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT))
 8004458:	680a      	ldr	r2, [r1, #0]
 800445a:	2a12      	cmp	r2, #18
 800445c:	d1a6      	bne.n	80043ac <HAL_ADCEx_InjectedConfigChannel+0x11c>
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800445e:	480b      	ldr	r0, [pc, #44]	@ (800448c <HAL_ADCEx_InjectedConfigChannel+0x1fc>)
 8004460:	6842      	ldr	r2, [r0, #4]
 8004462:	f442 0280 	orr.w	r2, r2, #4194304	@ 0x400000
 8004466:	6042      	str	r2, [r0, #4]
 8004468:	e7a0      	b.n	80043ac <HAL_ADCEx_InjectedConfigChannel+0x11c>
  if ((hadc->Instance == ADC1) && ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) || (sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)))
 800446a:	680a      	ldr	r2, [r1, #0]
 800446c:	3a10      	subs	r2, #16
 800446e:	2a01      	cmp	r2, #1
 8004470:	d8a0      	bhi.n	80043b4 <HAL_ADCEx_InjectedConfigChannel+0x124>
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8004472:	4906      	ldr	r1, [pc, #24]	@ (800448c <HAL_ADCEx_InjectedConfigChannel+0x1fc>)
 8004474:	684a      	ldr	r2, [r1, #4]
 8004476:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 800447a:	604a      	str	r2, [r1, #4]
 800447c:	e79a      	b.n	80043b4 <HAL_ADCEx_InjectedConfigChannel+0x124>
  __HAL_LOCK(hadc);
 800447e:	2002      	movs	r0, #2
}
 8004480:	4770      	bx	lr
 8004482:	bf00      	nop
 8004484:	000f0001 	.word	0x000f0001
 8004488:	40012000 	.word	0x40012000
 800448c:	40012300 	.word	0x40012300

08004490 <__NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8004490:	2800      	cmp	r0, #0
 8004492:	db07      	blt.n	80044a4 <__NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004494:	f000 021f 	and.w	r2, r0, #31
 8004498:	0940      	lsrs	r0, r0, #5
 800449a:	2301      	movs	r3, #1
 800449c:	4093      	lsls	r3, r2
 800449e:	4a02      	ldr	r2, [pc, #8]	@ (80044a8 <__NVIC_EnableIRQ+0x18>)
 80044a0:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
}
 80044a4:	4770      	bx	lr
 80044a6:	bf00      	nop
 80044a8:	e000e100 	.word	0xe000e100

080044ac <__NVIC_SetPriority>:
  if ((int32_t)(IRQn) >= 0)
 80044ac:	2800      	cmp	r0, #0
 80044ae:	db08      	blt.n	80044c2 <__NVIC_SetPriority+0x16>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80044b0:	0109      	lsls	r1, r1, #4
 80044b2:	b2c9      	uxtb	r1, r1
 80044b4:	f100 4060 	add.w	r0, r0, #3758096384	@ 0xe0000000
 80044b8:	f500 4061 	add.w	r0, r0, #57600	@ 0xe100
 80044bc:	f880 1300 	strb.w	r1, [r0, #768]	@ 0x300
 80044c0:	4770      	bx	lr
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80044c2:	f000 000f 	and.w	r0, r0, #15
 80044c6:	0109      	lsls	r1, r1, #4
 80044c8:	b2c9      	uxtb	r1, r1
 80044ca:	4b01      	ldr	r3, [pc, #4]	@ (80044d0 <__NVIC_SetPriority+0x24>)
 80044cc:	5419      	strb	r1, [r3, r0]
  }
}
 80044ce:	4770      	bx	lr
 80044d0:	e000ed14 	.word	0xe000ed14

080044d4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80044d4:	b500      	push	{lr}
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80044d6:	f000 0007 	and.w	r0, r0, #7
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80044da:	f1c0 0c07 	rsb	ip, r0, #7
 80044de:	f1bc 0f04 	cmp.w	ip, #4
 80044e2:	bf28      	it	cs
 80044e4:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80044e8:	1d03      	adds	r3, r0, #4
 80044ea:	2b06      	cmp	r3, #6
 80044ec:	d90f      	bls.n	800450e <NVIC_EncodePriority+0x3a>
 80044ee:	1ec3      	subs	r3, r0, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80044f0:	f04f 3eff 	mov.w	lr, #4294967295
 80044f4:	fa0e f00c 	lsl.w	r0, lr, ip
 80044f8:	ea21 0100 	bic.w	r1, r1, r0
 80044fc:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80044fe:	fa0e fe03 	lsl.w	lr, lr, r3
 8004502:	ea22 020e 	bic.w	r2, r2, lr
         );
}
 8004506:	ea41 0002 	orr.w	r0, r1, r2
 800450a:	f85d fb04 	ldr.w	pc, [sp], #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800450e:	2300      	movs	r3, #0
 8004510:	e7ee      	b.n	80044f0 <NVIC_EncodePriority+0x1c>
	...

08004514 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004514:	4a07      	ldr	r2, [pc, #28]	@ (8004534 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8004516:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004518:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 800451c:	041b      	lsls	r3, r3, #16
 800451e:	0c1b      	lsrs	r3, r3, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004520:	0200      	lsls	r0, r0, #8
 8004522:	f400 60e0 	and.w	r0, r0, #1792	@ 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004526:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 8004528:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800452c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 8004530:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8004532:	4770      	bx	lr
 8004534:	e000ed00 	.word	0xe000ed00

08004538 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004538:	b510      	push	{r4, lr}
 800453a:	4604      	mov	r4, r0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800453c:	4b05      	ldr	r3, [pc, #20]	@ (8004554 <HAL_NVIC_SetPriority+0x1c>)
 800453e:	68d8      	ldr	r0, [r3, #12]
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004540:	f3c0 2002 	ubfx	r0, r0, #8, #3
 8004544:	f7ff ffc6 	bl	80044d4 <NVIC_EncodePriority>
 8004548:	4601      	mov	r1, r0
 800454a:	4620      	mov	r0, r4
 800454c:	f7ff ffae 	bl	80044ac <__NVIC_SetPriority>
}
 8004550:	bd10      	pop	{r4, pc}
 8004552:	bf00      	nop
 8004554:	e000ed00 	.word	0xe000ed00

08004558 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004558:	b508      	push	{r3, lr}
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800455a:	f7ff ff99 	bl	8004490 <__NVIC_EnableIRQ>
}
 800455e:	bd08      	pop	{r3, pc}

08004560 <HAL_CRC_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8004560:	b158      	cbz	r0, 800457a <HAL_CRC_Init+0x1a>
{
 8004562:	b510      	push	{r4, lr}
 8004564:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8004566:	7943      	ldrb	r3, [r0, #5]
 8004568:	b11b      	cbz	r3, 8004572 <HAL_CRC_Init+0x12>
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800456a:	2301      	movs	r3, #1
 800456c:	7163      	strb	r3, [r4, #5]

  /* Return function status */
  return HAL_OK;
 800456e:	2000      	movs	r0, #0
}
 8004570:	bd10      	pop	{r4, pc}
    hcrc->Lock = HAL_UNLOCKED;
 8004572:	7103      	strb	r3, [r0, #4]
    HAL_CRC_MspInit(hcrc);
 8004574:	f7fd f9b8 	bl	80018e8 <HAL_CRC_MspInit>
 8004578:	e7f7      	b.n	800456a <HAL_CRC_Init+0xa>
    return HAL_ERROR;
 800457a:	2001      	movs	r0, #1
}
 800457c:	4770      	bx	lr

0800457e <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800457e:	b430      	push	{r4, r5}
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004580:	6805      	ldr	r5, [r0, #0]
 8004582:	682c      	ldr	r4, [r5, #0]
 8004584:	f424 2480 	bic.w	r4, r4, #262144	@ 0x40000
 8004588:	602c      	str	r4, [r5, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800458a:	6804      	ldr	r4, [r0, #0]
 800458c:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800458e:	6883      	ldr	r3, [r0, #8]
 8004590:	2b40      	cmp	r3, #64	@ 0x40
 8004592:	d005      	beq.n	80045a0 <DMA_SetConfig+0x22>
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Stream source address */
    hdma->Instance->PAR = SrcAddress;
 8004594:	6803      	ldr	r3, [r0, #0]
 8004596:	6099      	str	r1, [r3, #8]

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
 8004598:	6803      	ldr	r3, [r0, #0]
 800459a:	60da      	str	r2, [r3, #12]
  }
}
 800459c:	bc30      	pop	{r4, r5}
 800459e:	4770      	bx	lr
    hdma->Instance->PAR = DstAddress;
 80045a0:	6803      	ldr	r3, [r0, #0]
 80045a2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = SrcAddress;
 80045a4:	6803      	ldr	r3, [r0, #0]
 80045a6:	60d9      	str	r1, [r3, #12]
 80045a8:	e7f8      	b.n	800459c <DMA_SetConfig+0x1e>
	...

080045ac <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80045ac:	b410      	push	{r4}
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80045ae:	6803      	ldr	r3, [r0, #0]
 80045b0:	b2d9      	uxtb	r1, r3
 80045b2:	3910      	subs	r1, #16
 80045b4:	4a0a      	ldr	r2, [pc, #40]	@ (80045e0 <DMA_CalcBaseAndBitshift+0x34>)
 80045b6:	fba2 4201 	umull	r4, r2, r2, r1
 80045ba:	0912      	lsrs	r2, r2, #4
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80045bc:	4c09      	ldr	r4, [pc, #36]	@ (80045e4 <DMA_CalcBaseAndBitshift+0x38>)
 80045be:	5ca2      	ldrb	r2, [r4, r2]
 80045c0:	65c2      	str	r2, [r0, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80045c2:	295f      	cmp	r1, #95	@ 0x5f
 80045c4:	d907      	bls.n	80045d6 <DMA_CalcBaseAndBitshift+0x2a>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80045c6:	f36f 0309 	bfc	r3, #0, #10
 80045ca:	3304      	adds	r3, #4
 80045cc:	6583      	str	r3, [r0, #88]	@ 0x58
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
  }
  
  return hdma->StreamBaseAddress;
}
 80045ce:	6d80      	ldr	r0, [r0, #88]	@ 0x58
 80045d0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80045d4:	4770      	bx	lr
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80045d6:	f36f 0309 	bfc	r3, #0, #10
 80045da:	6583      	str	r3, [r0, #88]	@ 0x58
 80045dc:	e7f7      	b.n	80045ce <DMA_CalcBaseAndBitshift+0x22>
 80045de:	bf00      	nop
 80045e0:	aaaaaaab 	.word	0xaaaaaaab
 80045e4:	0800be84 	.word	0x0800be84

080045e8 <DMA_CheckFifoParam>:
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80045e8:	6a83      	ldr	r3, [r0, #40]	@ 0x28
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80045ea:	6982      	ldr	r2, [r0, #24]
 80045ec:	b992      	cbnz	r2, 8004614 <DMA_CheckFifoParam+0x2c>
  {
    switch (tmp)
 80045ee:	2b01      	cmp	r3, #1
 80045f0:	d00a      	beq.n	8004608 <DMA_CheckFifoParam+0x20>
 80045f2:	2b02      	cmp	r3, #2
 80045f4:	d002      	beq.n	80045fc <DMA_CheckFifoParam+0x14>
 80045f6:	b10b      	cbz	r3, 80045fc <DMA_CheckFifoParam+0x14>
 80045f8:	2000      	movs	r0, #0
 80045fa:	4770      	bx	lr
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80045fc:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 80045fe:	f013 7f80 	tst.w	r3, #16777216	@ 0x1000000
 8004602:	d128      	bne.n	8004656 <DMA_CheckFifoParam+0x6e>
  HAL_StatusTypeDef status = HAL_OK;
 8004604:	2000      	movs	r0, #0
 8004606:	4770      	bx	lr
      {
        status = HAL_ERROR;
      }
      break;
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004608:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 800460a:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800460e:	d024      	beq.n	800465a <DMA_CheckFifoParam+0x72>
  HAL_StatusTypeDef status = HAL_OK;
 8004610:	2000      	movs	r0, #0
 8004612:	4770      	bx	lr
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004614:	f5b2 5f00 	cmp.w	r2, #8192	@ 0x2000
 8004618:	d009      	beq.n	800462e <DMA_CheckFifoParam+0x46>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800461a:	2b02      	cmp	r3, #2
 800461c:	d925      	bls.n	800466a <DMA_CheckFifoParam+0x82>
 800461e:	2b03      	cmp	r3, #3
 8004620:	d125      	bne.n	800466e <DMA_CheckFifoParam+0x86>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004622:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8004624:	f013 7f80 	tst.w	r3, #16777216	@ 0x1000000
 8004628:	d123      	bne.n	8004672 <DMA_CheckFifoParam+0x8a>
  HAL_StatusTypeDef status = HAL_OK;
 800462a:	2000      	movs	r0, #0
 800462c:	4770      	bx	lr
    switch (tmp)
 800462e:	2b03      	cmp	r3, #3
 8004630:	d803      	bhi.n	800463a <DMA_CheckFifoParam+0x52>
 8004632:	e8df f003 	tbb	[pc, r3]
 8004636:	0414      	.short	0x0414
 8004638:	0a14      	.short	0x0a14
 800463a:	2000      	movs	r0, #0
 800463c:	4770      	bx	lr
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800463e:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8004640:	f013 7f80 	tst.w	r3, #16777216	@ 0x1000000
 8004644:	d10d      	bne.n	8004662 <DMA_CheckFifoParam+0x7a>
  HAL_StatusTypeDef status = HAL_OK;
 8004646:	2000      	movs	r0, #0
 8004648:	4770      	bx	lr
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800464a:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 800464c:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004650:	d009      	beq.n	8004666 <DMA_CheckFifoParam+0x7e>
  HAL_StatusTypeDef status = HAL_OK;
 8004652:	2000      	movs	r0, #0
 8004654:	4770      	bx	lr
        status = HAL_ERROR;
 8004656:	2001      	movs	r0, #1
 8004658:	4770      	bx	lr
        status = HAL_ERROR;
 800465a:	2001      	movs	r0, #1
 800465c:	4770      	bx	lr
      status = HAL_ERROR;
 800465e:	2001      	movs	r0, #1
 8004660:	4770      	bx	lr
        status = HAL_ERROR;
 8004662:	2001      	movs	r0, #1
 8004664:	4770      	bx	lr
        status = HAL_ERROR;
 8004666:	2001      	movs	r0, #1
 8004668:	4770      	bx	lr
      status = HAL_ERROR;
 800466a:	2001      	movs	r0, #1
 800466c:	4770      	bx	lr
    switch (tmp)
 800466e:	2000      	movs	r0, #0
 8004670:	4770      	bx	lr
      {
        status = HAL_ERROR;
 8004672:	2001      	movs	r0, #1
      break;
    }
  } 
  
  return status; 
}
 8004674:	4770      	bx	lr
	...

08004678 <HAL_DMA_Init>:
{
 8004678:	b570      	push	{r4, r5, r6, lr}
 800467a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800467c:	f7ff fb60 	bl	8003d40 <HAL_GetTick>
  if(hdma == NULL)
 8004680:	2c00      	cmp	r4, #0
 8004682:	d05b      	beq.n	800473c <HAL_DMA_Init+0xc4>
 8004684:	4605      	mov	r5, r0
  hdma->State = HAL_DMA_STATE_BUSY;
 8004686:	2302      	movs	r3, #2
 8004688:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
  __HAL_UNLOCK(hdma);
 800468c:	2300      	movs	r3, #0
 800468e:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
  __HAL_DMA_DISABLE(hdma);
 8004692:	6822      	ldr	r2, [r4, #0]
 8004694:	6813      	ldr	r3, [r2, #0]
 8004696:	f023 0301 	bic.w	r3, r3, #1
 800469a:	6013      	str	r3, [r2, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800469c:	6823      	ldr	r3, [r4, #0]
 800469e:	681a      	ldr	r2, [r3, #0]
 80046a0:	f012 0f01 	tst.w	r2, #1
 80046a4:	d00a      	beq.n	80046bc <HAL_DMA_Init+0x44>
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80046a6:	f7ff fb4b 	bl	8003d40 <HAL_GetTick>
 80046aa:	1b43      	subs	r3, r0, r5
 80046ac:	2b05      	cmp	r3, #5
 80046ae:	d9f5      	bls.n	800469c <HAL_DMA_Init+0x24>
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80046b0:	2320      	movs	r3, #32
 80046b2:	6563      	str	r3, [r4, #84]	@ 0x54
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80046b4:	2003      	movs	r0, #3
 80046b6:	f884 0035 	strb.w	r0, [r4, #53]	@ 0x35
}
 80046ba:	bd70      	pop	{r4, r5, r6, pc}
  tmp = hdma->Instance->CR;
 80046bc:	681a      	ldr	r2, [r3, #0]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80046be:	4920      	ldr	r1, [pc, #128]	@ (8004740 <HAL_DMA_Init+0xc8>)
 80046c0:	4011      	ands	r1, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80046c2:	6862      	ldr	r2, [r4, #4]
 80046c4:	68a0      	ldr	r0, [r4, #8]
 80046c6:	4302      	orrs	r2, r0
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80046c8:	68e0      	ldr	r0, [r4, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80046ca:	4302      	orrs	r2, r0
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80046cc:	6920      	ldr	r0, [r4, #16]
 80046ce:	4302      	orrs	r2, r0
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80046d0:	6960      	ldr	r0, [r4, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80046d2:	4302      	orrs	r2, r0
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80046d4:	69a0      	ldr	r0, [r4, #24]
 80046d6:	4302      	orrs	r2, r0
          hdma->Init.Mode                | hdma->Init.Priority;
 80046d8:	69e0      	ldr	r0, [r4, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80046da:	4302      	orrs	r2, r0
          hdma->Init.Mode                | hdma->Init.Priority;
 80046dc:	6a20      	ldr	r0, [r4, #32]
 80046de:	4302      	orrs	r2, r0
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80046e0:	430a      	orrs	r2, r1
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80046e2:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 80046e4:	2904      	cmp	r1, #4
 80046e6:	d01e      	beq.n	8004726 <HAL_DMA_Init+0xae>
  hdma->Instance->CR = tmp;  
 80046e8:	601a      	str	r2, [r3, #0]
  tmp = hdma->Instance->FCR;
 80046ea:	6826      	ldr	r6, [r4, #0]
 80046ec:	6975      	ldr	r5, [r6, #20]
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80046ee:	f025 0507 	bic.w	r5, r5, #7
  tmp |= hdma->Init.FIFOMode;
 80046f2:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80046f4:	431d      	orrs	r5, r3
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80046f6:	2b04      	cmp	r3, #4
 80046f8:	d107      	bne.n	800470a <HAL_DMA_Init+0x92>
    tmp |= hdma->Init.FIFOThreshold;
 80046fa:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80046fc:	431d      	orrs	r5, r3
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80046fe:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8004700:	b11b      	cbz	r3, 800470a <HAL_DMA_Init+0x92>
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004702:	4620      	mov	r0, r4
 8004704:	f7ff ff70 	bl	80045e8 <DMA_CheckFifoParam>
 8004708:	b990      	cbnz	r0, 8004730 <HAL_DMA_Init+0xb8>
  hdma->Instance->FCR = tmp;
 800470a:	6175      	str	r5, [r6, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800470c:	4620      	mov	r0, r4
 800470e:	f7ff ff4d 	bl	80045ac <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004712:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 8004714:	233f      	movs	r3, #63	@ 0x3f
 8004716:	4093      	lsls	r3, r2
 8004718:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800471a:	2000      	movs	r0, #0
 800471c:	6560      	str	r0, [r4, #84]	@ 0x54
  hdma->State = HAL_DMA_STATE_READY;
 800471e:	2301      	movs	r3, #1
 8004720:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
  return HAL_OK;
 8004724:	e7c9      	b.n	80046ba <HAL_DMA_Init+0x42>
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004726:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8004728:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 800472a:	4301      	orrs	r1, r0
 800472c:	430a      	orrs	r2, r1
 800472e:	e7db      	b.n	80046e8 <HAL_DMA_Init+0x70>
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004730:	2340      	movs	r3, #64	@ 0x40
 8004732:	6563      	str	r3, [r4, #84]	@ 0x54
        hdma->State = HAL_DMA_STATE_READY;
 8004734:	2001      	movs	r0, #1
 8004736:	f884 0035 	strb.w	r0, [r4, #53]	@ 0x35
        return HAL_ERROR; 
 800473a:	e7be      	b.n	80046ba <HAL_DMA_Init+0x42>
    return HAL_ERROR;
 800473c:	2001      	movs	r0, #1
 800473e:	e7bc      	b.n	80046ba <HAL_DMA_Init+0x42>
 8004740:	f010803f 	.word	0xf010803f

08004744 <HAL_DMA_Start_IT>:
{
 8004744:	b538      	push	{r3, r4, r5, lr}
 8004746:	4604      	mov	r4, r0
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004748:	6d85      	ldr	r5, [r0, #88]	@ 0x58
  __HAL_LOCK(hdma);
 800474a:	f890 0034 	ldrb.w	r0, [r0, #52]	@ 0x34
 800474e:	2801      	cmp	r0, #1
 8004750:	d02a      	beq.n	80047a8 <HAL_DMA_Start_IT+0x64>
 8004752:	2001      	movs	r0, #1
 8004754:	f884 0034 	strb.w	r0, [r4, #52]	@ 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 8004758:	f894 0035 	ldrb.w	r0, [r4, #53]	@ 0x35
 800475c:	2801      	cmp	r0, #1
 800475e:	d004      	beq.n	800476a <HAL_DMA_Start_IT+0x26>
    __HAL_UNLOCK(hdma);	  
 8004760:	2300      	movs	r3, #0
 8004762:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
    status = HAL_BUSY;
 8004766:	2002      	movs	r0, #2
}
 8004768:	bd38      	pop	{r3, r4, r5, pc}
    hdma->State = HAL_DMA_STATE_BUSY;
 800476a:	2002      	movs	r0, #2
 800476c:	f884 0035 	strb.w	r0, [r4, #53]	@ 0x35
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004770:	2000      	movs	r0, #0
 8004772:	6560      	str	r0, [r4, #84]	@ 0x54
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004774:	4620      	mov	r0, r4
 8004776:	f7ff ff02 	bl	800457e <DMA_SetConfig>
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800477a:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 800477c:	233f      	movs	r3, #63	@ 0x3f
 800477e:	4093      	lsls	r3, r2
 8004780:	60ab      	str	r3, [r5, #8]
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004782:	6822      	ldr	r2, [r4, #0]
 8004784:	6813      	ldr	r3, [r2, #0]
 8004786:	f043 0316 	orr.w	r3, r3, #22
 800478a:	6013      	str	r3, [r2, #0]
    if(hdma->XferHalfCpltCallback != NULL)
 800478c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800478e:	b123      	cbz	r3, 800479a <HAL_DMA_Start_IT+0x56>
      hdma->Instance->CR  |= DMA_IT_HT;
 8004790:	6822      	ldr	r2, [r4, #0]
 8004792:	6813      	ldr	r3, [r2, #0]
 8004794:	f043 0308 	orr.w	r3, r3, #8
 8004798:	6013      	str	r3, [r2, #0]
    __HAL_DMA_ENABLE(hdma);
 800479a:	6822      	ldr	r2, [r4, #0]
 800479c:	6813      	ldr	r3, [r2, #0]
 800479e:	f043 0301 	orr.w	r3, r3, #1
 80047a2:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80047a4:	2000      	movs	r0, #0
 80047a6:	e7df      	b.n	8004768 <HAL_DMA_Start_IT+0x24>
  __HAL_LOCK(hdma);
 80047a8:	2002      	movs	r0, #2
 80047aa:	e7dd      	b.n	8004768 <HAL_DMA_Start_IT+0x24>

080047ac <HAL_DMA_IRQHandler>:
{
 80047ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80047ae:	b083      	sub	sp, #12
 80047b0:	4604      	mov	r4, r0
  __IO uint32_t count = 0U;
 80047b2:	2300      	movs	r3, #0
 80047b4:	9301      	str	r3, [sp, #4]
  uint32_t timeout = SystemCoreClock / 9600U;
 80047b6:	4b72      	ldr	r3, [pc, #456]	@ (8004980 <HAL_DMA_IRQHandler+0x1d4>)
 80047b8:	681d      	ldr	r5, [r3, #0]
 80047ba:	4b72      	ldr	r3, [pc, #456]	@ (8004984 <HAL_DMA_IRQHandler+0x1d8>)
 80047bc:	fba3 3505 	umull	r3, r5, r3, r5
 80047c0:	0aad      	lsrs	r5, r5, #10
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80047c2:	6d87      	ldr	r7, [r0, #88]	@ 0x58
  tmpisr = regs->ISR;
 80047c4:	683e      	ldr	r6, [r7, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80047c6:	6dc2      	ldr	r2, [r0, #92]	@ 0x5c
 80047c8:	2308      	movs	r3, #8
 80047ca:	4093      	lsls	r3, r2
 80047cc:	4233      	tst	r3, r6
 80047ce:	d010      	beq.n	80047f2 <HAL_DMA_IRQHandler+0x46>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80047d0:	6803      	ldr	r3, [r0, #0]
 80047d2:	681a      	ldr	r2, [r3, #0]
 80047d4:	f012 0f04 	tst.w	r2, #4
 80047d8:	d00b      	beq.n	80047f2 <HAL_DMA_IRQHandler+0x46>
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80047da:	681a      	ldr	r2, [r3, #0]
 80047dc:	f022 0204 	bic.w	r2, r2, #4
 80047e0:	601a      	str	r2, [r3, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80047e2:	6dc2      	ldr	r2, [r0, #92]	@ 0x5c
 80047e4:	2308      	movs	r3, #8
 80047e6:	4093      	lsls	r3, r2
 80047e8:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80047ea:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 80047ec:	f043 0301 	orr.w	r3, r3, #1
 80047f0:	6543      	str	r3, [r0, #84]	@ 0x54
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80047f2:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 80047f4:	2301      	movs	r3, #1
 80047f6:	4093      	lsls	r3, r2
 80047f8:	4233      	tst	r3, r6
 80047fa:	d009      	beq.n	8004810 <HAL_DMA_IRQHandler+0x64>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80047fc:	6822      	ldr	r2, [r4, #0]
 80047fe:	6952      	ldr	r2, [r2, #20]
 8004800:	f012 0f80 	tst.w	r2, #128	@ 0x80
 8004804:	d004      	beq.n	8004810 <HAL_DMA_IRQHandler+0x64>
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004806:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004808:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800480a:	f043 0302 	orr.w	r3, r3, #2
 800480e:	6563      	str	r3, [r4, #84]	@ 0x54
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004810:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 8004812:	2304      	movs	r3, #4
 8004814:	4093      	lsls	r3, r2
 8004816:	4233      	tst	r3, r6
 8004818:	d009      	beq.n	800482e <HAL_DMA_IRQHandler+0x82>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800481a:	6822      	ldr	r2, [r4, #0]
 800481c:	6812      	ldr	r2, [r2, #0]
 800481e:	f012 0f02 	tst.w	r2, #2
 8004822:	d004      	beq.n	800482e <HAL_DMA_IRQHandler+0x82>
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004824:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004826:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8004828:	f043 0304 	orr.w	r3, r3, #4
 800482c:	6563      	str	r3, [r4, #84]	@ 0x54
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800482e:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 8004830:	2310      	movs	r3, #16
 8004832:	4093      	lsls	r3, r2
 8004834:	4233      	tst	r3, r6
 8004836:	d024      	beq.n	8004882 <HAL_DMA_IRQHandler+0xd6>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004838:	6822      	ldr	r2, [r4, #0]
 800483a:	6812      	ldr	r2, [r2, #0]
 800483c:	f012 0f08 	tst.w	r2, #8
 8004840:	d01f      	beq.n	8004882 <HAL_DMA_IRQHandler+0xd6>
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004842:	60bb      	str	r3, [r7, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004844:	6823      	ldr	r3, [r4, #0]
 8004846:	681a      	ldr	r2, [r3, #0]
 8004848:	f412 2f80 	tst.w	r2, #262144	@ 0x40000
 800484c:	d00d      	beq.n	800486a <HAL_DMA_IRQHandler+0xbe>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	f413 2f00 	tst.w	r3, #524288	@ 0x80000
 8004854:	d104      	bne.n	8004860 <HAL_DMA_IRQHandler+0xb4>
          if(hdma->XferHalfCpltCallback != NULL)
 8004856:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004858:	b19b      	cbz	r3, 8004882 <HAL_DMA_IRQHandler+0xd6>
            hdma->XferHalfCpltCallback(hdma);
 800485a:	4620      	mov	r0, r4
 800485c:	4798      	blx	r3
 800485e:	e010      	b.n	8004882 <HAL_DMA_IRQHandler+0xd6>
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004860:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 8004862:	b173      	cbz	r3, 8004882 <HAL_DMA_IRQHandler+0xd6>
            hdma->XferM1HalfCpltCallback(hdma);
 8004864:	4620      	mov	r0, r4
 8004866:	4798      	blx	r3
 8004868:	e00b      	b.n	8004882 <HAL_DMA_IRQHandler+0xd6>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800486a:	681a      	ldr	r2, [r3, #0]
 800486c:	f412 7f80 	tst.w	r2, #256	@ 0x100
 8004870:	d103      	bne.n	800487a <HAL_DMA_IRQHandler+0xce>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004872:	681a      	ldr	r2, [r3, #0]
 8004874:	f022 0208 	bic.w	r2, r2, #8
 8004878:	601a      	str	r2, [r3, #0]
        if(hdma->XferHalfCpltCallback != NULL)
 800487a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800487c:	b10b      	cbz	r3, 8004882 <HAL_DMA_IRQHandler+0xd6>
          hdma->XferHalfCpltCallback(hdma);
 800487e:	4620      	mov	r0, r4
 8004880:	4798      	blx	r3
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004882:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 8004884:	2320      	movs	r3, #32
 8004886:	4093      	lsls	r3, r2
 8004888:	4233      	tst	r3, r6
 800488a:	d054      	beq.n	8004936 <HAL_DMA_IRQHandler+0x18a>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800488c:	6822      	ldr	r2, [r4, #0]
 800488e:	6812      	ldr	r2, [r2, #0]
 8004890:	f012 0f10 	tst.w	r2, #16
 8004894:	d04f      	beq.n	8004936 <HAL_DMA_IRQHandler+0x18a>
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004896:	60bb      	str	r3, [r7, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004898:	f894 3035 	ldrb.w	r3, [r4, #53]	@ 0x35
 800489c:	2b05      	cmp	r3, #5
 800489e:	d00e      	beq.n	80048be <HAL_DMA_IRQHandler+0x112>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80048a0:	6823      	ldr	r3, [r4, #0]
 80048a2:	681a      	ldr	r2, [r3, #0]
 80048a4:	f412 2f80 	tst.w	r2, #262144	@ 0x40000
 80048a8:	d033      	beq.n	8004912 <HAL_DMA_IRQHandler+0x166>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	f413 2f00 	tst.w	r3, #524288	@ 0x80000
 80048b0:	d12a      	bne.n	8004908 <HAL_DMA_IRQHandler+0x15c>
          if(hdma->XferM1CpltCallback != NULL)
 80048b2:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d03e      	beq.n	8004936 <HAL_DMA_IRQHandler+0x18a>
            hdma->XferM1CpltCallback(hdma);
 80048b8:	4620      	mov	r0, r4
 80048ba:	4798      	blx	r3
 80048bc:	e03b      	b.n	8004936 <HAL_DMA_IRQHandler+0x18a>
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80048be:	6822      	ldr	r2, [r4, #0]
 80048c0:	6813      	ldr	r3, [r2, #0]
 80048c2:	f023 0316 	bic.w	r3, r3, #22
 80048c6:	6013      	str	r3, [r2, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80048c8:	6822      	ldr	r2, [r4, #0]
 80048ca:	6953      	ldr	r3, [r2, #20]
 80048cc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80048d0:	6153      	str	r3, [r2, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80048d2:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80048d4:	b1a3      	cbz	r3, 8004900 <HAL_DMA_IRQHandler+0x154>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80048d6:	6822      	ldr	r2, [r4, #0]
 80048d8:	6813      	ldr	r3, [r2, #0]
 80048da:	f023 0308 	bic.w	r3, r3, #8
 80048de:	6013      	str	r3, [r2, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80048e0:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 80048e2:	233f      	movs	r3, #63	@ 0x3f
 80048e4:	4093      	lsls	r3, r2
 80048e6:	60bb      	str	r3, [r7, #8]
        hdma->State = HAL_DMA_STATE_READY;
 80048e8:	2301      	movs	r3, #1
 80048ea:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
        __HAL_UNLOCK(hdma);
 80048ee:	2300      	movs	r3, #0
 80048f0:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
        if(hdma->XferAbortCallback != NULL)
 80048f4:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d03f      	beq.n	800497a <HAL_DMA_IRQHandler+0x1ce>
          hdma->XferAbortCallback(hdma);
 80048fa:	4620      	mov	r0, r4
 80048fc:	4798      	blx	r3
        return;
 80048fe:	e03c      	b.n	800497a <HAL_DMA_IRQHandler+0x1ce>
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004900:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 8004902:	2b00      	cmp	r3, #0
 8004904:	d1e7      	bne.n	80048d6 <HAL_DMA_IRQHandler+0x12a>
 8004906:	e7eb      	b.n	80048e0 <HAL_DMA_IRQHandler+0x134>
          if(hdma->XferCpltCallback != NULL)
 8004908:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800490a:	b1a3      	cbz	r3, 8004936 <HAL_DMA_IRQHandler+0x18a>
            hdma->XferCpltCallback(hdma);
 800490c:	4620      	mov	r0, r4
 800490e:	4798      	blx	r3
 8004910:	e011      	b.n	8004936 <HAL_DMA_IRQHandler+0x18a>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004912:	681a      	ldr	r2, [r3, #0]
 8004914:	f412 7f80 	tst.w	r2, #256	@ 0x100
 8004918:	d109      	bne.n	800492e <HAL_DMA_IRQHandler+0x182>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800491a:	681a      	ldr	r2, [r3, #0]
 800491c:	f022 0210 	bic.w	r2, r2, #16
 8004920:	601a      	str	r2, [r3, #0]
          hdma->State = HAL_DMA_STATE_READY;
 8004922:	2301      	movs	r3, #1
 8004924:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
          __HAL_UNLOCK(hdma);
 8004928:	2300      	movs	r3, #0
 800492a:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
        if(hdma->XferCpltCallback != NULL)
 800492e:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8004930:	b10b      	cbz	r3, 8004936 <HAL_DMA_IRQHandler+0x18a>
          hdma->XferCpltCallback(hdma);
 8004932:	4620      	mov	r0, r4
 8004934:	4798      	blx	r3
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004936:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8004938:	b1fb      	cbz	r3, 800497a <HAL_DMA_IRQHandler+0x1ce>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800493a:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800493c:	f013 0f01 	tst.w	r3, #1
 8004940:	d017      	beq.n	8004972 <HAL_DMA_IRQHandler+0x1c6>
      hdma->State = HAL_DMA_STATE_ABORT;
 8004942:	2305      	movs	r3, #5
 8004944:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
      __HAL_DMA_DISABLE(hdma);
 8004948:	6822      	ldr	r2, [r4, #0]
 800494a:	6813      	ldr	r3, [r2, #0]
 800494c:	f023 0301 	bic.w	r3, r3, #1
 8004950:	6013      	str	r3, [r2, #0]
        if (++count > timeout)
 8004952:	9b01      	ldr	r3, [sp, #4]
 8004954:	3301      	adds	r3, #1
 8004956:	9301      	str	r3, [sp, #4]
 8004958:	42ab      	cmp	r3, r5
 800495a:	d804      	bhi.n	8004966 <HAL_DMA_IRQHandler+0x1ba>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800495c:	6823      	ldr	r3, [r4, #0]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	f013 0f01 	tst.w	r3, #1
 8004964:	d1f5      	bne.n	8004952 <HAL_DMA_IRQHandler+0x1a6>
      hdma->State = HAL_DMA_STATE_READY;
 8004966:	2301      	movs	r3, #1
 8004968:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
      __HAL_UNLOCK(hdma);
 800496c:	2300      	movs	r3, #0
 800496e:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
    if(hdma->XferErrorCallback != NULL)
 8004972:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8004974:	b10b      	cbz	r3, 800497a <HAL_DMA_IRQHandler+0x1ce>
      hdma->XferErrorCallback(hdma);
 8004976:	4620      	mov	r0, r4
 8004978:	4798      	blx	r3
}
 800497a:	b003      	add	sp, #12
 800497c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800497e:	bf00      	nop
 8004980:	20000070 	.word	0x20000070
 8004984:	1b4e81b5 	.word	0x1b4e81b5

08004988 <HAL_GPIO_Init>:
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004988:	2300      	movs	r3, #0
 800498a:	2b0f      	cmp	r3, #15
 800498c:	f200 80d7 	bhi.w	8004b3e <HAL_GPIO_Init+0x1b6>
{
 8004990:	b570      	push	{r4, r5, r6, lr}
 8004992:	b082      	sub	sp, #8
 8004994:	e065      	b.n	8004a62 <HAL_GPIO_Init+0xda>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004996:	6885      	ldr	r5, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004998:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 800499c:	2403      	movs	r4, #3
 800499e:	fa04 f40e 	lsl.w	r4, r4, lr
 80049a2:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 80049a6:	68cc      	ldr	r4, [r1, #12]
 80049a8:	fa04 f40e 	lsl.w	r4, r4, lr
 80049ac:	432c      	orrs	r4, r5
        GPIOx->OSPEEDR = temp;
 80049ae:	6084      	str	r4, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80049b0:	6844      	ldr	r4, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80049b2:	ea24 0402 	bic.w	r4, r4, r2
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80049b6:	684a      	ldr	r2, [r1, #4]
 80049b8:	f3c2 1200 	ubfx	r2, r2, #4, #1
 80049bc:	409a      	lsls	r2, r3
 80049be:	4322      	orrs	r2, r4
        GPIOx->OTYPER = temp;
 80049c0:	6042      	str	r2, [r0, #4]
 80049c2:	e05c      	b.n	8004a7e <HAL_GPIO_Init+0xf6>
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80049c4:	08dc      	lsrs	r4, r3, #3
 80049c6:	3408      	adds	r4, #8
 80049c8:	f850 2024 	ldr.w	r2, [r0, r4, lsl #2]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80049cc:	f003 0507 	and.w	r5, r3, #7
 80049d0:	00ad      	lsls	r5, r5, #2
 80049d2:	f04f 0e0f 	mov.w	lr, #15
 80049d6:	fa0e fe05 	lsl.w	lr, lr, r5
 80049da:	ea22 0e0e 	bic.w	lr, r2, lr
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80049de:	690a      	ldr	r2, [r1, #16]
 80049e0:	40aa      	lsls	r2, r5
 80049e2:	ea42 020e 	orr.w	r2, r2, lr
        GPIOx->AFR[position >> 3U] = temp;
 80049e6:	f840 2024 	str.w	r2, [r0, r4, lsl #2]
 80049ea:	e05c      	b.n	8004aa6 <HAL_GPIO_Init+0x11e>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80049ec:	2204      	movs	r2, #4
 80049ee:	e000      	b.n	80049f2 <HAL_GPIO_Init+0x6a>
 80049f0:	2200      	movs	r2, #0
 80049f2:	fa02 f20e 	lsl.w	r2, r2, lr
 80049f6:	432a      	orrs	r2, r5
        SYSCFG->EXTICR[position >> 2U] = temp;
 80049f8:	3402      	adds	r4, #2
 80049fa:	4d51      	ldr	r5, [pc, #324]	@ (8004b40 <HAL_GPIO_Init+0x1b8>)
 80049fc:	f845 2024 	str.w	r2, [r5, r4, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004a00:	4a50      	ldr	r2, [pc, #320]	@ (8004b44 <HAL_GPIO_Init+0x1bc>)
 8004a02:	6894      	ldr	r4, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
 8004a04:	ea6f 020c 	mvn.w	r2, ip
 8004a08:	ea24 050c 	bic.w	r5, r4, ip
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004a0c:	684e      	ldr	r6, [r1, #4]
 8004a0e:	f416 1f80 	tst.w	r6, #1048576	@ 0x100000
 8004a12:	d001      	beq.n	8004a18 <HAL_GPIO_Init+0x90>
        {
          temp |= iocurrent;
 8004a14:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->RTSR = temp;
 8004a18:	4c4a      	ldr	r4, [pc, #296]	@ (8004b44 <HAL_GPIO_Init+0x1bc>)
 8004a1a:	60a5      	str	r5, [r4, #8]

        temp = EXTI->FTSR;
 8004a1c:	68e4      	ldr	r4, [r4, #12]
        temp &= ~((uint32_t)iocurrent);
 8004a1e:	ea02 0504 	and.w	r5, r2, r4
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004a22:	684e      	ldr	r6, [r1, #4]
 8004a24:	f416 1f00 	tst.w	r6, #2097152	@ 0x200000
 8004a28:	d001      	beq.n	8004a2e <HAL_GPIO_Init+0xa6>
        {
          temp |= iocurrent;
 8004a2a:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->FTSR = temp;
 8004a2e:	4c45      	ldr	r4, [pc, #276]	@ (8004b44 <HAL_GPIO_Init+0x1bc>)
 8004a30:	60e5      	str	r5, [r4, #12]

        temp = EXTI->EMR;
 8004a32:	6864      	ldr	r4, [r4, #4]
        temp &= ~((uint32_t)iocurrent);
 8004a34:	ea02 0504 	and.w	r5, r2, r4
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004a38:	684e      	ldr	r6, [r1, #4]
 8004a3a:	f416 3f00 	tst.w	r6, #131072	@ 0x20000
 8004a3e:	d001      	beq.n	8004a44 <HAL_GPIO_Init+0xbc>
        {
          temp |= iocurrent;
 8004a40:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->EMR = temp;
 8004a44:	4c3f      	ldr	r4, [pc, #252]	@ (8004b44 <HAL_GPIO_Init+0x1bc>)
 8004a46:	6065      	str	r5, [r4, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004a48:	6824      	ldr	r4, [r4, #0]
        temp &= ~((uint32_t)iocurrent);
 8004a4a:	4022      	ands	r2, r4
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004a4c:	684d      	ldr	r5, [r1, #4]
 8004a4e:	f415 3f80 	tst.w	r5, #65536	@ 0x10000
 8004a52:	d001      	beq.n	8004a58 <HAL_GPIO_Init+0xd0>
        {
          temp |= iocurrent;
 8004a54:	ea4c 0204 	orr.w	r2, ip, r4
        }
        EXTI->IMR = temp;
 8004a58:	4c3a      	ldr	r4, [pc, #232]	@ (8004b44 <HAL_GPIO_Init+0x1bc>)
 8004a5a:	6022      	str	r2, [r4, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004a5c:	3301      	adds	r3, #1
 8004a5e:	2b0f      	cmp	r3, #15
 8004a60:	d86b      	bhi.n	8004b3a <HAL_GPIO_Init+0x1b2>
    ioposition = 0x01U << position;
 8004a62:	2201      	movs	r2, #1
 8004a64:	409a      	lsls	r2, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004a66:	680c      	ldr	r4, [r1, #0]
 8004a68:	ea04 0c02 	and.w	ip, r4, r2
    if(iocurrent == ioposition)
 8004a6c:	ea32 0404 	bics.w	r4, r2, r4
 8004a70:	d1f4      	bne.n	8004a5c <HAL_GPIO_Init+0xd4>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004a72:	684c      	ldr	r4, [r1, #4]
 8004a74:	f004 0403 	and.w	r4, r4, #3
 8004a78:	3c01      	subs	r4, #1
 8004a7a:	2c01      	cmp	r4, #1
 8004a7c:	d98b      	bls.n	8004996 <HAL_GPIO_Init+0xe>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004a7e:	684a      	ldr	r2, [r1, #4]
 8004a80:	f002 0203 	and.w	r2, r2, #3
 8004a84:	2a03      	cmp	r2, #3
 8004a86:	d009      	beq.n	8004a9c <HAL_GPIO_Init+0x114>
        temp = GPIOx->PUPDR;
 8004a88:	68c4      	ldr	r4, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004a8a:	005d      	lsls	r5, r3, #1
 8004a8c:	2203      	movs	r2, #3
 8004a8e:	40aa      	lsls	r2, r5
 8004a90:	ea24 0402 	bic.w	r4, r4, r2
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004a94:	688a      	ldr	r2, [r1, #8]
 8004a96:	40aa      	lsls	r2, r5
 8004a98:	4322      	orrs	r2, r4
        GPIOx->PUPDR = temp;
 8004a9a:	60c2      	str	r2, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004a9c:	684a      	ldr	r2, [r1, #4]
 8004a9e:	f002 0203 	and.w	r2, r2, #3
 8004aa2:	2a02      	cmp	r2, #2
 8004aa4:	d08e      	beq.n	80049c4 <HAL_GPIO_Init+0x3c>
      temp = GPIOx->MODER;
 8004aa6:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004aa8:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8004aac:	2203      	movs	r2, #3
 8004aae:	fa02 f20e 	lsl.w	r2, r2, lr
 8004ab2:	ea24 0402 	bic.w	r4, r4, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004ab6:	684a      	ldr	r2, [r1, #4]
 8004ab8:	f002 0203 	and.w	r2, r2, #3
 8004abc:	fa02 f20e 	lsl.w	r2, r2, lr
 8004ac0:	4322      	orrs	r2, r4
      GPIOx->MODER = temp;
 8004ac2:	6002      	str	r2, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004ac4:	684a      	ldr	r2, [r1, #4]
 8004ac6:	f412 3f40 	tst.w	r2, #196608	@ 0x30000
 8004aca:	d0c7      	beq.n	8004a5c <HAL_GPIO_Init+0xd4>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004acc:	2200      	movs	r2, #0
 8004ace:	9201      	str	r2, [sp, #4]
 8004ad0:	4a1d      	ldr	r2, [pc, #116]	@ (8004b48 <HAL_GPIO_Init+0x1c0>)
 8004ad2:	6c54      	ldr	r4, [r2, #68]	@ 0x44
 8004ad4:	f444 4480 	orr.w	r4, r4, #16384	@ 0x4000
 8004ad8:	6454      	str	r4, [r2, #68]	@ 0x44
 8004ada:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8004adc:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 8004ae0:	9201      	str	r2, [sp, #4]
 8004ae2:	9a01      	ldr	r2, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8004ae4:	089c      	lsrs	r4, r3, #2
 8004ae6:	1ca5      	adds	r5, r4, #2
 8004ae8:	4a15      	ldr	r2, [pc, #84]	@ (8004b40 <HAL_GPIO_Init+0x1b8>)
 8004aea:	f852 5025 	ldr.w	r5, [r2, r5, lsl #2]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004aee:	f003 0e03 	and.w	lr, r3, #3
 8004af2:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8004af6:	220f      	movs	r2, #15
 8004af8:	fa02 f20e 	lsl.w	r2, r2, lr
 8004afc:	ea25 0502 	bic.w	r5, r5, r2
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004b00:	4a12      	ldr	r2, [pc, #72]	@ (8004b4c <HAL_GPIO_Init+0x1c4>)
 8004b02:	4290      	cmp	r0, r2
 8004b04:	f43f af74 	beq.w	80049f0 <HAL_GPIO_Init+0x68>
 8004b08:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8004b0c:	4290      	cmp	r0, r2
 8004b0e:	d00e      	beq.n	8004b2e <HAL_GPIO_Init+0x1a6>
 8004b10:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8004b14:	4290      	cmp	r0, r2
 8004b16:	d00c      	beq.n	8004b32 <HAL_GPIO_Init+0x1aa>
 8004b18:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8004b1c:	4290      	cmp	r0, r2
 8004b1e:	d00a      	beq.n	8004b36 <HAL_GPIO_Init+0x1ae>
 8004b20:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8004b24:	4290      	cmp	r0, r2
 8004b26:	f43f af61 	beq.w	80049ec <HAL_GPIO_Init+0x64>
 8004b2a:	2207      	movs	r2, #7
 8004b2c:	e761      	b.n	80049f2 <HAL_GPIO_Init+0x6a>
 8004b2e:	2201      	movs	r2, #1
 8004b30:	e75f      	b.n	80049f2 <HAL_GPIO_Init+0x6a>
 8004b32:	2202      	movs	r2, #2
 8004b34:	e75d      	b.n	80049f2 <HAL_GPIO_Init+0x6a>
 8004b36:	2203      	movs	r2, #3
 8004b38:	e75b      	b.n	80049f2 <HAL_GPIO_Init+0x6a>
      }
    }
  }
}
 8004b3a:	b002      	add	sp, #8
 8004b3c:	bd70      	pop	{r4, r5, r6, pc}
 8004b3e:	4770      	bx	lr
 8004b40:	40013800 	.word	0x40013800
 8004b44:	40013c00 	.word	0x40013c00
 8004b48:	40023800 	.word	0x40023800
 8004b4c:	40020000 	.word	0x40020000

08004b50 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004b50:	6903      	ldr	r3, [r0, #16]
 8004b52:	4219      	tst	r1, r3
 8004b54:	d001      	beq.n	8004b5a <HAL_GPIO_ReadPin+0xa>
  {
    bitstatus = GPIO_PIN_SET;
 8004b56:	2001      	movs	r0, #1
 8004b58:	4770      	bx	lr
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004b5a:	2000      	movs	r0, #0
  }
  return bitstatus;
}
 8004b5c:	4770      	bx	lr

08004b5e <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004b5e:	b10a      	cbz	r2, 8004b64 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004b60:	6181      	str	r1, [r0, #24]
 8004b62:	4770      	bx	lr
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004b64:	0409      	lsls	r1, r1, #16
 8004b66:	6181      	str	r1, [r0, #24]
  }
}
 8004b68:	4770      	bx	lr

08004b6a <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004b6a:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004b6c:	ea01 0203 	and.w	r2, r1, r3
 8004b70:	ea21 0103 	bic.w	r1, r1, r3
 8004b74:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8004b78:	6181      	str	r1, [r0, #24]
}
 8004b7a:	4770      	bx	lr

08004b7c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004b7c:	b508      	push	{r3, lr}
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8004b7e:	4b05      	ldr	r3, [pc, #20]	@ (8004b94 <HAL_GPIO_EXTI_IRQHandler+0x18>)
 8004b80:	695b      	ldr	r3, [r3, #20]
 8004b82:	4203      	tst	r3, r0
 8004b84:	d100      	bne.n	8004b88 <HAL_GPIO_EXTI_IRQHandler+0xc>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
}
 8004b86:	bd08      	pop	{r3, pc}
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004b88:	4b02      	ldr	r3, [pc, #8]	@ (8004b94 <HAL_GPIO_EXTI_IRQHandler+0x18>)
 8004b8a:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004b8c:	f7fd ffd6 	bl	8002b3c <HAL_GPIO_EXTI_Callback>
}
 8004b90:	e7f9      	b.n	8004b86 <HAL_GPIO_EXTI_IRQHandler+0xa>
 8004b92:	bf00      	nop
 8004b94:	40013c00 	.word	0x40013c00

08004b98 <HAL_I2C_Init>:
{
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004b98:	2800      	cmp	r0, #0
 8004b9a:	f000 80cc 	beq.w	8004d36 <HAL_I2C_Init+0x19e>
{
 8004b9e:	b570      	push	{r4, r5, r6, lr}
 8004ba0:	4604      	mov	r4, r0
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004ba2:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d077      	beq.n	8004c9a <HAL_I2C_Init+0x102>
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004baa:	2324      	movs	r3, #36	@ 0x24
 8004bac:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004bb0:	6822      	ldr	r2, [r4, #0]
 8004bb2:	6813      	ldr	r3, [r2, #0]
 8004bb4:	f023 0301 	bic.w	r3, r3, #1
 8004bb8:	6013      	str	r3, [r2, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004bba:	6822      	ldr	r2, [r4, #0]
 8004bbc:	6813      	ldr	r3, [r2, #0]
 8004bbe:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004bc2:	6013      	str	r3, [r2, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004bc4:	6822      	ldr	r2, [r4, #0]
 8004bc6:	6813      	ldr	r3, [r2, #0]
 8004bc8:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8004bcc:	6013      	str	r3, [r2, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004bce:	f001 fa25 	bl	800601c <HAL_RCC_GetPCLK1Freq>

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004bd2:	6862      	ldr	r2, [r4, #4]
 8004bd4:	4b5a      	ldr	r3, [pc, #360]	@ (8004d40 <HAL_I2C_Init+0x1a8>)
 8004bd6:	429a      	cmp	r2, r3
 8004bd8:	d864      	bhi.n	8004ca4 <HAL_I2C_Init+0x10c>
 8004bda:	4b5a      	ldr	r3, [pc, #360]	@ (8004d44 <HAL_I2C_Init+0x1ac>)
 8004bdc:	4298      	cmp	r0, r3
 8004bde:	bf8c      	ite	hi
 8004be0:	2300      	movhi	r3, #0
 8004be2:	2301      	movls	r3, #1
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	f040 80a8 	bne.w	8004d3a <HAL_I2C_Init+0x1a2>
  {
    return HAL_ERROR;
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004bea:	4957      	ldr	r1, [pc, #348]	@ (8004d48 <HAL_I2C_Init+0x1b0>)
 8004bec:	fba1 3100 	umull	r3, r1, r1, r0
 8004bf0:	0c8b      	lsrs	r3, r1, #18

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004bf2:	6825      	ldr	r5, [r4, #0]
 8004bf4:	686a      	ldr	r2, [r5, #4]
 8004bf6:	f022 023f 	bic.w	r2, r2, #63	@ 0x3f
 8004bfa:	ea42 4291 	orr.w	r2, r2, r1, lsr #18
 8004bfe:	606a      	str	r2, [r5, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004c00:	6821      	ldr	r1, [r4, #0]
 8004c02:	6a0a      	ldr	r2, [r1, #32]
 8004c04:	f022 023f 	bic.w	r2, r2, #63	@ 0x3f
 8004c08:	6866      	ldr	r6, [r4, #4]
 8004c0a:	4d4d      	ldr	r5, [pc, #308]	@ (8004d40 <HAL_I2C_Init+0x1a8>)
 8004c0c:	42ae      	cmp	r6, r5
 8004c0e:	d84f      	bhi.n	8004cb0 <HAL_I2C_Init+0x118>
 8004c10:	3301      	adds	r3, #1
 8004c12:	4313      	orrs	r3, r2
 8004c14:	620b      	str	r3, [r1, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004c16:	6821      	ldr	r1, [r4, #0]
 8004c18:	69ca      	ldr	r2, [r1, #28]
 8004c1a:	f422 424f 	bic.w	r2, r2, #52992	@ 0xcf00
 8004c1e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8004c22:	6865      	ldr	r5, [r4, #4]
 8004c24:	4b46      	ldr	r3, [pc, #280]	@ (8004d40 <HAL_I2C_Init+0x1a8>)
 8004c26:	429d      	cmp	r5, r3
 8004c28:	d84c      	bhi.n	8004cc4 <HAL_I2C_Init+0x12c>
 8004c2a:	1e43      	subs	r3, r0, #1
 8004c2c:	006d      	lsls	r5, r5, #1
 8004c2e:	fbb3 f3f5 	udiv	r3, r3, r5
 8004c32:	3301      	adds	r3, #1
 8004c34:	f640 70fc 	movw	r0, #4092	@ 0xffc
 8004c38:	4203      	tst	r3, r0
 8004c3a:	d078      	beq.n	8004d2e <HAL_I2C_Init+0x196>
 8004c3c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004c40:	431a      	orrs	r2, r3
 8004c42:	61ca      	str	r2, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004c44:	6821      	ldr	r1, [r4, #0]
 8004c46:	680b      	ldr	r3, [r1, #0]
 8004c48:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8004c4c:	69e2      	ldr	r2, [r4, #28]
 8004c4e:	6a20      	ldr	r0, [r4, #32]
 8004c50:	4302      	orrs	r2, r0
 8004c52:	4313      	orrs	r3, r2
 8004c54:	600b      	str	r3, [r1, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004c56:	6821      	ldr	r1, [r4, #0]
 8004c58:	688b      	ldr	r3, [r1, #8]
 8004c5a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8004c5e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8004c62:	6922      	ldr	r2, [r4, #16]
 8004c64:	68e0      	ldr	r0, [r4, #12]
 8004c66:	4302      	orrs	r2, r0
 8004c68:	4313      	orrs	r3, r2
 8004c6a:	608b      	str	r3, [r1, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004c6c:	6821      	ldr	r1, [r4, #0]
 8004c6e:	68cb      	ldr	r3, [r1, #12]
 8004c70:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8004c74:	6962      	ldr	r2, [r4, #20]
 8004c76:	69a0      	ldr	r0, [r4, #24]
 8004c78:	4302      	orrs	r2, r0
 8004c7a:	4313      	orrs	r3, r2
 8004c7c:	60cb      	str	r3, [r1, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004c7e:	6822      	ldr	r2, [r4, #0]
 8004c80:	6813      	ldr	r3, [r2, #0]
 8004c82:	f043 0301 	orr.w	r3, r3, #1
 8004c86:	6013      	str	r3, [r2, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004c88:	2000      	movs	r0, #0
 8004c8a:	6420      	str	r0, [r4, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004c8c:	2320      	movs	r3, #32
 8004c8e:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004c92:	6320      	str	r0, [r4, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c94:	f884 003e 	strb.w	r0, [r4, #62]	@ 0x3e

  return HAL_OK;
}
 8004c98:	bd70      	pop	{r4, r5, r6, pc}
    hi2c->Lock = HAL_UNLOCKED;
 8004c9a:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
    HAL_I2C_MspInit(hi2c);
 8004c9e:	f7fd fcc5 	bl	800262c <HAL_I2C_MspInit>
 8004ca2:	e782      	b.n	8004baa <HAL_I2C_Init+0x12>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004ca4:	4b29      	ldr	r3, [pc, #164]	@ (8004d4c <HAL_I2C_Init+0x1b4>)
 8004ca6:	4298      	cmp	r0, r3
 8004ca8:	bf8c      	ite	hi
 8004caa:	2300      	movhi	r3, #0
 8004cac:	2301      	movls	r3, #1
 8004cae:	e799      	b.n	8004be4 <HAL_I2C_Init+0x4c>
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004cb0:	f44f 7596 	mov.w	r5, #300	@ 0x12c
 8004cb4:	fb05 f303 	mul.w	r3, r5, r3
 8004cb8:	4d25      	ldr	r5, [pc, #148]	@ (8004d50 <HAL_I2C_Init+0x1b8>)
 8004cba:	fba5 5303 	umull	r5, r3, r5, r3
 8004cbe:	099b      	lsrs	r3, r3, #6
 8004cc0:	3301      	adds	r3, #1
 8004cc2:	e7a6      	b.n	8004c12 <HAL_I2C_Init+0x7a>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004cc4:	68a6      	ldr	r6, [r4, #8]
 8004cc6:	b9be      	cbnz	r6, 8004cf8 <HAL_I2C_Init+0x160>
 8004cc8:	1e43      	subs	r3, r0, #1
 8004cca:	eb05 0c45 	add.w	ip, r5, r5, lsl #1
 8004cce:	fbb3 f3fc 	udiv	r3, r3, ip
 8004cd2:	3301      	adds	r3, #1
 8004cd4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004cd8:	fab3 f383 	clz	r3, r3
 8004cdc:	095b      	lsrs	r3, r3, #5
 8004cde:	bb43      	cbnz	r3, 8004d32 <HAL_I2C_Init+0x19a>
 8004ce0:	b9c6      	cbnz	r6, 8004d14 <HAL_I2C_Init+0x17c>
 8004ce2:	1e43      	subs	r3, r0, #1
 8004ce4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004ce8:	fbb3 f3f5 	udiv	r3, r3, r5
 8004cec:	3301      	adds	r3, #1
 8004cee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004cf2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004cf6:	e7a3      	b.n	8004c40 <HAL_I2C_Init+0xa8>
 8004cf8:	1e43      	subs	r3, r0, #1
 8004cfa:	eb05 0c85 	add.w	ip, r5, r5, lsl #2
 8004cfe:	eb0c 0c8c 	add.w	ip, ip, ip, lsl #2
 8004d02:	fbb3 f3fc 	udiv	r3, r3, ip
 8004d06:	3301      	adds	r3, #1
 8004d08:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004d0c:	fab3 f383 	clz	r3, r3
 8004d10:	095b      	lsrs	r3, r3, #5
 8004d12:	e7e4      	b.n	8004cde <HAL_I2C_Init+0x146>
 8004d14:	1e43      	subs	r3, r0, #1
 8004d16:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 8004d1a:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 8004d1e:	fbb3 f3f5 	udiv	r3, r3, r5
 8004d22:	3301      	adds	r3, #1
 8004d24:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004d28:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004d2c:	e788      	b.n	8004c40 <HAL_I2C_Init+0xa8>
 8004d2e:	2304      	movs	r3, #4
 8004d30:	e786      	b.n	8004c40 <HAL_I2C_Init+0xa8>
 8004d32:	2301      	movs	r3, #1
 8004d34:	e784      	b.n	8004c40 <HAL_I2C_Init+0xa8>
    return HAL_ERROR;
 8004d36:	2001      	movs	r0, #1
}
 8004d38:	4770      	bx	lr
    return HAL_ERROR;
 8004d3a:	2001      	movs	r0, #1
 8004d3c:	e7ac      	b.n	8004c98 <HAL_I2C_Init+0x100>
 8004d3e:	bf00      	nop
 8004d40:	000186a0 	.word	0x000186a0
 8004d44:	001e847f 	.word	0x001e847f
 8004d48:	431bde83 	.word	0x431bde83
 8004d4c:	003d08ff 	.word	0x003d08ff
 8004d50:	10624dd3 	.word	0x10624dd3

08004d54 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004d54:	b500      	push	{lr}
 8004d56:	b083      	sub	sp, #12

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004d58:	2200      	movs	r2, #0
 8004d5a:	9200      	str	r2, [sp, #0]
 8004d5c:	4b0d      	ldr	r3, [pc, #52]	@ (8004d94 <HAL_MspInit+0x40>)
 8004d5e:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8004d60:	f441 4180 	orr.w	r1, r1, #16384	@ 0x4000
 8004d64:	6459      	str	r1, [r3, #68]	@ 0x44
 8004d66:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8004d68:	f401 4180 	and.w	r1, r1, #16384	@ 0x4000
 8004d6c:	9100      	str	r1, [sp, #0]
 8004d6e:	9900      	ldr	r1, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004d70:	9201      	str	r2, [sp, #4]
 8004d72:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 8004d74:	f041 5180 	orr.w	r1, r1, #268435456	@ 0x10000000
 8004d78:	6419      	str	r1, [r3, #64]	@ 0x40
 8004d7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d7c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004d80:	9301      	str	r3, [sp, #4]
 8004d82:	9b01      	ldr	r3, [sp, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8004d84:	210f      	movs	r1, #15
 8004d86:	f06f 0001 	mvn.w	r0, #1
 8004d8a:	f7ff fbd5 	bl	8004538 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004d8e:	b003      	add	sp, #12
 8004d90:	f85d fb04 	ldr.w	pc, [sp], #4
 8004d94:	40023800 	.word	0x40023800

08004d98 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004d98:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004d9c:	b083      	sub	sp, #12
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004d9e:	f8d0 8000 	ldr.w	r8, [r0]
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];

  if (ep->xfer_count > ep->xfer_len)
 8004da2:	eb01 03c1 	add.w	r3, r1, r1, lsl #3
 8004da6:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8004daa:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004dac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004dae:	429a      	cmp	r2, r3
 8004db0:	d854      	bhi.n	8004e5c <PCD_WriteEmptyTxFifo+0xc4>
 8004db2:	4607      	mov	r7, r0
 8004db4:	460c      	mov	r4, r1
  {
    return HAL_ERROR;
  }

  len = ep->xfer_len - ep->xfer_count;
 8004db6:	1a9b      	subs	r3, r3, r2

  if (len > ep->maxpacket)
 8004db8:	eb01 02c1 	add.w	r2, r1, r1, lsl #3
 8004dbc:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8004dc0:	69d2      	ldr	r2, [r2, #28]
 8004dc2:	429a      	cmp	r2, r3
 8004dc4:	d300      	bcc.n	8004dc8 <PCD_WriteEmptyTxFifo+0x30>
  len = ep->xfer_len - ep->xfer_count;
 8004dc6:	461a      	mov	r2, r3
  {
    len = ep->maxpacket;
  }

  len32b = (len + 3U) / 4U;
 8004dc8:	f102 0903 	add.w	r9, r2, #3
 8004dcc:	ea4f 0999 	mov.w	r9, r9, lsr #2

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004dd0:	e015      	b.n	8004dfe <PCD_WriteEmptyTxFifo+0x66>

    if (len > ep->maxpacket)
    {
      len = ep->maxpacket;
    }
    len32b = (len + 3U) / 4U;
 8004dd2:	f106 0903 	add.w	r9, r6, #3
 8004dd6:	ea4f 0999 	mov.w	r9, r9, lsr #2

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
                          (uint8_t)hpcd->Init.dma_enable);
 8004dda:	79bb      	ldrb	r3, [r7, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004ddc:	eb04 05c4 	add.w	r5, r4, r4, lsl #3
 8004de0:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8004de4:	6a29      	ldr	r1, [r5, #32]
 8004de6:	9300      	str	r3, [sp, #0]
 8004de8:	b2b3      	uxth	r3, r6
 8004dea:	b2e2      	uxtb	r2, r4
 8004dec:	4640      	mov	r0, r8
 8004dee:	f002 fa9a 	bl	8007326 <USB_WritePacket>

    ep->xfer_buff  += len;
 8004df2:	6a2b      	ldr	r3, [r5, #32]
 8004df4:	4433      	add	r3, r6
 8004df6:	622b      	str	r3, [r5, #32]
    ep->xfer_count += len;
 8004df8:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 8004dfa:	4433      	add	r3, r6
 8004dfc:	62ab      	str	r3, [r5, #40]	@ 0x28
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004dfe:	eb08 1344 	add.w	r3, r8, r4, lsl #5
 8004e02:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004e06:	699b      	ldr	r3, [r3, #24]
 8004e08:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004e0a:	454b      	cmp	r3, r9
 8004e0c:	d312      	bcc.n	8004e34 <PCD_WriteEmptyTxFifo+0x9c>
 8004e0e:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
 8004e12:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8004e16:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004e18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004e1a:	429a      	cmp	r2, r3
 8004e1c:	d20a      	bcs.n	8004e34 <PCD_WriteEmptyTxFifo+0x9c>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004e1e:	b14b      	cbz	r3, 8004e34 <PCD_WriteEmptyTxFifo+0x9c>
    len = ep->xfer_len - ep->xfer_count;
 8004e20:	1a9b      	subs	r3, r3, r2
    if (len > ep->maxpacket)
 8004e22:	eb04 02c4 	add.w	r2, r4, r4, lsl #3
 8004e26:	eb07 0282 	add.w	r2, r7, r2, lsl #2
 8004e2a:	69d6      	ldr	r6, [r2, #28]
 8004e2c:	429e      	cmp	r6, r3
 8004e2e:	d3d0      	bcc.n	8004dd2 <PCD_WriteEmptyTxFifo+0x3a>
    len = ep->xfer_len - ep->xfer_count;
 8004e30:	461e      	mov	r6, r3
 8004e32:	e7ce      	b.n	8004dd2 <PCD_WriteEmptyTxFifo+0x3a>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8004e34:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
 8004e38:	eb07 0783 	add.w	r7, r7, r3, lsl #2
 8004e3c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004e3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e40:	429a      	cmp	r2, r3
 8004e42:	d80f      	bhi.n	8004e64 <PCD_WriteEmptyTxFifo+0xcc>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004e44:	f004 040f 	and.w	r4, r4, #15
 8004e48:	2201      	movs	r2, #1
 8004e4a:	40a2      	lsls	r2, r4
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004e4c:	f8d8 3834 	ldr.w	r3, [r8, #2100]	@ 0x834
 8004e50:	ea23 0302 	bic.w	r3, r3, r2
 8004e54:	f8c8 3834 	str.w	r3, [r8, #2100]	@ 0x834
  }

  return HAL_OK;
 8004e58:	2000      	movs	r0, #0
 8004e5a:	e000      	b.n	8004e5e <PCD_WriteEmptyTxFifo+0xc6>
    return HAL_ERROR;
 8004e5c:	2001      	movs	r0, #1
}
 8004e5e:	b003      	add	sp, #12
 8004e60:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  return HAL_OK;
 8004e64:	2000      	movs	r0, #0
 8004e66:	e7fa      	b.n	8004e5e <PCD_WriteEmptyTxFifo+0xc6>

08004e68 <HAL_PCD_Init>:
{
 8004e68:	b530      	push	{r4, r5, lr}
 8004e6a:	b083      	sub	sp, #12
  if (hpcd == NULL)
 8004e6c:	2800      	cmp	r0, #0
 8004e6e:	d07a      	beq.n	8004f66 <HAL_PCD_Init+0xfe>
 8004e70:	4604      	mov	r4, r0
  USBx = hpcd->Instance;
 8004e72:	6805      	ldr	r5, [r0, #0]
  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004e74:	f890 3495 	ldrb.w	r3, [r0, #1173]	@ 0x495
 8004e78:	b1c3      	cbz	r3, 8004eac <HAL_PCD_Init+0x44>
  hpcd->State = HAL_PCD_STATE_BUSY;
 8004e7a:	2303      	movs	r3, #3
 8004e7c:	f884 3495 	strb.w	r3, [r4, #1173]	@ 0x495
  if (USBx == USB_OTG_FS)
 8004e80:	f1b5 4fa0 	cmp.w	r5, #1342177280	@ 0x50000000
 8004e84:	d017      	beq.n	8004eb6 <HAL_PCD_Init+0x4e>
  __HAL_PCD_DISABLE(hpcd);
 8004e86:	6820      	ldr	r0, [r4, #0]
 8004e88:	f001 fffe 	bl	8006e88 <USB_DisableGlobalInt>
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004e8c:	7c23      	ldrb	r3, [r4, #16]
 8004e8e:	f88d 3000 	strb.w	r3, [sp]
 8004e92:	1d23      	adds	r3, r4, #4
 8004e94:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004e96:	6820      	ldr	r0, [r4, #0]
 8004e98:	f001 ff35 	bl	8006d06 <USB_CoreInit>
 8004e9c:	b170      	cbz	r0, 8004ebc <HAL_PCD_Init+0x54>
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004e9e:	2302      	movs	r3, #2
 8004ea0:	f884 3495 	strb.w	r3, [r4, #1173]	@ 0x495
    return HAL_ERROR;
 8004ea4:	2501      	movs	r5, #1
}
 8004ea6:	4628      	mov	r0, r5
 8004ea8:	b003      	add	sp, #12
 8004eaa:	bd30      	pop	{r4, r5, pc}
    hpcd->Lock = HAL_UNLOCKED;
 8004eac:	f880 3494 	strb.w	r3, [r0, #1172]	@ 0x494
    HAL_PCD_MspInit(hpcd);
 8004eb0:	f004 fd84 	bl	80099bc <HAL_PCD_MspInit>
 8004eb4:	e7e1      	b.n	8004e7a <HAL_PCD_Init+0x12>
    hpcd->Init.dma_enable = 0U;
 8004eb6:	2300      	movs	r3, #0
 8004eb8:	71a3      	strb	r3, [r4, #6]
 8004eba:	e7e4      	b.n	8004e86 <HAL_PCD_Init+0x1e>
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8004ebc:	2100      	movs	r1, #0
 8004ebe:	6820      	ldr	r0, [r4, #0]
 8004ec0:	f002 fc47 	bl	8007752 <USB_SetCurrentMode>
 8004ec4:	4602      	mov	r2, r0
 8004ec6:	b9b8      	cbnz	r0, 8004ef8 <HAL_PCD_Init+0x90>
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004ec8:	4603      	mov	r3, r0
 8004eca:	7920      	ldrb	r0, [r4, #4]
 8004ecc:	4298      	cmp	r0, r3
 8004ece:	d918      	bls.n	8004f02 <HAL_PCD_Init+0x9a>
    hpcd->IN_ep[i].is_in = 1U;
 8004ed0:	eb03 01c3 	add.w	r1, r3, r3, lsl #3
 8004ed4:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8004ed8:	2001      	movs	r0, #1
 8004eda:	7548      	strb	r0, [r1, #21]
    hpcd->IN_ep[i].num = i;
 8004edc:	750b      	strb	r3, [r1, #20]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004ede:	85cb      	strh	r3, [r1, #46]	@ 0x2e
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004ee0:	2000      	movs	r0, #0
 8004ee2:	7608      	strb	r0, [r1, #24]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004ee4:	61c8      	str	r0, [r1, #28]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004ee6:	6208      	str	r0, [r1, #32]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004ee8:	eb03 01c3 	add.w	r1, r3, r3, lsl #3
 8004eec:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8004ef0:	6248      	str	r0, [r1, #36]	@ 0x24
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004ef2:	3301      	adds	r3, #1
 8004ef4:	b2db      	uxtb	r3, r3
 8004ef6:	e7e8      	b.n	8004eca <HAL_PCD_Init+0x62>
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004ef8:	2302      	movs	r3, #2
 8004efa:	f884 3495 	strb.w	r3, [r4, #1173]	@ 0x495
    return HAL_ERROR;
 8004efe:	2501      	movs	r5, #1
 8004f00:	e7d1      	b.n	8004ea6 <HAL_PCD_Init+0x3e>
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004f02:	4290      	cmp	r0, r2
 8004f04:	d917      	bls.n	8004f36 <HAL_PCD_Init+0xce>
    hpcd->OUT_ep[i].is_in = 0U;
 8004f06:	eb02 03c2 	add.w	r3, r2, r2, lsl #3
 8004f0a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8004f0e:	2100      	movs	r1, #0
 8004f10:	f883 1255 	strb.w	r1, [r3, #597]	@ 0x255
    hpcd->OUT_ep[i].num = i;
 8004f14:	f883 2254 	strb.w	r2, [r3, #596]	@ 0x254
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004f18:	f883 1258 	strb.w	r1, [r3, #600]	@ 0x258
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004f1c:	f8c3 125c 	str.w	r1, [r3, #604]	@ 0x25c
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004f20:	f8c3 1260 	str.w	r1, [r3, #608]	@ 0x260
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004f24:	eb02 03c2 	add.w	r3, r2, r2, lsl #3
 8004f28:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8004f2c:	f8c3 1264 	str.w	r1, [r3, #612]	@ 0x264
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004f30:	3201      	adds	r2, #1
 8004f32:	b2d2      	uxtb	r2, r2
 8004f34:	e7e5      	b.n	8004f02 <HAL_PCD_Init+0x9a>
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004f36:	7c23      	ldrb	r3, [r4, #16]
 8004f38:	f88d 3000 	strb.w	r3, [sp]
 8004f3c:	1d23      	adds	r3, r4, #4
 8004f3e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004f40:	6820      	ldr	r0, [r4, #0]
 8004f42:	f001 fff7 	bl	8006f34 <USB_DevInit>
 8004f46:	4605      	mov	r5, r0
 8004f48:	b120      	cbz	r0, 8004f54 <HAL_PCD_Init+0xec>
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004f4a:	2302      	movs	r3, #2
 8004f4c:	f884 3495 	strb.w	r3, [r4, #1173]	@ 0x495
    return HAL_ERROR;
 8004f50:	2501      	movs	r5, #1
 8004f52:	e7a8      	b.n	8004ea6 <HAL_PCD_Init+0x3e>
  hpcd->USB_Address = 0U;
 8004f54:	2300      	movs	r3, #0
 8004f56:	7463      	strb	r3, [r4, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8004f58:	2301      	movs	r3, #1
 8004f5a:	f884 3495 	strb.w	r3, [r4, #1173]	@ 0x495
  (void)USB_DevDisconnect(hpcd->Instance);
 8004f5e:	6820      	ldr	r0, [r4, #0]
 8004f60:	f002 fbb6 	bl	80076d0 <USB_DevDisconnect>
  return HAL_OK;
 8004f64:	e79f      	b.n	8004ea6 <HAL_PCD_Init+0x3e>
    return HAL_ERROR;
 8004f66:	2501      	movs	r5, #1
 8004f68:	e79d      	b.n	8004ea6 <HAL_PCD_Init+0x3e>

08004f6a <HAL_PCD_Start>:
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004f6a:	6803      	ldr	r3, [r0, #0]
  __HAL_LOCK(hpcd);
 8004f6c:	f890 2494 	ldrb.w	r2, [r0, #1172]	@ 0x494
 8004f70:	2a01      	cmp	r2, #1
 8004f72:	d01a      	beq.n	8004faa <HAL_PCD_Start+0x40>
{
 8004f74:	b510      	push	{r4, lr}
 8004f76:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 8004f78:	2201      	movs	r2, #1
 8004f7a:	f880 2494 	strb.w	r2, [r0, #1172]	@ 0x494
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8004f7e:	68da      	ldr	r2, [r3, #12]
 8004f80:	f012 0f40 	tst.w	r2, #64	@ 0x40
 8004f84:	d002      	beq.n	8004f8c <HAL_PCD_Start+0x22>
      (hpcd->Init.battery_charging_enable == 1U))
 8004f86:	7b42      	ldrb	r2, [r0, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8004f88:	2a01      	cmp	r2, #1
 8004f8a:	d009      	beq.n	8004fa0 <HAL_PCD_Start+0x36>
  __HAL_PCD_ENABLE(hpcd);
 8004f8c:	6820      	ldr	r0, [r4, #0]
 8004f8e:	f001 ff75 	bl	8006e7c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8004f92:	6820      	ldr	r0, [r4, #0]
 8004f94:	f002 fb8e 	bl	80076b4 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8004f98:	2000      	movs	r0, #0
 8004f9a:	f884 0494 	strb.w	r0, [r4, #1172]	@ 0x494
}
 8004f9e:	bd10      	pop	{r4, pc}
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004fa0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004fa2:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8004fa6:	639a      	str	r2, [r3, #56]	@ 0x38
 8004fa8:	e7f0      	b.n	8004f8c <HAL_PCD_Start+0x22>
  __HAL_LOCK(hpcd);
 8004faa:	2002      	movs	r0, #2
}
 8004fac:	4770      	bx	lr
	...

08004fb0 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004fb0:	b570      	push	{r4, r5, r6, lr}
 8004fb2:	4604      	mov	r4, r0
 8004fb4:	460d      	mov	r5, r1
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004fb6:	6800      	ldr	r0, [r0, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8004fb8:	6c06      	ldr	r6, [r0, #64]	@ 0x40
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004fba:	eb00 1341 	add.w	r3, r0, r1, lsl #5
 8004fbe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004fc2:	689a      	ldr	r2, [r3, #8]

  if (hpcd->Init.dma_enable == 1U)
 8004fc4:	79a1      	ldrb	r1, [r4, #6]
 8004fc6:	2901      	cmp	r1, #1
 8004fc8:	d011      	beq.n	8004fee <PCD_EP_OutXfrComplete_int+0x3e>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8004fca:	4938      	ldr	r1, [pc, #224]	@ (80050ac <PCD_EP_OutXfrComplete_int+0xfc>)
 8004fcc:	428e      	cmp	r6, r1
 8004fce:	d056      	beq.n	800507e <PCD_EP_OutXfrComplete_int+0xce>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8004fd0:	b93d      	cbnz	r5, 8004fe2 <PCD_EP_OutXfrComplete_int+0x32>
 8004fd2:	eb05 03c5 	add.w	r3, r5, r5, lsl #3
 8004fd6:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8004fda:	f8d3 3264 	ldr.w	r3, [r3, #612]	@ 0x264
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d05e      	beq.n	80050a0 <PCD_EP_OutXfrComplete_int+0xf0>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004fe2:	b2e9      	uxtb	r1, r5
 8004fe4:	4620      	mov	r0, r4
 8004fe6:	f004 fd35 	bl	8009a54 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
}
 8004fea:	2000      	movs	r0, #0
 8004fec:	bd70      	pop	{r4, r5, r6, pc}
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8004fee:	f012 0f08 	tst.w	r2, #8
 8004ff2:	d009      	beq.n	8005008 <PCD_EP_OutXfrComplete_int+0x58>
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004ff4:	492e      	ldr	r1, [pc, #184]	@ (80050b0 <PCD_EP_OutXfrComplete_int+0x100>)
 8004ff6:	428e      	cmp	r6, r1
 8004ff8:	d9f7      	bls.n	8004fea <PCD_EP_OutXfrComplete_int+0x3a>
 8004ffa:	f412 4f00 	tst.w	r2, #32768	@ 0x8000
 8004ffe:	d0f4      	beq.n	8004fea <PCD_EP_OutXfrComplete_int+0x3a>
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005000:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8005004:	609a      	str	r2, [r3, #8]
 8005006:	e7f0      	b.n	8004fea <PCD_EP_OutXfrComplete_int+0x3a>
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8005008:	f012 0f20 	tst.w	r2, #32
 800500c:	d002      	beq.n	8005014 <PCD_EP_OutXfrComplete_int+0x64>
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800500e:	2220      	movs	r2, #32
 8005010:	609a      	str	r2, [r3, #8]
 8005012:	e7ea      	b.n	8004fea <PCD_EP_OutXfrComplete_int+0x3a>
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8005014:	f012 0f28 	tst.w	r2, #40	@ 0x28
 8005018:	d1e7      	bne.n	8004fea <PCD_EP_OutXfrComplete_int+0x3a>
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800501a:	4925      	ldr	r1, [pc, #148]	@ (80050b0 <PCD_EP_OutXfrComplete_int+0x100>)
 800501c:	428e      	cmp	r6, r1
 800501e:	d906      	bls.n	800502e <PCD_EP_OutXfrComplete_int+0x7e>
 8005020:	f412 4f00 	tst.w	r2, #32768	@ 0x8000
 8005024:	d003      	beq.n	800502e <PCD_EP_OutXfrComplete_int+0x7e>
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005026:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800502a:	609a      	str	r2, [r3, #8]
 800502c:	e7dd      	b.n	8004fea <PCD_EP_OutXfrComplete_int+0x3a>
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800502e:	eb05 02c5 	add.w	r2, r5, r5, lsl #3
 8005032:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8005036:	f8d2 1274 	ldr.w	r1, [r2, #628]	@ 0x274
 800503a:	691b      	ldr	r3, [r3, #16]
 800503c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005040:	1acb      	subs	r3, r1, r3
 8005042:	f8c2 3268 	str.w	r3, [r2, #616]	@ 0x268
        if (epnum == 0U)
 8005046:	b97d      	cbnz	r5, 8005068 <PCD_EP_OutXfrComplete_int+0xb8>
          if (ep->xfer_len == 0U)
 8005048:	eb05 02c5 	add.w	r2, r5, r5, lsl #3
 800504c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8005050:	f8d2 2264 	ldr.w	r2, [r2, #612]	@ 0x264
 8005054:	b16a      	cbz	r2, 8005072 <PCD_EP_OutXfrComplete_int+0xc2>
            ep->xfer_buff += ep->xfer_count;
 8005056:	eb05 02c5 	add.w	r2, r5, r5, lsl #3
 800505a:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800505e:	f8d2 1260 	ldr.w	r1, [r2, #608]	@ 0x260
 8005062:	4419      	add	r1, r3
 8005064:	f8c2 1260 	str.w	r1, [r2, #608]	@ 0x260
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005068:	b2e9      	uxtb	r1, r5
 800506a:	4620      	mov	r0, r4
 800506c:	f004 fcf2 	bl	8009a54 <HAL_PCD_DataOutStageCallback>
 8005070:	e7bb      	b.n	8004fea <PCD_EP_OutXfrComplete_int+0x3a>
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005072:	f204 429c 	addw	r2, r4, #1180	@ 0x49c
 8005076:	2101      	movs	r1, #1
 8005078:	f002 fbaa 	bl	80077d0 <USB_EP0_OutStart>
 800507c:	e7f4      	b.n	8005068 <PCD_EP_OutXfrComplete_int+0xb8>
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800507e:	f412 4f00 	tst.w	r2, #32768	@ 0x8000
 8005082:	d003      	beq.n	800508c <PCD_EP_OutXfrComplete_int+0xdc>
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005084:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8005088:	609a      	str	r2, [r3, #8]
 800508a:	e7ae      	b.n	8004fea <PCD_EP_OutXfrComplete_int+0x3a>
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800508c:	f012 0f20 	tst.w	r2, #32
 8005090:	d001      	beq.n	8005096 <PCD_EP_OutXfrComplete_int+0xe6>
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005092:	2220      	movs	r2, #32
 8005094:	609a      	str	r2, [r3, #8]
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005096:	b2e9      	uxtb	r1, r5
 8005098:	4620      	mov	r0, r4
 800509a:	f004 fcdb 	bl	8009a54 <HAL_PCD_DataOutStageCallback>
 800509e:	e7a4      	b.n	8004fea <PCD_EP_OutXfrComplete_int+0x3a>
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80050a0:	f204 429c 	addw	r2, r4, #1180	@ 0x49c
 80050a4:	2100      	movs	r1, #0
 80050a6:	f002 fb93 	bl	80077d0 <USB_EP0_OutStart>
 80050aa:	e79a      	b.n	8004fe2 <PCD_EP_OutXfrComplete_int+0x32>
 80050ac:	4f54310a 	.word	0x4f54310a
 80050b0:	4f54300a 	.word	0x4f54300a

080050b4 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80050b4:	b538      	push	{r3, r4, r5, lr}
 80050b6:	4604      	mov	r4, r0
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80050b8:	6803      	ldr	r3, [r0, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80050ba:	6c1d      	ldr	r5, [r3, #64]	@ 0x40
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80050bc:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 80050c0:	f8d3 1b08 	ldr.w	r1, [r3, #2824]	@ 0xb08

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80050c4:	4a0e      	ldr	r2, [pc, #56]	@ (8005100 <PCD_EP_OutSetupPacket_int+0x4c>)
 80050c6:	4295      	cmp	r5, r2
 80050c8:	d907      	bls.n	80050da <PCD_EP_OutSetupPacket_int+0x26>
 80050ca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80050ce:	f411 4f00 	tst.w	r1, #32768	@ 0x8000
 80050d2:	d002      	beq.n	80050da <PCD_EP_OutSetupPacket_int+0x26>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80050d4:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80050d8:	609a      	str	r2, [r3, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80050da:	4620      	mov	r0, r4
 80050dc:	f004 fcb2 	bl	8009a44 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80050e0:	4b07      	ldr	r3, [pc, #28]	@ (8005100 <PCD_EP_OutSetupPacket_int+0x4c>)
 80050e2:	429d      	cmp	r5, r3
 80050e4:	d902      	bls.n	80050ec <PCD_EP_OutSetupPacket_int+0x38>
 80050e6:	79a3      	ldrb	r3, [r4, #6]
 80050e8:	2b01      	cmp	r3, #1
 80050ea:	d001      	beq.n	80050f0 <PCD_EP_OutSetupPacket_int+0x3c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
  }

  return HAL_OK;
}
 80050ec:	2000      	movs	r0, #0
 80050ee:	bd38      	pop	{r3, r4, r5, pc}
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80050f0:	f204 429c 	addw	r2, r4, #1180	@ 0x49c
 80050f4:	2101      	movs	r1, #1
 80050f6:	6820      	ldr	r0, [r4, #0]
 80050f8:	f002 fb6a 	bl	80077d0 <USB_EP0_OutStart>
 80050fc:	e7f6      	b.n	80050ec <PCD_EP_OutSetupPacket_int+0x38>
 80050fe:	bf00      	nop
 8005100:	4f54300a 	.word	0x4f54300a

08005104 <HAL_PCD_SetAddress>:
  __HAL_LOCK(hpcd);
 8005104:	f890 3494 	ldrb.w	r3, [r0, #1172]	@ 0x494
 8005108:	2b01      	cmp	r3, #1
 800510a:	d00c      	beq.n	8005126 <HAL_PCD_SetAddress+0x22>
{
 800510c:	b510      	push	{r4, lr}
 800510e:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 8005110:	2301      	movs	r3, #1
 8005112:	f880 3494 	strb.w	r3, [r0, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8005116:	7441      	strb	r1, [r0, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8005118:	6800      	ldr	r0, [r0, #0]
 800511a:	f002 fabb 	bl	8007694 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800511e:	2000      	movs	r0, #0
 8005120:	f884 0494 	strb.w	r0, [r4, #1172]	@ 0x494
}
 8005124:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 8005126:	2002      	movs	r0, #2
}
 8005128:	4770      	bx	lr

0800512a <HAL_PCD_EP_Open>:
{
 800512a:	b538      	push	{r3, r4, r5, lr}
 800512c:	4605      	mov	r5, r0
 800512e:	468c      	mov	ip, r1
  if ((ep_addr & 0x80U) == 0x80U)
 8005130:	f011 0f80 	tst.w	r1, #128	@ 0x80
 8005134:	d12b      	bne.n	800518e <HAL_PCD_EP_Open+0x64>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005136:	f001 0e0f 	and.w	lr, r1, #15
 800513a:	eb0e 04ce 	add.w	r4, lr, lr, lsl #3
 800513e:	00a4      	lsls	r4, r4, #2
 8005140:	f504 7414 	add.w	r4, r4, #592	@ 0x250
 8005144:	4404      	add	r4, r0
 8005146:	1d21      	adds	r1, r4, #4
    ep->is_in = 0U;
 8005148:	eb0e 0ece 	add.w	lr, lr, lr, lsl #3
 800514c:	eb00 0e8e 	add.w	lr, r0, lr, lsl #2
 8005150:	2000      	movs	r0, #0
 8005152:	f88e 0255 	strb.w	r0, [lr, #597]	@ 0x255
  ep->num = ep_addr & EP_ADDR_MSK;
 8005156:	f00c 0c0f 	and.w	ip, ip, #15
 800515a:	f881 c000 	strb.w	ip, [r1]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 800515e:	f3c2 020a 	ubfx	r2, r2, #0, #11
 8005162:	608a      	str	r2, [r1, #8]
  ep->type = ep_type;
 8005164:	710b      	strb	r3, [r1, #4]
  if (ep->is_in != 0U)
 8005166:	784a      	ldrb	r2, [r1, #1]
 8005168:	b10a      	cbz	r2, 800516e <HAL_PCD_EP_Open+0x44>
    ep->tx_fifo_num = ep->num;
 800516a:	f8a1 c01a 	strh.w	ip, [r1, #26]
  if (ep_type == EP_TYPE_BULK)
 800516e:	2b02      	cmp	r3, #2
 8005170:	d01c      	beq.n	80051ac <HAL_PCD_EP_Open+0x82>
  __HAL_LOCK(hpcd);
 8005172:	f895 3494 	ldrb.w	r3, [r5, #1172]	@ 0x494
 8005176:	2b01      	cmp	r3, #1
 8005178:	d01b      	beq.n	80051b2 <HAL_PCD_EP_Open+0x88>
 800517a:	2301      	movs	r3, #1
 800517c:	f885 3494 	strb.w	r3, [r5, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8005180:	6828      	ldr	r0, [r5, #0]
 8005182:	f001 ffb4 	bl	80070ee <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005186:	2000      	movs	r0, #0
 8005188:	f885 0494 	strb.w	r0, [r5, #1172]	@ 0x494
}
 800518c:	bd38      	pop	{r3, r4, r5, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800518e:	f001 000f 	and.w	r0, r1, #15
 8005192:	eb00 01c0 	add.w	r1, r0, r0, lsl #3
 8005196:	0089      	lsls	r1, r1, #2
 8005198:	3110      	adds	r1, #16
 800519a:	4429      	add	r1, r5
 800519c:	3104      	adds	r1, #4
    ep->is_in = 1U;
 800519e:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
 80051a2:	eb05 0080 	add.w	r0, r5, r0, lsl #2
 80051a6:	2401      	movs	r4, #1
 80051a8:	7544      	strb	r4, [r0, #21]
 80051aa:	e7d4      	b.n	8005156 <HAL_PCD_EP_Open+0x2c>
    ep->data_pid_start = 0U;
 80051ac:	2300      	movs	r3, #0
 80051ae:	714b      	strb	r3, [r1, #5]
 80051b0:	e7df      	b.n	8005172 <HAL_PCD_EP_Open+0x48>
  __HAL_LOCK(hpcd);
 80051b2:	2002      	movs	r0, #2
 80051b4:	e7ea      	b.n	800518c <HAL_PCD_EP_Open+0x62>

080051b6 <HAL_PCD_EP_Close>:
{
 80051b6:	b510      	push	{r4, lr}
 80051b8:	4604      	mov	r4, r0
 80051ba:	460a      	mov	r2, r1
  if ((ep_addr & 0x80U) == 0x80U)
 80051bc:	f011 0f80 	tst.w	r1, #128	@ 0x80
 80051c0:	d120      	bne.n	8005204 <HAL_PCD_EP_Close+0x4e>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80051c2:	f001 000f 	and.w	r0, r1, #15
 80051c6:	eb00 03c0 	add.w	r3, r0, r0, lsl #3
 80051ca:	009b      	lsls	r3, r3, #2
 80051cc:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80051d0:	4423      	add	r3, r4
 80051d2:	1d19      	adds	r1, r3, #4
    ep->is_in = 0U;
 80051d4:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
 80051d8:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 80051dc:	2300      	movs	r3, #0
 80051de:	f880 3255 	strb.w	r3, [r0, #597]	@ 0x255
  ep->num = ep_addr & EP_ADDR_MSK;
 80051e2:	f002 020f 	and.w	r2, r2, #15
 80051e6:	700a      	strb	r2, [r1, #0]
  __HAL_LOCK(hpcd);
 80051e8:	f894 3494 	ldrb.w	r3, [r4, #1172]	@ 0x494
 80051ec:	2b01      	cmp	r3, #1
 80051ee:	d018      	beq.n	8005222 <HAL_PCD_EP_Close+0x6c>
 80051f0:	2301      	movs	r3, #1
 80051f2:	f884 3494 	strb.w	r3, [r4, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80051f6:	6820      	ldr	r0, [r4, #0]
 80051f8:	f001 ffc6 	bl	8007188 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80051fc:	2000      	movs	r0, #0
 80051fe:	f884 0494 	strb.w	r0, [r4, #1172]	@ 0x494
}
 8005202:	bd10      	pop	{r4, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005204:	f001 000f 	and.w	r0, r1, #15
 8005208:	eb00 03c0 	add.w	r3, r0, r0, lsl #3
 800520c:	009b      	lsls	r3, r3, #2
 800520e:	3310      	adds	r3, #16
 8005210:	4423      	add	r3, r4
 8005212:	1d19      	adds	r1, r3, #4
    ep->is_in = 1U;
 8005214:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
 8005218:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 800521c:	2301      	movs	r3, #1
 800521e:	7543      	strb	r3, [r0, #21]
 8005220:	e7df      	b.n	80051e2 <HAL_PCD_EP_Close+0x2c>
  __HAL_LOCK(hpcd);
 8005222:	2002      	movs	r0, #2
 8005224:	e7ed      	b.n	8005202 <HAL_PCD_EP_Close+0x4c>

08005226 <HAL_PCD_EP_Receive>:
{
 8005226:	b510      	push	{r4, lr}
 8005228:	4614      	mov	r4, r2
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800522a:	f001 0c0f 	and.w	ip, r1, #15
 800522e:	eb0c 01cc 	add.w	r1, ip, ip, lsl #3
 8005232:	0089      	lsls	r1, r1, #2
 8005234:	f501 7114 	add.w	r1, r1, #592	@ 0x250
 8005238:	4401      	add	r1, r0
 800523a:	3104      	adds	r1, #4
  ep->xfer_buff = pBuf;
 800523c:	eb0c 0ecc 	add.w	lr, ip, ip, lsl #3
 8005240:	eb00 0e8e 	add.w	lr, r0, lr, lsl #2
 8005244:	f8ce 2260 	str.w	r2, [lr, #608]	@ 0x260
  ep->xfer_len = len;
 8005248:	f8ce 3264 	str.w	r3, [lr, #612]	@ 0x264
  ep->xfer_count = 0U;
 800524c:	2300      	movs	r3, #0
 800524e:	f8ce 3268 	str.w	r3, [lr, #616]	@ 0x268
  ep->is_in = 0U;
 8005252:	f88e 3255 	strb.w	r3, [lr, #597]	@ 0x255
  ep->num = ep_addr & EP_ADDR_MSK;
 8005256:	f88e c254 	strb.w	ip, [lr, #596]	@ 0x254
  if (hpcd->Init.dma_enable == 1U)
 800525a:	7982      	ldrb	r2, [r0, #6]
 800525c:	2a01      	cmp	r2, #1
 800525e:	d004      	beq.n	800526a <HAL_PCD_EP_Receive+0x44>
  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005260:	6800      	ldr	r0, [r0, #0]
 8005262:	f002 f877 	bl	8007354 <USB_EPStartXfer>
}
 8005266:	2000      	movs	r0, #0
 8005268:	bd10      	pop	{r4, pc}
    ep->dma_addr = (uint32_t)pBuf;
 800526a:	f8ce 4270 	str.w	r4, [lr, #624]	@ 0x270
 800526e:	e7f7      	b.n	8005260 <HAL_PCD_EP_Receive+0x3a>

08005270 <HAL_PCD_EP_GetRxCount>:
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8005270:	f001 010f 	and.w	r1, r1, #15
 8005274:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 8005278:	eb00 0081 	add.w	r0, r0, r1, lsl #2
}
 800527c:	f8d0 0268 	ldr.w	r0, [r0, #616]	@ 0x268
 8005280:	4770      	bx	lr

08005282 <HAL_PCD_EP_Transmit>:
{
 8005282:	b510      	push	{r4, lr}
 8005284:	4614      	mov	r4, r2
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005286:	f001 0c0f 	and.w	ip, r1, #15
 800528a:	eb0c 01cc 	add.w	r1, ip, ip, lsl #3
 800528e:	0089      	lsls	r1, r1, #2
 8005290:	3110      	adds	r1, #16
 8005292:	4401      	add	r1, r0
 8005294:	3104      	adds	r1, #4
  ep->xfer_buff = pBuf;
 8005296:	eb0c 0ecc 	add.w	lr, ip, ip, lsl #3
 800529a:	eb00 0e8e 	add.w	lr, r0, lr, lsl #2
 800529e:	f8ce 2020 	str.w	r2, [lr, #32]
  ep->xfer_len = len;
 80052a2:	f8ce 3024 	str.w	r3, [lr, #36]	@ 0x24
  ep->xfer_count = 0U;
 80052a6:	2300      	movs	r3, #0
 80052a8:	f8ce 3028 	str.w	r3, [lr, #40]	@ 0x28
  ep->is_in = 1U;
 80052ac:	2301      	movs	r3, #1
 80052ae:	f88e 3015 	strb.w	r3, [lr, #21]
  ep->num = ep_addr & EP_ADDR_MSK;
 80052b2:	f88e c014 	strb.w	ip, [lr, #20]
  if (hpcd->Init.dma_enable == 1U)
 80052b6:	7982      	ldrb	r2, [r0, #6]
 80052b8:	429a      	cmp	r2, r3
 80052ba:	d004      	beq.n	80052c6 <HAL_PCD_EP_Transmit+0x44>
  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80052bc:	6800      	ldr	r0, [r0, #0]
 80052be:	f002 f849 	bl	8007354 <USB_EPStartXfer>
}
 80052c2:	2000      	movs	r0, #0
 80052c4:	bd10      	pop	{r4, pc}
    ep->dma_addr = (uint32_t)pBuf;
 80052c6:	f8ce 4030 	str.w	r4, [lr, #48]	@ 0x30
 80052ca:	e7f7      	b.n	80052bc <HAL_PCD_EP_Transmit+0x3a>

080052cc <HAL_PCD_EP_SetStall>:
{
 80052cc:	b538      	push	{r3, r4, r5, lr}
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80052ce:	f001 050f 	and.w	r5, r1, #15
 80052d2:	7902      	ldrb	r2, [r0, #4]
 80052d4:	42aa      	cmp	r2, r5
 80052d6:	d338      	bcc.n	800534a <HAL_PCD_EP_SetStall+0x7e>
 80052d8:	4604      	mov	r4, r0
 80052da:	460b      	mov	r3, r1
  if ((0x80U & ep_addr) == 0x80U)
 80052dc:	f011 0f80 	tst.w	r1, #128	@ 0x80
 80052e0:	d11f      	bne.n	8005322 <HAL_PCD_EP_SetStall+0x56>
    ep = &hpcd->OUT_ep[ep_addr];
 80052e2:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 80052e6:	0089      	lsls	r1, r1, #2
 80052e8:	f501 7114 	add.w	r1, r1, #592	@ 0x250
 80052ec:	4401      	add	r1, r0
 80052ee:	3104      	adds	r1, #4
    ep->is_in = 0U;
 80052f0:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
 80052f4:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 80052f8:	2200      	movs	r2, #0
 80052fa:	f883 2255 	strb.w	r2, [r3, #597]	@ 0x255
  ep->is_stall = 1U;
 80052fe:	2301      	movs	r3, #1
 8005300:	708b      	strb	r3, [r1, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005302:	700d      	strb	r5, [r1, #0]
  __HAL_LOCK(hpcd);
 8005304:	f894 3494 	ldrb.w	r3, [r4, #1172]	@ 0x494
 8005308:	2b01      	cmp	r3, #1
 800530a:	d020      	beq.n	800534e <HAL_PCD_EP_SetStall+0x82>
 800530c:	2301      	movs	r3, #1
 800530e:	f884 3494 	strb.w	r3, [r4, #1172]	@ 0x494
  (void)USB_EPSetStall(hpcd->Instance, ep);
 8005312:	6820      	ldr	r0, [r4, #0]
 8005314:	f002 f963 	bl	80075de <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005318:	b185      	cbz	r5, 800533c <HAL_PCD_EP_SetStall+0x70>
  __HAL_UNLOCK(hpcd);
 800531a:	2000      	movs	r0, #0
 800531c:	f884 0494 	strb.w	r0, [r4, #1172]	@ 0x494
}
 8005320:	bd38      	pop	{r3, r4, r5, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005322:	eb05 01c5 	add.w	r1, r5, r5, lsl #3
 8005326:	0089      	lsls	r1, r1, #2
 8005328:	3110      	adds	r1, #16
 800532a:	4401      	add	r1, r0
 800532c:	3104      	adds	r1, #4
    ep->is_in = 1U;
 800532e:	eb05 03c5 	add.w	r3, r5, r5, lsl #3
 8005332:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8005336:	2201      	movs	r2, #1
 8005338:	755a      	strb	r2, [r3, #21]
 800533a:	e7e0      	b.n	80052fe <HAL_PCD_EP_SetStall+0x32>
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800533c:	f204 429c 	addw	r2, r4, #1180	@ 0x49c
 8005340:	79a1      	ldrb	r1, [r4, #6]
 8005342:	6820      	ldr	r0, [r4, #0]
 8005344:	f002 fa44 	bl	80077d0 <USB_EP0_OutStart>
 8005348:	e7e7      	b.n	800531a <HAL_PCD_EP_SetStall+0x4e>
    return HAL_ERROR;
 800534a:	2001      	movs	r0, #1
 800534c:	e7e8      	b.n	8005320 <HAL_PCD_EP_SetStall+0x54>
  __HAL_LOCK(hpcd);
 800534e:	2002      	movs	r0, #2
 8005350:	e7e6      	b.n	8005320 <HAL_PCD_EP_SetStall+0x54>

08005352 <HAL_PCD_EP_ClrStall>:
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8005352:	f001 030f 	and.w	r3, r1, #15
 8005356:	7902      	ldrb	r2, [r0, #4]
 8005358:	429a      	cmp	r2, r3
 800535a:	d330      	bcc.n	80053be <HAL_PCD_EP_ClrStall+0x6c>
{
 800535c:	b510      	push	{r4, lr}
 800535e:	4604      	mov	r4, r0
  if ((0x80U & ep_addr) == 0x80U)
 8005360:	f011 0f80 	tst.w	r1, #128	@ 0x80
 8005364:	d11e      	bne.n	80053a4 <HAL_PCD_EP_ClrStall+0x52>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005366:	eb03 01c3 	add.w	r1, r3, r3, lsl #3
 800536a:	0089      	lsls	r1, r1, #2
 800536c:	f501 7114 	add.w	r1, r1, #592	@ 0x250
 8005370:	4401      	add	r1, r0
 8005372:	3104      	adds	r1, #4
    ep->is_in = 0U;
 8005374:	eb03 02c3 	add.w	r2, r3, r3, lsl #3
 8005378:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800537c:	2000      	movs	r0, #0
 800537e:	f882 0255 	strb.w	r0, [r2, #597]	@ 0x255
  ep->is_stall = 0U;
 8005382:	2200      	movs	r2, #0
 8005384:	708a      	strb	r2, [r1, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005386:	700b      	strb	r3, [r1, #0]
  __HAL_LOCK(hpcd);
 8005388:	f894 3494 	ldrb.w	r3, [r4, #1172]	@ 0x494
 800538c:	2b01      	cmp	r3, #1
 800538e:	d018      	beq.n	80053c2 <HAL_PCD_EP_ClrStall+0x70>
 8005390:	2301      	movs	r3, #1
 8005392:	f884 3494 	strb.w	r3, [r4, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8005396:	6820      	ldr	r0, [r4, #0]
 8005398:	f002 f94e 	bl	8007638 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800539c:	2000      	movs	r0, #0
 800539e:	f884 0494 	strb.w	r0, [r4, #1172]	@ 0x494
}
 80053a2:	bd10      	pop	{r4, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80053a4:	eb03 01c3 	add.w	r1, r3, r3, lsl #3
 80053a8:	0089      	lsls	r1, r1, #2
 80053aa:	3110      	adds	r1, #16
 80053ac:	4401      	add	r1, r0
 80053ae:	3104      	adds	r1, #4
    ep->is_in = 1U;
 80053b0:	eb03 02c3 	add.w	r2, r3, r3, lsl #3
 80053b4:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 80053b8:	2001      	movs	r0, #1
 80053ba:	7550      	strb	r0, [r2, #21]
 80053bc:	e7e1      	b.n	8005382 <HAL_PCD_EP_ClrStall+0x30>
    return HAL_ERROR;
 80053be:	2001      	movs	r0, #1
}
 80053c0:	4770      	bx	lr
  __HAL_LOCK(hpcd);
 80053c2:	2002      	movs	r0, #2
 80053c4:	e7ed      	b.n	80053a2 <HAL_PCD_EP_ClrStall+0x50>

080053c6 <HAL_PCD_EP_Abort>:
{
 80053c6:	b508      	push	{r3, lr}
  if ((0x80U & ep_addr) == 0x80U)
 80053c8:	f011 0f80 	tst.w	r1, #128	@ 0x80
 80053cc:	d10c      	bne.n	80053e8 <HAL_PCD_EP_Abort+0x22>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80053ce:	f001 010f 	and.w	r1, r1, #15
 80053d2:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 80053d6:	0089      	lsls	r1, r1, #2
 80053d8:	f501 7114 	add.w	r1, r1, #592	@ 0x250
 80053dc:	4401      	add	r1, r0
 80053de:	3104      	adds	r1, #4
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80053e0:	6800      	ldr	r0, [r0, #0]
 80053e2:	f001 ff41 	bl	8007268 <USB_EPStopXfer>
}
 80053e6:	bd08      	pop	{r3, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80053e8:	f001 010f 	and.w	r1, r1, #15
 80053ec:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 80053f0:	0089      	lsls	r1, r1, #2
 80053f2:	3110      	adds	r1, #16
 80053f4:	4401      	add	r1, r0
 80053f6:	3104      	adds	r1, #4
 80053f8:	e7f2      	b.n	80053e0 <HAL_PCD_EP_Abort+0x1a>

080053fa <HAL_PCD_IRQHandler>:
{
 80053fa:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80053fe:	b083      	sub	sp, #12
 8005400:	4604      	mov	r4, r0
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005402:	6805      	ldr	r5, [r0, #0]
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8005404:	4628      	mov	r0, r5
 8005406:	f002 f9a0 	bl	800774a <USB_GetMode>
 800540a:	b110      	cbz	r0, 8005412 <HAL_PCD_IRQHandler+0x18>
}
 800540c:	b003      	add	sp, #12
 800540e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005412:	4606      	mov	r6, r0
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8005414:	6820      	ldr	r0, [r4, #0]
 8005416:	f002 f969 	bl	80076ec <USB_ReadInterrupts>
 800541a:	2800      	cmp	r0, #0
 800541c:	d0f6      	beq.n	800540c <HAL_PCD_IRQHandler+0x12>
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800541e:	f505 6700 	add.w	r7, r5, #2048	@ 0x800
 8005422:	68bb      	ldr	r3, [r7, #8]
 8005424:	f3c3 230d 	ubfx	r3, r3, #8, #14
 8005428:	f8c4 34d4 	str.w	r3, [r4, #1236]	@ 0x4d4
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800542c:	6820      	ldr	r0, [r4, #0]
 800542e:	f002 f95d 	bl	80076ec <USB_ReadInterrupts>
 8005432:	f010 0f02 	tst.w	r0, #2
 8005436:	d004      	beq.n	8005442 <HAL_PCD_IRQHandler+0x48>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8005438:	6822      	ldr	r2, [r4, #0]
 800543a:	6953      	ldr	r3, [r2, #20]
 800543c:	f003 0302 	and.w	r3, r3, #2
 8005440:	6153      	str	r3, [r2, #20]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8005442:	6820      	ldr	r0, [r4, #0]
 8005444:	f002 f952 	bl	80076ec <USB_ReadInterrupts>
 8005448:	f010 0f10 	tst.w	r0, #16
 800544c:	d015      	beq.n	800547a <HAL_PCD_IRQHandler+0x80>
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800544e:	6822      	ldr	r2, [r4, #0]
 8005450:	6993      	ldr	r3, [r2, #24]
 8005452:	f023 0310 	bic.w	r3, r3, #16
 8005456:	6193      	str	r3, [r2, #24]
      RegVal = USBx->GRXSTSP;
 8005458:	f8d5 8020 	ldr.w	r8, [r5, #32]
      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800545c:	f008 090f 	and.w	r9, r8, #15
      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8005460:	f408 13f0 	and.w	r3, r8, #1966080	@ 0x1e0000
 8005464:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005468:	d04c      	beq.n	8005504 <HAL_PCD_IRQHandler+0x10a>
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800546a:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800546e:	d06f      	beq.n	8005550 <HAL_PCD_IRQHandler+0x156>
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005470:	6822      	ldr	r2, [r4, #0]
 8005472:	6993      	ldr	r3, [r2, #24]
 8005474:	f043 0310 	orr.w	r3, r3, #16
 8005478:	6193      	str	r3, [r2, #24]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800547a:	6820      	ldr	r0, [r4, #0]
 800547c:	f002 f936 	bl	80076ec <USB_ReadInterrupts>
 8005480:	f410 2f00 	tst.w	r0, #524288	@ 0x80000
 8005484:	d176      	bne.n	8005574 <HAL_PCD_IRQHandler+0x17a>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8005486:	6820      	ldr	r0, [r4, #0]
 8005488:	f002 f930 	bl	80076ec <USB_ReadInterrupts>
 800548c:	f410 2f80 	tst.w	r0, #262144	@ 0x40000
 8005490:	f040 80e0 	bne.w	8005654 <HAL_PCD_IRQHandler+0x25a>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8005494:	6820      	ldr	r0, [r4, #0]
 8005496:	f002 f929 	bl	80076ec <USB_ReadInterrupts>
 800549a:	2800      	cmp	r0, #0
 800549c:	f2c0 8161 	blt.w	8005762 <HAL_PCD_IRQHandler+0x368>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80054a0:	6820      	ldr	r0, [r4, #0]
 80054a2:	f002 f923 	bl	80076ec <USB_ReadInterrupts>
 80054a6:	f410 6f00 	tst.w	r0, #2048	@ 0x800
 80054aa:	d009      	beq.n	80054c0 <HAL_PCD_IRQHandler+0xc6>
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80054ac:	68bb      	ldr	r3, [r7, #8]
 80054ae:	f013 0f01 	tst.w	r3, #1
 80054b2:	f040 816e 	bne.w	8005792 <HAL_PCD_IRQHandler+0x398>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80054b6:	6822      	ldr	r2, [r4, #0]
 80054b8:	6953      	ldr	r3, [r2, #20]
 80054ba:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80054be:	6153      	str	r3, [r2, #20]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80054c0:	6820      	ldr	r0, [r4, #0]
 80054c2:	f002 f913 	bl	80076ec <USB_ReadInterrupts>
 80054c6:	f410 5f80 	tst.w	r0, #4096	@ 0x1000
 80054ca:	f040 8166 	bne.w	800579a <HAL_PCD_IRQHandler+0x3a0>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80054ce:	6820      	ldr	r0, [r4, #0]
 80054d0:	f002 f90c 	bl	80076ec <USB_ReadInterrupts>
 80054d4:	f410 5f00 	tst.w	r0, #8192	@ 0x2000
 80054d8:	f040 81b3 	bne.w	8005842 <HAL_PCD_IRQHandler+0x448>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80054dc:	6820      	ldr	r0, [r4, #0]
 80054de:	f002 f905 	bl	80076ec <USB_ReadInterrupts>
 80054e2:	f010 0f08 	tst.w	r0, #8
 80054e6:	f040 81c4 	bne.w	8005872 <HAL_PCD_IRQHandler+0x478>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80054ea:	6820      	ldr	r0, [r4, #0]
 80054ec:	f002 f8fe 	bl	80076ec <USB_ReadInterrupts>
 80054f0:	f010 0f80 	tst.w	r0, #128	@ 0x80
 80054f4:	f000 81d7 	beq.w	80058a6 <HAL_PCD_IRQHandler+0x4ac>
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80054f8:	69ab      	ldr	r3, [r5, #24]
 80054fa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80054fe:	61ab      	str	r3, [r5, #24]
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005500:	2601      	movs	r6, #1
 8005502:	e1c0      	b.n	8005886 <HAL_PCD_IRQHandler+0x48c>
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8005504:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8005508:	ea18 0f03 	tst.w	r8, r3
 800550c:	d0b0      	beq.n	8005470 <HAL_PCD_IRQHandler+0x76>
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800550e:	ea4f 1a18 	mov.w	sl, r8, lsr #4
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8005512:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005516:	9301      	str	r3, [sp, #4]
 8005518:	eb09 0bc9 	add.w	fp, r9, r9, lsl #3
 800551c:	eb04 0b8b 	add.w	fp, r4, fp, lsl #2
 8005520:	f3c8 120a 	ubfx	r2, r8, #4, #11
 8005524:	f8db 1260 	ldr.w	r1, [fp, #608]	@ 0x260
 8005528:	4628      	mov	r0, r5
 800552a:	f002 f835 	bl	8007598 <USB_ReadPacket>
          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800552e:	f8db 3260 	ldr.w	r3, [fp, #608]	@ 0x260
 8005532:	f3ca 0a0a 	ubfx	sl, sl, #0, #11
 8005536:	4453      	add	r3, sl
 8005538:	f8cb 3260 	str.w	r3, [fp, #608]	@ 0x260
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800553c:	f8db 3268 	ldr.w	r3, [fp, #616]	@ 0x268
 8005540:	9a01      	ldr	r2, [sp, #4]
 8005542:	444a      	add	r2, r9
 8005544:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8005548:	4453      	add	r3, sl
 800554a:	f8c2 3268 	str.w	r3, [r2, #616]	@ 0x268
 800554e:	e78f      	b.n	8005470 <HAL_PCD_IRQHandler+0x76>
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8005550:	2208      	movs	r2, #8
 8005552:	f204 419c 	addw	r1, r4, #1180	@ 0x49c
 8005556:	4628      	mov	r0, r5
 8005558:	f002 f81e 	bl	8007598 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800555c:	eb09 03c9 	add.w	r3, r9, r9, lsl #3
 8005560:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8005564:	f8d3 2268 	ldr.w	r2, [r3, #616]	@ 0x268
 8005568:	f3c8 180a 	ubfx	r8, r8, #4, #11
 800556c:	4442      	add	r2, r8
 800556e:	f8c3 2268 	str.w	r2, [r3, #616]	@ 0x268
 8005572:	e77d      	b.n	8005470 <HAL_PCD_IRQHandler+0x76>
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8005574:	6820      	ldr	r0, [r4, #0]
 8005576:	f002 f8bd 	bl	80076f4 <USB_ReadDevAllOutEpInterrupt>
 800557a:	4680      	mov	r8, r0
      epnum = 0U;
 800557c:	46b1      	mov	r9, r6
      while (ep_intr != 0U)
 800557e:	e035      	b.n	80055ec <HAL_PCD_IRQHandler+0x1f2>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8005580:	eb05 1349 	add.w	r3, r5, r9, lsl #5
 8005584:	2201      	movs	r2, #1
 8005586:	f8c3 2b08 	str.w	r2, [r3, #2824]	@ 0xb08
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800558a:	4649      	mov	r1, r9
 800558c:	4620      	mov	r0, r4
 800558e:	f7ff fd0f 	bl	8004fb0 <PCD_EP_OutXfrComplete_int>
 8005592:	e03c      	b.n	800560e <HAL_PCD_IRQHandler+0x214>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8005594:	eb05 1349 	add.w	r3, r5, r9, lsl #5
 8005598:	2208      	movs	r2, #8
 800559a:	f8c3 2b08 	str.w	r2, [r3, #2824]	@ 0xb08
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800559e:	4649      	mov	r1, r9
 80055a0:	4620      	mov	r0, r4
 80055a2:	f7ff fd87 	bl	80050b4 <PCD_EP_OutSetupPacket_int>
 80055a6:	e035      	b.n	8005614 <HAL_PCD_IRQHandler+0x21a>
            if (ep->is_iso_incomplete == 1U)
 80055a8:	eb09 03c9 	add.w	r3, r9, r9, lsl #3
 80055ac:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80055b0:	f893 3257 	ldrb.w	r3, [r3, #599]	@ 0x257
 80055b4:	2b01      	cmp	r3, #1
 80055b6:	d041      	beq.n	800563c <HAL_PCD_IRQHandler+0x242>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80055b8:	eb05 1349 	add.w	r3, r5, r9, lsl #5
 80055bc:	2202      	movs	r2, #2
 80055be:	f8c3 2b08 	str.w	r2, [r3, #2824]	@ 0xb08
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80055c2:	f01a 0f20 	tst.w	sl, #32
 80055c6:	d004      	beq.n	80055d2 <HAL_PCD_IRQHandler+0x1d8>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80055c8:	eb05 1349 	add.w	r3, r5, r9, lsl #5
 80055cc:	2220      	movs	r2, #32
 80055ce:	f8c3 2b08 	str.w	r2, [r3, #2824]	@ 0xb08
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80055d2:	f41a 5f00 	tst.w	sl, #8192	@ 0x2000
 80055d6:	d005      	beq.n	80055e4 <HAL_PCD_IRQHandler+0x1ea>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80055d8:	eb05 1349 	add.w	r3, r5, r9, lsl #5
 80055dc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80055e0:	f8c3 2b08 	str.w	r2, [r3, #2824]	@ 0xb08
        epnum++;
 80055e4:	f109 0901 	add.w	r9, r9, #1
        ep_intr >>= 1U;
 80055e8:	ea4f 0858 	mov.w	r8, r8, lsr #1
      while (ep_intr != 0U)
 80055ec:	f1b8 0f00 	cmp.w	r8, #0
 80055f0:	f43f af49 	beq.w	8005486 <HAL_PCD_IRQHandler+0x8c>
        if ((ep_intr & 0x1U) != 0U)
 80055f4:	f018 0f01 	tst.w	r8, #1
 80055f8:	d0f4      	beq.n	80055e4 <HAL_PCD_IRQHandler+0x1ea>
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80055fa:	fa5f fb89 	uxtb.w	fp, r9
 80055fe:	4659      	mov	r1, fp
 8005600:	6820      	ldr	r0, [r4, #0]
 8005602:	f002 f887 	bl	8007714 <USB_ReadDevOutEPInterrupt>
 8005606:	4682      	mov	sl, r0
          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8005608:	f010 0f01 	tst.w	r0, #1
 800560c:	d1b8      	bne.n	8005580 <HAL_PCD_IRQHandler+0x186>
          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800560e:	f01a 0f08 	tst.w	sl, #8
 8005612:	d1bf      	bne.n	8005594 <HAL_PCD_IRQHandler+0x19a>
          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8005614:	f01a 0f10 	tst.w	sl, #16
 8005618:	d004      	beq.n	8005624 <HAL_PCD_IRQHandler+0x22a>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800561a:	eb05 1349 	add.w	r3, r5, r9, lsl #5
 800561e:	2210      	movs	r2, #16
 8005620:	f8c3 2b08 	str.w	r2, [r3, #2824]	@ 0xb08
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8005624:	f01a 0f02 	tst.w	sl, #2
 8005628:	d0cb      	beq.n	80055c2 <HAL_PCD_IRQHandler+0x1c8>
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800562a:	696b      	ldr	r3, [r5, #20]
 800562c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8005630:	d0ba      	beq.n	80055a8 <HAL_PCD_IRQHandler+0x1ae>
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005638:	607b      	str	r3, [r7, #4]
 800563a:	e7b5      	b.n	80055a8 <HAL_PCD_IRQHandler+0x1ae>
              ep->is_iso_incomplete = 0U;
 800563c:	eb09 03c9 	add.w	r3, r9, r9, lsl #3
 8005640:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8005644:	2200      	movs	r2, #0
 8005646:	f883 2257 	strb.w	r2, [r3, #599]	@ 0x257
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800564a:	4659      	mov	r1, fp
 800564c:	4620      	mov	r0, r4
 800564e:	f004 fa4f 	bl	8009af0 <HAL_PCD_ISOOUTIncompleteCallback>
 8005652:	e7b1      	b.n	80055b8 <HAL_PCD_IRQHandler+0x1be>
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8005654:	6820      	ldr	r0, [r4, #0]
 8005656:	f002 f855 	bl	8007704 <USB_ReadDevAllInEpInterrupt>
 800565a:	4680      	mov	r8, r0
      epnum = 0U;
 800565c:	46b1      	mov	r9, r6
      while (ep_intr != 0U)
 800565e:	e025      	b.n	80056ac <HAL_PCD_IRQHandler+0x2b2>
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8005660:	4659      	mov	r1, fp
 8005662:	4620      	mov	r0, r4
 8005664:	f004 fa02 	bl	8009a6c <HAL_PCD_DataInStageCallback>
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8005668:	f01a 0f08 	tst.w	sl, #8
 800566c:	d004      	beq.n	8005678 <HAL_PCD_IRQHandler+0x27e>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800566e:	eb05 1349 	add.w	r3, r5, r9, lsl #5
 8005672:	2208      	movs	r2, #8
 8005674:	f8c3 2908 	str.w	r2, [r3, #2312]	@ 0x908
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8005678:	f01a 0f10 	tst.w	sl, #16
 800567c:	d004      	beq.n	8005688 <HAL_PCD_IRQHandler+0x28e>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800567e:	eb05 1349 	add.w	r3, r5, r9, lsl #5
 8005682:	2210      	movs	r2, #16
 8005684:	f8c3 2908 	str.w	r2, [r3, #2312]	@ 0x908
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8005688:	f01a 0f40 	tst.w	sl, #64	@ 0x40
 800568c:	d004      	beq.n	8005698 <HAL_PCD_IRQHandler+0x29e>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800568e:	eb05 1349 	add.w	r3, r5, r9, lsl #5
 8005692:	2240      	movs	r2, #64	@ 0x40
 8005694:	f8c3 2908 	str.w	r2, [r3, #2312]	@ 0x908
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8005698:	f01a 0f02 	tst.w	sl, #2
 800569c:	d140      	bne.n	8005720 <HAL_PCD_IRQHandler+0x326>
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800569e:	f01a 0f80 	tst.w	sl, #128	@ 0x80
 80056a2:	d159      	bne.n	8005758 <HAL_PCD_IRQHandler+0x35e>
        epnum++;
 80056a4:	f109 0901 	add.w	r9, r9, #1
        ep_intr >>= 1U;
 80056a8:	ea4f 0858 	mov.w	r8, r8, lsr #1
      while (ep_intr != 0U)
 80056ac:	f1b8 0f00 	cmp.w	r8, #0
 80056b0:	f43f aef0 	beq.w	8005494 <HAL_PCD_IRQHandler+0x9a>
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80056b4:	f018 0f01 	tst.w	r8, #1
 80056b8:	d0f4      	beq.n	80056a4 <HAL_PCD_IRQHandler+0x2aa>
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80056ba:	fa5f fb89 	uxtb.w	fp, r9
 80056be:	4659      	mov	r1, fp
 80056c0:	6820      	ldr	r0, [r4, #0]
 80056c2:	f002 f830 	bl	8007726 <USB_ReadDevInEPInterrupt>
 80056c6:	4682      	mov	sl, r0
          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80056c8:	f010 0f01 	tst.w	r0, #1
 80056cc:	d0cc      	beq.n	8005668 <HAL_PCD_IRQHandler+0x26e>
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80056ce:	f009 020f 	and.w	r2, r9, #15
 80056d2:	2101      	movs	r1, #1
 80056d4:	fa01 f202 	lsl.w	r2, r1, r2
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80056d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80056da:	ea23 0302 	bic.w	r3, r3, r2
 80056de:	637b      	str	r3, [r7, #52]	@ 0x34
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80056e0:	eb05 1349 	add.w	r3, r5, r9, lsl #5
 80056e4:	f8c3 1908 	str.w	r1, [r3, #2312]	@ 0x908
            if (hpcd->Init.dma_enable == 1U)
 80056e8:	79a3      	ldrb	r3, [r4, #6]
 80056ea:	428b      	cmp	r3, r1
 80056ec:	d1b8      	bne.n	8005660 <HAL_PCD_IRQHandler+0x266>
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80056ee:	eb09 03c9 	add.w	r3, r9, r9, lsl #3
 80056f2:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80056f6:	6a1a      	ldr	r2, [r3, #32]
 80056f8:	69d9      	ldr	r1, [r3, #28]
 80056fa:	440a      	add	r2, r1
 80056fc:	621a      	str	r2, [r3, #32]
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80056fe:	f1b9 0f00 	cmp.w	r9, #0
 8005702:	d1ad      	bne.n	8005660 <HAL_PCD_IRQHandler+0x266>
 8005704:	eb09 03c9 	add.w	r3, r9, r9, lsl #3
 8005708:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800570c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800570e:	2b00      	cmp	r3, #0
 8005710:	d1a6      	bne.n	8005660 <HAL_PCD_IRQHandler+0x266>
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005712:	f204 429c 	addw	r2, r4, #1180	@ 0x49c
 8005716:	2101      	movs	r1, #1
 8005718:	6820      	ldr	r0, [r4, #0]
 800571a:	f002 f859 	bl	80077d0 <USB_EP0_OutStart>
 800571e:	e79f      	b.n	8005660 <HAL_PCD_IRQHandler+0x266>
            (void)USB_FlushTxFifo(USBx, epnum);
 8005720:	4649      	mov	r1, r9
 8005722:	4628      	mov	r0, r5
 8005724:	f001 fbb6 	bl	8006e94 <USB_FlushTxFifo>
            if (ep->is_iso_incomplete == 1U)
 8005728:	eb09 03c9 	add.w	r3, r9, r9, lsl #3
 800572c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8005730:	7ddb      	ldrb	r3, [r3, #23]
 8005732:	2b01      	cmp	r3, #1
 8005734:	d005      	beq.n	8005742 <HAL_PCD_IRQHandler+0x348>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8005736:	eb05 1349 	add.w	r3, r5, r9, lsl #5
 800573a:	2202      	movs	r2, #2
 800573c:	f8c3 2908 	str.w	r2, [r3, #2312]	@ 0x908
 8005740:	e7ad      	b.n	800569e <HAL_PCD_IRQHandler+0x2a4>
              ep->is_iso_incomplete = 0U;
 8005742:	eb09 03c9 	add.w	r3, r9, r9, lsl #3
 8005746:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800574a:	2200      	movs	r2, #0
 800574c:	75da      	strb	r2, [r3, #23]
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800574e:	4659      	mov	r1, fp
 8005750:	4620      	mov	r0, r4
 8005752:	f004 f9d3 	bl	8009afc <HAL_PCD_ISOINIncompleteCallback>
 8005756:	e7ee      	b.n	8005736 <HAL_PCD_IRQHandler+0x33c>
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8005758:	4649      	mov	r1, r9
 800575a:	4620      	mov	r0, r4
 800575c:	f7ff fb1c 	bl	8004d98 <PCD_WriteEmptyTxFifo>
 8005760:	e7a0      	b.n	80056a4 <HAL_PCD_IRQHandler+0x2aa>
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	f023 0301 	bic.w	r3, r3, #1
 8005768:	607b      	str	r3, [r7, #4]
      if (hpcd->LPM_State == LPM_L1)
 800576a:	f894 34cc 	ldrb.w	r3, [r4, #1228]	@ 0x4cc
 800576e:	2b01      	cmp	r3, #1
 8005770:	d008      	beq.n	8005784 <HAL_PCD_IRQHandler+0x38a>
        HAL_PCD_ResumeCallback(hpcd);
 8005772:	4620      	mov	r0, r4
 8005774:	f004 f9b6 	bl	8009ae4 <HAL_PCD_ResumeCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8005778:	6822      	ldr	r2, [r4, #0]
 800577a:	6953      	ldr	r3, [r2, #20]
 800577c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005780:	6153      	str	r3, [r2, #20]
 8005782:	e68d      	b.n	80054a0 <HAL_PCD_IRQHandler+0xa6>
        hpcd->LPM_State = LPM_L0;
 8005784:	2100      	movs	r1, #0
 8005786:	f884 14cc 	strb.w	r1, [r4, #1228]	@ 0x4cc
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800578a:	4620      	mov	r0, r4
 800578c:	f000 f93f 	bl	8005a0e <HAL_PCDEx_LPM_Callback>
 8005790:	e7f2      	b.n	8005778 <HAL_PCD_IRQHandler+0x37e>
        HAL_PCD_SuspendCallback(hpcd);
 8005792:	4620      	mov	r0, r4
 8005794:	f004 f98e 	bl	8009ab4 <HAL_PCD_SuspendCallback>
 8005798:	e68d      	b.n	80054b6 <HAL_PCD_IRQHandler+0xbc>
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	f023 0301 	bic.w	r3, r3, #1
 80057a0:	607b      	str	r3, [r7, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80057a2:	2110      	movs	r1, #16
 80057a4:	6820      	ldr	r0, [r4, #0]
 80057a6:	f001 fb75 	bl	8006e94 <USB_FlushTxFifo>
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80057aa:	e01a      	b.n	80057e2 <HAL_PCD_IRQHandler+0x3e8>
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80057ac:	eb05 1346 	add.w	r3, r5, r6, lsl #5
 80057b0:	f64f 317f 	movw	r1, #64383	@ 0xfb7f
 80057b4:	f8c3 1908 	str.w	r1, [r3, #2312]	@ 0x908
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80057b8:	f8d3 2900 	ldr.w	r2, [r3, #2304]	@ 0x900
 80057bc:	f422 1200 	bic.w	r2, r2, #2097152	@ 0x200000
 80057c0:	f8c3 2900 	str.w	r2, [r3, #2304]	@ 0x900
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80057c4:	f8c3 1b08 	str.w	r1, [r3, #2824]	@ 0xb08
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80057c8:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	@ 0xb00
 80057cc:	f422 1200 	bic.w	r2, r2, #2097152	@ 0x200000
 80057d0:	f8c3 2b00 	str.w	r2, [r3, #2816]	@ 0xb00
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80057d4:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	@ 0xb00
 80057d8:	f042 6200 	orr.w	r2, r2, #134217728	@ 0x8000000
 80057dc:	f8c3 2b00 	str.w	r2, [r3, #2816]	@ 0xb00
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80057e0:	3601      	adds	r6, #1
 80057e2:	7923      	ldrb	r3, [r4, #4]
 80057e4:	42b3      	cmp	r3, r6
 80057e6:	d8e1      	bhi.n	80057ac <HAL_PCD_IRQHandler+0x3b2>
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80057e8:	69fb      	ldr	r3, [r7, #28]
 80057ea:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 80057ee:	61fb      	str	r3, [r7, #28]
      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80057f0:	7be3      	ldrb	r3, [r4, #15]
 80057f2:	b1db      	cbz	r3, 800582c <HAL_PCD_IRQHandler+0x432>
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80057f4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80057f8:	f043 030b 	orr.w	r3, r3, #11
 80057fc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8005800:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005802:	f043 030b 	orr.w	r3, r3, #11
 8005806:	647b      	str	r3, [r7, #68]	@ 0x44
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8005808:	f8d5 3800 	ldr.w	r3, [r5, #2048]	@ 0x800
 800580c:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8005810:	f8c5 3800 	str.w	r3, [r5, #2048]	@ 0x800
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8005814:	f204 429c 	addw	r2, r4, #1180	@ 0x49c
 8005818:	79a1      	ldrb	r1, [r4, #6]
 800581a:	6820      	ldr	r0, [r4, #0]
 800581c:	f001 ffd8 	bl	80077d0 <USB_EP0_OutStart>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8005820:	6822      	ldr	r2, [r4, #0]
 8005822:	6953      	ldr	r3, [r2, #20]
 8005824:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005828:	6153      	str	r3, [r2, #20]
 800582a:	e650      	b.n	80054ce <HAL_PCD_IRQHandler+0xd4>
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800582c:	697b      	ldr	r3, [r7, #20]
 800582e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8005832:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8005836:	617b      	str	r3, [r7, #20]
        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8005838:	693b      	ldr	r3, [r7, #16]
 800583a:	f043 030b 	orr.w	r3, r3, #11
 800583e:	613b      	str	r3, [r7, #16]
 8005840:	e7e2      	b.n	8005808 <HAL_PCD_IRQHandler+0x40e>
      (void)USB_ActivateSetup(hpcd->Instance);
 8005842:	6820      	ldr	r0, [r4, #0]
 8005844:	f001 ffb6 	bl	80077b4 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8005848:	6820      	ldr	r0, [r4, #0]
 800584a:	f001 fc3f 	bl	80070cc <USB_GetDevSpeed>
 800584e:	71e0      	strb	r0, [r4, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8005850:	6826      	ldr	r6, [r4, #0]
 8005852:	f000 fbdd 	bl	8006010 <HAL_RCC_GetHCLKFreq>
 8005856:	4601      	mov	r1, r0
 8005858:	79e2      	ldrb	r2, [r4, #7]
 800585a:	4630      	mov	r0, r6
 800585c:	f001 fa9c 	bl	8006d98 <USB_SetTurnaroundTime>
      HAL_PCD_ResetCallback(hpcd);
 8005860:	4620      	mov	r0, r4
 8005862:	f004 f914 	bl	8009a8e <HAL_PCD_ResetCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8005866:	6822      	ldr	r2, [r4, #0]
 8005868:	6953      	ldr	r3, [r2, #20]
 800586a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800586e:	6153      	str	r3, [r2, #20]
 8005870:	e634      	b.n	80054dc <HAL_PCD_IRQHandler+0xe2>
      HAL_PCD_SOFCallback(hpcd);
 8005872:	4620      	mov	r0, r4
 8005874:	f004 f905 	bl	8009a82 <HAL_PCD_SOFCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8005878:	6822      	ldr	r2, [r4, #0]
 800587a:	6953      	ldr	r3, [r2, #20]
 800587c:	f003 0308 	and.w	r3, r3, #8
 8005880:	6153      	str	r3, [r2, #20]
 8005882:	e632      	b.n	80054ea <HAL_PCD_IRQHandler+0xf0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005884:	3601      	adds	r6, #1
 8005886:	7923      	ldrb	r3, [r4, #4]
 8005888:	42b3      	cmp	r3, r6
 800588a:	d90c      	bls.n	80058a6 <HAL_PCD_IRQHandler+0x4ac>
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800588c:	eb06 03c6 	add.w	r3, r6, r6, lsl #3
 8005890:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8005894:	f893 3257 	ldrb.w	r3, [r3, #599]	@ 0x257
 8005898:	2b01      	cmp	r3, #1
 800589a:	d1f3      	bne.n	8005884 <HAL_PCD_IRQHandler+0x48a>
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 800589c:	b2f1      	uxtb	r1, r6
 800589e:	4620      	mov	r0, r4
 80058a0:	f7ff fd91 	bl	80053c6 <HAL_PCD_EP_Abort>
 80058a4:	e7ee      	b.n	8005884 <HAL_PCD_IRQHandler+0x48a>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80058a6:	6820      	ldr	r0, [r4, #0]
 80058a8:	f001 ff20 	bl	80076ec <USB_ReadInterrupts>
 80058ac:	f410 1f80 	tst.w	r0, #1048576	@ 0x100000
 80058b0:	d125      	bne.n	80058fe <HAL_PCD_IRQHandler+0x504>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80058b2:	6820      	ldr	r0, [r4, #0]
 80058b4:	f001 ff1a 	bl	80076ec <USB_ReadInterrupts>
 80058b8:	f410 1f00 	tst.w	r0, #2097152	@ 0x200000
 80058bc:	d059      	beq.n	8005972 <HAL_PCD_IRQHandler+0x578>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80058be:	2301      	movs	r3, #1
 80058c0:	e026      	b.n	8005910 <HAL_PCD_IRQHandler+0x516>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80058c2:	3601      	adds	r6, #1
 80058c4:	7923      	ldrb	r3, [r4, #4]
 80058c6:	42b3      	cmp	r3, r6
 80058c8:	d91b      	bls.n	8005902 <HAL_PCD_IRQHandler+0x508>
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80058ca:	eb05 1346 	add.w	r3, r5, r6, lsl #5
 80058ce:	f8d3 2900 	ldr.w	r2, [r3, #2304]	@ 0x900
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80058d2:	eb06 03c6 	add.w	r3, r6, r6, lsl #3
 80058d6:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80058da:	7e1b      	ldrb	r3, [r3, #24]
 80058dc:	2b01      	cmp	r3, #1
 80058de:	d1f0      	bne.n	80058c2 <HAL_PCD_IRQHandler+0x4c8>
 80058e0:	2a00      	cmp	r2, #0
 80058e2:	daee      	bge.n	80058c2 <HAL_PCD_IRQHandler+0x4c8>
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80058e4:	eb06 03c6 	add.w	r3, r6, r6, lsl #3
 80058e8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80058ec:	2201      	movs	r2, #1
 80058ee:	75da      	strb	r2, [r3, #23]
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80058f0:	f066 017f 	orn	r1, r6, #127	@ 0x7f
 80058f4:	b2c9      	uxtb	r1, r1
 80058f6:	4620      	mov	r0, r4
 80058f8:	f7ff fd65 	bl	80053c6 <HAL_PCD_EP_Abort>
 80058fc:	e7e1      	b.n	80058c2 <HAL_PCD_IRQHandler+0x4c8>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80058fe:	2601      	movs	r6, #1
 8005900:	e7e0      	b.n	80058c4 <HAL_PCD_IRQHandler+0x4ca>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8005902:	6822      	ldr	r2, [r4, #0]
 8005904:	6953      	ldr	r3, [r2, #20]
 8005906:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800590a:	6153      	str	r3, [r2, #20]
 800590c:	e7d1      	b.n	80058b2 <HAL_PCD_IRQHandler+0x4b8>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800590e:	3301      	adds	r3, #1
 8005910:	7922      	ldrb	r2, [r4, #4]
 8005912:	429a      	cmp	r2, r3
 8005914:	d928      	bls.n	8005968 <HAL_PCD_IRQHandler+0x56e>
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8005916:	eb05 1243 	add.w	r2, r5, r3, lsl #5
 800591a:	f8d2 1b00 	ldr.w	r1, [r2, #2816]	@ 0xb00
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800591e:	eb03 02c3 	add.w	r2, r3, r3, lsl #3
 8005922:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8005926:	f892 2258 	ldrb.w	r2, [r2, #600]	@ 0x258
 800592a:	2a01      	cmp	r2, #1
 800592c:	d1ef      	bne.n	800590e <HAL_PCD_IRQHandler+0x514>
 800592e:	2900      	cmp	r1, #0
 8005930:	daed      	bge.n	800590e <HAL_PCD_IRQHandler+0x514>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8005932:	f401 3180 	and.w	r1, r1, #65536	@ 0x10000
 8005936:	f8d4 24d4 	ldr.w	r2, [r4, #1236]	@ 0x4d4
 800593a:	f002 0201 	and.w	r2, r2, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800593e:	4291      	cmp	r1, r2
 8005940:	d1e5      	bne.n	800590e <HAL_PCD_IRQHandler+0x514>
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8005942:	eb03 02c3 	add.w	r2, r3, r3, lsl #3
 8005946:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800594a:	2101      	movs	r1, #1
 800594c:	f882 1257 	strb.w	r1, [r2, #599]	@ 0x257
          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8005950:	69aa      	ldr	r2, [r5, #24]
 8005952:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8005956:	61aa      	str	r2, [r5, #24]
          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8005958:	696a      	ldr	r2, [r5, #20]
 800595a:	f012 0f80 	tst.w	r2, #128	@ 0x80
 800595e:	d1d6      	bne.n	800590e <HAL_PCD_IRQHandler+0x514>
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005966:	607b      	str	r3, [r7, #4]
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8005968:	6822      	ldr	r2, [r4, #0]
 800596a:	6953      	ldr	r3, [r2, #20]
 800596c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005970:	6153      	str	r3, [r2, #20]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8005972:	6820      	ldr	r0, [r4, #0]
 8005974:	f001 feba 	bl	80076ec <USB_ReadInterrupts>
 8005978:	f010 4f80 	tst.w	r0, #1073741824	@ 0x40000000
 800597c:	d110      	bne.n	80059a0 <HAL_PCD_IRQHandler+0x5a6>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800597e:	6820      	ldr	r0, [r4, #0]
 8005980:	f001 feb4 	bl	80076ec <USB_ReadInterrupts>
 8005984:	f010 0f04 	tst.w	r0, #4
 8005988:	f43f ad40 	beq.w	800540c <HAL_PCD_IRQHandler+0x12>
      RegVal = hpcd->Instance->GOTGINT;
 800598c:	6823      	ldr	r3, [r4, #0]
 800598e:	685d      	ldr	r5, [r3, #4]
      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8005990:	f015 0f04 	tst.w	r5, #4
 8005994:	d10d      	bne.n	80059b2 <HAL_PCD_IRQHandler+0x5b8>
      hpcd->Instance->GOTGINT |= RegVal;
 8005996:	6822      	ldr	r2, [r4, #0]
 8005998:	6853      	ldr	r3, [r2, #4]
 800599a:	432b      	orrs	r3, r5
 800599c:	6053      	str	r3, [r2, #4]
 800599e:	e535      	b.n	800540c <HAL_PCD_IRQHandler+0x12>
      HAL_PCD_ConnectCallback(hpcd);
 80059a0:	4620      	mov	r0, r4
 80059a2:	f004 f8b1 	bl	8009b08 <HAL_PCD_ConnectCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80059a6:	6822      	ldr	r2, [r4, #0]
 80059a8:	6953      	ldr	r3, [r2, #20]
 80059aa:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80059ae:	6153      	str	r3, [r2, #20]
 80059b0:	e7e5      	b.n	800597e <HAL_PCD_IRQHandler+0x584>
        HAL_PCD_DisconnectCallback(hpcd);
 80059b2:	4620      	mov	r0, r4
 80059b4:	f004 f8ae 	bl	8009b14 <HAL_PCD_DisconnectCallback>
 80059b8:	e7ed      	b.n	8005996 <HAL_PCD_IRQHandler+0x59c>

080059ba <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80059ba:	b410      	push	{r4}
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80059bc:	6804      	ldr	r4, [r0, #0]
 80059be:	6a60      	ldr	r0, [r4, #36]	@ 0x24

  if (fifo == 0U)
 80059c0:	b931      	cbnz	r1, 80059d0 <HAL_PCDEx_SetTxFiFo+0x16>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80059c2:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 80059c6:	62a0      	str	r0, [r4, #40]	@ 0x28
    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
  }

  return HAL_OK;
}
 80059c8:	2000      	movs	r0, #0
 80059ca:	f85d 4b04 	ldr.w	r4, [sp], #4
 80059ce:	4770      	bx	lr
 80059d0:	468c      	mov	ip, r1
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80059d2:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80059d4:	eb00 4013 	add.w	r0, r0, r3, lsr #16
    for (i = 0U; i < (fifo - 1U); i++)
 80059d8:	2300      	movs	r3, #0
 80059da:	e008      	b.n	80059ee <HAL_PCDEx_SetTxFiFo+0x34>
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80059dc:	f103 0140 	add.w	r1, r3, #64	@ 0x40
 80059e0:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 80059e4:	6849      	ldr	r1, [r1, #4]
 80059e6:	eb00 4011 	add.w	r0, r0, r1, lsr #16
    for (i = 0U; i < (fifo - 1U); i++)
 80059ea:	3301      	adds	r3, #1
 80059ec:	b2db      	uxtb	r3, r3
 80059ee:	f10c 31ff 	add.w	r1, ip, #4294967295
 80059f2:	428b      	cmp	r3, r1
 80059f4:	d3f2      	bcc.n	80059dc <HAL_PCDEx_SetTxFiFo+0x22>
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80059f6:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 80059fa:	f10c 013f 	add.w	r1, ip, #63	@ 0x3f
 80059fe:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 8005a02:	6060      	str	r0, [r4, #4]
 8005a04:	e7e0      	b.n	80059c8 <HAL_PCDEx_SetTxFiFo+0xe>

08005a06 <HAL_PCDEx_SetRxFiFo>:
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
  hpcd->Instance->GRXFSIZ = size;
 8005a06:	6803      	ldr	r3, [r0, #0]
 8005a08:	6259      	str	r1, [r3, #36]	@ 0x24

  return HAL_OK;
}
 8005a0a:	2000      	movs	r0, #0
 8005a0c:	4770      	bx	lr

08005a0e <HAL_PCDEx_LPM_Callback>:
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8005a0e:	4770      	bx	lr

08005a10 <HAL_RCC_OscConfig>:
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005a10:	2800      	cmp	r0, #0
 8005a12:	f000 81e0 	beq.w	8005dd6 <HAL_RCC_OscConfig+0x3c6>
{
 8005a16:	b570      	push	{r4, r5, r6, lr}
 8005a18:	b082      	sub	sp, #8
 8005a1a:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005a1c:	6803      	ldr	r3, [r0, #0]
 8005a1e:	f013 0f01 	tst.w	r3, #1
 8005a22:	d03b      	beq.n	8005a9c <HAL_RCC_OscConfig+0x8c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8005a24:	4b9f      	ldr	r3, [pc, #636]	@ (8005ca4 <HAL_RCC_OscConfig+0x294>)
 8005a26:	689b      	ldr	r3, [r3, #8]
 8005a28:	f003 030c 	and.w	r3, r3, #12
 8005a2c:	2b04      	cmp	r3, #4
 8005a2e:	d02c      	beq.n	8005a8a <HAL_RCC_OscConfig+0x7a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005a30:	4b9c      	ldr	r3, [pc, #624]	@ (8005ca4 <HAL_RCC_OscConfig+0x294>)
 8005a32:	689b      	ldr	r3, [r3, #8]
 8005a34:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8005a38:	2b08      	cmp	r3, #8
 8005a3a:	d021      	beq.n	8005a80 <HAL_RCC_OscConfig+0x70>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005a3c:	6863      	ldr	r3, [r4, #4]
 8005a3e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005a42:	d04f      	beq.n	8005ae4 <HAL_RCC_OscConfig+0xd4>
 8005a44:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005a48:	d052      	beq.n	8005af0 <HAL_RCC_OscConfig+0xe0>
 8005a4a:	4b96      	ldr	r3, [pc, #600]	@ (8005ca4 <HAL_RCC_OscConfig+0x294>)
 8005a4c:	681a      	ldr	r2, [r3, #0]
 8005a4e:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8005a52:	601a      	str	r2, [r3, #0]
 8005a54:	681a      	ldr	r2, [r3, #0]
 8005a56:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8005a5a:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005a5c:	6863      	ldr	r3, [r4, #4]
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d050      	beq.n	8005b04 <HAL_RCC_OscConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005a62:	f7fe f96d 	bl	8003d40 <HAL_GetTick>
 8005a66:	4605      	mov	r5, r0

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005a68:	4b8e      	ldr	r3, [pc, #568]	@ (8005ca4 <HAL_RCC_OscConfig+0x294>)
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8005a70:	d114      	bne.n	8005a9c <HAL_RCC_OscConfig+0x8c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005a72:	f7fe f965 	bl	8003d40 <HAL_GetTick>
 8005a76:	1b40      	subs	r0, r0, r5
 8005a78:	2864      	cmp	r0, #100	@ 0x64
 8005a7a:	d9f5      	bls.n	8005a68 <HAL_RCC_OscConfig+0x58>
          {
            return HAL_TIMEOUT;
 8005a7c:	2003      	movs	r0, #3
 8005a7e:	e1b1      	b.n	8005de4 <HAL_RCC_OscConfig+0x3d4>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005a80:	4b88      	ldr	r3, [pc, #544]	@ (8005ca4 <HAL_RCC_OscConfig+0x294>)
 8005a82:	685b      	ldr	r3, [r3, #4]
 8005a84:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 8005a88:	d0d8      	beq.n	8005a3c <HAL_RCC_OscConfig+0x2c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005a8a:	4b86      	ldr	r3, [pc, #536]	@ (8005ca4 <HAL_RCC_OscConfig+0x294>)
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8005a92:	d003      	beq.n	8005a9c <HAL_RCC_OscConfig+0x8c>
 8005a94:	6863      	ldr	r3, [r4, #4]
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	f000 819f 	beq.w	8005dda <HAL_RCC_OscConfig+0x3ca>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005a9c:	6823      	ldr	r3, [r4, #0]
 8005a9e:	f013 0f02 	tst.w	r3, #2
 8005aa2:	d054      	beq.n	8005b4e <HAL_RCC_OscConfig+0x13e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8005aa4:	4b7f      	ldr	r3, [pc, #508]	@ (8005ca4 <HAL_RCC_OscConfig+0x294>)
 8005aa6:	689b      	ldr	r3, [r3, #8]
 8005aa8:	f013 0f0c 	tst.w	r3, #12
 8005aac:	d03e      	beq.n	8005b2c <HAL_RCC_OscConfig+0x11c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005aae:	4b7d      	ldr	r3, [pc, #500]	@ (8005ca4 <HAL_RCC_OscConfig+0x294>)
 8005ab0:	689b      	ldr	r3, [r3, #8]
 8005ab2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8005ab6:	2b08      	cmp	r3, #8
 8005ab8:	d033      	beq.n	8005b22 <HAL_RCC_OscConfig+0x112>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005aba:	68e3      	ldr	r3, [r4, #12]
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d068      	beq.n	8005b92 <HAL_RCC_OscConfig+0x182>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005ac0:	4b79      	ldr	r3, [pc, #484]	@ (8005ca8 <HAL_RCC_OscConfig+0x298>)
 8005ac2:	2201      	movs	r2, #1
 8005ac4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ac6:	f7fe f93b 	bl	8003d40 <HAL_GetTick>
 8005aca:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005acc:	4b75      	ldr	r3, [pc, #468]	@ (8005ca4 <HAL_RCC_OscConfig+0x294>)
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	f013 0f02 	tst.w	r3, #2
 8005ad4:	d154      	bne.n	8005b80 <HAL_RCC_OscConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005ad6:	f7fe f933 	bl	8003d40 <HAL_GetTick>
 8005ada:	1b40      	subs	r0, r0, r5
 8005adc:	2802      	cmp	r0, #2
 8005ade:	d9f5      	bls.n	8005acc <HAL_RCC_OscConfig+0xbc>
          {
            return HAL_TIMEOUT;
 8005ae0:	2003      	movs	r0, #3
 8005ae2:	e17f      	b.n	8005de4 <HAL_RCC_OscConfig+0x3d4>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005ae4:	4a6f      	ldr	r2, [pc, #444]	@ (8005ca4 <HAL_RCC_OscConfig+0x294>)
 8005ae6:	6813      	ldr	r3, [r2, #0]
 8005ae8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005aec:	6013      	str	r3, [r2, #0]
 8005aee:	e7b5      	b.n	8005a5c <HAL_RCC_OscConfig+0x4c>
 8005af0:	4b6c      	ldr	r3, [pc, #432]	@ (8005ca4 <HAL_RCC_OscConfig+0x294>)
 8005af2:	681a      	ldr	r2, [r3, #0]
 8005af4:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8005af8:	601a      	str	r2, [r3, #0]
 8005afa:	681a      	ldr	r2, [r3, #0]
 8005afc:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8005b00:	601a      	str	r2, [r3, #0]
 8005b02:	e7ab      	b.n	8005a5c <HAL_RCC_OscConfig+0x4c>
        tickstart = HAL_GetTick();
 8005b04:	f7fe f91c 	bl	8003d40 <HAL_GetTick>
 8005b08:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005b0a:	4b66      	ldr	r3, [pc, #408]	@ (8005ca4 <HAL_RCC_OscConfig+0x294>)
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8005b12:	d0c3      	beq.n	8005a9c <HAL_RCC_OscConfig+0x8c>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005b14:	f7fe f914 	bl	8003d40 <HAL_GetTick>
 8005b18:	1b40      	subs	r0, r0, r5
 8005b1a:	2864      	cmp	r0, #100	@ 0x64
 8005b1c:	d9f5      	bls.n	8005b0a <HAL_RCC_OscConfig+0xfa>
            return HAL_TIMEOUT;
 8005b1e:	2003      	movs	r0, #3
 8005b20:	e160      	b.n	8005de4 <HAL_RCC_OscConfig+0x3d4>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005b22:	4b60      	ldr	r3, [pc, #384]	@ (8005ca4 <HAL_RCC_OscConfig+0x294>)
 8005b24:	685b      	ldr	r3, [r3, #4]
 8005b26:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 8005b2a:	d1c6      	bne.n	8005aba <HAL_RCC_OscConfig+0xaa>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005b2c:	4b5d      	ldr	r3, [pc, #372]	@ (8005ca4 <HAL_RCC_OscConfig+0x294>)
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	f013 0f02 	tst.w	r3, #2
 8005b34:	d003      	beq.n	8005b3e <HAL_RCC_OscConfig+0x12e>
 8005b36:	68e3      	ldr	r3, [r4, #12]
 8005b38:	2b01      	cmp	r3, #1
 8005b3a:	f040 8150 	bne.w	8005dde <HAL_RCC_OscConfig+0x3ce>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005b3e:	4a59      	ldr	r2, [pc, #356]	@ (8005ca4 <HAL_RCC_OscConfig+0x294>)
 8005b40:	6813      	ldr	r3, [r2, #0]
 8005b42:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8005b46:	6921      	ldr	r1, [r4, #16]
 8005b48:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8005b4c:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005b4e:	6823      	ldr	r3, [r4, #0]
 8005b50:	f013 0f08 	tst.w	r3, #8
 8005b54:	d042      	beq.n	8005bdc <HAL_RCC_OscConfig+0x1cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005b56:	6963      	ldr	r3, [r4, #20]
 8005b58:	b36b      	cbz	r3, 8005bb6 <HAL_RCC_OscConfig+0x1a6>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005b5a:	4b53      	ldr	r3, [pc, #332]	@ (8005ca8 <HAL_RCC_OscConfig+0x298>)
 8005b5c:	2201      	movs	r2, #1
 8005b5e:	f8c3 2e80 	str.w	r2, [r3, #3712]	@ 0xe80

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b62:	f7fe f8ed 	bl	8003d40 <HAL_GetTick>
 8005b66:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005b68:	4b4e      	ldr	r3, [pc, #312]	@ (8005ca4 <HAL_RCC_OscConfig+0x294>)
 8005b6a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005b6c:	f013 0f02 	tst.w	r3, #2
 8005b70:	d134      	bne.n	8005bdc <HAL_RCC_OscConfig+0x1cc>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005b72:	f7fe f8e5 	bl	8003d40 <HAL_GetTick>
 8005b76:	1b40      	subs	r0, r0, r5
 8005b78:	2802      	cmp	r0, #2
 8005b7a:	d9f5      	bls.n	8005b68 <HAL_RCC_OscConfig+0x158>
        {
          return HAL_TIMEOUT;
 8005b7c:	2003      	movs	r0, #3
 8005b7e:	e131      	b.n	8005de4 <HAL_RCC_OscConfig+0x3d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005b80:	4a48      	ldr	r2, [pc, #288]	@ (8005ca4 <HAL_RCC_OscConfig+0x294>)
 8005b82:	6813      	ldr	r3, [r2, #0]
 8005b84:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8005b88:	6921      	ldr	r1, [r4, #16]
 8005b8a:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8005b8e:	6013      	str	r3, [r2, #0]
 8005b90:	e7dd      	b.n	8005b4e <HAL_RCC_OscConfig+0x13e>
        __HAL_RCC_HSI_DISABLE();
 8005b92:	4b45      	ldr	r3, [pc, #276]	@ (8005ca8 <HAL_RCC_OscConfig+0x298>)
 8005b94:	2200      	movs	r2, #0
 8005b96:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8005b98:	f7fe f8d2 	bl	8003d40 <HAL_GetTick>
 8005b9c:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005b9e:	4b41      	ldr	r3, [pc, #260]	@ (8005ca4 <HAL_RCC_OscConfig+0x294>)
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	f013 0f02 	tst.w	r3, #2
 8005ba6:	d0d2      	beq.n	8005b4e <HAL_RCC_OscConfig+0x13e>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005ba8:	f7fe f8ca 	bl	8003d40 <HAL_GetTick>
 8005bac:	1b40      	subs	r0, r0, r5
 8005bae:	2802      	cmp	r0, #2
 8005bb0:	d9f5      	bls.n	8005b9e <HAL_RCC_OscConfig+0x18e>
            return HAL_TIMEOUT;
 8005bb2:	2003      	movs	r0, #3
 8005bb4:	e116      	b.n	8005de4 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005bb6:	4b3c      	ldr	r3, [pc, #240]	@ (8005ca8 <HAL_RCC_OscConfig+0x298>)
 8005bb8:	2200      	movs	r2, #0
 8005bba:	f8c3 2e80 	str.w	r2, [r3, #3712]	@ 0xe80

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005bbe:	f7fe f8bf 	bl	8003d40 <HAL_GetTick>
 8005bc2:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005bc4:	4b37      	ldr	r3, [pc, #220]	@ (8005ca4 <HAL_RCC_OscConfig+0x294>)
 8005bc6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005bc8:	f013 0f02 	tst.w	r3, #2
 8005bcc:	d006      	beq.n	8005bdc <HAL_RCC_OscConfig+0x1cc>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005bce:	f7fe f8b7 	bl	8003d40 <HAL_GetTick>
 8005bd2:	1b40      	subs	r0, r0, r5
 8005bd4:	2802      	cmp	r0, #2
 8005bd6:	d9f5      	bls.n	8005bc4 <HAL_RCC_OscConfig+0x1b4>
        {
          return HAL_TIMEOUT;
 8005bd8:	2003      	movs	r0, #3
 8005bda:	e103      	b.n	8005de4 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005bdc:	6823      	ldr	r3, [r4, #0]
 8005bde:	f013 0f04 	tst.w	r3, #4
 8005be2:	d077      	beq.n	8005cd4 <HAL_RCC_OscConfig+0x2c4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005be4:	4b2f      	ldr	r3, [pc, #188]	@ (8005ca4 <HAL_RCC_OscConfig+0x294>)
 8005be6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005be8:	f013 5f80 	tst.w	r3, #268435456	@ 0x10000000
 8005bec:	d133      	bne.n	8005c56 <HAL_RCC_OscConfig+0x246>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005bee:	2300      	movs	r3, #0
 8005bf0:	9301      	str	r3, [sp, #4]
 8005bf2:	4b2c      	ldr	r3, [pc, #176]	@ (8005ca4 <HAL_RCC_OscConfig+0x294>)
 8005bf4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005bf6:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8005bfa:	641a      	str	r2, [r3, #64]	@ 0x40
 8005bfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005bfe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005c02:	9301      	str	r3, [sp, #4]
 8005c04:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8005c06:	2501      	movs	r5, #1
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005c08:	4b28      	ldr	r3, [pc, #160]	@ (8005cac <HAL_RCC_OscConfig+0x29c>)
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8005c10:	d023      	beq.n	8005c5a <HAL_RCC_OscConfig+0x24a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005c12:	68a3      	ldr	r3, [r4, #8]
 8005c14:	2b01      	cmp	r3, #1
 8005c16:	d034      	beq.n	8005c82 <HAL_RCC_OscConfig+0x272>
 8005c18:	2b05      	cmp	r3, #5
 8005c1a:	d038      	beq.n	8005c8e <HAL_RCC_OscConfig+0x27e>
 8005c1c:	4b21      	ldr	r3, [pc, #132]	@ (8005ca4 <HAL_RCC_OscConfig+0x294>)
 8005c1e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8005c20:	f022 0201 	bic.w	r2, r2, #1
 8005c24:	671a      	str	r2, [r3, #112]	@ 0x70
 8005c26:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8005c28:	f022 0204 	bic.w	r2, r2, #4
 8005c2c:	671a      	str	r2, [r3, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005c2e:	68a3      	ldr	r3, [r4, #8]
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d03d      	beq.n	8005cb0 <HAL_RCC_OscConfig+0x2a0>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c34:	f7fe f884 	bl	8003d40 <HAL_GetTick>
 8005c38:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005c3a:	4b1a      	ldr	r3, [pc, #104]	@ (8005ca4 <HAL_RCC_OscConfig+0x294>)
 8005c3c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005c3e:	f013 0f02 	tst.w	r3, #2
 8005c42:	d146      	bne.n	8005cd2 <HAL_RCC_OscConfig+0x2c2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005c44:	f7fe f87c 	bl	8003d40 <HAL_GetTick>
 8005c48:	1b80      	subs	r0, r0, r6
 8005c4a:	f241 3388 	movw	r3, #5000	@ 0x1388
 8005c4e:	4298      	cmp	r0, r3
 8005c50:	d9f3      	bls.n	8005c3a <HAL_RCC_OscConfig+0x22a>
        {
          return HAL_TIMEOUT;
 8005c52:	2003      	movs	r0, #3
 8005c54:	e0c6      	b.n	8005de4 <HAL_RCC_OscConfig+0x3d4>
    FlagStatus       pwrclkchanged = RESET;
 8005c56:	2500      	movs	r5, #0
 8005c58:	e7d6      	b.n	8005c08 <HAL_RCC_OscConfig+0x1f8>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005c5a:	4a14      	ldr	r2, [pc, #80]	@ (8005cac <HAL_RCC_OscConfig+0x29c>)
 8005c5c:	6813      	ldr	r3, [r2, #0]
 8005c5e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005c62:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8005c64:	f7fe f86c 	bl	8003d40 <HAL_GetTick>
 8005c68:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005c6a:	4b10      	ldr	r3, [pc, #64]	@ (8005cac <HAL_RCC_OscConfig+0x29c>)
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8005c72:	d1ce      	bne.n	8005c12 <HAL_RCC_OscConfig+0x202>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005c74:	f7fe f864 	bl	8003d40 <HAL_GetTick>
 8005c78:	1b80      	subs	r0, r0, r6
 8005c7a:	2802      	cmp	r0, #2
 8005c7c:	d9f5      	bls.n	8005c6a <HAL_RCC_OscConfig+0x25a>
          return HAL_TIMEOUT;
 8005c7e:	2003      	movs	r0, #3
 8005c80:	e0b0      	b.n	8005de4 <HAL_RCC_OscConfig+0x3d4>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005c82:	4a08      	ldr	r2, [pc, #32]	@ (8005ca4 <HAL_RCC_OscConfig+0x294>)
 8005c84:	6f13      	ldr	r3, [r2, #112]	@ 0x70
 8005c86:	f043 0301 	orr.w	r3, r3, #1
 8005c8a:	6713      	str	r3, [r2, #112]	@ 0x70
 8005c8c:	e7cf      	b.n	8005c2e <HAL_RCC_OscConfig+0x21e>
 8005c8e:	4b05      	ldr	r3, [pc, #20]	@ (8005ca4 <HAL_RCC_OscConfig+0x294>)
 8005c90:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8005c92:	f042 0204 	orr.w	r2, r2, #4
 8005c96:	671a      	str	r2, [r3, #112]	@ 0x70
 8005c98:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8005c9a:	f042 0201 	orr.w	r2, r2, #1
 8005c9e:	671a      	str	r2, [r3, #112]	@ 0x70
 8005ca0:	e7c5      	b.n	8005c2e <HAL_RCC_OscConfig+0x21e>
 8005ca2:	bf00      	nop
 8005ca4:	40023800 	.word	0x40023800
 8005ca8:	42470000 	.word	0x42470000
 8005cac:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005cb0:	f7fe f846 	bl	8003d40 <HAL_GetTick>
 8005cb4:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005cb6:	4b52      	ldr	r3, [pc, #328]	@ (8005e00 <HAL_RCC_OscConfig+0x3f0>)
 8005cb8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005cba:	f013 0f02 	tst.w	r3, #2
 8005cbe:	d008      	beq.n	8005cd2 <HAL_RCC_OscConfig+0x2c2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005cc0:	f7fe f83e 	bl	8003d40 <HAL_GetTick>
 8005cc4:	1b80      	subs	r0, r0, r6
 8005cc6:	f241 3388 	movw	r3, #5000	@ 0x1388
 8005cca:	4298      	cmp	r0, r3
 8005ccc:	d9f3      	bls.n	8005cb6 <HAL_RCC_OscConfig+0x2a6>
        {
          return HAL_TIMEOUT;
 8005cce:	2003      	movs	r0, #3
 8005cd0:	e088      	b.n	8005de4 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005cd2:	b9ed      	cbnz	r5, 8005d10 <HAL_RCC_OscConfig+0x300>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005cd4:	69a3      	ldr	r3, [r4, #24]
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	f000 8083 	beq.w	8005de2 <HAL_RCC_OscConfig+0x3d2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005cdc:	4a48      	ldr	r2, [pc, #288]	@ (8005e00 <HAL_RCC_OscConfig+0x3f0>)
 8005cde:	6892      	ldr	r2, [r2, #8]
 8005ce0:	f002 020c 	and.w	r2, r2, #12
 8005ce4:	2a08      	cmp	r2, #8
 8005ce6:	d051      	beq.n	8005d8c <HAL_RCC_OscConfig+0x37c>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005ce8:	2b02      	cmp	r3, #2
 8005cea:	d017      	beq.n	8005d1c <HAL_RCC_OscConfig+0x30c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005cec:	4b45      	ldr	r3, [pc, #276]	@ (8005e04 <HAL_RCC_OscConfig+0x3f4>)
 8005cee:	2200      	movs	r2, #0
 8005cf0:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005cf2:	f7fe f825 	bl	8003d40 <HAL_GetTick>
 8005cf6:	4604      	mov	r4, r0

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005cf8:	4b41      	ldr	r3, [pc, #260]	@ (8005e00 <HAL_RCC_OscConfig+0x3f0>)
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8005d00:	d042      	beq.n	8005d88 <HAL_RCC_OscConfig+0x378>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005d02:	f7fe f81d 	bl	8003d40 <HAL_GetTick>
 8005d06:	1b00      	subs	r0, r0, r4
 8005d08:	2802      	cmp	r0, #2
 8005d0a:	d9f5      	bls.n	8005cf8 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8005d0c:	2003      	movs	r0, #3
 8005d0e:	e069      	b.n	8005de4 <HAL_RCC_OscConfig+0x3d4>
      __HAL_RCC_PWR_CLK_DISABLE();
 8005d10:	4a3b      	ldr	r2, [pc, #236]	@ (8005e00 <HAL_RCC_OscConfig+0x3f0>)
 8005d12:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8005d14:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005d18:	6413      	str	r3, [r2, #64]	@ 0x40
 8005d1a:	e7db      	b.n	8005cd4 <HAL_RCC_OscConfig+0x2c4>
        __HAL_RCC_PLL_DISABLE();
 8005d1c:	4b39      	ldr	r3, [pc, #228]	@ (8005e04 <HAL_RCC_OscConfig+0x3f4>)
 8005d1e:	2200      	movs	r2, #0
 8005d20:	661a      	str	r2, [r3, #96]	@ 0x60
        tickstart = HAL_GetTick();
 8005d22:	f7fe f80d 	bl	8003d40 <HAL_GetTick>
 8005d26:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005d28:	4b35      	ldr	r3, [pc, #212]	@ (8005e00 <HAL_RCC_OscConfig+0x3f0>)
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8005d30:	d006      	beq.n	8005d40 <HAL_RCC_OscConfig+0x330>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005d32:	f7fe f805 	bl	8003d40 <HAL_GetTick>
 8005d36:	1b40      	subs	r0, r0, r5
 8005d38:	2802      	cmp	r0, #2
 8005d3a:	d9f5      	bls.n	8005d28 <HAL_RCC_OscConfig+0x318>
            return HAL_TIMEOUT;
 8005d3c:	2003      	movs	r0, #3
 8005d3e:	e051      	b.n	8005de4 <HAL_RCC_OscConfig+0x3d4>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005d40:	69e3      	ldr	r3, [r4, #28]
 8005d42:	6a22      	ldr	r2, [r4, #32]
 8005d44:	4313      	orrs	r3, r2
 8005d46:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8005d48:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8005d4c:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8005d4e:	0852      	lsrs	r2, r2, #1
 8005d50:	3a01      	subs	r2, #1
 8005d52:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005d56:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8005d58:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8005d5c:	4a28      	ldr	r2, [pc, #160]	@ (8005e00 <HAL_RCC_OscConfig+0x3f0>)
 8005d5e:	6053      	str	r3, [r2, #4]
        __HAL_RCC_PLL_ENABLE();
 8005d60:	4b28      	ldr	r3, [pc, #160]	@ (8005e04 <HAL_RCC_OscConfig+0x3f4>)
 8005d62:	2201      	movs	r2, #1
 8005d64:	661a      	str	r2, [r3, #96]	@ 0x60
        tickstart = HAL_GetTick();
 8005d66:	f7fd ffeb 	bl	8003d40 <HAL_GetTick>
 8005d6a:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005d6c:	4b24      	ldr	r3, [pc, #144]	@ (8005e00 <HAL_RCC_OscConfig+0x3f0>)
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8005d74:	d106      	bne.n	8005d84 <HAL_RCC_OscConfig+0x374>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005d76:	f7fd ffe3 	bl	8003d40 <HAL_GetTick>
 8005d7a:	1b00      	subs	r0, r0, r4
 8005d7c:	2802      	cmp	r0, #2
 8005d7e:	d9f5      	bls.n	8005d6c <HAL_RCC_OscConfig+0x35c>
            return HAL_TIMEOUT;
 8005d80:	2003      	movs	r0, #3
 8005d82:	e02f      	b.n	8005de4 <HAL_RCC_OscConfig+0x3d4>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 8005d84:	2000      	movs	r0, #0
 8005d86:	e02d      	b.n	8005de4 <HAL_RCC_OscConfig+0x3d4>
 8005d88:	2000      	movs	r0, #0
 8005d8a:	e02b      	b.n	8005de4 <HAL_RCC_OscConfig+0x3d4>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005d8c:	2b01      	cmp	r3, #1
 8005d8e:	d02b      	beq.n	8005de8 <HAL_RCC_OscConfig+0x3d8>
        pll_config = RCC->PLLCFGR;
 8005d90:	4b1b      	ldr	r3, [pc, #108]	@ (8005e00 <HAL_RCC_OscConfig+0x3f0>)
 8005d92:	685b      	ldr	r3, [r3, #4]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005d94:	f403 0180 	and.w	r1, r3, #4194304	@ 0x400000
 8005d98:	69e2      	ldr	r2, [r4, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005d9a:	4291      	cmp	r1, r2
 8005d9c:	d126      	bne.n	8005dec <HAL_RCC_OscConfig+0x3dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005d9e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005da2:	6a21      	ldr	r1, [r4, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005da4:	428a      	cmp	r2, r1
 8005da6:	d123      	bne.n	8005df0 <HAL_RCC_OscConfig+0x3e0>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005da8:	6a61      	ldr	r1, [r4, #36]	@ 0x24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005daa:	f647 72c0 	movw	r2, #32704	@ 0x7fc0
 8005dae:	401a      	ands	r2, r3
 8005db0:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 8005db4:	d11e      	bne.n	8005df4 <HAL_RCC_OscConfig+0x3e4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005db6:	f403 3140 	and.w	r1, r3, #196608	@ 0x30000
 8005dba:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8005dbc:	0852      	lsrs	r2, r2, #1
 8005dbe:	3a01      	subs	r2, #1
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005dc0:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 8005dc4:	d118      	bne.n	8005df8 <HAL_RCC_OscConfig+0x3e8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005dc6:	f003 6370 	and.w	r3, r3, #251658240	@ 0xf000000
 8005dca:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005dcc:	ebb3 6f02 	cmp.w	r3, r2, lsl #24
 8005dd0:	d114      	bne.n	8005dfc <HAL_RCC_OscConfig+0x3ec>
  return HAL_OK;
 8005dd2:	2000      	movs	r0, #0
 8005dd4:	e006      	b.n	8005de4 <HAL_RCC_OscConfig+0x3d4>
    return HAL_ERROR;
 8005dd6:	2001      	movs	r0, #1
}
 8005dd8:	4770      	bx	lr
        return HAL_ERROR;
 8005dda:	2001      	movs	r0, #1
 8005ddc:	e002      	b.n	8005de4 <HAL_RCC_OscConfig+0x3d4>
        return HAL_ERROR;
 8005dde:	2001      	movs	r0, #1
 8005de0:	e000      	b.n	8005de4 <HAL_RCC_OscConfig+0x3d4>
  return HAL_OK;
 8005de2:	2000      	movs	r0, #0
}
 8005de4:	b002      	add	sp, #8
 8005de6:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 8005de8:	2001      	movs	r0, #1
 8005dea:	e7fb      	b.n	8005de4 <HAL_RCC_OscConfig+0x3d4>
          return HAL_ERROR;
 8005dec:	2001      	movs	r0, #1
 8005dee:	e7f9      	b.n	8005de4 <HAL_RCC_OscConfig+0x3d4>
 8005df0:	2001      	movs	r0, #1
 8005df2:	e7f7      	b.n	8005de4 <HAL_RCC_OscConfig+0x3d4>
 8005df4:	2001      	movs	r0, #1
 8005df6:	e7f5      	b.n	8005de4 <HAL_RCC_OscConfig+0x3d4>
 8005df8:	2001      	movs	r0, #1
 8005dfa:	e7f3      	b.n	8005de4 <HAL_RCC_OscConfig+0x3d4>
 8005dfc:	2001      	movs	r0, #1
 8005dfe:	e7f1      	b.n	8005de4 <HAL_RCC_OscConfig+0x3d4>
 8005e00:	40023800 	.word	0x40023800
 8005e04:	42470000 	.word	0x42470000

08005e08 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005e08:	b508      	push	{r3, lr}
  uint32_t pllvco = 0U;
  uint32_t pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005e0a:	4b26      	ldr	r3, [pc, #152]	@ (8005ea4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8005e0c:	689b      	ldr	r3, [r3, #8]
 8005e0e:	f003 030c 	and.w	r3, r3, #12
 8005e12:	2b04      	cmp	r3, #4
 8005e14:	d041      	beq.n	8005e9a <HAL_RCC_GetSysClockFreq+0x92>
 8005e16:	2b08      	cmp	r3, #8
 8005e18:	d141      	bne.n	8005e9e <HAL_RCC_GetSysClockFreq+0x96>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005e1a:	4b22      	ldr	r3, [pc, #136]	@ (8005ea4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8005e1c:	685a      	ldr	r2, [r3, #4]
 8005e1e:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005e22:	685b      	ldr	r3, [r3, #4]
 8005e24:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 8005e28:	d012      	beq.n	8005e50 <HAL_RCC_GetSysClockFreq+0x48>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005e2a:	4b1e      	ldr	r3, [pc, #120]	@ (8005ea4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8005e2c:	6859      	ldr	r1, [r3, #4]
 8005e2e:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8005e32:	481d      	ldr	r0, [pc, #116]	@ (8005ea8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8005e34:	2300      	movs	r3, #0
 8005e36:	fba1 0100 	umull	r0, r1, r1, r0
 8005e3a:	f7fa fdf7 	bl	8000a2c <__aeabi_uldivmod>
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8005e3e:	4b19      	ldr	r3, [pc, #100]	@ (8005ea4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8005e40:	685b      	ldr	r3, [r3, #4]
 8005e42:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8005e46:	3301      	adds	r3, #1
 8005e48:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco / pllp;
 8005e4a:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8005e4e:	bd08      	pop	{r3, pc}
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005e50:	4b14      	ldr	r3, [pc, #80]	@ (8005ea4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8005e52:	6858      	ldr	r0, [r3, #4]
 8005e54:	f3c0 1088 	ubfx	r0, r0, #6, #9
 8005e58:	ea4f 1c40 	mov.w	ip, r0, lsl #5
 8005e5c:	ebbc 0c00 	subs.w	ip, ip, r0
 8005e60:	eb6e 0e0e 	sbc.w	lr, lr, lr
 8005e64:	ea4f 138e 	mov.w	r3, lr, lsl #6
 8005e68:	ea43 639c 	orr.w	r3, r3, ip, lsr #26
 8005e6c:	ea4f 118c 	mov.w	r1, ip, lsl #6
 8005e70:	ebb1 010c 	subs.w	r1, r1, ip
 8005e74:	eb63 030e 	sbc.w	r3, r3, lr
 8005e78:	00db      	lsls	r3, r3, #3
 8005e7a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005e7e:	00c9      	lsls	r1, r1, #3
 8005e80:	eb11 0c00 	adds.w	ip, r1, r0
 8005e84:	f143 0300 	adc.w	r3, r3, #0
 8005e88:	0299      	lsls	r1, r3, #10
 8005e8a:	2300      	movs	r3, #0
 8005e8c:	ea4f 208c 	mov.w	r0, ip, lsl #10
 8005e90:	ea41 519c 	orr.w	r1, r1, ip, lsr #22
 8005e94:	f7fa fdca 	bl	8000a2c <__aeabi_uldivmod>
 8005e98:	e7d1      	b.n	8005e3e <HAL_RCC_GetSysClockFreq+0x36>
      sysclockfreq = HSE_VALUE;
 8005e9a:	4803      	ldr	r0, [pc, #12]	@ (8005ea8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8005e9c:	e7d7      	b.n	8005e4e <HAL_RCC_GetSysClockFreq+0x46>
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005e9e:	4803      	ldr	r0, [pc, #12]	@ (8005eac <HAL_RCC_GetSysClockFreq+0xa4>)
  return sysclockfreq;
 8005ea0:	e7d5      	b.n	8005e4e <HAL_RCC_GetSysClockFreq+0x46>
 8005ea2:	bf00      	nop
 8005ea4:	40023800 	.word	0x40023800
 8005ea8:	017d7840 	.word	0x017d7840
 8005eac:	00f42400 	.word	0x00f42400

08005eb0 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 8005eb0:	2800      	cmp	r0, #0
 8005eb2:	f000 809b 	beq.w	8005fec <HAL_RCC_ClockConfig+0x13c>
{
 8005eb6:	b570      	push	{r4, r5, r6, lr}
 8005eb8:	460d      	mov	r5, r1
 8005eba:	4604      	mov	r4, r0
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005ebc:	4b4f      	ldr	r3, [pc, #316]	@ (8005ffc <HAL_RCC_ClockConfig+0x14c>)
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	f003 0307 	and.w	r3, r3, #7
 8005ec4:	428b      	cmp	r3, r1
 8005ec6:	d208      	bcs.n	8005eda <HAL_RCC_ClockConfig+0x2a>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005ec8:	b2cb      	uxtb	r3, r1
 8005eca:	4a4c      	ldr	r2, [pc, #304]	@ (8005ffc <HAL_RCC_ClockConfig+0x14c>)
 8005ecc:	7013      	strb	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005ece:	6813      	ldr	r3, [r2, #0]
 8005ed0:	f003 0307 	and.w	r3, r3, #7
 8005ed4:	428b      	cmp	r3, r1
 8005ed6:	f040 808b 	bne.w	8005ff0 <HAL_RCC_ClockConfig+0x140>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005eda:	6823      	ldr	r3, [r4, #0]
 8005edc:	f013 0f02 	tst.w	r3, #2
 8005ee0:	d017      	beq.n	8005f12 <HAL_RCC_ClockConfig+0x62>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005ee2:	f013 0f04 	tst.w	r3, #4
 8005ee6:	d004      	beq.n	8005ef2 <HAL_RCC_ClockConfig+0x42>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005ee8:	4a45      	ldr	r2, [pc, #276]	@ (8006000 <HAL_RCC_ClockConfig+0x150>)
 8005eea:	6893      	ldr	r3, [r2, #8]
 8005eec:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8005ef0:	6093      	str	r3, [r2, #8]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005ef2:	6823      	ldr	r3, [r4, #0]
 8005ef4:	f013 0f08 	tst.w	r3, #8
 8005ef8:	d004      	beq.n	8005f04 <HAL_RCC_ClockConfig+0x54>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005efa:	4a41      	ldr	r2, [pc, #260]	@ (8006000 <HAL_RCC_ClockConfig+0x150>)
 8005efc:	6893      	ldr	r3, [r2, #8]
 8005efe:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8005f02:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005f04:	4a3e      	ldr	r2, [pc, #248]	@ (8006000 <HAL_RCC_ClockConfig+0x150>)
 8005f06:	6893      	ldr	r3, [r2, #8]
 8005f08:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005f0c:	68a1      	ldr	r1, [r4, #8]
 8005f0e:	430b      	orrs	r3, r1
 8005f10:	6093      	str	r3, [r2, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005f12:	6823      	ldr	r3, [r4, #0]
 8005f14:	f013 0f01 	tst.w	r3, #1
 8005f18:	d032      	beq.n	8005f80 <HAL_RCC_ClockConfig+0xd0>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005f1a:	6863      	ldr	r3, [r4, #4]
 8005f1c:	2b01      	cmp	r3, #1
 8005f1e:	d021      	beq.n	8005f64 <HAL_RCC_ClockConfig+0xb4>
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005f20:	1e9a      	subs	r2, r3, #2
 8005f22:	2a01      	cmp	r2, #1
 8005f24:	d925      	bls.n	8005f72 <HAL_RCC_ClockConfig+0xc2>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005f26:	4a36      	ldr	r2, [pc, #216]	@ (8006000 <HAL_RCC_ClockConfig+0x150>)
 8005f28:	6812      	ldr	r2, [r2, #0]
 8005f2a:	f012 0f02 	tst.w	r2, #2
 8005f2e:	d061      	beq.n	8005ff4 <HAL_RCC_ClockConfig+0x144>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005f30:	4933      	ldr	r1, [pc, #204]	@ (8006000 <HAL_RCC_ClockConfig+0x150>)
 8005f32:	688a      	ldr	r2, [r1, #8]
 8005f34:	f022 0203 	bic.w	r2, r2, #3
 8005f38:	4313      	orrs	r3, r2
 8005f3a:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 8005f3c:	f7fd ff00 	bl	8003d40 <HAL_GetTick>
 8005f40:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005f42:	4b2f      	ldr	r3, [pc, #188]	@ (8006000 <HAL_RCC_ClockConfig+0x150>)
 8005f44:	689b      	ldr	r3, [r3, #8]
 8005f46:	f003 030c 	and.w	r3, r3, #12
 8005f4a:	6862      	ldr	r2, [r4, #4]
 8005f4c:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8005f50:	d016      	beq.n	8005f80 <HAL_RCC_ClockConfig+0xd0>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005f52:	f7fd fef5 	bl	8003d40 <HAL_GetTick>
 8005f56:	1b80      	subs	r0, r0, r6
 8005f58:	f241 3388 	movw	r3, #5000	@ 0x1388
 8005f5c:	4298      	cmp	r0, r3
 8005f5e:	d9f0      	bls.n	8005f42 <HAL_RCC_ClockConfig+0x92>
        return HAL_TIMEOUT;
 8005f60:	2003      	movs	r0, #3
 8005f62:	e042      	b.n	8005fea <HAL_RCC_ClockConfig+0x13a>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005f64:	4a26      	ldr	r2, [pc, #152]	@ (8006000 <HAL_RCC_ClockConfig+0x150>)
 8005f66:	6812      	ldr	r2, [r2, #0]
 8005f68:	f412 3f00 	tst.w	r2, #131072	@ 0x20000
 8005f6c:	d1e0      	bne.n	8005f30 <HAL_RCC_ClockConfig+0x80>
        return HAL_ERROR;
 8005f6e:	2001      	movs	r0, #1
 8005f70:	e03b      	b.n	8005fea <HAL_RCC_ClockConfig+0x13a>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005f72:	4a23      	ldr	r2, [pc, #140]	@ (8006000 <HAL_RCC_ClockConfig+0x150>)
 8005f74:	6812      	ldr	r2, [r2, #0]
 8005f76:	f012 7f00 	tst.w	r2, #33554432	@ 0x2000000
 8005f7a:	d1d9      	bne.n	8005f30 <HAL_RCC_ClockConfig+0x80>
        return HAL_ERROR;
 8005f7c:	2001      	movs	r0, #1
 8005f7e:	e034      	b.n	8005fea <HAL_RCC_ClockConfig+0x13a>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005f80:	4b1e      	ldr	r3, [pc, #120]	@ (8005ffc <HAL_RCC_ClockConfig+0x14c>)
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	f003 0307 	and.w	r3, r3, #7
 8005f88:	42ab      	cmp	r3, r5
 8005f8a:	d907      	bls.n	8005f9c <HAL_RCC_ClockConfig+0xec>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005f8c:	b2ea      	uxtb	r2, r5
 8005f8e:	4b1b      	ldr	r3, [pc, #108]	@ (8005ffc <HAL_RCC_ClockConfig+0x14c>)
 8005f90:	701a      	strb	r2, [r3, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	f003 0307 	and.w	r3, r3, #7
 8005f98:	42ab      	cmp	r3, r5
 8005f9a:	d12d      	bne.n	8005ff8 <HAL_RCC_ClockConfig+0x148>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005f9c:	6823      	ldr	r3, [r4, #0]
 8005f9e:	f013 0f04 	tst.w	r3, #4
 8005fa2:	d006      	beq.n	8005fb2 <HAL_RCC_ClockConfig+0x102>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005fa4:	4a16      	ldr	r2, [pc, #88]	@ (8006000 <HAL_RCC_ClockConfig+0x150>)
 8005fa6:	6893      	ldr	r3, [r2, #8]
 8005fa8:	f423 53e0 	bic.w	r3, r3, #7168	@ 0x1c00
 8005fac:	68e1      	ldr	r1, [r4, #12]
 8005fae:	430b      	orrs	r3, r1
 8005fb0:	6093      	str	r3, [r2, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005fb2:	6823      	ldr	r3, [r4, #0]
 8005fb4:	f013 0f08 	tst.w	r3, #8
 8005fb8:	d007      	beq.n	8005fca <HAL_RCC_ClockConfig+0x11a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005fba:	4a11      	ldr	r2, [pc, #68]	@ (8006000 <HAL_RCC_ClockConfig+0x150>)
 8005fbc:	6893      	ldr	r3, [r2, #8]
 8005fbe:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 8005fc2:	6921      	ldr	r1, [r4, #16]
 8005fc4:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8005fc8:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005fca:	f7ff ff1d 	bl	8005e08 <HAL_RCC_GetSysClockFreq>
 8005fce:	4b0c      	ldr	r3, [pc, #48]	@ (8006000 <HAL_RCC_ClockConfig+0x150>)
 8005fd0:	689b      	ldr	r3, [r3, #8]
 8005fd2:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8005fd6:	4a0b      	ldr	r2, [pc, #44]	@ (8006004 <HAL_RCC_ClockConfig+0x154>)
 8005fd8:	5cd3      	ldrb	r3, [r2, r3]
 8005fda:	40d8      	lsrs	r0, r3
 8005fdc:	4b0a      	ldr	r3, [pc, #40]	@ (8006008 <HAL_RCC_ClockConfig+0x158>)
 8005fde:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 8005fe0:	4b0a      	ldr	r3, [pc, #40]	@ (800600c <HAL_RCC_ClockConfig+0x15c>)
 8005fe2:	6818      	ldr	r0, [r3, #0]
 8005fe4:	f000 fdee 	bl	8006bc4 <HAL_InitTick>
  return HAL_OK;
 8005fe8:	2000      	movs	r0, #0
}
 8005fea:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8005fec:	2001      	movs	r0, #1
}
 8005fee:	4770      	bx	lr
      return HAL_ERROR;
 8005ff0:	2001      	movs	r0, #1
 8005ff2:	e7fa      	b.n	8005fea <HAL_RCC_ClockConfig+0x13a>
        return HAL_ERROR;
 8005ff4:	2001      	movs	r0, #1
 8005ff6:	e7f8      	b.n	8005fea <HAL_RCC_ClockConfig+0x13a>
      return HAL_ERROR;
 8005ff8:	2001      	movs	r0, #1
 8005ffa:	e7f6      	b.n	8005fea <HAL_RCC_ClockConfig+0x13a>
 8005ffc:	40023c00 	.word	0x40023c00
 8006000:	40023800 	.word	0x40023800
 8006004:	0800be94 	.word	0x0800be94
 8006008:	20000070 	.word	0x20000070
 800600c:	2000006c 	.word	0x2000006c

08006010 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8006010:	4b01      	ldr	r3, [pc, #4]	@ (8006018 <HAL_RCC_GetHCLKFreq+0x8>)
 8006012:	6818      	ldr	r0, [r3, #0]
 8006014:	4770      	bx	lr
 8006016:	bf00      	nop
 8006018:	20000070 	.word	0x20000070

0800601c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800601c:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800601e:	f7ff fff7 	bl	8006010 <HAL_RCC_GetHCLKFreq>
 8006022:	4b04      	ldr	r3, [pc, #16]	@ (8006034 <HAL_RCC_GetPCLK1Freq+0x18>)
 8006024:	689b      	ldr	r3, [r3, #8]
 8006026:	f3c3 2382 	ubfx	r3, r3, #10, #3
 800602a:	4a03      	ldr	r2, [pc, #12]	@ (8006038 <HAL_RCC_GetPCLK1Freq+0x1c>)
 800602c:	5cd3      	ldrb	r3, [r2, r3]
}
 800602e:	40d8      	lsrs	r0, r3
 8006030:	bd08      	pop	{r3, pc}
 8006032:	bf00      	nop
 8006034:	40023800 	.word	0x40023800
 8006038:	0800be8c 	.word	0x0800be8c

0800603c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800603c:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800603e:	f7ff ffe7 	bl	8006010 <HAL_RCC_GetHCLKFreq>
 8006042:	4b04      	ldr	r3, [pc, #16]	@ (8006054 <HAL_RCC_GetPCLK2Freq+0x18>)
 8006044:	689b      	ldr	r3, [r3, #8]
 8006046:	f3c3 3342 	ubfx	r3, r3, #13, #3
 800604a:	4a03      	ldr	r2, [pc, #12]	@ (8006058 <HAL_RCC_GetPCLK2Freq+0x1c>)
 800604c:	5cd3      	ldrb	r3, [r2, r3]
}
 800604e:	40d8      	lsrs	r0, r3
 8006050:	bd08      	pop	{r3, pc}
 8006052:	bf00      	nop
 8006054:	40023800 	.word	0x40023800
 8006058:	0800be8c 	.word	0x0800be8c

0800605c <HAL_RCC_GetClockConfig>:
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800605c:	230f      	movs	r3, #15
 800605e:	6003      	str	r3, [r0, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8006060:	4b0b      	ldr	r3, [pc, #44]	@ (8006090 <HAL_RCC_GetClockConfig+0x34>)
 8006062:	689a      	ldr	r2, [r3, #8]
 8006064:	f002 0203 	and.w	r2, r2, #3
 8006068:	6042      	str	r2, [r0, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800606a:	689a      	ldr	r2, [r3, #8]
 800606c:	f002 02f0 	and.w	r2, r2, #240	@ 0xf0
 8006070:	6082      	str	r2, [r0, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8006072:	689a      	ldr	r2, [r3, #8]
 8006074:	f402 52e0 	and.w	r2, r2, #7168	@ 0x1c00
 8006078:	60c2      	str	r2, [r0, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800607a:	689b      	ldr	r3, [r3, #8]
 800607c:	08db      	lsrs	r3, r3, #3
 800607e:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
 8006082:	6103      	str	r3, [r0, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8006084:	4b03      	ldr	r3, [pc, #12]	@ (8006094 <HAL_RCC_GetClockConfig+0x38>)
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	f003 0307 	and.w	r3, r3, #7
 800608c:	600b      	str	r3, [r1, #0]
}
 800608e:	4770      	bx	lr
 8006090:	40023800 	.word	0x40023800
 8006094:	40023c00 	.word	0x40023c00

08006098 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006098:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800609a:	6a02      	ldr	r2, [r0, #32]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800609c:	6a03      	ldr	r3, [r0, #32]
 800609e:	f023 0301 	bic.w	r3, r3, #1
 80060a2:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80060a4:	6845      	ldr	r5, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80060a6:	6983      	ldr	r3, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80060a8:	f023 0373 	bic.w	r3, r3, #115	@ 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80060ac:	680c      	ldr	r4, [r1, #0]
 80060ae:	431c      	orrs	r4, r3

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80060b0:	f022 0202 	bic.w	r2, r2, #2
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80060b4:	688b      	ldr	r3, [r1, #8]
 80060b6:	4313      	orrs	r3, r2

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80060b8:	4a0b      	ldr	r2, [pc, #44]	@ (80060e8 <TIM_OC1_SetConfig+0x50>)
 80060ba:	4290      	cmp	r0, r2
 80060bc:	d006      	beq.n	80060cc <TIM_OC1_SetConfig+0x34>
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80060be:	6045      	str	r5, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80060c0:	6184      	str	r4, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80060c2:	684a      	ldr	r2, [r1, #4]
 80060c4:	6342      	str	r2, [r0, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80060c6:	6203      	str	r3, [r0, #32]
}
 80060c8:	bc30      	pop	{r4, r5}
 80060ca:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC1NP;
 80060cc:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 80060d0:	68ca      	ldr	r2, [r1, #12]
 80060d2:	431a      	orrs	r2, r3
    tmpccer &= ~TIM_CCER_CC1NE;
 80060d4:	f022 0304 	bic.w	r3, r2, #4
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80060d8:	f425 7540 	bic.w	r5, r5, #768	@ 0x300
    tmpcr2 |= OC_Config->OCIdleState;
 80060dc:	694a      	ldr	r2, [r1, #20]
 80060de:	432a      	orrs	r2, r5
    tmpcr2 |= OC_Config->OCNIdleState;
 80060e0:	698d      	ldr	r5, [r1, #24]
 80060e2:	4315      	orrs	r5, r2
 80060e4:	e7eb      	b.n	80060be <TIM_OC1_SetConfig+0x26>
 80060e6:	bf00      	nop
 80060e8:	40010000 	.word	0x40010000

080060ec <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80060ec:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80060ee:	6a03      	ldr	r3, [r0, #32]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80060f0:	6a02      	ldr	r2, [r0, #32]
 80060f2:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80060f6:	6202      	str	r2, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80060f8:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80060fa:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80060fc:	f022 0273 	bic.w	r2, r2, #115	@ 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006100:	680d      	ldr	r5, [r1, #0]
 8006102:	4315      	orrs	r5, r2

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006104:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006108:	688a      	ldr	r2, [r1, #8]
 800610a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800610e:	4a0d      	ldr	r2, [pc, #52]	@ (8006144 <TIM_OC3_SetConfig+0x58>)
 8006110:	4290      	cmp	r0, r2
 8006112:	d006      	beq.n	8006122 <TIM_OC3_SetConfig+0x36>
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006114:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006116:	61c5      	str	r5, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006118:	684a      	ldr	r2, [r1, #4]
 800611a:	63c2      	str	r2, [r0, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800611c:	6203      	str	r3, [r0, #32]
}
 800611e:	bc30      	pop	{r4, r5}
 8006120:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC3NP;
 8006122:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006126:	68ca      	ldr	r2, [r1, #12]
 8006128:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    tmpccer &= ~TIM_CCER_CC3NE;
 800612c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006130:	f424 5440 	bic.w	r4, r4, #12288	@ 0x3000
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006134:	694a      	ldr	r2, [r1, #20]
 8006136:	ea44 1402 	orr.w	r4, r4, r2, lsl #4
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800613a:	698a      	ldr	r2, [r1, #24]
 800613c:	ea44 1402 	orr.w	r4, r4, r2, lsl #4
 8006140:	e7e8      	b.n	8006114 <TIM_OC3_SetConfig+0x28>
 8006142:	bf00      	nop
 8006144:	40010000 	.word	0x40010000

08006148 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006148:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800614a:	6a03      	ldr	r3, [r0, #32]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800614c:	6a02      	ldr	r2, [r0, #32]
 800614e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8006152:	6202      	str	r2, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006154:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006156:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006158:	f422 42e6 	bic.w	r2, r2, #29440	@ 0x7300

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800615c:	680d      	ldr	r5, [r1, #0]
 800615e:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006162:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006166:	688d      	ldr	r5, [r1, #8]
 8006168:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800616c:	4d07      	ldr	r5, [pc, #28]	@ (800618c <TIM_OC4_SetConfig+0x44>)
 800616e:	42a8      	cmp	r0, r5
 8006170:	d006      	beq.n	8006180 <TIM_OC4_SetConfig+0x38>
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006172:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006174:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006176:	684a      	ldr	r2, [r1, #4]
 8006178:	6402      	str	r2, [r0, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800617a:	6203      	str	r3, [r0, #32]
}
 800617c:	bc30      	pop	{r4, r5}
 800617e:	4770      	bx	lr
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006180:	f424 4480 	bic.w	r4, r4, #16384	@ 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006184:	694d      	ldr	r5, [r1, #20]
 8006186:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
 800618a:	e7f2      	b.n	8006172 <TIM_OC4_SetConfig+0x2a>
 800618c:	40010000 	.word	0x40010000

08006190 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006190:	b410      	push	{r4}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006192:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006194:	6a04      	ldr	r4, [r0, #32]
 8006196:	f024 0401 	bic.w	r4, r4, #1
 800619a:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 800619c:	6984      	ldr	r4, [r0, #24]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800619e:	f024 0cf0 	bic.w	ip, r4, #240	@ 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80061a2:	ea4c 1202 	orr.w	r2, ip, r2, lsl #4

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80061a6:	f023 030a 	bic.w	r3, r3, #10
  tmpccer |= TIM_ICPolarity;
 80061aa:	430b      	orrs	r3, r1

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80061ac:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 80061ae:	6203      	str	r3, [r0, #32]
}
 80061b0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80061b4:	4770      	bx	lr

080061b6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80061b6:	b410      	push	{r4}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80061b8:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80061ba:	6a04      	ldr	r4, [r0, #32]
 80061bc:	f024 0410 	bic.w	r4, r4, #16
 80061c0:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80061c2:	6984      	ldr	r4, [r0, #24]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80061c4:	f424 4c70 	bic.w	ip, r4, #61440	@ 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80061c8:	ea4c 3202 	orr.w	r2, ip, r2, lsl #12

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80061cc:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 80061d0:	ea43 1301 	orr.w	r3, r3, r1, lsl #4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80061d4:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 80061d6:	6203      	str	r3, [r0, #32]
}
 80061d8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80061dc:	4770      	bx	lr

080061de <TIM_ITRx_SetConfig>:
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80061de:	6883      	ldr	r3, [r0, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80061e0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80061e4:	430b      	orrs	r3, r1
 80061e6:	f043 0307 	orr.w	r3, r3, #7
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80061ea:	6083      	str	r3, [r0, #8]
}
 80061ec:	4770      	bx	lr
	...

080061f0 <HAL_TIM_Base_Start>:
  if (htim->State != HAL_TIM_STATE_READY)
 80061f0:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 80061f4:	2b01      	cmp	r3, #1
 80061f6:	d12a      	bne.n	800624e <HAL_TIM_Base_Start+0x5e>
  htim->State = HAL_TIM_STATE_BUSY;
 80061f8:	2302      	movs	r3, #2
 80061fa:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80061fe:	6803      	ldr	r3, [r0, #0]
 8006200:	4a15      	ldr	r2, [pc, #84]	@ (8006258 <HAL_TIM_Base_Start+0x68>)
 8006202:	4293      	cmp	r3, r2
 8006204:	d018      	beq.n	8006238 <HAL_TIM_Base_Start+0x48>
 8006206:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800620a:	d015      	beq.n	8006238 <HAL_TIM_Base_Start+0x48>
 800620c:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 8006210:	4293      	cmp	r3, r2
 8006212:	d011      	beq.n	8006238 <HAL_TIM_Base_Start+0x48>
 8006214:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8006218:	4293      	cmp	r3, r2
 800621a:	d00d      	beq.n	8006238 <HAL_TIM_Base_Start+0x48>
 800621c:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8006220:	4293      	cmp	r3, r2
 8006222:	d009      	beq.n	8006238 <HAL_TIM_Base_Start+0x48>
 8006224:	f502 329a 	add.w	r2, r2, #78848	@ 0x13400
 8006228:	4293      	cmp	r3, r2
 800622a:	d005      	beq.n	8006238 <HAL_TIM_Base_Start+0x48>
    __HAL_TIM_ENABLE(htim);
 800622c:	681a      	ldr	r2, [r3, #0]
 800622e:	f042 0201 	orr.w	r2, r2, #1
 8006232:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8006234:	2000      	movs	r0, #0
 8006236:	4770      	bx	lr
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006238:	689a      	ldr	r2, [r3, #8]
 800623a:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800623e:	2a06      	cmp	r2, #6
 8006240:	d007      	beq.n	8006252 <HAL_TIM_Base_Start+0x62>
      __HAL_TIM_ENABLE(htim);
 8006242:	681a      	ldr	r2, [r3, #0]
 8006244:	f042 0201 	orr.w	r2, r2, #1
 8006248:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 800624a:	2000      	movs	r0, #0
 800624c:	4770      	bx	lr
    return HAL_ERROR;
 800624e:	2001      	movs	r0, #1
 8006250:	4770      	bx	lr
  return HAL_OK;
 8006252:	2000      	movs	r0, #0
}
 8006254:	4770      	bx	lr
 8006256:	bf00      	nop
 8006258:	40010000 	.word	0x40010000

0800625c <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 800625c:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8006260:	2b01      	cmp	r3, #1
 8006262:	d12f      	bne.n	80062c4 <HAL_TIM_Base_Start_IT+0x68>
  htim->State = HAL_TIM_STATE_BUSY;
 8006264:	2302      	movs	r3, #2
 8006266:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800626a:	6802      	ldr	r2, [r0, #0]
 800626c:	68d3      	ldr	r3, [r2, #12]
 800626e:	f043 0301 	orr.w	r3, r3, #1
 8006272:	60d3      	str	r3, [r2, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006274:	6803      	ldr	r3, [r0, #0]
 8006276:	4a15      	ldr	r2, [pc, #84]	@ (80062cc <HAL_TIM_Base_Start_IT+0x70>)
 8006278:	4293      	cmp	r3, r2
 800627a:	d018      	beq.n	80062ae <HAL_TIM_Base_Start_IT+0x52>
 800627c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006280:	d015      	beq.n	80062ae <HAL_TIM_Base_Start_IT+0x52>
 8006282:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 8006286:	4293      	cmp	r3, r2
 8006288:	d011      	beq.n	80062ae <HAL_TIM_Base_Start_IT+0x52>
 800628a:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800628e:	4293      	cmp	r3, r2
 8006290:	d00d      	beq.n	80062ae <HAL_TIM_Base_Start_IT+0x52>
 8006292:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8006296:	4293      	cmp	r3, r2
 8006298:	d009      	beq.n	80062ae <HAL_TIM_Base_Start_IT+0x52>
 800629a:	f502 329a 	add.w	r2, r2, #78848	@ 0x13400
 800629e:	4293      	cmp	r3, r2
 80062a0:	d005      	beq.n	80062ae <HAL_TIM_Base_Start_IT+0x52>
    __HAL_TIM_ENABLE(htim);
 80062a2:	681a      	ldr	r2, [r3, #0]
 80062a4:	f042 0201 	orr.w	r2, r2, #1
 80062a8:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 80062aa:	2000      	movs	r0, #0
 80062ac:	4770      	bx	lr
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80062ae:	689a      	ldr	r2, [r3, #8]
 80062b0:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80062b4:	2a06      	cmp	r2, #6
 80062b6:	d007      	beq.n	80062c8 <HAL_TIM_Base_Start_IT+0x6c>
      __HAL_TIM_ENABLE(htim);
 80062b8:	681a      	ldr	r2, [r3, #0]
 80062ba:	f042 0201 	orr.w	r2, r2, #1
 80062be:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 80062c0:	2000      	movs	r0, #0
 80062c2:	4770      	bx	lr
    return HAL_ERROR;
 80062c4:	2001      	movs	r0, #1
 80062c6:	4770      	bx	lr
  return HAL_OK;
 80062c8:	2000      	movs	r0, #0
}
 80062ca:	4770      	bx	lr
 80062cc:	40010000 	.word	0x40010000

080062d0 <HAL_TIM_OC_MspInit>:
}
 80062d0:	4770      	bx	lr

080062d2 <HAL_TIM_OC_DelayElapsedCallback>:
}
 80062d2:	4770      	bx	lr

080062d4 <HAL_TIM_IC_CaptureCallback>:
}
 80062d4:	4770      	bx	lr

080062d6 <HAL_TIM_PWM_PulseFinishedCallback>:
}
 80062d6:	4770      	bx	lr

080062d8 <HAL_TIM_TriggerCallback>:
}
 80062d8:	4770      	bx	lr

080062da <HAL_TIM_IRQHandler>:
{
 80062da:	b570      	push	{r4, r5, r6, lr}
 80062dc:	4604      	mov	r4, r0
  uint32_t itsource = htim->Instance->DIER;
 80062de:	6803      	ldr	r3, [r0, #0]
 80062e0:	68de      	ldr	r6, [r3, #12]
  uint32_t itflag   = htim->Instance->SR;
 80062e2:	691d      	ldr	r5, [r3, #16]
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80062e4:	f015 0f02 	tst.w	r5, #2
 80062e8:	d010      	beq.n	800630c <HAL_TIM_IRQHandler+0x32>
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80062ea:	f016 0f02 	tst.w	r6, #2
 80062ee:	d00d      	beq.n	800630c <HAL_TIM_IRQHandler+0x32>
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80062f0:	f06f 0202 	mvn.w	r2, #2
 80062f4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80062f6:	2301      	movs	r3, #1
 80062f8:	7703      	strb	r3, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80062fa:	6803      	ldr	r3, [r0, #0]
 80062fc:	699b      	ldr	r3, [r3, #24]
 80062fe:	f013 0f03 	tst.w	r3, #3
 8006302:	d05e      	beq.n	80063c2 <HAL_TIM_IRQHandler+0xe8>
          HAL_TIM_IC_CaptureCallback(htim);
 8006304:	f7ff ffe6 	bl	80062d4 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006308:	2300      	movs	r3, #0
 800630a:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800630c:	f015 0f04 	tst.w	r5, #4
 8006310:	d012      	beq.n	8006338 <HAL_TIM_IRQHandler+0x5e>
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8006312:	f016 0f04 	tst.w	r6, #4
 8006316:	d00f      	beq.n	8006338 <HAL_TIM_IRQHandler+0x5e>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8006318:	6823      	ldr	r3, [r4, #0]
 800631a:	f06f 0204 	mvn.w	r2, #4
 800631e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006320:	2302      	movs	r3, #2
 8006322:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006324:	6823      	ldr	r3, [r4, #0]
 8006326:	699b      	ldr	r3, [r3, #24]
 8006328:	f413 7f40 	tst.w	r3, #768	@ 0x300
 800632c:	d04f      	beq.n	80063ce <HAL_TIM_IRQHandler+0xf4>
        HAL_TIM_IC_CaptureCallback(htim);
 800632e:	4620      	mov	r0, r4
 8006330:	f7ff ffd0 	bl	80062d4 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006334:	2300      	movs	r3, #0
 8006336:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006338:	f015 0f08 	tst.w	r5, #8
 800633c:	d012      	beq.n	8006364 <HAL_TIM_IRQHandler+0x8a>
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800633e:	f016 0f08 	tst.w	r6, #8
 8006342:	d00f      	beq.n	8006364 <HAL_TIM_IRQHandler+0x8a>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8006344:	6823      	ldr	r3, [r4, #0]
 8006346:	f06f 0208 	mvn.w	r2, #8
 800634a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800634c:	2304      	movs	r3, #4
 800634e:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006350:	6823      	ldr	r3, [r4, #0]
 8006352:	69db      	ldr	r3, [r3, #28]
 8006354:	f013 0f03 	tst.w	r3, #3
 8006358:	d040      	beq.n	80063dc <HAL_TIM_IRQHandler+0x102>
        HAL_TIM_IC_CaptureCallback(htim);
 800635a:	4620      	mov	r0, r4
 800635c:	f7ff ffba 	bl	80062d4 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006360:	2300      	movs	r3, #0
 8006362:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006364:	f015 0f10 	tst.w	r5, #16
 8006368:	d012      	beq.n	8006390 <HAL_TIM_IRQHandler+0xb6>
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800636a:	f016 0f10 	tst.w	r6, #16
 800636e:	d00f      	beq.n	8006390 <HAL_TIM_IRQHandler+0xb6>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8006370:	6823      	ldr	r3, [r4, #0]
 8006372:	f06f 0210 	mvn.w	r2, #16
 8006376:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006378:	2308      	movs	r3, #8
 800637a:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800637c:	6823      	ldr	r3, [r4, #0]
 800637e:	69db      	ldr	r3, [r3, #28]
 8006380:	f413 7f40 	tst.w	r3, #768	@ 0x300
 8006384:	d031      	beq.n	80063ea <HAL_TIM_IRQHandler+0x110>
        HAL_TIM_IC_CaptureCallback(htim);
 8006386:	4620      	mov	r0, r4
 8006388:	f7ff ffa4 	bl	80062d4 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800638c:	2300      	movs	r3, #0
 800638e:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006390:	f015 0f01 	tst.w	r5, #1
 8006394:	d002      	beq.n	800639c <HAL_TIM_IRQHandler+0xc2>
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8006396:	f016 0f01 	tst.w	r6, #1
 800639a:	d12d      	bne.n	80063f8 <HAL_TIM_IRQHandler+0x11e>
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800639c:	f015 0f80 	tst.w	r5, #128	@ 0x80
 80063a0:	d002      	beq.n	80063a8 <HAL_TIM_IRQHandler+0xce>
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80063a2:	f016 0f80 	tst.w	r6, #128	@ 0x80
 80063a6:	d12f      	bne.n	8006408 <HAL_TIM_IRQHandler+0x12e>
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80063a8:	f015 0f40 	tst.w	r5, #64	@ 0x40
 80063ac:	d002      	beq.n	80063b4 <HAL_TIM_IRQHandler+0xda>
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80063ae:	f016 0f40 	tst.w	r6, #64	@ 0x40
 80063b2:	d131      	bne.n	8006418 <HAL_TIM_IRQHandler+0x13e>
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80063b4:	f015 0f20 	tst.w	r5, #32
 80063b8:	d002      	beq.n	80063c0 <HAL_TIM_IRQHandler+0xe6>
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80063ba:	f016 0f20 	tst.w	r6, #32
 80063be:	d133      	bne.n	8006428 <HAL_TIM_IRQHandler+0x14e>
}
 80063c0:	bd70      	pop	{r4, r5, r6, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80063c2:	f7ff ff86 	bl	80062d2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80063c6:	4620      	mov	r0, r4
 80063c8:	f7ff ff85 	bl	80062d6 <HAL_TIM_PWM_PulseFinishedCallback>
 80063cc:	e79c      	b.n	8006308 <HAL_TIM_IRQHandler+0x2e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80063ce:	4620      	mov	r0, r4
 80063d0:	f7ff ff7f 	bl	80062d2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80063d4:	4620      	mov	r0, r4
 80063d6:	f7ff ff7e 	bl	80062d6 <HAL_TIM_PWM_PulseFinishedCallback>
 80063da:	e7ab      	b.n	8006334 <HAL_TIM_IRQHandler+0x5a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80063dc:	4620      	mov	r0, r4
 80063de:	f7ff ff78 	bl	80062d2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80063e2:	4620      	mov	r0, r4
 80063e4:	f7ff ff77 	bl	80062d6 <HAL_TIM_PWM_PulseFinishedCallback>
 80063e8:	e7ba      	b.n	8006360 <HAL_TIM_IRQHandler+0x86>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80063ea:	4620      	mov	r0, r4
 80063ec:	f7ff ff71 	bl	80062d2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80063f0:	4620      	mov	r0, r4
 80063f2:	f7ff ff70 	bl	80062d6 <HAL_TIM_PWM_PulseFinishedCallback>
 80063f6:	e7c9      	b.n	800638c <HAL_TIM_IRQHandler+0xb2>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80063f8:	6823      	ldr	r3, [r4, #0]
 80063fa:	f06f 0201 	mvn.w	r2, #1
 80063fe:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8006400:	4620      	mov	r0, r4
 8006402:	f7fc fba7 	bl	8002b54 <HAL_TIM_PeriodElapsedCallback>
 8006406:	e7c9      	b.n	800639c <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8006408:	6823      	ldr	r3, [r4, #0]
 800640a:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800640e:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8006410:	4620      	mov	r0, r4
 8006412:	f000 fbd5 	bl	8006bc0 <HAL_TIMEx_BreakCallback>
 8006416:	e7c7      	b.n	80063a8 <HAL_TIM_IRQHandler+0xce>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8006418:	6823      	ldr	r3, [r4, #0]
 800641a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800641e:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8006420:	4620      	mov	r0, r4
 8006422:	f7ff ff59 	bl	80062d8 <HAL_TIM_TriggerCallback>
 8006426:	e7c5      	b.n	80063b4 <HAL_TIM_IRQHandler+0xda>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8006428:	6823      	ldr	r3, [r4, #0]
 800642a:	f06f 0220 	mvn.w	r2, #32
 800642e:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 8006430:	4620      	mov	r0, r4
 8006432:	f000 fbc4 	bl	8006bbe <HAL_TIMEx_CommutCallback>
}
 8006436:	e7c3      	b.n	80063c0 <HAL_TIM_IRQHandler+0xe6>

08006438 <TIM_Base_SetConfig>:
  tmpcr1 = TIMx->CR1;
 8006438:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800643a:	4a29      	ldr	r2, [pc, #164]	@ (80064e0 <TIM_Base_SetConfig+0xa8>)
 800643c:	4290      	cmp	r0, r2
 800643e:	d00e      	beq.n	800645e <TIM_Base_SetConfig+0x26>
 8006440:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 8006444:	d00b      	beq.n	800645e <TIM_Base_SetConfig+0x26>
 8006446:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 800644a:	4290      	cmp	r0, r2
 800644c:	d007      	beq.n	800645e <TIM_Base_SetConfig+0x26>
 800644e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8006452:	4290      	cmp	r0, r2
 8006454:	d003      	beq.n	800645e <TIM_Base_SetConfig+0x26>
 8006456:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800645a:	4290      	cmp	r0, r2
 800645c:	d103      	bne.n	8006466 <TIM_Base_SetConfig+0x2e>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800645e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 8006462:	684a      	ldr	r2, [r1, #4]
 8006464:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006466:	4a1e      	ldr	r2, [pc, #120]	@ (80064e0 <TIM_Base_SetConfig+0xa8>)
 8006468:	4290      	cmp	r0, r2
 800646a:	d01a      	beq.n	80064a2 <TIM_Base_SetConfig+0x6a>
 800646c:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 8006470:	d017      	beq.n	80064a2 <TIM_Base_SetConfig+0x6a>
 8006472:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 8006476:	4290      	cmp	r0, r2
 8006478:	d013      	beq.n	80064a2 <TIM_Base_SetConfig+0x6a>
 800647a:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800647e:	4290      	cmp	r0, r2
 8006480:	d00f      	beq.n	80064a2 <TIM_Base_SetConfig+0x6a>
 8006482:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8006486:	4290      	cmp	r0, r2
 8006488:	d00b      	beq.n	80064a2 <TIM_Base_SetConfig+0x6a>
 800648a:	f502 329a 	add.w	r2, r2, #78848	@ 0x13400
 800648e:	4290      	cmp	r0, r2
 8006490:	d007      	beq.n	80064a2 <TIM_Base_SetConfig+0x6a>
 8006492:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8006496:	4290      	cmp	r0, r2
 8006498:	d003      	beq.n	80064a2 <TIM_Base_SetConfig+0x6a>
 800649a:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800649e:	4290      	cmp	r0, r2
 80064a0:	d103      	bne.n	80064aa <TIM_Base_SetConfig+0x72>
    tmpcr1 &= ~TIM_CR1_CKD;
 80064a2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80064a6:	68ca      	ldr	r2, [r1, #12]
 80064a8:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80064aa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80064ae:	694a      	ldr	r2, [r1, #20]
 80064b0:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 80064b2:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80064b4:	688b      	ldr	r3, [r1, #8]
 80064b6:	62c3      	str	r3, [r0, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 80064b8:	680b      	ldr	r3, [r1, #0]
 80064ba:	6283      	str	r3, [r0, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80064bc:	4b08      	ldr	r3, [pc, #32]	@ (80064e0 <TIM_Base_SetConfig+0xa8>)
 80064be:	4298      	cmp	r0, r3
 80064c0:	d00a      	beq.n	80064d8 <TIM_Base_SetConfig+0xa0>
  TIMx->EGR = TIM_EGR_UG;
 80064c2:	2301      	movs	r3, #1
 80064c4:	6143      	str	r3, [r0, #20]
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80064c6:	6903      	ldr	r3, [r0, #16]
 80064c8:	f013 0f01 	tst.w	r3, #1
 80064cc:	d003      	beq.n	80064d6 <TIM_Base_SetConfig+0x9e>
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80064ce:	6903      	ldr	r3, [r0, #16]
 80064d0:	f023 0301 	bic.w	r3, r3, #1
 80064d4:	6103      	str	r3, [r0, #16]
}
 80064d6:	4770      	bx	lr
    TIMx->RCR = Structure->RepetitionCounter;
 80064d8:	690b      	ldr	r3, [r1, #16]
 80064da:	6303      	str	r3, [r0, #48]	@ 0x30
 80064dc:	e7f1      	b.n	80064c2 <TIM_Base_SetConfig+0x8a>
 80064de:	bf00      	nop
 80064e0:	40010000 	.word	0x40010000

080064e4 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 80064e4:	b340      	cbz	r0, 8006538 <HAL_TIM_Base_Init+0x54>
{
 80064e6:	b510      	push	{r4, lr}
 80064e8:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 80064ea:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 80064ee:	b1f3      	cbz	r3, 800652e <HAL_TIM_Base_Init+0x4a>
  htim->State = HAL_TIM_STATE_BUSY;
 80064f0:	2302      	movs	r3, #2
 80064f2:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80064f6:	4621      	mov	r1, r4
 80064f8:	f851 0b04 	ldr.w	r0, [r1], #4
 80064fc:	f7ff ff9c 	bl	8006438 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006500:	2301      	movs	r3, #1
 8006502:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006506:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 800650a:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 800650e:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 8006512:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006516:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800651a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800651e:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 8006522:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
  htim->State = HAL_TIM_STATE_READY;
 8006526:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  return HAL_OK;
 800652a:	2000      	movs	r0, #0
}
 800652c:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 800652e:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
    HAL_TIM_Base_MspInit(htim);
 8006532:	f002 f8a1 	bl	8008678 <HAL_TIM_Base_MspInit>
 8006536:	e7db      	b.n	80064f0 <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 8006538:	2001      	movs	r0, #1
}
 800653a:	4770      	bx	lr

0800653c <HAL_TIM_OC_Init>:
  if (htim == NULL)
 800653c:	b340      	cbz	r0, 8006590 <HAL_TIM_OC_Init+0x54>
{
 800653e:	b510      	push	{r4, lr}
 8006540:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8006542:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8006546:	b1f3      	cbz	r3, 8006586 <HAL_TIM_OC_Init+0x4a>
  htim->State = HAL_TIM_STATE_BUSY;
 8006548:	2302      	movs	r3, #2
 800654a:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800654e:	4621      	mov	r1, r4
 8006550:	f851 0b04 	ldr.w	r0, [r1], #4
 8006554:	f7ff ff70 	bl	8006438 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006558:	2301      	movs	r3, #1
 800655a:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800655e:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 8006562:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 8006566:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 800656a:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800656e:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006572:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006576:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 800657a:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
  htim->State = HAL_TIM_STATE_READY;
 800657e:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  return HAL_OK;
 8006582:	2000      	movs	r0, #0
}
 8006584:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8006586:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
    HAL_TIM_OC_MspInit(htim);
 800658a:	f7ff fea1 	bl	80062d0 <HAL_TIM_OC_MspInit>
 800658e:	e7db      	b.n	8006548 <HAL_TIM_OC_Init+0xc>
    return HAL_ERROR;
 8006590:	2001      	movs	r0, #1
}
 8006592:	4770      	bx	lr

08006594 <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 8006594:	b340      	cbz	r0, 80065e8 <HAL_TIM_PWM_Init+0x54>
{
 8006596:	b510      	push	{r4, lr}
 8006598:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 800659a:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 800659e:	b1f3      	cbz	r3, 80065de <HAL_TIM_PWM_Init+0x4a>
  htim->State = HAL_TIM_STATE_BUSY;
 80065a0:	2302      	movs	r3, #2
 80065a2:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80065a6:	4621      	mov	r1, r4
 80065a8:	f851 0b04 	ldr.w	r0, [r1], #4
 80065ac:	f7ff ff44 	bl	8006438 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80065b0:	2301      	movs	r3, #1
 80065b2:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80065b6:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 80065ba:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 80065be:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 80065c2:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80065c6:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80065ca:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80065ce:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 80065d2:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
  htim->State = HAL_TIM_STATE_READY;
 80065d6:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  return HAL_OK;
 80065da:	2000      	movs	r0, #0
}
 80065dc:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 80065de:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
    HAL_TIM_PWM_MspInit(htim);
 80065e2:	f002 f815 	bl	8008610 <HAL_TIM_PWM_MspInit>
 80065e6:	e7db      	b.n	80065a0 <HAL_TIM_PWM_Init+0xc>
    return HAL_ERROR;
 80065e8:	2001      	movs	r0, #1
}
 80065ea:	4770      	bx	lr

080065ec <TIM_OC2_SetConfig>:
{
 80065ec:	b430      	push	{r4, r5}
  tmpccer = TIMx->CCER;
 80065ee:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80065f0:	6a02      	ldr	r2, [r0, #32]
 80065f2:	f022 0210 	bic.w	r2, r2, #16
 80065f6:	6202      	str	r2, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 80065f8:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 80065fa:	6982      	ldr	r2, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80065fc:	f422 42e6 	bic.w	r2, r2, #29440	@ 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006600:	680d      	ldr	r5, [r1, #0]
 8006602:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer &= ~TIM_CCER_CC2P;
 8006606:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800660a:	688d      	ldr	r5, [r1, #8]
 800660c:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006610:	4d0c      	ldr	r5, [pc, #48]	@ (8006644 <TIM_OC2_SetConfig+0x58>)
 8006612:	42a8      	cmp	r0, r5
 8006614:	d006      	beq.n	8006624 <TIM_OC2_SetConfig+0x38>
  TIMx->CR2 = tmpcr2;
 8006616:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8006618:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 800661a:	684a      	ldr	r2, [r1, #4]
 800661c:	6382      	str	r2, [r0, #56]	@ 0x38
  TIMx->CCER = tmpccer;
 800661e:	6203      	str	r3, [r0, #32]
}
 8006620:	bc30      	pop	{r4, r5}
 8006622:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC2NP;
 8006624:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006628:	68cd      	ldr	r5, [r1, #12]
 800662a:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 800662e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006632:	f424 6440 	bic.w	r4, r4, #3072	@ 0xc00
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006636:	694d      	ldr	r5, [r1, #20]
 8006638:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800663c:	698d      	ldr	r5, [r1, #24]
 800663e:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
 8006642:	e7e8      	b.n	8006616 <TIM_OC2_SetConfig+0x2a>
 8006644:	40010000 	.word	0x40010000

08006648 <HAL_TIM_OC_ConfigChannel>:
  __HAL_LOCK(htim);
 8006648:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 800664c:	2b01      	cmp	r3, #1
 800664e:	d028      	beq.n	80066a2 <HAL_TIM_OC_ConfigChannel+0x5a>
{
 8006650:	b510      	push	{r4, lr}
 8006652:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 8006654:	2301      	movs	r3, #1
 8006656:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
  switch (Channel)
 800665a:	2a0c      	cmp	r2, #12
 800665c:	d81c      	bhi.n	8006698 <HAL_TIM_OC_ConfigChannel+0x50>
 800665e:	e8df f002 	tbb	[pc, r2]
 8006662:	1b07      	.short	0x1b07
 8006664:	1b0c1b1b 	.word	0x1b0c1b1b
 8006668:	1b111b1b 	.word	0x1b111b1b
 800666c:	1b1b      	.short	0x1b1b
 800666e:	16          	.byte	0x16
 800666f:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006670:	6800      	ldr	r0, [r0, #0]
 8006672:	f7ff fd11 	bl	8006098 <TIM_OC1_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8006676:	2000      	movs	r0, #0
      break;
 8006678:	e00f      	b.n	800669a <HAL_TIM_OC_ConfigChannel+0x52>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800667a:	6800      	ldr	r0, [r0, #0]
 800667c:	f7ff ffb6 	bl	80065ec <TIM_OC2_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8006680:	2000      	movs	r0, #0
      break;
 8006682:	e00a      	b.n	800669a <HAL_TIM_OC_ConfigChannel+0x52>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006684:	6800      	ldr	r0, [r0, #0]
 8006686:	f7ff fd31 	bl	80060ec <TIM_OC3_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 800668a:	2000      	movs	r0, #0
      break;
 800668c:	e005      	b.n	800669a <HAL_TIM_OC_ConfigChannel+0x52>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800668e:	6800      	ldr	r0, [r0, #0]
 8006690:	f7ff fd5a 	bl	8006148 <TIM_OC4_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8006694:	2000      	movs	r0, #0
      break;
 8006696:	e000      	b.n	800669a <HAL_TIM_OC_ConfigChannel+0x52>
  switch (Channel)
 8006698:	2001      	movs	r0, #1
  __HAL_UNLOCK(htim);
 800669a:	2300      	movs	r3, #0
 800669c:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
}
 80066a0:	bd10      	pop	{r4, pc}
  __HAL_LOCK(htim);
 80066a2:	2002      	movs	r0, #2
}
 80066a4:	4770      	bx	lr

080066a6 <HAL_TIM_PWM_ConfigChannel>:
{
 80066a6:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 80066a8:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 80066ac:	2b01      	cmp	r3, #1
 80066ae:	d066      	beq.n	800677e <HAL_TIM_PWM_ConfigChannel+0xd8>
 80066b0:	4604      	mov	r4, r0
 80066b2:	460d      	mov	r5, r1
 80066b4:	2301      	movs	r3, #1
 80066b6:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
  switch (Channel)
 80066ba:	2a0c      	cmp	r2, #12
 80066bc:	d85a      	bhi.n	8006774 <HAL_TIM_PWM_ConfigChannel+0xce>
 80066be:	e8df f002 	tbb	[pc, r2]
 80066c2:	5907      	.short	0x5907
 80066c4:	591b5959 	.word	0x591b5959
 80066c8:	59305959 	.word	0x59305959
 80066cc:	5959      	.short	0x5959
 80066ce:	44          	.byte	0x44
 80066cf:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80066d0:	6800      	ldr	r0, [r0, #0]
 80066d2:	f7ff fce1 	bl	8006098 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80066d6:	6822      	ldr	r2, [r4, #0]
 80066d8:	6993      	ldr	r3, [r2, #24]
 80066da:	f043 0308 	orr.w	r3, r3, #8
 80066de:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80066e0:	6822      	ldr	r2, [r4, #0]
 80066e2:	6993      	ldr	r3, [r2, #24]
 80066e4:	f023 0304 	bic.w	r3, r3, #4
 80066e8:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80066ea:	6822      	ldr	r2, [r4, #0]
 80066ec:	6993      	ldr	r3, [r2, #24]
 80066ee:	6929      	ldr	r1, [r5, #16]
 80066f0:	430b      	orrs	r3, r1
 80066f2:	6193      	str	r3, [r2, #24]
  HAL_StatusTypeDef status = HAL_OK;
 80066f4:	2000      	movs	r0, #0
      break;
 80066f6:	e03e      	b.n	8006776 <HAL_TIM_PWM_ConfigChannel+0xd0>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80066f8:	6800      	ldr	r0, [r0, #0]
 80066fa:	f7ff ff77 	bl	80065ec <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80066fe:	6822      	ldr	r2, [r4, #0]
 8006700:	6993      	ldr	r3, [r2, #24]
 8006702:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8006706:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006708:	6822      	ldr	r2, [r4, #0]
 800670a:	6993      	ldr	r3, [r2, #24]
 800670c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006710:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006712:	6822      	ldr	r2, [r4, #0]
 8006714:	6993      	ldr	r3, [r2, #24]
 8006716:	6929      	ldr	r1, [r5, #16]
 8006718:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800671c:	6193      	str	r3, [r2, #24]
  HAL_StatusTypeDef status = HAL_OK;
 800671e:	2000      	movs	r0, #0
      break;
 8006720:	e029      	b.n	8006776 <HAL_TIM_PWM_ConfigChannel+0xd0>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006722:	6800      	ldr	r0, [r0, #0]
 8006724:	f7ff fce2 	bl	80060ec <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006728:	6822      	ldr	r2, [r4, #0]
 800672a:	69d3      	ldr	r3, [r2, #28]
 800672c:	f043 0308 	orr.w	r3, r3, #8
 8006730:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006732:	6822      	ldr	r2, [r4, #0]
 8006734:	69d3      	ldr	r3, [r2, #28]
 8006736:	f023 0304 	bic.w	r3, r3, #4
 800673a:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800673c:	6822      	ldr	r2, [r4, #0]
 800673e:	69d3      	ldr	r3, [r2, #28]
 8006740:	6929      	ldr	r1, [r5, #16]
 8006742:	430b      	orrs	r3, r1
 8006744:	61d3      	str	r3, [r2, #28]
  HAL_StatusTypeDef status = HAL_OK;
 8006746:	2000      	movs	r0, #0
      break;
 8006748:	e015      	b.n	8006776 <HAL_TIM_PWM_ConfigChannel+0xd0>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800674a:	6800      	ldr	r0, [r0, #0]
 800674c:	f7ff fcfc 	bl	8006148 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006750:	6822      	ldr	r2, [r4, #0]
 8006752:	69d3      	ldr	r3, [r2, #28]
 8006754:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8006758:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800675a:	6822      	ldr	r2, [r4, #0]
 800675c:	69d3      	ldr	r3, [r2, #28]
 800675e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006762:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006764:	6822      	ldr	r2, [r4, #0]
 8006766:	69d3      	ldr	r3, [r2, #28]
 8006768:	6929      	ldr	r1, [r5, #16]
 800676a:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800676e:	61d3      	str	r3, [r2, #28]
  HAL_StatusTypeDef status = HAL_OK;
 8006770:	2000      	movs	r0, #0
      break;
 8006772:	e000      	b.n	8006776 <HAL_TIM_PWM_ConfigChannel+0xd0>
  switch (Channel)
 8006774:	2001      	movs	r0, #1
  __HAL_UNLOCK(htim);
 8006776:	2300      	movs	r3, #0
 8006778:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
}
 800677c:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(htim);
 800677e:	2002      	movs	r0, #2
 8006780:	e7fc      	b.n	800677c <HAL_TIM_PWM_ConfigChannel+0xd6>

08006782 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006782:	b410      	push	{r4}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006784:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006786:	f424 4c7f 	bic.w	ip, r4, #65280	@ 0xff00

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800678a:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 800678e:	430a      	orrs	r2, r1
 8006790:	ea42 020c 	orr.w	r2, r2, ip

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006794:	6082      	str	r2, [r0, #8]
}
 8006796:	f85d 4b04 	ldr.w	r4, [sp], #4
 800679a:	4770      	bx	lr

0800679c <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 800679c:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 80067a0:	2b01      	cmp	r3, #1
 80067a2:	d078      	beq.n	8006896 <HAL_TIM_ConfigClockSource+0xfa>
{
 80067a4:	b510      	push	{r4, lr}
 80067a6:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 80067a8:	2301      	movs	r3, #1
 80067aa:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 80067ae:	2302      	movs	r3, #2
 80067b0:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
  tmpsmcr = htim->Instance->SMCR;
 80067b4:	6802      	ldr	r2, [r0, #0]
 80067b6:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80067b8:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80067bc:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
  htim->Instance->SMCR = tmpsmcr;
 80067c0:	6093      	str	r3, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 80067c2:	680b      	ldr	r3, [r1, #0]
 80067c4:	2b60      	cmp	r3, #96	@ 0x60
 80067c6:	d04c      	beq.n	8006862 <HAL_TIM_ConfigClockSource+0xc6>
 80067c8:	d823      	bhi.n	8006812 <HAL_TIM_ConfigClockSource+0x76>
 80067ca:	2b40      	cmp	r3, #64	@ 0x40
 80067cc:	d054      	beq.n	8006878 <HAL_TIM_ConfigClockSource+0xdc>
 80067ce:	d811      	bhi.n	80067f4 <HAL_TIM_ConfigClockSource+0x58>
 80067d0:	2b20      	cmp	r3, #32
 80067d2:	d003      	beq.n	80067dc <HAL_TIM_ConfigClockSource+0x40>
 80067d4:	d80a      	bhi.n	80067ec <HAL_TIM_ConfigClockSource+0x50>
 80067d6:	b10b      	cbz	r3, 80067dc <HAL_TIM_ConfigClockSource+0x40>
 80067d8:	2b10      	cmp	r3, #16
 80067da:	d105      	bne.n	80067e8 <HAL_TIM_ConfigClockSource+0x4c>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80067dc:	4619      	mov	r1, r3
 80067de:	6820      	ldr	r0, [r4, #0]
 80067e0:	f7ff fcfd 	bl	80061de <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 80067e4:	2000      	movs	r0, #0
      break;
 80067e6:	e028      	b.n	800683a <HAL_TIM_ConfigClockSource+0x9e>
      status = HAL_ERROR;
 80067e8:	2001      	movs	r0, #1
 80067ea:	e026      	b.n	800683a <HAL_TIM_ConfigClockSource+0x9e>
  switch (sClockSourceConfig->ClockSource)
 80067ec:	2b30      	cmp	r3, #48	@ 0x30
 80067ee:	d0f5      	beq.n	80067dc <HAL_TIM_ConfigClockSource+0x40>
      status = HAL_ERROR;
 80067f0:	2001      	movs	r0, #1
 80067f2:	e022      	b.n	800683a <HAL_TIM_ConfigClockSource+0x9e>
  switch (sClockSourceConfig->ClockSource)
 80067f4:	2b50      	cmp	r3, #80	@ 0x50
 80067f6:	d10a      	bne.n	800680e <HAL_TIM_ConfigClockSource+0x72>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80067f8:	68ca      	ldr	r2, [r1, #12]
 80067fa:	6849      	ldr	r1, [r1, #4]
 80067fc:	6800      	ldr	r0, [r0, #0]
 80067fe:	f7ff fcc7 	bl	8006190 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006802:	2150      	movs	r1, #80	@ 0x50
 8006804:	6820      	ldr	r0, [r4, #0]
 8006806:	f7ff fcea 	bl	80061de <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 800680a:	2000      	movs	r0, #0
      break;
 800680c:	e015      	b.n	800683a <HAL_TIM_ConfigClockSource+0x9e>
      status = HAL_ERROR;
 800680e:	2001      	movs	r0, #1
 8006810:	e013      	b.n	800683a <HAL_TIM_ConfigClockSource+0x9e>
  switch (sClockSourceConfig->ClockSource)
 8006812:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006816:	d03a      	beq.n	800688e <HAL_TIM_ConfigClockSource+0xf2>
 8006818:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800681c:	d014      	beq.n	8006848 <HAL_TIM_ConfigClockSource+0xac>
 800681e:	2b70      	cmp	r3, #112	@ 0x70
 8006820:	d137      	bne.n	8006892 <HAL_TIM_ConfigClockSource+0xf6>
      TIM_ETR_SetConfig(htim->Instance,
 8006822:	68cb      	ldr	r3, [r1, #12]
 8006824:	684a      	ldr	r2, [r1, #4]
 8006826:	6889      	ldr	r1, [r1, #8]
 8006828:	6800      	ldr	r0, [r0, #0]
 800682a:	f7ff ffaa 	bl	8006782 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800682e:	6822      	ldr	r2, [r4, #0]
 8006830:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006832:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
      htim->Instance->SMCR = tmpsmcr;
 8006836:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8006838:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 800683a:	2301      	movs	r3, #1
 800683c:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  __HAL_UNLOCK(htim);
 8006840:	2300      	movs	r3, #0
 8006842:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
}
 8006846:	bd10      	pop	{r4, pc}
      TIM_ETR_SetConfig(htim->Instance,
 8006848:	68cb      	ldr	r3, [r1, #12]
 800684a:	684a      	ldr	r2, [r1, #4]
 800684c:	6889      	ldr	r1, [r1, #8]
 800684e:	6800      	ldr	r0, [r0, #0]
 8006850:	f7ff ff97 	bl	8006782 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006854:	6822      	ldr	r2, [r4, #0]
 8006856:	6893      	ldr	r3, [r2, #8]
 8006858:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800685c:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800685e:	2000      	movs	r0, #0
      break;
 8006860:	e7eb      	b.n	800683a <HAL_TIM_ConfigClockSource+0x9e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006862:	68ca      	ldr	r2, [r1, #12]
 8006864:	6849      	ldr	r1, [r1, #4]
 8006866:	6800      	ldr	r0, [r0, #0]
 8006868:	f7ff fca5 	bl	80061b6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800686c:	2160      	movs	r1, #96	@ 0x60
 800686e:	6820      	ldr	r0, [r4, #0]
 8006870:	f7ff fcb5 	bl	80061de <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8006874:	2000      	movs	r0, #0
      break;
 8006876:	e7e0      	b.n	800683a <HAL_TIM_ConfigClockSource+0x9e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006878:	68ca      	ldr	r2, [r1, #12]
 800687a:	6849      	ldr	r1, [r1, #4]
 800687c:	6800      	ldr	r0, [r0, #0]
 800687e:	f7ff fc87 	bl	8006190 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006882:	2140      	movs	r1, #64	@ 0x40
 8006884:	6820      	ldr	r0, [r4, #0]
 8006886:	f7ff fcaa 	bl	80061de <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 800688a:	2000      	movs	r0, #0
      break;
 800688c:	e7d5      	b.n	800683a <HAL_TIM_ConfigClockSource+0x9e>
  switch (sClockSourceConfig->ClockSource)
 800688e:	2000      	movs	r0, #0
 8006890:	e7d3      	b.n	800683a <HAL_TIM_ConfigClockSource+0x9e>
      status = HAL_ERROR;
 8006892:	2001      	movs	r0, #1
 8006894:	e7d1      	b.n	800683a <HAL_TIM_ConfigClockSource+0x9e>
  __HAL_LOCK(htim);
 8006896:	2002      	movs	r0, #2
}
 8006898:	4770      	bx	lr

0800689a <TIM_CCxChannelCmd>:

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800689a:	f001 011f 	and.w	r1, r1, #31
 800689e:	f04f 0c01 	mov.w	ip, #1
 80068a2:	fa0c fc01 	lsl.w	ip, ip, r1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80068a6:	6a03      	ldr	r3, [r0, #32]
 80068a8:	ea23 030c 	bic.w	r3, r3, ip
 80068ac:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80068ae:	6a03      	ldr	r3, [r0, #32]
 80068b0:	408a      	lsls	r2, r1
 80068b2:	4313      	orrs	r3, r2
 80068b4:	6203      	str	r3, [r0, #32]
}
 80068b6:	4770      	bx	lr

080068b8 <HAL_TIM_OC_Start_IT>:
{
 80068b8:	b510      	push	{r4, lr}
 80068ba:	4604      	mov	r4, r0
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80068bc:	4608      	mov	r0, r1
 80068be:	2900      	cmp	r1, #0
 80068c0:	d137      	bne.n	8006932 <HAL_TIM_OC_Start_IT+0x7a>
 80068c2:	f894 303e 	ldrb.w	r3, [r4, #62]	@ 0x3e
 80068c6:	3b01      	subs	r3, #1
 80068c8:	bf18      	it	ne
 80068ca:	2301      	movne	r3, #1
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	f040 8095 	bne.w	80069fc <HAL_TIM_OC_Start_IT+0x144>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80068d2:	2800      	cmp	r0, #0
 80068d4:	d143      	bne.n	800695e <HAL_TIM_OC_Start_IT+0xa6>
 80068d6:	2302      	movs	r3, #2
 80068d8:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80068dc:	6822      	ldr	r2, [r4, #0]
 80068de:	68d3      	ldr	r3, [r2, #12]
 80068e0:	f043 0302 	orr.w	r3, r3, #2
 80068e4:	60d3      	str	r3, [r2, #12]
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80068e6:	2201      	movs	r2, #1
 80068e8:	4601      	mov	r1, r0
 80068ea:	6820      	ldr	r0, [r4, #0]
 80068ec:	f7ff ffd5 	bl	800689a <TIM_CCxChannelCmd>
    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80068f0:	6823      	ldr	r3, [r4, #0]
 80068f2:	4a45      	ldr	r2, [pc, #276]	@ (8006a08 <HAL_TIM_OC_Start_IT+0x150>)
 80068f4:	4293      	cmp	r3, r2
 80068f6:	d071      	beq.n	80069dc <HAL_TIM_OC_Start_IT+0x124>
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80068f8:	6823      	ldr	r3, [r4, #0]
 80068fa:	4a43      	ldr	r2, [pc, #268]	@ (8006a08 <HAL_TIM_OC_Start_IT+0x150>)
 80068fc:	4293      	cmp	r3, r2
 80068fe:	d072      	beq.n	80069e6 <HAL_TIM_OC_Start_IT+0x12e>
 8006900:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006904:	d06f      	beq.n	80069e6 <HAL_TIM_OC_Start_IT+0x12e>
 8006906:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 800690a:	4293      	cmp	r3, r2
 800690c:	d06b      	beq.n	80069e6 <HAL_TIM_OC_Start_IT+0x12e>
 800690e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8006912:	4293      	cmp	r3, r2
 8006914:	d067      	beq.n	80069e6 <HAL_TIM_OC_Start_IT+0x12e>
 8006916:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800691a:	4293      	cmp	r3, r2
 800691c:	d063      	beq.n	80069e6 <HAL_TIM_OC_Start_IT+0x12e>
 800691e:	f502 329a 	add.w	r2, r2, #78848	@ 0x13400
 8006922:	4293      	cmp	r3, r2
 8006924:	d05f      	beq.n	80069e6 <HAL_TIM_OC_Start_IT+0x12e>
      __HAL_TIM_ENABLE(htim);
 8006926:	681a      	ldr	r2, [r3, #0]
 8006928:	f042 0201 	orr.w	r2, r2, #1
 800692c:	601a      	str	r2, [r3, #0]
 800692e:	2000      	movs	r0, #0
 8006930:	e065      	b.n	80069fe <HAL_TIM_OC_Start_IT+0x146>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006932:	2904      	cmp	r1, #4
 8006934:	d007      	beq.n	8006946 <HAL_TIM_OC_Start_IT+0x8e>
 8006936:	2908      	cmp	r1, #8
 8006938:	d00b      	beq.n	8006952 <HAL_TIM_OC_Start_IT+0x9a>
 800693a:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
 800693e:	3b01      	subs	r3, #1
 8006940:	bf18      	it	ne
 8006942:	2301      	movne	r3, #1
 8006944:	e7c2      	b.n	80068cc <HAL_TIM_OC_Start_IT+0x14>
 8006946:	f894 303f 	ldrb.w	r3, [r4, #63]	@ 0x3f
 800694a:	3b01      	subs	r3, #1
 800694c:	bf18      	it	ne
 800694e:	2301      	movne	r3, #1
 8006950:	e7bc      	b.n	80068cc <HAL_TIM_OC_Start_IT+0x14>
 8006952:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 8006956:	3b01      	subs	r3, #1
 8006958:	bf18      	it	ne
 800695a:	2301      	movne	r3, #1
 800695c:	e7b6      	b.n	80068cc <HAL_TIM_OC_Start_IT+0x14>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800695e:	2804      	cmp	r0, #4
 8006960:	d024      	beq.n	80069ac <HAL_TIM_OC_Start_IT+0xf4>
 8006962:	2808      	cmp	r0, #8
 8006964:	d02b      	beq.n	80069be <HAL_TIM_OC_Start_IT+0x106>
 8006966:	2302      	movs	r3, #2
 8006968:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  switch (Channel)
 800696c:	280c      	cmp	r0, #12
 800696e:	d847      	bhi.n	8006a00 <HAL_TIM_OC_Start_IT+0x148>
 8006970:	a301      	add	r3, pc, #4	@ (adr r3, 8006978 <HAL_TIM_OC_Start_IT+0xc0>)
 8006972:	f853 f020 	ldr.w	pc, [r3, r0, lsl #2]
 8006976:	bf00      	nop
 8006978:	080068dd 	.word	0x080068dd
 800697c:	08006a01 	.word	0x08006a01
 8006980:	08006a01 	.word	0x08006a01
 8006984:	08006a01 	.word	0x08006a01
 8006988:	080069b3 	.word	0x080069b3
 800698c:	08006a01 	.word	0x08006a01
 8006990:	08006a01 	.word	0x08006a01
 8006994:	08006a01 	.word	0x08006a01
 8006998:	080069c5 	.word	0x080069c5
 800699c:	08006a01 	.word	0x08006a01
 80069a0:	08006a01 	.word	0x08006a01
 80069a4:	08006a01 	.word	0x08006a01
 80069a8:	080069d1 	.word	0x080069d1
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80069ac:	2302      	movs	r3, #2
 80069ae:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80069b2:	6822      	ldr	r2, [r4, #0]
 80069b4:	68d3      	ldr	r3, [r2, #12]
 80069b6:	f043 0304 	orr.w	r3, r3, #4
 80069ba:	60d3      	str	r3, [r2, #12]
  if (status == HAL_OK)
 80069bc:	e793      	b.n	80068e6 <HAL_TIM_OC_Start_IT+0x2e>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80069be:	2302      	movs	r3, #2
 80069c0:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80069c4:	6822      	ldr	r2, [r4, #0]
 80069c6:	68d3      	ldr	r3, [r2, #12]
 80069c8:	f043 0308 	orr.w	r3, r3, #8
 80069cc:	60d3      	str	r3, [r2, #12]
  if (status == HAL_OK)
 80069ce:	e78a      	b.n	80068e6 <HAL_TIM_OC_Start_IT+0x2e>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80069d0:	6822      	ldr	r2, [r4, #0]
 80069d2:	68d3      	ldr	r3, [r2, #12]
 80069d4:	f043 0310 	orr.w	r3, r3, #16
 80069d8:	60d3      	str	r3, [r2, #12]
  if (status == HAL_OK)
 80069da:	e784      	b.n	80068e6 <HAL_TIM_OC_Start_IT+0x2e>
      __HAL_TIM_MOE_ENABLE(htim);
 80069dc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80069de:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80069e2:	645a      	str	r2, [r3, #68]	@ 0x44
 80069e4:	e788      	b.n	80068f8 <HAL_TIM_OC_Start_IT+0x40>
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80069e6:	689a      	ldr	r2, [r3, #8]
 80069e8:	f002 0207 	and.w	r2, r2, #7
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80069ec:	2a06      	cmp	r2, #6
 80069ee:	d009      	beq.n	8006a04 <HAL_TIM_OC_Start_IT+0x14c>
        __HAL_TIM_ENABLE(htim);
 80069f0:	681a      	ldr	r2, [r3, #0]
 80069f2:	f042 0201 	orr.w	r2, r2, #1
 80069f6:	601a      	str	r2, [r3, #0]
 80069f8:	2000      	movs	r0, #0
 80069fa:	e000      	b.n	80069fe <HAL_TIM_OC_Start_IT+0x146>
    return HAL_ERROR;
 80069fc:	2001      	movs	r0, #1
}
 80069fe:	bd10      	pop	{r4, pc}
  switch (Channel)
 8006a00:	2001      	movs	r0, #1
 8006a02:	e7fc      	b.n	80069fe <HAL_TIM_OC_Start_IT+0x146>
 8006a04:	2000      	movs	r0, #0
 8006a06:	e7fa      	b.n	80069fe <HAL_TIM_OC_Start_IT+0x146>
 8006a08:	40010000 	.word	0x40010000

08006a0c <HAL_TIM_PWM_Start>:
{
 8006a0c:	b510      	push	{r4, lr}
 8006a0e:	4604      	mov	r4, r0
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006a10:	4608      	mov	r0, r1
 8006a12:	bb89      	cbnz	r1, 8006a78 <HAL_TIM_PWM_Start+0x6c>
 8006a14:	f894 303e 	ldrb.w	r3, [r4, #62]	@ 0x3e
 8006a18:	3b01      	subs	r3, #1
 8006a1a:	bf18      	it	ne
 8006a1c:	2301      	movne	r3, #1
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d160      	bne.n	8006ae4 <HAL_TIM_PWM_Start+0xd8>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006a22:	2800      	cmp	r0, #0
 8006a24:	d13e      	bne.n	8006aa4 <HAL_TIM_PWM_Start+0x98>
 8006a26:	2302      	movs	r3, #2
 8006a28:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006a2c:	2201      	movs	r2, #1
 8006a2e:	4601      	mov	r1, r0
 8006a30:	6820      	ldr	r0, [r4, #0]
 8006a32:	f7ff ff32 	bl	800689a <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006a36:	6823      	ldr	r3, [r4, #0]
 8006a38:	4a2c      	ldr	r2, [pc, #176]	@ (8006aec <HAL_TIM_PWM_Start+0xe0>)
 8006a3a:	4293      	cmp	r3, r2
 8006a3c:	d042      	beq.n	8006ac4 <HAL_TIM_PWM_Start+0xb8>
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006a3e:	6823      	ldr	r3, [r4, #0]
 8006a40:	4a2a      	ldr	r2, [pc, #168]	@ (8006aec <HAL_TIM_PWM_Start+0xe0>)
 8006a42:	4293      	cmp	r3, r2
 8006a44:	d043      	beq.n	8006ace <HAL_TIM_PWM_Start+0xc2>
 8006a46:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006a4a:	d040      	beq.n	8006ace <HAL_TIM_PWM_Start+0xc2>
 8006a4c:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 8006a50:	4293      	cmp	r3, r2
 8006a52:	d03c      	beq.n	8006ace <HAL_TIM_PWM_Start+0xc2>
 8006a54:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8006a58:	4293      	cmp	r3, r2
 8006a5a:	d038      	beq.n	8006ace <HAL_TIM_PWM_Start+0xc2>
 8006a5c:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8006a60:	4293      	cmp	r3, r2
 8006a62:	d034      	beq.n	8006ace <HAL_TIM_PWM_Start+0xc2>
 8006a64:	f502 329a 	add.w	r2, r2, #78848	@ 0x13400
 8006a68:	4293      	cmp	r3, r2
 8006a6a:	d030      	beq.n	8006ace <HAL_TIM_PWM_Start+0xc2>
    __HAL_TIM_ENABLE(htim);
 8006a6c:	681a      	ldr	r2, [r3, #0]
 8006a6e:	f042 0201 	orr.w	r2, r2, #1
 8006a72:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8006a74:	2000      	movs	r0, #0
 8006a76:	e034      	b.n	8006ae2 <HAL_TIM_PWM_Start+0xd6>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006a78:	2904      	cmp	r1, #4
 8006a7a:	d007      	beq.n	8006a8c <HAL_TIM_PWM_Start+0x80>
 8006a7c:	2908      	cmp	r1, #8
 8006a7e:	d00b      	beq.n	8006a98 <HAL_TIM_PWM_Start+0x8c>
 8006a80:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
 8006a84:	3b01      	subs	r3, #1
 8006a86:	bf18      	it	ne
 8006a88:	2301      	movne	r3, #1
 8006a8a:	e7c8      	b.n	8006a1e <HAL_TIM_PWM_Start+0x12>
 8006a8c:	f894 303f 	ldrb.w	r3, [r4, #63]	@ 0x3f
 8006a90:	3b01      	subs	r3, #1
 8006a92:	bf18      	it	ne
 8006a94:	2301      	movne	r3, #1
 8006a96:	e7c2      	b.n	8006a1e <HAL_TIM_PWM_Start+0x12>
 8006a98:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 8006a9c:	3b01      	subs	r3, #1
 8006a9e:	bf18      	it	ne
 8006aa0:	2301      	movne	r3, #1
 8006aa2:	e7bc      	b.n	8006a1e <HAL_TIM_PWM_Start+0x12>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006aa4:	2804      	cmp	r0, #4
 8006aa6:	d005      	beq.n	8006ab4 <HAL_TIM_PWM_Start+0xa8>
 8006aa8:	2808      	cmp	r0, #8
 8006aaa:	d007      	beq.n	8006abc <HAL_TIM_PWM_Start+0xb0>
 8006aac:	2302      	movs	r3, #2
 8006aae:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
 8006ab2:	e7bb      	b.n	8006a2c <HAL_TIM_PWM_Start+0x20>
 8006ab4:	2302      	movs	r3, #2
 8006ab6:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 8006aba:	e7b7      	b.n	8006a2c <HAL_TIM_PWM_Start+0x20>
 8006abc:	2302      	movs	r3, #2
 8006abe:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 8006ac2:	e7b3      	b.n	8006a2c <HAL_TIM_PWM_Start+0x20>
    __HAL_TIM_MOE_ENABLE(htim);
 8006ac4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006ac6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006aca:	645a      	str	r2, [r3, #68]	@ 0x44
 8006acc:	e7b7      	b.n	8006a3e <HAL_TIM_PWM_Start+0x32>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006ace:	689a      	ldr	r2, [r3, #8]
 8006ad0:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006ad4:	2a06      	cmp	r2, #6
 8006ad6:	d007      	beq.n	8006ae8 <HAL_TIM_PWM_Start+0xdc>
      __HAL_TIM_ENABLE(htim);
 8006ad8:	681a      	ldr	r2, [r3, #0]
 8006ada:	f042 0201 	orr.w	r2, r2, #1
 8006ade:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8006ae0:	2000      	movs	r0, #0
}
 8006ae2:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8006ae4:	2001      	movs	r0, #1
 8006ae6:	e7fc      	b.n	8006ae2 <HAL_TIM_PWM_Start+0xd6>
  return HAL_OK;
 8006ae8:	2000      	movs	r0, #0
 8006aea:	e7fa      	b.n	8006ae2 <HAL_TIM_PWM_Start+0xd6>
 8006aec:	40010000 	.word	0x40010000

08006af0 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006af0:	f890 203c 	ldrb.w	r2, [r0, #60]	@ 0x3c
 8006af4:	2a01      	cmp	r2, #1
 8006af6:	d035      	beq.n	8006b64 <HAL_TIMEx_MasterConfigSynchronization+0x74>
{
 8006af8:	b410      	push	{r4}
 8006afa:	4603      	mov	r3, r0
  __HAL_LOCK(htim);
 8006afc:	2201      	movs	r2, #1
 8006afe:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006b02:	2202      	movs	r2, #2
 8006b04:	f880 203d 	strb.w	r2, [r0, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006b08:	6802      	ldr	r2, [r0, #0]
 8006b0a:	6850      	ldr	r0, [r2, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006b0c:	6894      	ldr	r4, [r2, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006b0e:	f020 0c70 	bic.w	ip, r0, #112	@ 0x70
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006b12:	6808      	ldr	r0, [r1, #0]
 8006b14:	ea40 000c 	orr.w	r0, r0, ip

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006b18:	6050      	str	r0, [r2, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006b1a:	681a      	ldr	r2, [r3, #0]
 8006b1c:	4812      	ldr	r0, [pc, #72]	@ (8006b68 <HAL_TIMEx_MasterConfigSynchronization+0x78>)
 8006b1e:	4282      	cmp	r2, r0
 8006b20:	d012      	beq.n	8006b48 <HAL_TIMEx_MasterConfigSynchronization+0x58>
 8006b22:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
 8006b26:	d00f      	beq.n	8006b48 <HAL_TIMEx_MasterConfigSynchronization+0x58>
 8006b28:	f5a0 407c 	sub.w	r0, r0, #64512	@ 0xfc00
 8006b2c:	4282      	cmp	r2, r0
 8006b2e:	d00b      	beq.n	8006b48 <HAL_TIMEx_MasterConfigSynchronization+0x58>
 8006b30:	f500 6080 	add.w	r0, r0, #1024	@ 0x400
 8006b34:	4282      	cmp	r2, r0
 8006b36:	d007      	beq.n	8006b48 <HAL_TIMEx_MasterConfigSynchronization+0x58>
 8006b38:	f500 6080 	add.w	r0, r0, #1024	@ 0x400
 8006b3c:	4282      	cmp	r2, r0
 8006b3e:	d003      	beq.n	8006b48 <HAL_TIMEx_MasterConfigSynchronization+0x58>
 8006b40:	f500 309a 	add.w	r0, r0, #78848	@ 0x13400
 8006b44:	4282      	cmp	r2, r0
 8006b46:	d104      	bne.n	8006b52 <HAL_TIMEx_MasterConfigSynchronization+0x62>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006b48:	f024 0480 	bic.w	r4, r4, #128	@ 0x80
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006b4c:	6849      	ldr	r1, [r1, #4]
 8006b4e:	4321      	orrs	r1, r4

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006b50:	6091      	str	r1, [r2, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006b52:	2201      	movs	r2, #1
 8006b54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006b58:	2000      	movs	r0, #0
 8006b5a:	f883 003c 	strb.w	r0, [r3, #60]	@ 0x3c

  return HAL_OK;
}
 8006b5e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006b62:	4770      	bx	lr
  __HAL_LOCK(htim);
 8006b64:	2002      	movs	r0, #2
}
 8006b66:	4770      	bx	lr
 8006b68:	40010000 	.word	0x40010000

08006b6c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006b6c:	4602      	mov	r2, r0
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006b6e:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 8006b72:	2b01      	cmp	r3, #1
 8006b74:	d021      	beq.n	8006bba <HAL_TIMEx_ConfigBreakDeadTime+0x4e>
 8006b76:	2301      	movs	r3, #1
 8006b78:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006b7c:	68cb      	ldr	r3, [r1, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006b7e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006b82:	6888      	ldr	r0, [r1, #8]
 8006b84:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006b86:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006b8a:	6848      	ldr	r0, [r1, #4]
 8006b8c:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006b8e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006b92:	6808      	ldr	r0, [r1, #0]
 8006b94:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006b96:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006b9a:	6908      	ldr	r0, [r1, #16]
 8006b9c:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006b9e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006ba2:	6948      	ldr	r0, [r1, #20]
 8006ba4:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006ba6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006baa:	69c9      	ldr	r1, [r1, #28]
 8006bac:	430b      	orrs	r3, r1


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006bae:	6811      	ldr	r1, [r2, #0]
 8006bb0:	644b      	str	r3, [r1, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8006bb2:	2000      	movs	r0, #0
 8006bb4:	f882 003c 	strb.w	r0, [r2, #60]	@ 0x3c

  return HAL_OK;
 8006bb8:	4770      	bx	lr
  __HAL_LOCK(htim);
 8006bba:	2002      	movs	r0, #2
}
 8006bbc:	4770      	bx	lr

08006bbe <HAL_TIMEx_CommutCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006bbe:	4770      	bx	lr

08006bc0 <HAL_TIMEx_BreakCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006bc0:	4770      	bx	lr
	...

08006bc4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006bc4:	b530      	push	{r4, r5, lr}
 8006bc6:	b089      	sub	sp, #36	@ 0x24
 8006bc8:	4605      	mov	r5, r0
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM11 clock */
  __HAL_RCC_TIM11_CLK_ENABLE();
 8006bca:	2400      	movs	r4, #0
 8006bcc:	9401      	str	r4, [sp, #4]
 8006bce:	4b1d      	ldr	r3, [pc, #116]	@ (8006c44 <HAL_InitTick+0x80>)
 8006bd0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006bd2:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8006bd6:	645a      	str	r2, [r3, #68]	@ 0x44
 8006bd8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006bda:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006bde:	9301      	str	r3, [sp, #4]
 8006be0:	9b01      	ldr	r3, [sp, #4]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8006be2:	a902      	add	r1, sp, #8
 8006be4:	a803      	add	r0, sp, #12
 8006be6:	f7ff fa39 	bl	800605c <HAL_RCC_GetClockConfig>

  /* Compute TIM11 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8006bea:	f7ff fa27 	bl	800603c <HAL_RCC_GetPCLK2Freq>

  /* Compute the prescaler value to have TIM11 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8006bee:	4a16      	ldr	r2, [pc, #88]	@ (8006c48 <HAL_InitTick+0x84>)
 8006bf0:	fba2 2300 	umull	r2, r3, r2, r0
 8006bf4:	0c9b      	lsrs	r3, r3, #18
 8006bf6:	3b01      	subs	r3, #1

  /* Initialize TIM11 */
  htim11.Instance = TIM11;
 8006bf8:	4814      	ldr	r0, [pc, #80]	@ (8006c4c <HAL_InitTick+0x88>)
 8006bfa:	4a15      	ldr	r2, [pc, #84]	@ (8006c50 <HAL_InitTick+0x8c>)
 8006bfc:	6002      	str	r2, [r0, #0]
   * Period = [(TIM11CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim11.Init.Period = (1000000U / 1000U) - 1U;
 8006bfe:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8006c02:	60c2      	str	r2, [r0, #12]
  htim11.Init.Prescaler = uwPrescalerValue;
 8006c04:	6043      	str	r3, [r0, #4]
  htim11.Init.ClockDivision = 0;
 8006c06:	6104      	str	r4, [r0, #16]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006c08:	6084      	str	r4, [r0, #8]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006c0a:	6184      	str	r4, [r0, #24]

  status = HAL_TIM_Base_Init(&htim11);
 8006c0c:	f7ff fc6a 	bl	80064e4 <HAL_TIM_Base_Init>
  if (status == HAL_OK)
 8006c10:	4604      	mov	r4, r0
 8006c12:	b110      	cbz	r0, 8006c1a <HAL_InitTick+0x56>
    }
  }

 /* Return function status */
  return status;
}
 8006c14:	4620      	mov	r0, r4
 8006c16:	b009      	add	sp, #36	@ 0x24
 8006c18:	bd30      	pop	{r4, r5, pc}
    status = HAL_TIM_Base_Start_IT(&htim11);
 8006c1a:	480c      	ldr	r0, [pc, #48]	@ (8006c4c <HAL_InitTick+0x88>)
 8006c1c:	f7ff fb1e 	bl	800625c <HAL_TIM_Base_Start_IT>
    if (status == HAL_OK)
 8006c20:	4604      	mov	r4, r0
 8006c22:	2800      	cmp	r0, #0
 8006c24:	d1f6      	bne.n	8006c14 <HAL_InitTick+0x50>
        HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8006c26:	201a      	movs	r0, #26
 8006c28:	f7fd fc96 	bl	8004558 <HAL_NVIC_EnableIRQ>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8006c2c:	2d0f      	cmp	r5, #15
 8006c2e:	d901      	bls.n	8006c34 <HAL_InitTick+0x70>
        status = HAL_ERROR;
 8006c30:	2401      	movs	r4, #1
 8006c32:	e7ef      	b.n	8006c14 <HAL_InitTick+0x50>
        HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, TickPriority, 0U);
 8006c34:	2200      	movs	r2, #0
 8006c36:	4629      	mov	r1, r5
 8006c38:	201a      	movs	r0, #26
 8006c3a:	f7fd fc7d 	bl	8004538 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8006c3e:	4b05      	ldr	r3, [pc, #20]	@ (8006c54 <HAL_InitTick+0x90>)
 8006c40:	601d      	str	r5, [r3, #0]
 8006c42:	e7e7      	b.n	8006c14 <HAL_InitTick+0x50>
 8006c44:	40023800 	.word	0x40023800
 8006c48:	431bde83 	.word	0x431bde83
 8006c4c:	20006830 	.word	0x20006830
 8006c50:	40014800 	.word	0x40014800
 8006c54:	2000006c 	.word	0x2000006c

08006c58 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8006c58:	e7fe      	b.n	8006c58 <NMI_Handler>

08006c5a <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8006c5a:	e7fe      	b.n	8006c5a <HardFault_Handler>

08006c5c <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8006c5c:	e7fe      	b.n	8006c5c <MemManage_Handler>

08006c5e <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8006c5e:	e7fe      	b.n	8006c5e <BusFault_Handler>

08006c60 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8006c60:	e7fe      	b.n	8006c60 <UsageFault_Handler>

08006c62 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8006c62:	4770      	bx	lr

08006c64 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8006c64:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SENSOR_VR2_Pin);
 8006c66:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8006c6a:	f7fd ff87 	bl	8004b7c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8006c6e:	bd08      	pop	{r3, pc}

08006c70 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8006c70:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8006c72:	4803      	ldr	r0, [pc, #12]	@ (8006c80 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 8006c74:	f7ff fb31 	bl	80062da <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim11);
 8006c78:	4802      	ldr	r0, [pc, #8]	@ (8006c84 <TIM1_TRG_COM_TIM11_IRQHandler+0x14>)
 8006c7a:	f7ff fb2e 	bl	80062da <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8006c7e:	bd08      	pop	{r3, pc}
 8006c80:	20006e0c 	.word	0x20006e0c
 8006c84:	20006830 	.word	0x20006830

08006c88 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8006c88:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM2_IRQn 0 */
  scheduler_timer_callback();
 8006c8a:	f002 f943 	bl	8008f14 <scheduler_timer_callback>

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8006c8e:	4802      	ldr	r0, [pc, #8]	@ (8006c98 <TIM2_IRQHandler+0x10>)
 8006c90:	f7ff fb23 	bl	80062da <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8006c94:	bd08      	pop	{r3, pc}
 8006c96:	bf00      	nop
 8006c98:	20006dc4 	.word	0x20006dc4

08006c9c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8006c9c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8006c9e:	4802      	ldr	r0, [pc, #8]	@ (8006ca8 <DMA2_Stream0_IRQHandler+0xc>)
 8006ca0:	f7fd fd84 	bl	80047ac <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8006ca4:	bd08      	pop	{r3, pc}
 8006ca6:	bf00      	nop
 8006ca8:	200001cc 	.word	0x200001cc

08006cac <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8006cac:	b508      	push	{r3, lr}
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8006cae:	4802      	ldr	r0, [pc, #8]	@ (8006cb8 <OTG_FS_IRQHandler+0xc>)
 8006cb0:	f7fe fba3 	bl	80053fa <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8006cb4:	bd08      	pop	{r3, pc}
 8006cb6:	bf00      	nop
 8006cb8:	20008080 	.word	0x20008080

08006cbc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006cbc:	b082      	sub	sp, #8
  __IO uint32_t count = 0U;
 8006cbe:	2300      	movs	r3, #0
 8006cc0:	9301      	str	r3, [sp, #4]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006cc2:	9b01      	ldr	r3, [sp, #4]
 8006cc4:	3301      	adds	r3, #1
 8006cc6:	9301      	str	r3, [sp, #4]

    if (count > HAL_USB_TIMEOUT)
 8006cc8:	9b01      	ldr	r3, [sp, #4]
 8006cca:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006cce:	d815      	bhi.n	8006cfc <USB_CoreReset+0x40>
    {
      return HAL_TIMEOUT;
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006cd0:	6903      	ldr	r3, [r0, #16]
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	daf5      	bge.n	8006cc2 <USB_CoreReset+0x6>

  /* Core Soft Reset */
  count = 0U;
 8006cd6:	2300      	movs	r3, #0
 8006cd8:	9301      	str	r3, [sp, #4]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006cda:	6903      	ldr	r3, [r0, #16]
 8006cdc:	f043 0301 	orr.w	r3, r3, #1
 8006ce0:	6103      	str	r3, [r0, #16]

  do
  {
    count++;
 8006ce2:	9b01      	ldr	r3, [sp, #4]
 8006ce4:	3301      	adds	r3, #1
 8006ce6:	9301      	str	r3, [sp, #4]

    if (count > HAL_USB_TIMEOUT)
 8006ce8:	9b01      	ldr	r3, [sp, #4]
 8006cea:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006cee:	d808      	bhi.n	8006d02 <USB_CoreReset+0x46>
    {
      return HAL_TIMEOUT;
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006cf0:	6903      	ldr	r3, [r0, #16]
 8006cf2:	f013 0f01 	tst.w	r3, #1
 8006cf6:	d1f4      	bne.n	8006ce2 <USB_CoreReset+0x26>

  return HAL_OK;
 8006cf8:	2000      	movs	r0, #0
 8006cfa:	e000      	b.n	8006cfe <USB_CoreReset+0x42>
      return HAL_TIMEOUT;
 8006cfc:	2003      	movs	r0, #3
}
 8006cfe:	b002      	add	sp, #8
 8006d00:	4770      	bx	lr
      return HAL_TIMEOUT;
 8006d02:	2003      	movs	r0, #3
 8006d04:	e7fb      	b.n	8006cfe <USB_CoreReset+0x42>

08006d06 <USB_CoreInit>:
{
 8006d06:	b084      	sub	sp, #16
 8006d08:	b510      	push	{r4, lr}
 8006d0a:	4604      	mov	r4, r0
 8006d0c:	a803      	add	r0, sp, #12
 8006d0e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006d12:	f89d 3011 	ldrb.w	r3, [sp, #17]
 8006d16:	2b01      	cmp	r3, #1
 8006d18:	d121      	bne.n	8006d5e <USB_CoreInit+0x58>
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006d1a:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8006d1c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006d20:	63a3      	str	r3, [r4, #56]	@ 0x38
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006d22:	68e3      	ldr	r3, [r4, #12]
 8006d24:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8006d28:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006d2c:	60e3      	str	r3, [r4, #12]
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006d2e:	68e3      	ldr	r3, [r4, #12]
 8006d30:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8006d34:	60e3      	str	r3, [r4, #12]
    if (cfg.use_external_vbus == 1U)
 8006d36:	f89d 3018 	ldrb.w	r3, [sp, #24]
 8006d3a:	2b01      	cmp	r3, #1
 8006d3c:	d00a      	beq.n	8006d54 <USB_CoreInit+0x4e>
    ret = USB_CoreReset(USBx);
 8006d3e:	4620      	mov	r0, r4
 8006d40:	f7ff ffbc 	bl	8006cbc <USB_CoreReset>
  if (cfg.dma_enable == 1U)
 8006d44:	f89d 300e 	ldrb.w	r3, [sp, #14]
 8006d48:	2b01      	cmp	r3, #1
 8006d4a:	d01c      	beq.n	8006d86 <USB_CoreInit+0x80>
}
 8006d4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006d50:	b004      	add	sp, #16
 8006d52:	4770      	bx	lr
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006d54:	68e3      	ldr	r3, [r4, #12]
 8006d56:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006d5a:	60e3      	str	r3, [r4, #12]
 8006d5c:	e7ef      	b.n	8006d3e <USB_CoreInit+0x38>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006d5e:	68e3      	ldr	r3, [r4, #12]
 8006d60:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006d64:	60e3      	str	r3, [r4, #12]
    ret = USB_CoreReset(USBx);
 8006d66:	4620      	mov	r0, r4
 8006d68:	f7ff ffa8 	bl	8006cbc <USB_CoreReset>
    if (cfg.battery_charging_enable == 0U)
 8006d6c:	f89d 3015 	ldrb.w	r3, [sp, #21]
 8006d70:	b923      	cbnz	r3, 8006d7c <USB_CoreInit+0x76>
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006d72:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8006d74:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006d78:	63a3      	str	r3, [r4, #56]	@ 0x38
 8006d7a:	e7e3      	b.n	8006d44 <USB_CoreInit+0x3e>
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006d7c:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8006d7e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006d82:	63a3      	str	r3, [r4, #56]	@ 0x38
 8006d84:	e7de      	b.n	8006d44 <USB_CoreInit+0x3e>
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006d86:	68a3      	ldr	r3, [r4, #8]
 8006d88:	f043 0306 	orr.w	r3, r3, #6
 8006d8c:	60a3      	str	r3, [r4, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006d8e:	68a3      	ldr	r3, [r4, #8]
 8006d90:	f043 0320 	orr.w	r3, r3, #32
 8006d94:	60a3      	str	r3, [r4, #8]
 8006d96:	e7d9      	b.n	8006d4c <USB_CoreInit+0x46>

08006d98 <USB_SetTurnaroundTime>:
  if (speed == USBD_FS_SPEED)
 8006d98:	2a02      	cmp	r2, #2
 8006d9a:	d00a      	beq.n	8006db2 <USB_SetTurnaroundTime+0x1a>
    UsbTrd = USBD_HS_TRDT_VALUE;
 8006d9c:	2209      	movs	r2, #9
  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8006d9e:	68c3      	ldr	r3, [r0, #12]
 8006da0:	f423 5370 	bic.w	r3, r3, #15360	@ 0x3c00
 8006da4:	60c3      	str	r3, [r0, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8006da6:	68c3      	ldr	r3, [r0, #12]
 8006da8:	ea43 2382 	orr.w	r3, r3, r2, lsl #10
 8006dac:	60c3      	str	r3, [r0, #12]
}
 8006dae:	2000      	movs	r0, #0
 8006db0:	4770      	bx	lr
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8006db2:	4b23      	ldr	r3, [pc, #140]	@ (8006e40 <USB_SetTurnaroundTime+0xa8>)
 8006db4:	440b      	add	r3, r1
 8006db6:	4a23      	ldr	r2, [pc, #140]	@ (8006e44 <USB_SetTurnaroundTime+0xac>)
 8006db8:	4293      	cmp	r3, r2
 8006dba:	d92f      	bls.n	8006e1c <USB_SetTurnaroundTime+0x84>
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8006dbc:	4b22      	ldr	r3, [pc, #136]	@ (8006e48 <USB_SetTurnaroundTime+0xb0>)
 8006dbe:	440b      	add	r3, r1
 8006dc0:	4a22      	ldr	r2, [pc, #136]	@ (8006e4c <USB_SetTurnaroundTime+0xb4>)
 8006dc2:	4293      	cmp	r3, r2
 8006dc4:	d92c      	bls.n	8006e20 <USB_SetTurnaroundTime+0x88>
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8006dc6:	f5a1 0374 	sub.w	r3, r1, #15990784	@ 0xf40000
 8006dca:	f5a3 5310 	sub.w	r3, r3, #9216	@ 0x2400
 8006dce:	4a20      	ldr	r2, [pc, #128]	@ (8006e50 <USB_SetTurnaroundTime+0xb8>)
 8006dd0:	4293      	cmp	r3, r2
 8006dd2:	d927      	bls.n	8006e24 <USB_SetTurnaroundTime+0x8c>
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8006dd4:	f1a1 7383 	sub.w	r3, r1, #17170432	@ 0x1060000
 8006dd8:	f5a3 43e7 	sub.w	r3, r3, #29568	@ 0x7380
 8006ddc:	4a1d      	ldr	r2, [pc, #116]	@ (8006e54 <USB_SetTurnaroundTime+0xbc>)
 8006dde:	4293      	cmp	r3, r2
 8006de0:	d322      	bcc.n	8006e28 <USB_SetTurnaroundTime+0x90>
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8006de2:	4b1d      	ldr	r3, [pc, #116]	@ (8006e58 <USB_SetTurnaroundTime+0xc0>)
 8006de4:	440b      	add	r3, r1
 8006de6:	4a1d      	ldr	r2, [pc, #116]	@ (8006e5c <USB_SetTurnaroundTime+0xc4>)
 8006de8:	4293      	cmp	r3, r2
 8006dea:	d91f      	bls.n	8006e2c <USB_SetTurnaroundTime+0x94>
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8006dec:	4b1c      	ldr	r3, [pc, #112]	@ (8006e60 <USB_SetTurnaroundTime+0xc8>)
 8006dee:	440b      	add	r3, r1
 8006df0:	4a1c      	ldr	r2, [pc, #112]	@ (8006e64 <USB_SetTurnaroundTime+0xcc>)
 8006df2:	4293      	cmp	r3, r2
 8006df4:	d31c      	bcc.n	8006e30 <USB_SetTurnaroundTime+0x98>
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8006df6:	4b1c      	ldr	r3, [pc, #112]	@ (8006e68 <USB_SetTurnaroundTime+0xd0>)
 8006df8:	440b      	add	r3, r1
 8006dfa:	4a1c      	ldr	r2, [pc, #112]	@ (8006e6c <USB_SetTurnaroundTime+0xd4>)
 8006dfc:	4293      	cmp	r3, r2
 8006dfe:	d319      	bcc.n	8006e34 <USB_SetTurnaroundTime+0x9c>
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8006e00:	f1a1 73b7 	sub.w	r3, r1, #23986176	@ 0x16e0000
 8006e04:	f5a3 5358 	sub.w	r3, r3, #13824	@ 0x3600
 8006e08:	4a19      	ldr	r2, [pc, #100]	@ (8006e70 <USB_SetTurnaroundTime+0xd8>)
 8006e0a:	4293      	cmp	r3, r2
 8006e0c:	d314      	bcc.n	8006e38 <USB_SetTurnaroundTime+0xa0>
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8006e0e:	4b19      	ldr	r3, [pc, #100]	@ (8006e74 <USB_SetTurnaroundTime+0xdc>)
 8006e10:	440b      	add	r3, r1
 8006e12:	4a19      	ldr	r2, [pc, #100]	@ (8006e78 <USB_SetTurnaroundTime+0xe0>)
 8006e14:	4293      	cmp	r3, r2
 8006e16:	d211      	bcs.n	8006e3c <USB_SetTurnaroundTime+0xa4>
      UsbTrd = 0x7U;
 8006e18:	2207      	movs	r2, #7
 8006e1a:	e7c0      	b.n	8006d9e <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0xFU;
 8006e1c:	220f      	movs	r2, #15
 8006e1e:	e7be      	b.n	8006d9e <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0xEU;
 8006e20:	220e      	movs	r2, #14
 8006e22:	e7bc      	b.n	8006d9e <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0xDU;
 8006e24:	220d      	movs	r2, #13
 8006e26:	e7ba      	b.n	8006d9e <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0xCU;
 8006e28:	220c      	movs	r2, #12
 8006e2a:	e7b8      	b.n	8006d9e <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0xBU;
 8006e2c:	220b      	movs	r2, #11
 8006e2e:	e7b6      	b.n	8006d9e <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0xAU;
 8006e30:	220a      	movs	r2, #10
 8006e32:	e7b4      	b.n	8006d9e <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0x9U;
 8006e34:	2209      	movs	r2, #9
 8006e36:	e7b2      	b.n	8006d9e <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0x8U;
 8006e38:	2208      	movs	r2, #8
 8006e3a:	e7b0      	b.n	8006d9e <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0x6U;
 8006e3c:	2206      	movs	r2, #6
 8006e3e:	e7ae      	b.n	8006d9e <USB_SetTurnaroundTime+0x6>
 8006e40:	ff275340 	.word	0xff275340
 8006e44:	000c34ff 	.word	0x000c34ff
 8006e48:	ff1b1e40 	.word	0xff1b1e40
 8006e4c:	000f423f 	.word	0x000f423f
 8006e50:	00124f7f 	.word	0x00124f7f
 8006e54:	0013d620 	.word	0x0013d620
 8006e58:	fee5b660 	.word	0xfee5b660
 8006e5c:	0016e35f 	.word	0x0016e35f
 8006e60:	feced300 	.word	0xfeced300
 8006e64:	001b7740 	.word	0x001b7740
 8006e68:	feb35bc0 	.word	0xfeb35bc0
 8006e6c:	002191c0 	.word	0x002191c0
 8006e70:	00387520 	.word	0x00387520
 8006e74:	fe5954e0 	.word	0xfe5954e0
 8006e78:	00419ce0 	.word	0x00419ce0

08006e7c <USB_EnableGlobalInt>:
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8006e7c:	6883      	ldr	r3, [r0, #8]
 8006e7e:	f043 0301 	orr.w	r3, r3, #1
 8006e82:	6083      	str	r3, [r0, #8]
}
 8006e84:	2000      	movs	r0, #0
 8006e86:	4770      	bx	lr

08006e88 <USB_DisableGlobalInt>:
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006e88:	6883      	ldr	r3, [r0, #8]
 8006e8a:	f023 0301 	bic.w	r3, r3, #1
 8006e8e:	6083      	str	r3, [r0, #8]
}
 8006e90:	2000      	movs	r0, #0
 8006e92:	4770      	bx	lr

08006e94 <USB_FlushTxFifo>:
{
 8006e94:	b082      	sub	sp, #8
  __IO uint32_t count = 0U;
 8006e96:	2300      	movs	r3, #0
 8006e98:	9301      	str	r3, [sp, #4]
    count++;
 8006e9a:	9b01      	ldr	r3, [sp, #4]
 8006e9c:	3301      	adds	r3, #1
 8006e9e:	9301      	str	r3, [sp, #4]
    if (count > HAL_USB_TIMEOUT)
 8006ea0:	9b01      	ldr	r3, [sp, #4]
 8006ea2:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006ea6:	d815      	bhi.n	8006ed4 <USB_FlushTxFifo+0x40>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006ea8:	6903      	ldr	r3, [r0, #16]
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	daf5      	bge.n	8006e9a <USB_FlushTxFifo+0x6>
  count = 0U;
 8006eae:	2300      	movs	r3, #0
 8006eb0:	9301      	str	r3, [sp, #4]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006eb2:	0189      	lsls	r1, r1, #6
 8006eb4:	f041 0120 	orr.w	r1, r1, #32
 8006eb8:	6101      	str	r1, [r0, #16]
    count++;
 8006eba:	9b01      	ldr	r3, [sp, #4]
 8006ebc:	3301      	adds	r3, #1
 8006ebe:	9301      	str	r3, [sp, #4]
    if (count > HAL_USB_TIMEOUT)
 8006ec0:	9b01      	ldr	r3, [sp, #4]
 8006ec2:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006ec6:	d808      	bhi.n	8006eda <USB_FlushTxFifo+0x46>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006ec8:	6903      	ldr	r3, [r0, #16]
 8006eca:	f013 0f20 	tst.w	r3, #32
 8006ece:	d1f4      	bne.n	8006eba <USB_FlushTxFifo+0x26>
  return HAL_OK;
 8006ed0:	2000      	movs	r0, #0
 8006ed2:	e000      	b.n	8006ed6 <USB_FlushTxFifo+0x42>
      return HAL_TIMEOUT;
 8006ed4:	2003      	movs	r0, #3
}
 8006ed6:	b002      	add	sp, #8
 8006ed8:	4770      	bx	lr
      return HAL_TIMEOUT;
 8006eda:	2003      	movs	r0, #3
 8006edc:	e7fb      	b.n	8006ed6 <USB_FlushTxFifo+0x42>

08006ede <USB_FlushRxFifo>:
{
 8006ede:	b082      	sub	sp, #8
  __IO uint32_t count = 0U;
 8006ee0:	2300      	movs	r3, #0
 8006ee2:	9301      	str	r3, [sp, #4]
    count++;
 8006ee4:	9b01      	ldr	r3, [sp, #4]
 8006ee6:	3301      	adds	r3, #1
 8006ee8:	9301      	str	r3, [sp, #4]
    if (count > HAL_USB_TIMEOUT)
 8006eea:	9b01      	ldr	r3, [sp, #4]
 8006eec:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006ef0:	d813      	bhi.n	8006f1a <USB_FlushRxFifo+0x3c>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006ef2:	6903      	ldr	r3, [r0, #16]
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	daf5      	bge.n	8006ee4 <USB_FlushRxFifo+0x6>
  count = 0U;
 8006ef8:	2300      	movs	r3, #0
 8006efa:	9301      	str	r3, [sp, #4]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006efc:	2310      	movs	r3, #16
 8006efe:	6103      	str	r3, [r0, #16]
    count++;
 8006f00:	9b01      	ldr	r3, [sp, #4]
 8006f02:	3301      	adds	r3, #1
 8006f04:	9301      	str	r3, [sp, #4]
    if (count > HAL_USB_TIMEOUT)
 8006f06:	9b01      	ldr	r3, [sp, #4]
 8006f08:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006f0c:	d808      	bhi.n	8006f20 <USB_FlushRxFifo+0x42>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006f0e:	6903      	ldr	r3, [r0, #16]
 8006f10:	f013 0f10 	tst.w	r3, #16
 8006f14:	d1f4      	bne.n	8006f00 <USB_FlushRxFifo+0x22>
  return HAL_OK;
 8006f16:	2000      	movs	r0, #0
 8006f18:	e000      	b.n	8006f1c <USB_FlushRxFifo+0x3e>
      return HAL_TIMEOUT;
 8006f1a:	2003      	movs	r0, #3
}
 8006f1c:	b002      	add	sp, #8
 8006f1e:	4770      	bx	lr
      return HAL_TIMEOUT;
 8006f20:	2003      	movs	r0, #3
 8006f22:	e7fb      	b.n	8006f1c <USB_FlushRxFifo+0x3e>

08006f24 <USB_SetDevSpeed>:
  USBx_DEVICE->DCFG |= speed;
 8006f24:	f8d0 3800 	ldr.w	r3, [r0, #2048]	@ 0x800
 8006f28:	4319      	orrs	r1, r3
 8006f2a:	f8c0 1800 	str.w	r1, [r0, #2048]	@ 0x800
}
 8006f2e:	2000      	movs	r0, #0
 8006f30:	4770      	bx	lr
	...

08006f34 <USB_DevInit>:
{
 8006f34:	b084      	sub	sp, #16
 8006f36:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f38:	4604      	mov	r4, r0
 8006f3a:	a807      	add	r0, sp, #28
 8006f3c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  for (i = 0U; i < 15U; i++)
 8006f40:	2300      	movs	r3, #0
 8006f42:	e006      	b.n	8006f52 <USB_DevInit+0x1e>
    USBx->DIEPTXF[i] = 0U;
 8006f44:	f103 0240 	add.w	r2, r3, #64	@ 0x40
 8006f48:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8006f4c:	2100      	movs	r1, #0
 8006f4e:	6051      	str	r1, [r2, #4]
  for (i = 0U; i < 15U; i++)
 8006f50:	3301      	adds	r3, #1
 8006f52:	2b0e      	cmp	r3, #14
 8006f54:	d9f6      	bls.n	8006f44 <USB_DevInit+0x10>
  if (cfg.vbus_sensing_enable == 0U)
 8006f56:	f89d 6026 	ldrb.w	r6, [sp, #38]	@ 0x26
 8006f5a:	bb06      	cbnz	r6, 8006f9e <USB_DevInit+0x6a>
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006f5c:	f8d4 3804 	ldr.w	r3, [r4, #2052]	@ 0x804
 8006f60:	f043 0302 	orr.w	r3, r3, #2
 8006f64:	f8c4 3804 	str.w	r3, [r4, #2052]	@ 0x804
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8006f68:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8006f6a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8006f6e:	63a3      	str	r3, [r4, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8006f70:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8006f72:	f423 2300 	bic.w	r3, r3, #524288	@ 0x80000
 8006f76:	63a3      	str	r3, [r4, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8006f78:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8006f7a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006f7e:	63a3      	str	r3, [r4, #56]	@ 0x38
  USBx_PCGCCTL = 0U;
 8006f80:	2300      	movs	r3, #0
 8006f82:	f8c4 3e00 	str.w	r3, [r4, #3584]	@ 0xe00
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006f86:	f89d 3021 	ldrb.w	r3, [sp, #33]	@ 0x21
 8006f8a:	2b01      	cmp	r3, #1
 8006f8c:	d115      	bne.n	8006fba <USB_DevInit+0x86>
    if (cfg.speed == USBD_HS_SPEED)
 8006f8e:	f89d 301f 	ldrb.w	r3, [sp, #31]
 8006f92:	b96b      	cbnz	r3, 8006fb0 <USB_DevInit+0x7c>
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8006f94:	2100      	movs	r1, #0
 8006f96:	4620      	mov	r0, r4
 8006f98:	f7ff ffc4 	bl	8006f24 <USB_SetDevSpeed>
 8006f9c:	e011      	b.n	8006fc2 <USB_DevInit+0x8e>
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8006f9e:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8006fa0:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8006fa4:	63a3      	str	r3, [r4, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8006fa6:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8006fa8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006fac:	63a3      	str	r3, [r4, #56]	@ 0x38
 8006fae:	e7e7      	b.n	8006f80 <USB_DevInit+0x4c>
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8006fb0:	2101      	movs	r1, #1
 8006fb2:	4620      	mov	r0, r4
 8006fb4:	f7ff ffb6 	bl	8006f24 <USB_SetDevSpeed>
 8006fb8:	e003      	b.n	8006fc2 <USB_DevInit+0x8e>
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006fba:	2103      	movs	r1, #3
 8006fbc:	4620      	mov	r0, r4
 8006fbe:	f7ff ffb1 	bl	8006f24 <USB_SetDevSpeed>
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006fc2:	2110      	movs	r1, #16
 8006fc4:	4620      	mov	r0, r4
 8006fc6:	f7ff ff65 	bl	8006e94 <USB_FlushTxFifo>
 8006fca:	4605      	mov	r5, r0
 8006fcc:	b100      	cbz	r0, 8006fd0 <USB_DevInit+0x9c>
    ret = HAL_ERROR;
 8006fce:	2501      	movs	r5, #1
  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006fd0:	4620      	mov	r0, r4
 8006fd2:	f7ff ff84 	bl	8006ede <USB_FlushRxFifo>
 8006fd6:	b100      	cbz	r0, 8006fda <USB_DevInit+0xa6>
    ret = HAL_ERROR;
 8006fd8:	2501      	movs	r5, #1
  USBx_DEVICE->DIEPMSK = 0U;
 8006fda:	f504 6c00 	add.w	ip, r4, #2048	@ 0x800
 8006fde:	2300      	movs	r3, #0
 8006fe0:	f8cc 3010 	str.w	r3, [ip, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006fe4:	f8cc 3014 	str.w	r3, [ip, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006fe8:	f8cc 301c 	str.w	r3, [ip, #28]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006fec:	e00d      	b.n	800700a <USB_DevInit+0xd6>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006fee:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8006ff2:	f8c2 0900 	str.w	r0, [r2, #2304]	@ 0x900
 8006ff6:	e002      	b.n	8006ffe <USB_DevInit+0xca>
      USBx_INEP(i)->DIEPCTL = 0U;
 8006ff8:	2000      	movs	r0, #0
 8006ffa:	f8c2 0900 	str.w	r0, [r2, #2304]	@ 0x900
    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006ffe:	2200      	movs	r2, #0
 8007000:	610a      	str	r2, [r1, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8007002:	f64f 327f 	movw	r2, #64383	@ 0xfb7f
 8007006:	608a      	str	r2, [r1, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007008:	3301      	adds	r3, #1
 800700a:	f89d 101c 	ldrb.w	r1, [sp, #28]
 800700e:	4299      	cmp	r1, r3
 8007010:	d90e      	bls.n	8007030 <USB_DevInit+0xfc>
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007012:	eb04 1243 	add.w	r2, r4, r3, lsl #5
 8007016:	f502 6110 	add.w	r1, r2, #2304	@ 0x900
 800701a:	f8d2 0900 	ldr.w	r0, [r2, #2304]	@ 0x900
 800701e:	2800      	cmp	r0, #0
 8007020:	daea      	bge.n	8006ff8 <USB_DevInit+0xc4>
      if (i == 0U)
 8007022:	2b00      	cmp	r3, #0
 8007024:	d1e3      	bne.n	8006fee <USB_DevInit+0xba>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8007026:	f04f 6000 	mov.w	r0, #134217728	@ 0x8000000
 800702a:	f8c2 0900 	str.w	r0, [r2, #2304]	@ 0x900
 800702e:	e7e6      	b.n	8006ffe <USB_DevInit+0xca>
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007030:	2300      	movs	r3, #0
 8007032:	e00a      	b.n	800704a <USB_DevInit+0x116>
      if (i == 0U)
 8007034:	b1bb      	cbz	r3, 8007066 <USB_DevInit+0x132>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8007036:	f04f 4790 	mov.w	r7, #1207959552	@ 0x48000000
 800703a:	f8c2 7b00 	str.w	r7, [r2, #2816]	@ 0xb00
    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800703e:	2200      	movs	r2, #0
 8007040:	6102      	str	r2, [r0, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8007042:	f64f 327f 	movw	r2, #64383	@ 0xfb7f
 8007046:	6082      	str	r2, [r0, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007048:	3301      	adds	r3, #1
 800704a:	4299      	cmp	r1, r3
 800704c:	d910      	bls.n	8007070 <USB_DevInit+0x13c>
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800704e:	eb04 1243 	add.w	r2, r4, r3, lsl #5
 8007052:	f502 6030 	add.w	r0, r2, #2816	@ 0xb00
 8007056:	f8d2 7b00 	ldr.w	r7, [r2, #2816]	@ 0xb00
 800705a:	2f00      	cmp	r7, #0
 800705c:	dbea      	blt.n	8007034 <USB_DevInit+0x100>
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800705e:	2700      	movs	r7, #0
 8007060:	f8c2 7b00 	str.w	r7, [r2, #2816]	@ 0xb00
 8007064:	e7eb      	b.n	800703e <USB_DevInit+0x10a>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8007066:	f04f 6700 	mov.w	r7, #134217728	@ 0x8000000
 800706a:	f8c2 7b00 	str.w	r7, [r2, #2816]	@ 0xb00
 800706e:	e7e6      	b.n	800703e <USB_DevInit+0x10a>
  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8007070:	f8dc 3010 	ldr.w	r3, [ip, #16]
 8007074:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007078:	f8cc 3010 	str.w	r3, [ip, #16]
  USBx->GINTMSK = 0U;
 800707c:	2300      	movs	r3, #0
 800707e:	61a3      	str	r3, [r4, #24]
  USBx->GINTSTS = 0xBFFFFFFFU;
 8007080:	f06f 4380 	mvn.w	r3, #1073741824	@ 0x40000000
 8007084:	6163      	str	r3, [r4, #20]
  if (cfg.dma_enable == 0U)
 8007086:	f89d 301e 	ldrb.w	r3, [sp, #30]
 800708a:	b91b      	cbnz	r3, 8007094 <USB_DevInit+0x160>
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800708c:	69a3      	ldr	r3, [r4, #24]
 800708e:	f043 0310 	orr.w	r3, r3, #16
 8007092:	61a3      	str	r3, [r4, #24]
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8007094:	69a2      	ldr	r2, [r4, #24]
 8007096:	4b0c      	ldr	r3, [pc, #48]	@ (80070c8 <USB_DevInit+0x194>)
 8007098:	4313      	orrs	r3, r2
 800709a:	61a3      	str	r3, [r4, #24]
  if (cfg.Sof_enable != 0U)
 800709c:	f89d 3022 	ldrb.w	r3, [sp, #34]	@ 0x22
 80070a0:	b11b      	cbz	r3, 80070aa <USB_DevInit+0x176>
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80070a2:	69a3      	ldr	r3, [r4, #24]
 80070a4:	f043 0308 	orr.w	r3, r3, #8
 80070a8:	61a3      	str	r3, [r4, #24]
  if (cfg.vbus_sensing_enable == 1U)
 80070aa:	2e01      	cmp	r6, #1
 80070ac:	d004      	beq.n	80070b8 <USB_DevInit+0x184>
}
 80070ae:	4628      	mov	r0, r5
 80070b0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80070b4:	b004      	add	sp, #16
 80070b6:	4770      	bx	lr
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80070b8:	69a3      	ldr	r3, [r4, #24]
 80070ba:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80070be:	f043 0304 	orr.w	r3, r3, #4
 80070c2:	61a3      	str	r3, [r4, #24]
 80070c4:	e7f3      	b.n	80070ae <USB_DevInit+0x17a>
 80070c6:	bf00      	nop
 80070c8:	803c3800 	.word	0x803c3800

080070cc <USB_GetDevSpeed>:
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80070cc:	f8d0 3808 	ldr.w	r3, [r0, #2056]	@ 0x808
 80070d0:	f003 0306 	and.w	r3, r3, #6
  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80070d4:	2b02      	cmp	r3, #2
 80070d6:	d004      	beq.n	80070e2 <USB_GetDevSpeed+0x16>
 80070d8:	2b06      	cmp	r3, #6
 80070da:	d004      	beq.n	80070e6 <USB_GetDevSpeed+0x1a>
 80070dc:	b92b      	cbnz	r3, 80070ea <USB_GetDevSpeed+0x1e>
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80070de:	2000      	movs	r0, #0
 80070e0:	4770      	bx	lr
 80070e2:	2002      	movs	r0, #2
 80070e4:	4770      	bx	lr
 80070e6:	2002      	movs	r0, #2
 80070e8:	4770      	bx	lr
 80070ea:	200f      	movs	r0, #15
}
 80070ec:	4770      	bx	lr

080070ee <USB_ActivateEndpoint>:
{
 80070ee:	b510      	push	{r4, lr}
  uint32_t epnum = (uint32_t)ep->num;
 80070f0:	f891 c000 	ldrb.w	ip, [r1]
  if (ep->is_in == 1U)
 80070f4:	784b      	ldrb	r3, [r1, #1]
 80070f6:	2b01      	cmp	r3, #1
 80070f8:	d023      	beq.n	8007142 <USB_ActivateEndpoint+0x54>
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80070fa:	f500 6e00 	add.w	lr, r0, #2048	@ 0x800
 80070fe:	f8d0 381c 	ldr.w	r3, [r0, #2076]	@ 0x81c
 8007102:	f00c 040f 	and.w	r4, ip, #15
 8007106:	2201      	movs	r2, #1
 8007108:	40a2      	lsls	r2, r4
 800710a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800710e:	f8c0 381c 	str.w	r3, [r0, #2076]	@ 0x81c
    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8007112:	eb00 104c 	add.w	r0, r0, ip, lsl #5
 8007116:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	@ 0xb00
 800711a:	f413 4f00 	tst.w	r3, #32768	@ 0x8000
 800711e:	d10e      	bne.n	800713e <USB_ActivateEndpoint+0x50>
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8007120:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	@ 0xb00
 8007124:	688a      	ldr	r2, [r1, #8]
 8007126:	f3c2 020a 	ubfx	r2, r2, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800712a:	7909      	ldrb	r1, [r1, #4]
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800712c:	ea42 4281 	orr.w	r2, r2, r1, lsl #18
 8007130:	4313      	orrs	r3, r2
 8007132:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007136:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800713a:	f8c0 3b00 	str.w	r3, [r0, #2816]	@ 0xb00
}
 800713e:	2000      	movs	r0, #0
 8007140:	bd10      	pop	{r4, pc}
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8007142:	f8d0 281c 	ldr.w	r2, [r0, #2076]	@ 0x81c
 8007146:	f00c 0e0f 	and.w	lr, ip, #15
 800714a:	fa03 f30e 	lsl.w	r3, r3, lr
 800714e:	b29b      	uxth	r3, r3
 8007150:	4313      	orrs	r3, r2
 8007152:	f8c0 381c 	str.w	r3, [r0, #2076]	@ 0x81c
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8007156:	eb00 104c 	add.w	r0, r0, ip, lsl #5
 800715a:	f8d0 3900 	ldr.w	r3, [r0, #2304]	@ 0x900
 800715e:	f413 4f00 	tst.w	r3, #32768	@ 0x8000
 8007162:	d1ec      	bne.n	800713e <USB_ActivateEndpoint+0x50>
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007164:	f8d0 3900 	ldr.w	r3, [r0, #2304]	@ 0x900
 8007168:	688a      	ldr	r2, [r1, #8]
 800716a:	f3c2 020a 	ubfx	r2, r2, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800716e:	7909      	ldrb	r1, [r1, #4]
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007170:	ea42 4281 	orr.w	r2, r2, r1, lsl #18
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8007174:	ea42 528c 	orr.w	r2, r2, ip, lsl #22
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007178:	4313      	orrs	r3, r2
 800717a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800717e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007182:	f8c0 3900 	str.w	r3, [r0, #2304]	@ 0x900
 8007186:	e7da      	b.n	800713e <USB_ActivateEndpoint+0x50>

08007188 <USB_DeactivateEndpoint>:
{
 8007188:	b430      	push	{r4, r5}
  uint32_t epnum = (uint32_t)ep->num;
 800718a:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in == 1U)
 800718c:	784a      	ldrb	r2, [r1, #1]
 800718e:	2a01      	cmp	r2, #1
 8007190:	d026      	beq.n	80071e0 <USB_DeactivateEndpoint+0x58>
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007192:	eb00 1343 	add.w	r3, r0, r3, lsl #5
 8007196:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	@ 0xb00
 800719a:	2a00      	cmp	r2, #0
 800719c:	db52      	blt.n	8007244 <USB_DeactivateEndpoint+0xbc>
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800719e:	f8d0 483c 	ldr.w	r4, [r0, #2108]	@ 0x83c
 80071a2:	780a      	ldrb	r2, [r1, #0]
 80071a4:	f002 020f 	and.w	r2, r2, #15
 80071a8:	f04f 0c01 	mov.w	ip, #1
 80071ac:	fa0c f202 	lsl.w	r2, ip, r2
 80071b0:	ea24 4202 	bic.w	r2, r4, r2, lsl #16
 80071b4:	f8c0 283c 	str.w	r2, [r0, #2108]	@ 0x83c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80071b8:	f8d0 281c 	ldr.w	r2, [r0, #2076]	@ 0x81c
 80071bc:	7809      	ldrb	r1, [r1, #0]
 80071be:	f001 010f 	and.w	r1, r1, #15
 80071c2:	fa0c fc01 	lsl.w	ip, ip, r1
 80071c6:	ea22 420c 	bic.w	r2, r2, ip, lsl #16
 80071ca:	f8c0 281c 	str.w	r2, [r0, #2076]	@ 0x81c
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80071ce:	f8d3 1b00 	ldr.w	r1, [r3, #2816]	@ 0xb00
 80071d2:	4a23      	ldr	r2, [pc, #140]	@ (8007260 <USB_DeactivateEndpoint+0xd8>)
 80071d4:	400a      	ands	r2, r1
 80071d6:	f8c3 2b00 	str.w	r2, [r3, #2816]	@ 0xb00
}
 80071da:	2000      	movs	r0, #0
 80071dc:	bc30      	pop	{r4, r5}
 80071de:	4770      	bx	lr
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80071e0:	eb00 1343 	add.w	r3, r0, r3, lsl #5
 80071e4:	f8d3 2900 	ldr.w	r2, [r3, #2304]	@ 0x900
 80071e8:	2a00      	cmp	r2, #0
 80071ea:	db1e      	blt.n	800722a <USB_DeactivateEndpoint+0xa2>
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80071ec:	f8d0 583c 	ldr.w	r5, [r0, #2108]	@ 0x83c
 80071f0:	780a      	ldrb	r2, [r1, #0]
 80071f2:	f002 020f 	and.w	r2, r2, #15
 80071f6:	2401      	movs	r4, #1
 80071f8:	fa04 f202 	lsl.w	r2, r4, r2
 80071fc:	b292      	uxth	r2, r2
 80071fe:	ea25 0202 	bic.w	r2, r5, r2
 8007202:	f8c0 283c 	str.w	r2, [r0, #2108]	@ 0x83c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8007206:	f8d0 281c 	ldr.w	r2, [r0, #2076]	@ 0x81c
 800720a:	7809      	ldrb	r1, [r1, #0]
 800720c:	f001 010f 	and.w	r1, r1, #15
 8007210:	408c      	lsls	r4, r1
 8007212:	b2a4      	uxth	r4, r4
 8007214:	ea22 0204 	bic.w	r2, r2, r4
 8007218:	f8c0 281c 	str.w	r2, [r0, #2076]	@ 0x81c
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800721c:	f8d3 1900 	ldr.w	r1, [r3, #2304]	@ 0x900
 8007220:	4a10      	ldr	r2, [pc, #64]	@ (8007264 <USB_DeactivateEndpoint+0xdc>)
 8007222:	400a      	ands	r2, r1
 8007224:	f8c3 2900 	str.w	r2, [r3, #2304]	@ 0x900
 8007228:	e7d7      	b.n	80071da <USB_DeactivateEndpoint+0x52>
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800722a:	f8d3 2900 	ldr.w	r2, [r3, #2304]	@ 0x900
 800722e:	f042 6200 	orr.w	r2, r2, #134217728	@ 0x8000000
 8007232:	f8c3 2900 	str.w	r2, [r3, #2304]	@ 0x900
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8007236:	f8d3 2900 	ldr.w	r2, [r3, #2304]	@ 0x900
 800723a:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800723e:	f8c3 2900 	str.w	r2, [r3, #2304]	@ 0x900
 8007242:	e7d3      	b.n	80071ec <USB_DeactivateEndpoint+0x64>
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8007244:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	@ 0xb00
 8007248:	f042 6200 	orr.w	r2, r2, #134217728	@ 0x8000000
 800724c:	f8c3 2b00 	str.w	r2, [r3, #2816]	@ 0xb00
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8007250:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	@ 0xb00
 8007254:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8007258:	f8c3 2b00 	str.w	r2, [r3, #2816]	@ 0xb00
 800725c:	e79f      	b.n	800719e <USB_DeactivateEndpoint+0x16>
 800725e:	bf00      	nop
 8007260:	eff37800 	.word	0xeff37800
 8007264:	ec337800 	.word	0xec337800

08007268 <USB_EPStopXfer>:
{
 8007268:	b410      	push	{r4}
 800726a:	b083      	sub	sp, #12
 800726c:	4602      	mov	r2, r0
  __IO uint32_t count = 0U;
 800726e:	2300      	movs	r3, #0
 8007270:	9301      	str	r3, [sp, #4]
  if (ep->is_in == 1U)
 8007272:	7848      	ldrb	r0, [r1, #1]
 8007274:	2801      	cmp	r0, #1
 8007276:	d00b      	beq.n	8007290 <USB_EPStopXfer+0x28>
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007278:	780b      	ldrb	r3, [r1, #0]
 800727a:	eb02 1343 	add.w	r3, r2, r3, lsl #5
 800727e:	f8d3 0b00 	ldr.w	r0, [r3, #2816]	@ 0xb00
 8007282:	2800      	cmp	r0, #0
 8007284:	db2d      	blt.n	80072e2 <USB_EPStopXfer+0x7a>
  HAL_StatusTypeDef ret = HAL_OK;
 8007286:	2000      	movs	r0, #0
}
 8007288:	b003      	add	sp, #12
 800728a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800728e:	4770      	bx	lr
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007290:	780b      	ldrb	r3, [r1, #0]
 8007292:	eb02 1343 	add.w	r3, r2, r3, lsl #5
 8007296:	f8d3 4900 	ldr.w	r4, [r3, #2304]	@ 0x900
 800729a:	2c00      	cmp	r4, #0
 800729c:	db01      	blt.n	80072a2 <USB_EPStopXfer+0x3a>
  HAL_StatusTypeDef ret = HAL_OK;
 800729e:	2000      	movs	r0, #0
 80072a0:	e7f2      	b.n	8007288 <USB_EPStopXfer+0x20>
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80072a2:	f8d3 4900 	ldr.w	r4, [r3, #2304]	@ 0x900
 80072a6:	f044 6400 	orr.w	r4, r4, #134217728	@ 0x8000000
 80072aa:	f8c3 4900 	str.w	r4, [r3, #2304]	@ 0x900
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 80072ae:	780b      	ldrb	r3, [r1, #0]
 80072b0:	eb02 1343 	add.w	r3, r2, r3, lsl #5
 80072b4:	f8d3 4900 	ldr.w	r4, [r3, #2304]	@ 0x900
 80072b8:	f044 4480 	orr.w	r4, r4, #1073741824	@ 0x40000000
 80072bc:	f8c3 4900 	str.w	r4, [r3, #2304]	@ 0x900
        count++;
 80072c0:	9b01      	ldr	r3, [sp, #4]
 80072c2:	3301      	adds	r3, #1
 80072c4:	9301      	str	r3, [sp, #4]
        if (count > 10000U)
 80072c6:	9c01      	ldr	r4, [sp, #4]
 80072c8:	f242 7310 	movw	r3, #10000	@ 0x2710
 80072cc:	429c      	cmp	r4, r3
 80072ce:	d8db      	bhi.n	8007288 <USB_EPStopXfer+0x20>
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 80072d0:	780b      	ldrb	r3, [r1, #0]
 80072d2:	eb02 1343 	add.w	r3, r2, r3, lsl #5
 80072d6:	f8d3 3900 	ldr.w	r3, [r3, #2304]	@ 0x900
 80072da:	2b00      	cmp	r3, #0
 80072dc:	dbf0      	blt.n	80072c0 <USB_EPStopXfer+0x58>
  HAL_StatusTypeDef ret = HAL_OK;
 80072de:	2000      	movs	r0, #0
 80072e0:	e7d2      	b.n	8007288 <USB_EPStopXfer+0x20>
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80072e2:	f8d3 0b00 	ldr.w	r0, [r3, #2816]	@ 0xb00
 80072e6:	f040 6000 	orr.w	r0, r0, #134217728	@ 0x8000000
 80072ea:	f8c3 0b00 	str.w	r0, [r3, #2816]	@ 0xb00
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80072ee:	780b      	ldrb	r3, [r1, #0]
 80072f0:	eb02 1343 	add.w	r3, r2, r3, lsl #5
 80072f4:	f8d3 0b00 	ldr.w	r0, [r3, #2816]	@ 0xb00
 80072f8:	f040 4080 	orr.w	r0, r0, #1073741824	@ 0x40000000
 80072fc:	f8c3 0b00 	str.w	r0, [r3, #2816]	@ 0xb00
        count++;
 8007300:	9b01      	ldr	r3, [sp, #4]
 8007302:	3301      	adds	r3, #1
 8007304:	9301      	str	r3, [sp, #4]
        if (count > 10000U)
 8007306:	9801      	ldr	r0, [sp, #4]
 8007308:	f242 7310 	movw	r3, #10000	@ 0x2710
 800730c:	4298      	cmp	r0, r3
 800730e:	d808      	bhi.n	8007322 <USB_EPStopXfer+0xba>
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8007310:	780b      	ldrb	r3, [r1, #0]
 8007312:	eb02 1343 	add.w	r3, r2, r3, lsl #5
 8007316:	f8d3 3b00 	ldr.w	r3, [r3, #2816]	@ 0xb00
 800731a:	2b00      	cmp	r3, #0
 800731c:	dbf0      	blt.n	8007300 <USB_EPStopXfer+0x98>
  HAL_StatusTypeDef ret = HAL_OK;
 800731e:	2000      	movs	r0, #0
 8007320:	e7b2      	b.n	8007288 <USB_EPStopXfer+0x20>
          ret = HAL_ERROR;
 8007322:	2001      	movs	r0, #1
 8007324:	e7b0      	b.n	8007288 <USB_EPStopXfer+0x20>

08007326 <USB_WritePacket>:
{
 8007326:	b510      	push	{r4, lr}
 8007328:	f89d 4008 	ldrb.w	r4, [sp, #8]
  if (dma == 0U)
 800732c:	b984      	cbnz	r4, 8007350 <USB_WritePacket+0x2a>
    count32b = ((uint32_t)len + 3U) / 4U;
 800732e:	3303      	adds	r3, #3
 8007330:	ea4f 0e93 	mov.w	lr, r3, lsr #2
    for (i = 0U; i < count32b; i++)
 8007334:	f04f 0c00 	mov.w	ip, #0
 8007338:	e008      	b.n	800734c <USB_WritePacket+0x26>
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800733a:	eb00 3302 	add.w	r3, r0, r2, lsl #12
 800733e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007342:	f851 4b04 	ldr.w	r4, [r1], #4
 8007346:	601c      	str	r4, [r3, #0]
    for (i = 0U; i < count32b; i++)
 8007348:	f10c 0c01 	add.w	ip, ip, #1
 800734c:	45f4      	cmp	ip, lr
 800734e:	d3f4      	bcc.n	800733a <USB_WritePacket+0x14>
}
 8007350:	2000      	movs	r0, #0
 8007352:	bd10      	pop	{r4, pc}

08007354 <USB_EPStartXfer>:
{
 8007354:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007356:	b083      	sub	sp, #12
  uint32_t epnum = (uint32_t)ep->num;
 8007358:	780c      	ldrb	r4, [r1, #0]
  if (ep->is_in == 1U)
 800735a:	784b      	ldrb	r3, [r1, #1]
 800735c:	2b01      	cmp	r3, #1
 800735e:	d02d      	beq.n	80073bc <USB_EPStartXfer+0x68>
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8007360:	eb00 1c44 	add.w	ip, r0, r4, lsl #5
 8007364:	f50c 6330 	add.w	r3, ip, #2816	@ 0xb00
 8007368:	691d      	ldr	r5, [r3, #16]
 800736a:	f36f 0512 	bfc	r5, #0, #19
 800736e:	611d      	str	r5, [r3, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8007370:	691d      	ldr	r5, [r3, #16]
 8007372:	f36f 45dc 	bfc	r5, #19, #10
 8007376:	611d      	str	r5, [r3, #16]
    if (epnum == 0U)
 8007378:	2c00      	cmp	r4, #0
 800737a:	f040 80ce 	bne.w	800751a <USB_EPStartXfer+0x1c6>
      if (ep->xfer_len > 0U)
 800737e:	690c      	ldr	r4, [r1, #16]
 8007380:	b10c      	cbz	r4, 8007386 <USB_EPStartXfer+0x32>
        ep->xfer_len = ep->maxpacket;
 8007382:	688c      	ldr	r4, [r1, #8]
 8007384:	610c      	str	r4, [r1, #16]
      ep->xfer_size = ep->maxpacket;
 8007386:	688c      	ldr	r4, [r1, #8]
 8007388:	620c      	str	r4, [r1, #32]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800738a:	691d      	ldr	r5, [r3, #16]
 800738c:	f3c4 0412 	ubfx	r4, r4, #0, #19
 8007390:	432c      	orrs	r4, r5
 8007392:	611c      	str	r4, [r3, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007394:	691c      	ldr	r4, [r3, #16]
 8007396:	f444 2400 	orr.w	r4, r4, #524288	@ 0x80000
 800739a:	611c      	str	r4, [r3, #16]
    if (dma == 1U)
 800739c:	2a01      	cmp	r2, #1
 800739e:	f000 80df 	beq.w	8007560 <USB_EPStartXfer+0x20c>
    if (ep->type == EP_TYPE_ISOC)
 80073a2:	790b      	ldrb	r3, [r1, #4]
 80073a4:	2b01      	cmp	r3, #1
 80073a6:	f000 80e1 	beq.w	800756c <USB_EPStartXfer+0x218>
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80073aa:	f8dc 3b00 	ldr.w	r3, [ip, #2816]	@ 0xb00
 80073ae:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80073b2:	f8cc 3b00 	str.w	r3, [ip, #2816]	@ 0xb00
}
 80073b6:	2000      	movs	r0, #0
 80073b8:	b003      	add	sp, #12
 80073ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (ep->xfer_len == 0U)
 80073bc:	690b      	ldr	r3, [r1, #16]
 80073be:	bb73      	cbnz	r3, 800741e <USB_EPStartXfer+0xca>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80073c0:	eb00 1344 	add.w	r3, r0, r4, lsl #5
 80073c4:	f8d3 5910 	ldr.w	r5, [r3, #2320]	@ 0x910
 80073c8:	f36f 45dc 	bfc	r5, #19, #10
 80073cc:	f8c3 5910 	str.w	r5, [r3, #2320]	@ 0x910
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80073d0:	f8d3 5910 	ldr.w	r5, [r3, #2320]	@ 0x910
 80073d4:	f445 2500 	orr.w	r5, r5, #524288	@ 0x80000
 80073d8:	f8c3 5910 	str.w	r5, [r3, #2320]	@ 0x910
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80073dc:	f8d3 5910 	ldr.w	r5, [r3, #2320]	@ 0x910
 80073e0:	f36f 0512 	bfc	r5, #0, #19
 80073e4:	f8c3 5910 	str.w	r5, [r3, #2320]	@ 0x910
    if (dma == 1U)
 80073e8:	2a01      	cmp	r2, #1
 80073ea:	d054      	beq.n	8007496 <USB_EPStartXfer+0x142>
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80073ec:	eb00 1444 	add.w	r4, r0, r4, lsl #5
 80073f0:	f8d4 3900 	ldr.w	r3, [r4, #2304]	@ 0x900
 80073f4:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80073f8:	f8c4 3900 	str.w	r3, [r4, #2304]	@ 0x900
      if (ep->type != EP_TYPE_ISOC)
 80073fc:	790b      	ldrb	r3, [r1, #4]
 80073fe:	2b01      	cmp	r3, #1
 8007400:	d072      	beq.n	80074e8 <USB_EPStartXfer+0x194>
        if (ep->xfer_len > 0U)
 8007402:	690b      	ldr	r3, [r1, #16]
 8007404:	2b00      	cmp	r3, #0
 8007406:	d0d6      	beq.n	80073b6 <USB_EPStartXfer+0x62>
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8007408:	f8d0 3834 	ldr.w	r3, [r0, #2100]	@ 0x834
 800740c:	7809      	ldrb	r1, [r1, #0]
 800740e:	f001 010f 	and.w	r1, r1, #15
 8007412:	2201      	movs	r2, #1
 8007414:	408a      	lsls	r2, r1
 8007416:	4313      	orrs	r3, r2
 8007418:	f8c0 3834 	str.w	r3, [r0, #2100]	@ 0x834
 800741c:	e7cb      	b.n	80073b6 <USB_EPStartXfer+0x62>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800741e:	eb00 1344 	add.w	r3, r0, r4, lsl #5
 8007422:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007426:	691d      	ldr	r5, [r3, #16]
 8007428:	f36f 0512 	bfc	r5, #0, #19
 800742c:	611d      	str	r5, [r3, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800742e:	691d      	ldr	r5, [r3, #16]
 8007430:	f36f 45dc 	bfc	r5, #19, #10
 8007434:	611d      	str	r5, [r3, #16]
      if (epnum == 0U)
 8007436:	b984      	cbnz	r4, 800745a <USB_EPStartXfer+0x106>
        if (ep->xfer_len > ep->maxpacket)
 8007438:	690e      	ldr	r6, [r1, #16]
 800743a:	688d      	ldr	r5, [r1, #8]
 800743c:	42ae      	cmp	r6, r5
 800743e:	d900      	bls.n	8007442 <USB_EPStartXfer+0xee>
          ep->xfer_len = ep->maxpacket;
 8007440:	610d      	str	r5, [r1, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007442:	691d      	ldr	r5, [r3, #16]
 8007444:	f445 2500 	orr.w	r5, r5, #524288	@ 0x80000
 8007448:	611d      	str	r5, [r3, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800744a:	691d      	ldr	r5, [r3, #16]
 800744c:	690e      	ldr	r6, [r1, #16]
 800744e:	f3c6 0c12 	ubfx	ip, r6, #0, #19
 8007452:	ea45 050c 	orr.w	r5, r5, ip
 8007456:	611d      	str	r5, [r3, #16]
 8007458:	e7c6      	b.n	80073e8 <USB_EPStartXfer+0x94>
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800745a:	690d      	ldr	r5, [r1, #16]
 800745c:	688e      	ldr	r6, [r1, #8]
 800745e:	4435      	add	r5, r6
 8007460:	3d01      	subs	r5, #1
 8007462:	fbb5 f5f6 	udiv	r5, r5, r6
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (pktcnt << 19));
 8007466:	691e      	ldr	r6, [r3, #16]
 8007468:	fa1f fc85 	uxth.w	ip, r5
 800746c:	4f49      	ldr	r7, [pc, #292]	@ (8007594 <USB_EPStartXfer+0x240>)
 800746e:	ea07 45c5 	and.w	r5, r7, r5, lsl #19
 8007472:	4335      	orrs	r5, r6
 8007474:	611d      	str	r5, [r3, #16]
        if (ep->type == EP_TYPE_ISOC)
 8007476:	790d      	ldrb	r5, [r1, #4]
 8007478:	2d01      	cmp	r5, #1
 800747a:	d1e6      	bne.n	800744a <USB_EPStartXfer+0xf6>
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800747c:	691d      	ldr	r5, [r3, #16]
 800747e:	f025 45c0 	bic.w	r5, r5, #1610612736	@ 0x60000000
 8007482:	611d      	str	r5, [r3, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (pktcnt << 29));
 8007484:	691d      	ldr	r5, [r3, #16]
 8007486:	ea4f 7c4c 	mov.w	ip, ip, lsl #29
 800748a:	f00c 4cc0 	and.w	ip, ip, #1610612736	@ 0x60000000
 800748e:	ea45 050c 	orr.w	r5, r5, ip
 8007492:	611d      	str	r5, [r3, #16]
 8007494:	e7d9      	b.n	800744a <USB_EPStartXfer+0xf6>
      if ((uint32_t)ep->dma_addr != 0U)
 8007496:	69cb      	ldr	r3, [r1, #28]
 8007498:	b11b      	cbz	r3, 80074a2 <USB_EPStartXfer+0x14e>
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800749a:	eb00 1244 	add.w	r2, r0, r4, lsl #5
 800749e:	f8c2 3914 	str.w	r3, [r2, #2324]	@ 0x914
      if (ep->type == EP_TYPE_ISOC)
 80074a2:	790b      	ldrb	r3, [r1, #4]
 80074a4:	2b01      	cmp	r3, #1
 80074a6:	d008      	beq.n	80074ba <USB_EPStartXfer+0x166>
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80074a8:	eb00 1444 	add.w	r4, r0, r4, lsl #5
 80074ac:	f8d4 3900 	ldr.w	r3, [r4, #2304]	@ 0x900
 80074b0:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80074b4:	f8c4 3900 	str.w	r3, [r4, #2304]	@ 0x900
 80074b8:	e77d      	b.n	80073b6 <USB_EPStartXfer+0x62>
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80074ba:	f8d0 3808 	ldr.w	r3, [r0, #2056]	@ 0x808
 80074be:	f413 7f80 	tst.w	r3, #256	@ 0x100
 80074c2:	d108      	bne.n	80074d6 <USB_EPStartXfer+0x182>
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80074c4:	eb00 1244 	add.w	r2, r0, r4, lsl #5
 80074c8:	f8d2 3900 	ldr.w	r3, [r2, #2304]	@ 0x900
 80074cc:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80074d0:	f8c2 3900 	str.w	r3, [r2, #2304]	@ 0x900
 80074d4:	e7e8      	b.n	80074a8 <USB_EPStartXfer+0x154>
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80074d6:	eb00 1244 	add.w	r2, r0, r4, lsl #5
 80074da:	f8d2 3900 	ldr.w	r3, [r2, #2304]	@ 0x900
 80074de:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80074e2:	f8c2 3900 	str.w	r3, [r2, #2304]	@ 0x900
 80074e6:	e7df      	b.n	80074a8 <USB_EPStartXfer+0x154>
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80074e8:	f8d0 3808 	ldr.w	r3, [r0, #2056]	@ 0x808
 80074ec:	f413 7f80 	tst.w	r3, #256	@ 0x100
 80074f0:	d10c      	bne.n	800750c <USB_EPStartXfer+0x1b8>
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80074f2:	f8d4 3900 	ldr.w	r3, [r4, #2304]	@ 0x900
 80074f6:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80074fa:	f8c4 3900 	str.w	r3, [r4, #2304]	@ 0x900
        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80074fe:	9200      	str	r2, [sp, #0]
 8007500:	8a0b      	ldrh	r3, [r1, #16]
 8007502:	780a      	ldrb	r2, [r1, #0]
 8007504:	68c9      	ldr	r1, [r1, #12]
 8007506:	f7ff ff0e 	bl	8007326 <USB_WritePacket>
 800750a:	e754      	b.n	80073b6 <USB_EPStartXfer+0x62>
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800750c:	f8d4 3900 	ldr.w	r3, [r4, #2304]	@ 0x900
 8007510:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007514:	f8c4 3900 	str.w	r3, [r4, #2304]	@ 0x900
 8007518:	e7f1      	b.n	80074fe <USB_EPStartXfer+0x1aa>
      if (ep->xfer_len == 0U)
 800751a:	690c      	ldr	r4, [r1, #16]
 800751c:	b954      	cbnz	r4, 8007534 <USB_EPStartXfer+0x1e0>
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800751e:	691c      	ldr	r4, [r3, #16]
 8007520:	688d      	ldr	r5, [r1, #8]
 8007522:	f3c5 0512 	ubfx	r5, r5, #0, #19
 8007526:	432c      	orrs	r4, r5
 8007528:	611c      	str	r4, [r3, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800752a:	691c      	ldr	r4, [r3, #16]
 800752c:	f444 2400 	orr.w	r4, r4, #524288	@ 0x80000
 8007530:	611c      	str	r4, [r3, #16]
 8007532:	e733      	b.n	800739c <USB_EPStartXfer+0x48>
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8007534:	688d      	ldr	r5, [r1, #8]
 8007536:	442c      	add	r4, r5
 8007538:	3c01      	subs	r4, #1
 800753a:	fbb4 f4f5 	udiv	r4, r4, r5
        ep->xfer_size = ep->maxpacket * pktcnt;
 800753e:	b2a4      	uxth	r4, r4
 8007540:	fb04 f505 	mul.w	r5, r4, r5
 8007544:	620d      	str	r5, [r1, #32]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8007546:	691d      	ldr	r5, [r3, #16]
 8007548:	4e12      	ldr	r6, [pc, #72]	@ (8007594 <USB_EPStartXfer+0x240>)
 800754a:	ea06 44c4 	and.w	r4, r6, r4, lsl #19
 800754e:	432c      	orrs	r4, r5
 8007550:	611c      	str	r4, [r3, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8007552:	691c      	ldr	r4, [r3, #16]
 8007554:	6a0d      	ldr	r5, [r1, #32]
 8007556:	f3c5 0512 	ubfx	r5, r5, #0, #19
 800755a:	432c      	orrs	r4, r5
 800755c:	611c      	str	r4, [r3, #16]
 800755e:	e71d      	b.n	800739c <USB_EPStartXfer+0x48>
      if ((uint32_t)ep->xfer_buff != 0U)
 8007560:	68ca      	ldr	r2, [r1, #12]
 8007562:	2a00      	cmp	r2, #0
 8007564:	f43f af1d 	beq.w	80073a2 <USB_EPStartXfer+0x4e>
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8007568:	615a      	str	r2, [r3, #20]
 800756a:	e71a      	b.n	80073a2 <USB_EPStartXfer+0x4e>
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800756c:	f8d0 3808 	ldr.w	r3, [r0, #2056]	@ 0x808
 8007570:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8007574:	d106      	bne.n	8007584 <USB_EPStartXfer+0x230>
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8007576:	f8dc 3b00 	ldr.w	r3, [ip, #2816]	@ 0xb00
 800757a:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800757e:	f8cc 3b00 	str.w	r3, [ip, #2816]	@ 0xb00
 8007582:	e712      	b.n	80073aa <USB_EPStartXfer+0x56>
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8007584:	f8dc 3b00 	ldr.w	r3, [ip, #2816]	@ 0xb00
 8007588:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800758c:	f8cc 3b00 	str.w	r3, [ip, #2816]	@ 0xb00
 8007590:	e70b      	b.n	80073aa <USB_EPStartXfer+0x56>
 8007592:	bf00      	nop
 8007594:	1ff80000 	.word	0x1ff80000

08007598 <USB_ReadPacket>:
{
 8007598:	b510      	push	{r4, lr}
 800759a:	4684      	mov	ip, r0
 800759c:	4608      	mov	r0, r1
  uint32_t count32b = (uint32_t)len >> 2U;
 800759e:	ea4f 0e92 	mov.w	lr, r2, lsr #2
  uint16_t remaining_bytes = len % 4U;
 80075a2:	f002 0203 	and.w	r2, r2, #3
  for (i = 0U; i < count32b; i++)
 80075a6:	2300      	movs	r3, #0
 80075a8:	e005      	b.n	80075b6 <USB_ReadPacket+0x1e>
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80075aa:	f50c 5180 	add.w	r1, ip, #4096	@ 0x1000
 80075ae:	6809      	ldr	r1, [r1, #0]
 80075b0:	f840 1b04 	str.w	r1, [r0], #4
  for (i = 0U; i < count32b; i++)
 80075b4:	3301      	adds	r3, #1
 80075b6:	4573      	cmp	r3, lr
 80075b8:	d3f7      	bcc.n	80075aa <USB_ReadPacket+0x12>
  if (remaining_bytes != 0U)
 80075ba:	b17a      	cbz	r2, 80075dc <USB_ReadPacket+0x44>
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80075bc:	f50c 5c80 	add.w	ip, ip, #4096	@ 0x1000
 80075c0:	f8dc 4000 	ldr.w	r4, [ip]
    i = 0U;
 80075c4:	2100      	movs	r1, #0
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80075c6:	b2cb      	uxtb	r3, r1
 80075c8:	00db      	lsls	r3, r3, #3
 80075ca:	fa24 f303 	lsr.w	r3, r4, r3
 80075ce:	f800 3b01 	strb.w	r3, [r0], #1
      i++;
 80075d2:	3101      	adds	r1, #1
      remaining_bytes--;
 80075d4:	3a01      	subs	r2, #1
 80075d6:	b292      	uxth	r2, r2
    } while (remaining_bytes != 0U);
 80075d8:	2a00      	cmp	r2, #0
 80075da:	d1f4      	bne.n	80075c6 <USB_ReadPacket+0x2e>
}
 80075dc:	bd10      	pop	{r4, pc}

080075de <USB_EPSetStall>:
  uint32_t epnum = (uint32_t)ep->num;
 80075de:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in == 1U)
 80075e0:	784a      	ldrb	r2, [r1, #1]
 80075e2:	2a01      	cmp	r2, #1
 80075e4:	d014      	beq.n	8007610 <USB_EPSetStall+0x32>
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80075e6:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 80075ea:	f8d0 2b00 	ldr.w	r2, [r0, #2816]	@ 0xb00
 80075ee:	2a00      	cmp	r2, #0
 80075f0:	db06      	blt.n	8007600 <USB_EPSetStall+0x22>
 80075f2:	b12b      	cbz	r3, 8007600 <USB_EPSetStall+0x22>
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80075f4:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	@ 0xb00
 80075f8:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80075fc:	f8c0 3b00 	str.w	r3, [r0, #2816]	@ 0xb00
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8007600:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	@ 0xb00
 8007604:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8007608:	f8c0 3b00 	str.w	r3, [r0, #2816]	@ 0xb00
}
 800760c:	2000      	movs	r0, #0
 800760e:	4770      	bx	lr
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007610:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 8007614:	f8d0 2900 	ldr.w	r2, [r0, #2304]	@ 0x900
 8007618:	2a00      	cmp	r2, #0
 800761a:	db06      	blt.n	800762a <USB_EPSetStall+0x4c>
 800761c:	b12b      	cbz	r3, 800762a <USB_EPSetStall+0x4c>
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800761e:	f8d0 3900 	ldr.w	r3, [r0, #2304]	@ 0x900
 8007622:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8007626:	f8c0 3900 	str.w	r3, [r0, #2304]	@ 0x900
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800762a:	f8d0 3900 	ldr.w	r3, [r0, #2304]	@ 0x900
 800762e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8007632:	f8c0 3900 	str.w	r3, [r0, #2304]	@ 0x900
 8007636:	e7e9      	b.n	800760c <USB_EPSetStall+0x2e>

08007638 <USB_EPClearStall>:
  uint32_t epnum = (uint32_t)ep->num;
 8007638:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in == 1U)
 800763a:	784a      	ldrb	r2, [r1, #1]
 800763c:	2a01      	cmp	r2, #1
 800763e:	d00e      	beq.n	800765e <USB_EPClearStall+0x26>
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8007640:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 8007644:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	@ 0xb00
 8007648:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800764c:	f8c0 3b00 	str.w	r3, [r0, #2816]	@ 0xb00
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007650:	790b      	ldrb	r3, [r1, #4]
 8007652:	3b02      	subs	r3, #2
 8007654:	b2db      	uxtb	r3, r3
 8007656:	2b01      	cmp	r3, #1
 8007658:	d915      	bls.n	8007686 <USB_EPClearStall+0x4e>
}
 800765a:	2000      	movs	r0, #0
 800765c:	4770      	bx	lr
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800765e:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 8007662:	f8d0 3900 	ldr.w	r3, [r0, #2304]	@ 0x900
 8007666:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800766a:	f8c0 3900 	str.w	r3, [r0, #2304]	@ 0x900
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800766e:	790b      	ldrb	r3, [r1, #4]
 8007670:	3b02      	subs	r3, #2
 8007672:	b2db      	uxtb	r3, r3
 8007674:	2b01      	cmp	r3, #1
 8007676:	d8f0      	bhi.n	800765a <USB_EPClearStall+0x22>
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007678:	f8d0 3900 	ldr.w	r3, [r0, #2304]	@ 0x900
 800767c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007680:	f8c0 3900 	str.w	r3, [r0, #2304]	@ 0x900
 8007684:	e7e9      	b.n	800765a <USB_EPClearStall+0x22>
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007686:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	@ 0xb00
 800768a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800768e:	f8c0 3b00 	str.w	r3, [r0, #2816]	@ 0xb00
 8007692:	e7e2      	b.n	800765a <USB_EPClearStall+0x22>

08007694 <USB_SetDevAddress>:
  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8007694:	f8d0 3800 	ldr.w	r3, [r0, #2048]	@ 0x800
 8007698:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800769c:	f8c0 3800 	str.w	r3, [r0, #2048]	@ 0x800
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80076a0:	f8d0 3800 	ldr.w	r3, [r0, #2048]	@ 0x800
 80076a4:	0109      	lsls	r1, r1, #4
 80076a6:	f401 61fe 	and.w	r1, r1, #2032	@ 0x7f0
 80076aa:	430b      	orrs	r3, r1
 80076ac:	f8c0 3800 	str.w	r3, [r0, #2048]	@ 0x800
}
 80076b0:	2000      	movs	r0, #0
 80076b2:	4770      	bx	lr

080076b4 <USB_DevConnect>:
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80076b4:	f8d0 3e00 	ldr.w	r3, [r0, #3584]	@ 0xe00
 80076b8:	f023 0303 	bic.w	r3, r3, #3
 80076bc:	f8c0 3e00 	str.w	r3, [r0, #3584]	@ 0xe00
  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80076c0:	f8d0 3804 	ldr.w	r3, [r0, #2052]	@ 0x804
 80076c4:	f023 0302 	bic.w	r3, r3, #2
 80076c8:	f8c0 3804 	str.w	r3, [r0, #2052]	@ 0x804
}
 80076cc:	2000      	movs	r0, #0
 80076ce:	4770      	bx	lr

080076d0 <USB_DevDisconnect>:
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80076d0:	f8d0 3e00 	ldr.w	r3, [r0, #3584]	@ 0xe00
 80076d4:	f023 0303 	bic.w	r3, r3, #3
 80076d8:	f8c0 3e00 	str.w	r3, [r0, #3584]	@ 0xe00
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80076dc:	f8d0 3804 	ldr.w	r3, [r0, #2052]	@ 0x804
 80076e0:	f043 0302 	orr.w	r3, r3, #2
 80076e4:	f8c0 3804 	str.w	r3, [r0, #2052]	@ 0x804
}
 80076e8:	2000      	movs	r0, #0
 80076ea:	4770      	bx	lr

080076ec <USB_ReadInterrupts>:
  tmpreg = USBx->GINTSTS;
 80076ec:	6942      	ldr	r2, [r0, #20]
  tmpreg &= USBx->GINTMSK;
 80076ee:	6980      	ldr	r0, [r0, #24]
}
 80076f0:	4010      	ands	r0, r2
 80076f2:	4770      	bx	lr

080076f4 <USB_ReadDevAllOutEpInterrupt>:
  tmpreg  = USBx_DEVICE->DAINT;
 80076f4:	f8d0 3818 	ldr.w	r3, [r0, #2072]	@ 0x818
 80076f8:	f500 6000 	add.w	r0, r0, #2048	@ 0x800
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80076fc:	69c0      	ldr	r0, [r0, #28]
 80076fe:	4018      	ands	r0, r3
}
 8007700:	0c00      	lsrs	r0, r0, #16
 8007702:	4770      	bx	lr

08007704 <USB_ReadDevAllInEpInterrupt>:
  tmpreg  = USBx_DEVICE->DAINT;
 8007704:	f8d0 3818 	ldr.w	r3, [r0, #2072]	@ 0x818
 8007708:	f500 6000 	add.w	r0, r0, #2048	@ 0x800
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800770c:	69c0      	ldr	r0, [r0, #28]
 800770e:	4018      	ands	r0, r3
}
 8007710:	b280      	uxth	r0, r0
 8007712:	4770      	bx	lr

08007714 <USB_ReadDevOutEPInterrupt>:
  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8007714:	eb00 1141 	add.w	r1, r0, r1, lsl #5
 8007718:	f8d1 2b08 	ldr.w	r2, [r1, #2824]	@ 0xb08
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800771c:	f500 6000 	add.w	r0, r0, #2048	@ 0x800
 8007720:	6940      	ldr	r0, [r0, #20]
}
 8007722:	4010      	ands	r0, r2
 8007724:	4770      	bx	lr

08007726 <USB_ReadDevInEPInterrupt>:
  msk = USBx_DEVICE->DIEPMSK;
 8007726:	f8d0 2810 	ldr.w	r2, [r0, #2064]	@ 0x810
  emp = USBx_DEVICE->DIEPEMPMSK;
 800772a:	f8d0 3834 	ldr.w	r3, [r0, #2100]	@ 0x834
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800772e:	f001 0c0f 	and.w	ip, r1, #15
 8007732:	fa23 f30c 	lsr.w	r3, r3, ip
 8007736:	01db      	lsls	r3, r3, #7
 8007738:	b2db      	uxtb	r3, r3
 800773a:	4313      	orrs	r3, r2
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800773c:	eb00 1041 	add.w	r0, r0, r1, lsl #5
 8007740:	f500 6010 	add.w	r0, r0, #2304	@ 0x900
 8007744:	6880      	ldr	r0, [r0, #8]
}
 8007746:	4018      	ands	r0, r3
 8007748:	4770      	bx	lr

0800774a <USB_GetMode>:
  return ((USBx->GINTSTS) & 0x1U);
 800774a:	6940      	ldr	r0, [r0, #20]
}
 800774c:	f000 0001 	and.w	r0, r0, #1
 8007750:	4770      	bx	lr

08007752 <USB_SetCurrentMode>:
{
 8007752:	b538      	push	{r3, r4, r5, lr}
 8007754:	4605      	mov	r5, r0
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007756:	68c3      	ldr	r3, [r0, #12]
 8007758:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 800775c:	60c3      	str	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 800775e:	2901      	cmp	r1, #1
 8007760:	d013      	beq.n	800778a <USB_SetCurrentMode+0x38>
  else if (mode == USB_DEVICE_MODE)
 8007762:	bb19      	cbnz	r1, 80077ac <USB_SetCurrentMode+0x5a>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007764:	68c3      	ldr	r3, [r0, #12]
 8007766:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800776a:	60c3      	str	r3, [r0, #12]
  uint32_t ms = 0U;
 800776c:	2400      	movs	r4, #0
      HAL_Delay(10U);
 800776e:	200a      	movs	r0, #10
 8007770:	f7fc faec 	bl	8003d4c <HAL_Delay>
      ms += 10U;
 8007774:	340a      	adds	r4, #10
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8007776:	4628      	mov	r0, r5
 8007778:	f7ff ffe7 	bl	800774a <USB_GetMode>
 800777c:	b108      	cbz	r0, 8007782 <USB_SetCurrentMode+0x30>
 800777e:	2cc7      	cmp	r4, #199	@ 0xc7
 8007780:	d9f5      	bls.n	800776e <USB_SetCurrentMode+0x1c>
  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8007782:	2cc8      	cmp	r4, #200	@ 0xc8
 8007784:	d014      	beq.n	80077b0 <USB_SetCurrentMode+0x5e>
  return HAL_OK;
 8007786:	2000      	movs	r0, #0
}
 8007788:	bd38      	pop	{r3, r4, r5, pc}
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800778a:	68c3      	ldr	r3, [r0, #12]
 800778c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8007790:	60c3      	str	r3, [r0, #12]
  uint32_t ms = 0U;
 8007792:	2400      	movs	r4, #0
      HAL_Delay(10U);
 8007794:	200a      	movs	r0, #10
 8007796:	f7fc fad9 	bl	8003d4c <HAL_Delay>
      ms += 10U;
 800779a:	340a      	adds	r4, #10
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800779c:	4628      	mov	r0, r5
 800779e:	f7ff ffd4 	bl	800774a <USB_GetMode>
 80077a2:	2801      	cmp	r0, #1
 80077a4:	d0ed      	beq.n	8007782 <USB_SetCurrentMode+0x30>
 80077a6:	2cc7      	cmp	r4, #199	@ 0xc7
 80077a8:	d9f4      	bls.n	8007794 <USB_SetCurrentMode+0x42>
 80077aa:	e7ea      	b.n	8007782 <USB_SetCurrentMode+0x30>
    return HAL_ERROR;
 80077ac:	2001      	movs	r0, #1
 80077ae:	e7eb      	b.n	8007788 <USB_SetCurrentMode+0x36>
    return HAL_ERROR;
 80077b0:	2001      	movs	r0, #1
 80077b2:	e7e9      	b.n	8007788 <USB_SetCurrentMode+0x36>

080077b4 <USB_ActivateSetup>:
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80077b4:	f8d0 3900 	ldr.w	r3, [r0, #2304]	@ 0x900
 80077b8:	f36f 030a 	bfc	r3, #0, #11
 80077bc:	f8c0 3900 	str.w	r3, [r0, #2304]	@ 0x900
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80077c0:	f8d0 3804 	ldr.w	r3, [r0, #2052]	@ 0x804
 80077c4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80077c8:	f8c0 3804 	str.w	r3, [r0, #2052]	@ 0x804
}
 80077cc:	2000      	movs	r0, #0
 80077ce:	4770      	bx	lr

080077d0 <USB_EP0_OutStart>:
{
 80077d0:	b410      	push	{r4}
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80077d2:	6c04      	ldr	r4, [r0, #64]	@ 0x40
  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80077d4:	4b15      	ldr	r3, [pc, #84]	@ (800782c <USB_EP0_OutStart+0x5c>)
 80077d6:	429c      	cmp	r4, r3
 80077d8:	d903      	bls.n	80077e2 <USB_EP0_OutStart+0x12>
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80077da:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	@ 0xb00
 80077de:	2b00      	cmp	r3, #0
 80077e0:	db16      	blt.n	8007810 <USB_EP0_OutStart+0x40>
  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80077e2:	2400      	movs	r4, #0
 80077e4:	f8c0 4b10 	str.w	r4, [r0, #2832]	@ 0xb10
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80077e8:	f8d0 4b10 	ldr.w	r4, [r0, #2832]	@ 0xb10
 80077ec:	f444 2400 	orr.w	r4, r4, #524288	@ 0x80000
 80077f0:	f8c0 4b10 	str.w	r4, [r0, #2832]	@ 0xb10
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80077f4:	f8d0 4b10 	ldr.w	r4, [r0, #2832]	@ 0xb10
 80077f8:	f044 0418 	orr.w	r4, r4, #24
 80077fc:	f8c0 4b10 	str.w	r4, [r0, #2832]	@ 0xb10
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8007800:	f8d0 4b10 	ldr.w	r4, [r0, #2832]	@ 0xb10
 8007804:	f044 44c0 	orr.w	r4, r4, #1610612736	@ 0x60000000
 8007808:	f8c0 4b10 	str.w	r4, [r0, #2832]	@ 0xb10
  if (dma == 1U)
 800780c:	2901      	cmp	r1, #1
 800780e:	d003      	beq.n	8007818 <USB_EP0_OutStart+0x48>
}
 8007810:	2000      	movs	r0, #0
 8007812:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007816:	4770      	bx	lr
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8007818:	f8c0 2b14 	str.w	r2, [r0, #2836]	@ 0xb14
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800781c:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	@ 0xb00
 8007820:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 8007824:	f8c0 3b00 	str.w	r3, [r0, #2816]	@ 0xb00
 8007828:	e7f2      	b.n	8007810 <USB_EP0_OutStart+0x40>
 800782a:	bf00      	nop
 800782c:	4f54300a 	.word	0x4f54300a

08007830 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8007830:	b510      	push	{r4, lr}
 8007832:	4603      	mov	r3, r0
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8007834:	4a0c      	ldr	r2, [pc, #48]	@ (8007868 <_sbrk+0x38>)
 8007836:	490d      	ldr	r1, [pc, #52]	@ (800786c <_sbrk+0x3c>)
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8007838:	480d      	ldr	r0, [pc, #52]	@ (8007870 <_sbrk+0x40>)
 800783a:	6800      	ldr	r0, [r0, #0]
 800783c:	b140      	cbz	r0, 8007850 <_sbrk+0x20>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800783e:	480c      	ldr	r0, [pc, #48]	@ (8007870 <_sbrk+0x40>)
 8007840:	6800      	ldr	r0, [r0, #0]
 8007842:	4403      	add	r3, r0
 8007844:	1a52      	subs	r2, r2, r1
 8007846:	4293      	cmp	r3, r2
 8007848:	d806      	bhi.n	8007858 <_sbrk+0x28>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 800784a:	4a09      	ldr	r2, [pc, #36]	@ (8007870 <_sbrk+0x40>)
 800784c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
}
 800784e:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 8007850:	4807      	ldr	r0, [pc, #28]	@ (8007870 <_sbrk+0x40>)
 8007852:	4c08      	ldr	r4, [pc, #32]	@ (8007874 <_sbrk+0x44>)
 8007854:	6004      	str	r4, [r0, #0]
 8007856:	e7f2      	b.n	800783e <_sbrk+0xe>
    errno = ENOMEM;
 8007858:	f003 f908 	bl	800aa6c <__errno>
 800785c:	230c      	movs	r3, #12
 800785e:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8007860:	f04f 30ff 	mov.w	r0, #4294967295
 8007864:	e7f3      	b.n	800784e <_sbrk+0x1e>
 8007866:	bf00      	nop
 8007868:	20010000 	.word	0x20010000
 800786c:	00000400 	.word	0x00000400
 8007870:	20006878 	.word	0x20006878
 8007874:	200088b0 	.word	0x200088b0

08007878 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8007878:	4a03      	ldr	r2, [pc, #12]	@ (8007888 <SystemInit+0x10>)
 800787a:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 800787e:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8007882:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8007886:	4770      	bx	lr
 8007888:	e000ed00 	.word	0xe000ed00

0800788c <table_2d_get_value>:
#include "tables.h"
#include "error_handling.h"
#include "utils.h"

float table_2d_get_value(table_2d_t *table, float x, float y)
{
 800788c:	b500      	push	{lr}
    uint8_t num_x_bins = sizeof(table->x_bins) / sizeof(table->x_bins[0]);
    uint8_t num_y_bins = sizeof(table->y_bins) / sizeof(table->y_bins[0]);
    x = CLAMP(x, table->x_bins[0], table->x_bins[num_x_bins - 1]);
 800788e:	f500 6380 	add.w	r3, r0, #1024	@ 0x400
 8007892:	edd3 6a00 	vldr	s13, [r3]
 8007896:	eef4 6ac0 	vcmpe.f32	s13, s0
 800789a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800789e:	dc0a      	bgt.n	80078b6 <table_2d_get_value+0x2a>
 80078a0:	f200 433c 	addw	r3, r0, #1084	@ 0x43c
 80078a4:	edd3 6a00 	vldr	s13, [r3]
 80078a8:	eef4 6ac0 	vcmpe.f32	s13, s0
 80078ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80078b0:	d401      	bmi.n	80078b6 <table_2d_get_value+0x2a>
 80078b2:	eef0 6a40 	vmov.f32	s13, s0
    y = CLAMP(y, table->y_bins[0], table->y_bins[num_y_bins - 1]);
 80078b6:	f500 6388 	add.w	r3, r0, #1088	@ 0x440
 80078ba:	ed93 7a00 	vldr	s14, [r3]
 80078be:	eeb4 7ae0 	vcmpe.f32	s14, s1
 80078c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80078c6:	dc0a      	bgt.n	80078de <table_2d_get_value+0x52>
 80078c8:	f200 437c 	addw	r3, r0, #1148	@ 0x47c
 80078cc:	ed93 7a00 	vldr	s14, [r3]
 80078d0:	eeb4 7ae0 	vcmpe.f32	s14, s1
 80078d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80078d8:	d401      	bmi.n	80078de <table_2d_get_value+0x52>
 80078da:	eeb0 7a60 	vmov.f32	s14, s1

    // Find x_bin (lower index)
    uint8_t x_bin = 0;
 80078de:	2300      	movs	r3, #0
    while (x_bin < num_x_bins - 1 && x >= table->x_bins[x_bin + 1])
 80078e0:	e001      	b.n	80078e6 <table_2d_get_value+0x5a>
    {
        x_bin++;
 80078e2:	3301      	adds	r3, #1
 80078e4:	b2db      	uxtb	r3, r3
    while (x_bin < num_x_bins - 1 && x >= table->x_bins[x_bin + 1])
 80078e6:	2b0e      	cmp	r3, #14
 80078e8:	d80a      	bhi.n	8007900 <table_2d_get_value+0x74>
 80078ea:	f203 1201 	addw	r2, r3, #257	@ 0x101
 80078ee:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 80078f2:	edd2 7a00 	vldr	s15, [r2]
 80078f6:	eef4 7ae6 	vcmpe.f32	s15, s13
 80078fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80078fe:	d9f0      	bls.n	80078e2 <table_2d_get_value+0x56>
    }
    uint8_t x_bin_next = (x_bin < num_x_bins - 1) ? x_bin + 1 : x_bin;
 8007900:	2b0e      	cmp	r3, #14
 8007902:	d814      	bhi.n	800792e <table_2d_get_value+0xa2>
 8007904:	f103 0c01 	add.w	ip, r3, #1
 8007908:	fa5f fc8c 	uxtb.w	ip, ip

    // Find y_bin (lower index)
    uint8_t y_bin = 0;
 800790c:	2200      	movs	r2, #0
    while (y_bin < num_y_bins - 1 && y >= table->y_bins[y_bin + 1])
 800790e:	2a0e      	cmp	r2, #14
 8007910:	d80f      	bhi.n	8007932 <table_2d_get_value+0xa6>
 8007912:	f202 1111 	addw	r1, r2, #273	@ 0x111
 8007916:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800791a:	edd1 7a00 	vldr	s15, [r1]
 800791e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007922:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007926:	d804      	bhi.n	8007932 <table_2d_get_value+0xa6>
    {
        y_bin++;
 8007928:	3201      	adds	r2, #1
 800792a:	b2d2      	uxtb	r2, r2
 800792c:	e7ef      	b.n	800790e <table_2d_get_value+0x82>
    uint8_t x_bin_next = (x_bin < num_x_bins - 1) ? x_bin + 1 : x_bin;
 800792e:	469c      	mov	ip, r3
 8007930:	e7ec      	b.n	800790c <table_2d_get_value+0x80>
    }
    uint8_t y_bin_next = (y_bin < num_y_bins - 1) ? y_bin + 1 : y_bin;
 8007932:	2a0e      	cmp	r2, #14
 8007934:	d802      	bhi.n	800793c <table_2d_get_value+0xb0>
 8007936:	1c51      	adds	r1, r2, #1
 8007938:	b2c9      	uxtb	r1, r1
 800793a:	e000      	b.n	800793e <table_2d_get_value+0xb2>
 800793c:	4611      	mov	r1, r2

    // Get bin edges
    float x0 = table->x_bins[x_bin];
 800793e:	f503 7e80 	add.w	lr, r3, #256	@ 0x100
 8007942:	eb00 0e8e 	add.w	lr, r0, lr, lsl #2
 8007946:	ed9e 4a00 	vldr	s8, [lr]
    float x1 = table->x_bins[x_bin_next];
 800794a:	f50c 7e80 	add.w	lr, ip, #256	@ 0x100
 800794e:	eb00 0e8e 	add.w	lr, r0, lr, lsl #2
 8007952:	ed9e 5a00 	vldr	s10, [lr]
    float y0 = table->y_bins[y_bin];
 8007956:	f502 7e88 	add.w	lr, r2, #272	@ 0x110
 800795a:	eb00 0e8e 	add.w	lr, r0, lr, lsl #2
 800795e:	edde 4a00 	vldr	s9, [lr]
    float y1 = table->y_bins[y_bin_next];
 8007962:	f501 7e88 	add.w	lr, r1, #272	@ 0x110
 8007966:	eb00 0e8e 	add.w	lr, r0, lr, lsl #2
 800796a:	ed9e 6a00 	vldr	s12, [lr]

    // Get table values at corners
    float q11 = table->data[x_bin][y_bin];
 800796e:	eb02 1e03 	add.w	lr, r2, r3, lsl #4
 8007972:	eb00 0e8e 	add.w	lr, r0, lr, lsl #2
 8007976:	edde 7a00 	vldr	s15, [lr]
    float q21 = table->data[x_bin_next][y_bin];
 800797a:	eb02 120c 	add.w	r2, r2, ip, lsl #4
 800797e:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8007982:	edd2 5a00 	vldr	s11, [r2]
    float q12 = table->data[x_bin][y_bin_next];
 8007986:	eb01 1303 	add.w	r3, r1, r3, lsl #4
 800798a:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 800798e:	ed93 3a00 	vldr	s6, [r3]
    float q22 = table->data[x_bin_next][y_bin_next];
 8007992:	eb01 110c 	add.w	r1, r1, ip, lsl #4
 8007996:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 800799a:	edd0 3a00 	vldr	s7, [r0]

    // Handle edge cases (avoid division by zero)
    float x_frac = (x1 != x0) ? (x - x0) / (x1 - x0) : 0.0f;
 800799e:	eeb4 4a45 	vcmp.f32	s8, s10
 80079a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80079a6:	d006      	beq.n	80079b6 <table_2d_get_value+0x12a>
 80079a8:	ee76 6ac4 	vsub.f32	s13, s13, s8
 80079ac:	ee35 5a44 	vsub.f32	s10, s10, s8
 80079b0:	ee86 0a85 	vdiv.f32	s0, s13, s10
 80079b4:	e001      	b.n	80079ba <table_2d_get_value+0x12e>
 80079b6:	ed9f 0a17 	vldr	s0, [pc, #92]	@ 8007a14 <table_2d_get_value+0x188>
    float y_frac = (y1 != y0) ? (y - y0) / (y1 - y0) : 0.0f;
 80079ba:	eef4 4a46 	vcmp.f32	s9, s12
 80079be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80079c2:	d006      	beq.n	80079d2 <table_2d_get_value+0x146>
 80079c4:	ee37 7a64 	vsub.f32	s14, s14, s9
 80079c8:	ee76 6a64 	vsub.f32	s13, s12, s9
 80079cc:	ee87 6a26 	vdiv.f32	s12, s14, s13
 80079d0:	e001      	b.n	80079d6 <table_2d_get_value+0x14a>
 80079d2:	ed9f 6a10 	vldr	s12, [pc, #64]	@ 8007a14 <table_2d_get_value+0x188>

    // Bilinear interpolation
    float interp =
        q11 * (1 - x_frac) * (1 - y_frac) +
 80079d6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80079da:	ee77 6a40 	vsub.f32	s13, s14, s0
 80079de:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80079e2:	ee37 7a46 	vsub.f32	s14, s14, s12
 80079e6:	ee67 7a87 	vmul.f32	s15, s15, s14
        q21 * x_frac * (1 - y_frac) +
 80079ea:	ee60 5a25 	vmul.f32	s11, s0, s11
 80079ee:	ee27 7a25 	vmul.f32	s14, s14, s11
        q11 * (1 - x_frac) * (1 - y_frac) +
 80079f2:	ee77 7a87 	vadd.f32	s15, s15, s14
        q12 * (1 - x_frac) * y_frac +
 80079f6:	ee66 6a83 	vmul.f32	s13, s13, s6
 80079fa:	ee66 6a86 	vmul.f32	s13, s13, s12
        q21 * x_frac * (1 - y_frac) +
 80079fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
        q22 * x_frac * y_frac;
 8007a02:	ee20 0a23 	vmul.f32	s0, s0, s7
 8007a06:	ee20 0a06 	vmul.f32	s0, s0, s12

    return interp;
}
 8007a0a:	ee37 0a80 	vadd.f32	s0, s15, s0
 8007a0e:	f85d fb04 	ldr.w	pc, [sp], #4
 8007a12:	bf00      	nop
 8007a14:	00000000 	.word	0x00000000

08007a18 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007a18:	4b08      	ldr	r3, [pc, #32]	@ (8007a3c <prvResetNextTaskUnblockTime+0x24>)
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	b923      	cbnz	r3, 8007a2a <prvResetNextTaskUnblockTime+0x12>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007a20:	4b07      	ldr	r3, [pc, #28]	@ (8007a40 <prvResetNextTaskUnblockTime+0x28>)
 8007a22:	f04f 32ff 	mov.w	r2, #4294967295
 8007a26:	601a      	str	r2, [r3, #0]
 8007a28:	4770      	bx	lr
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007a2a:	4b04      	ldr	r3, [pc, #16]	@ (8007a3c <prvResetNextTaskUnblockTime+0x24>)
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	68db      	ldr	r3, [r3, #12]
 8007a30:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007a32:	685a      	ldr	r2, [r3, #4]
 8007a34:	4b02      	ldr	r3, [pc, #8]	@ (8007a40 <prvResetNextTaskUnblockTime+0x28>)
 8007a36:	601a      	str	r2, [r3, #0]
	}
}
 8007a38:	4770      	bx	lr
 8007a3a:	bf00      	nop
 8007a3c:	200068ec 	.word	0x200068ec
 8007a40:	20006884 	.word	0x20006884

08007a44 <prvInitialiseNewTask>:
{
 8007a44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007a48:	4680      	mov	r8, r0
 8007a4a:	460d      	mov	r5, r1
 8007a4c:	4617      	mov	r7, r2
 8007a4e:	4699      	mov	r9, r3
 8007a50:	9e08      	ldr	r6, [sp, #32]
 8007a52:	f8dd a024 	ldr.w	sl, [sp, #36]	@ 0x24
 8007a56:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8007a58:	0092      	lsls	r2, r2, #2
 8007a5a:	21a5      	movs	r1, #165	@ 0xa5
 8007a5c:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 8007a5e:	f002 fffd 	bl	800aa5c <memset>
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8007a62:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8007a64:	f107 4280 	add.w	r2, r7, #1073741824	@ 0x40000000
 8007a68:	3a01      	subs	r2, #1
 8007a6a:	eb03 0782 	add.w	r7, r3, r2, lsl #2
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8007a6e:	f027 0707 	bic.w	r7, r7, #7
	if( pcName != NULL )
 8007a72:	b3a5      	cbz	r5, 8007ade <prvInitialiseNewTask+0x9a>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007a74:	f04f 0c00 	mov.w	ip, #0
 8007a78:	f1bc 0f0f 	cmp.w	ip, #15
 8007a7c:	d809      	bhi.n	8007a92 <prvInitialiseNewTask+0x4e>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007a7e:	f815 300c 	ldrb.w	r3, [r5, ip]
 8007a82:	eb04 020c 	add.w	r2, r4, ip
 8007a86:	f882 3034 	strb.w	r3, [r2, #52]	@ 0x34
			if( pcName[ x ] == ( char ) 0x00 )
 8007a8a:	b113      	cbz	r3, 8007a92 <prvInitialiseNewTask+0x4e>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007a8c:	f10c 0c01 	add.w	ip, ip, #1
 8007a90:	e7f2      	b.n	8007a78 <prvInitialiseNewTask+0x34>
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007a92:	2300      	movs	r3, #0
 8007a94:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007a98:	2e37      	cmp	r6, #55	@ 0x37
 8007a9a:	d900      	bls.n	8007a9e <prvInitialiseNewTask+0x5a>
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007a9c:	2637      	movs	r6, #55	@ 0x37
	pxNewTCB->uxPriority = uxPriority;
 8007a9e:	62e6      	str	r6, [r4, #44]	@ 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 8007aa0:	64e6      	str	r6, [r4, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8007aa2:	2500      	movs	r5, #0
 8007aa4:	6525      	str	r5, [r4, #80]	@ 0x50
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007aa6:	1d20      	adds	r0, r4, #4
 8007aa8:	f7fb f80d 	bl	8002ac6 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007aac:	f104 0018 	add.w	r0, r4, #24
 8007ab0:	f7fb f809 	bl	8002ac6 <vListInitialiseItem>
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007ab4:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007ab6:	f1c6 0638 	rsb	r6, r6, #56	@ 0x38
 8007aba:	61a6      	str	r6, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007abc:	6264      	str	r4, [r4, #36]	@ 0x24
		pxNewTCB->ulNotifiedValue = 0;
 8007abe:	6565      	str	r5, [r4, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007ac0:	f884 5058 	strb.w	r5, [r4, #88]	@ 0x58
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007ac4:	464a      	mov	r2, r9
 8007ac6:	4641      	mov	r1, r8
 8007ac8:	4638      	mov	r0, r7
 8007aca:	f7fb f989 	bl	8002de0 <pxPortInitialiseStack>
 8007ace:	6020      	str	r0, [r4, #0]
	if( pxCreatedTask != NULL )
 8007ad0:	f1ba 0f00 	cmp.w	sl, #0
 8007ad4:	d001      	beq.n	8007ada <prvInitialiseNewTask+0x96>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007ad6:	f8ca 4000 	str.w	r4, [sl]
}
 8007ada:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8007ade:	2300      	movs	r3, #0
 8007ae0:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
 8007ae4:	e7d8      	b.n	8007a98 <prvInitialiseNewTask+0x54>
	...

08007ae8 <prvInitialiseTaskLists>:
{
 8007ae8:	b538      	push	{r3, r4, r5, lr}
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007aea:	2400      	movs	r4, #0
 8007aec:	e007      	b.n	8007afe <prvInitialiseTaskLists+0x16>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007aee:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 8007af2:	0093      	lsls	r3, r2, #2
 8007af4:	480e      	ldr	r0, [pc, #56]	@ (8007b30 <prvInitialiseTaskLists+0x48>)
 8007af6:	4418      	add	r0, r3
 8007af8:	f7fa ffda 	bl	8002ab0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007afc:	3401      	adds	r4, #1
 8007afe:	2c37      	cmp	r4, #55	@ 0x37
 8007b00:	d9f5      	bls.n	8007aee <prvInitialiseTaskLists+0x6>
	vListInitialise( &xDelayedTaskList1 );
 8007b02:	4d0c      	ldr	r5, [pc, #48]	@ (8007b34 <prvInitialiseTaskLists+0x4c>)
 8007b04:	4628      	mov	r0, r5
 8007b06:	f7fa ffd3 	bl	8002ab0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007b0a:	4c0b      	ldr	r4, [pc, #44]	@ (8007b38 <prvInitialiseTaskLists+0x50>)
 8007b0c:	4620      	mov	r0, r4
 8007b0e:	f7fa ffcf 	bl	8002ab0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007b12:	480a      	ldr	r0, [pc, #40]	@ (8007b3c <prvInitialiseTaskLists+0x54>)
 8007b14:	f7fa ffcc 	bl	8002ab0 <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
 8007b18:	4809      	ldr	r0, [pc, #36]	@ (8007b40 <prvInitialiseTaskLists+0x58>)
 8007b1a:	f7fa ffc9 	bl	8002ab0 <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
 8007b1e:	4809      	ldr	r0, [pc, #36]	@ (8007b44 <prvInitialiseTaskLists+0x5c>)
 8007b20:	f7fa ffc6 	bl	8002ab0 <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
 8007b24:	4b08      	ldr	r3, [pc, #32]	@ (8007b48 <prvInitialiseTaskLists+0x60>)
 8007b26:	601d      	str	r5, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007b28:	4b08      	ldr	r3, [pc, #32]	@ (8007b4c <prvInitialiseTaskLists+0x64>)
 8007b2a:	601c      	str	r4, [r3, #0]
}
 8007b2c:	bd38      	pop	{r3, r4, r5, pc}
 8007b2e:	bf00      	nop
 8007b30:	20006918 	.word	0x20006918
 8007b34:	20006904 	.word	0x20006904
 8007b38:	200068f0 	.word	0x200068f0
 8007b3c:	200068d4 	.word	0x200068d4
 8007b40:	200068c0 	.word	0x200068c0
 8007b44:	200068a8 	.word	0x200068a8
 8007b48:	200068ec 	.word	0x200068ec
 8007b4c:	200068e8 	.word	0x200068e8

08007b50 <prvAddNewTaskToReadyList>:
{
 8007b50:	b510      	push	{r4, lr}
 8007b52:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 8007b54:	f7fb f96e 	bl	8002e34 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
 8007b58:	4a22      	ldr	r2, [pc, #136]	@ (8007be4 <prvAddNewTaskToReadyList+0x94>)
 8007b5a:	6813      	ldr	r3, [r2, #0]
 8007b5c:	3301      	adds	r3, #1
 8007b5e:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007b60:	4b21      	ldr	r3, [pc, #132]	@ (8007be8 <prvAddNewTaskToReadyList+0x98>)
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	b15b      	cbz	r3, 8007b7e <prvAddNewTaskToReadyList+0x2e>
			if( xSchedulerRunning == pdFALSE )
 8007b66:	4b21      	ldr	r3, [pc, #132]	@ (8007bec <prvAddNewTaskToReadyList+0x9c>)
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	b96b      	cbnz	r3, 8007b88 <prvAddNewTaskToReadyList+0x38>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007b6c:	4b1e      	ldr	r3, [pc, #120]	@ (8007be8 <prvAddNewTaskToReadyList+0x98>)
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007b72:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8007b74:	429a      	cmp	r2, r3
 8007b76:	d807      	bhi.n	8007b88 <prvAddNewTaskToReadyList+0x38>
					pxCurrentTCB = pxNewTCB;
 8007b78:	4b1b      	ldr	r3, [pc, #108]	@ (8007be8 <prvAddNewTaskToReadyList+0x98>)
 8007b7a:	601c      	str	r4, [r3, #0]
 8007b7c:	e004      	b.n	8007b88 <prvAddNewTaskToReadyList+0x38>
			pxCurrentTCB = pxNewTCB;
 8007b7e:	4b1a      	ldr	r3, [pc, #104]	@ (8007be8 <prvAddNewTaskToReadyList+0x98>)
 8007b80:	601c      	str	r4, [r3, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007b82:	6813      	ldr	r3, [r2, #0]
 8007b84:	2b01      	cmp	r3, #1
 8007b86:	d029      	beq.n	8007bdc <prvAddNewTaskToReadyList+0x8c>
		uxTaskNumber++;
 8007b88:	4a19      	ldr	r2, [pc, #100]	@ (8007bf0 <prvAddNewTaskToReadyList+0xa0>)
 8007b8a:	6813      	ldr	r3, [r2, #0]
 8007b8c:	3301      	adds	r3, #1
 8007b8e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8007b90:	6463      	str	r3, [r4, #68]	@ 0x44
		prvAddTaskToReadyList( pxNewTCB );
 8007b92:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8007b94:	4b17      	ldr	r3, [pc, #92]	@ (8007bf4 <prvAddNewTaskToReadyList+0xa4>)
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	4298      	cmp	r0, r3
 8007b9a:	d901      	bls.n	8007ba0 <prvAddNewTaskToReadyList+0x50>
 8007b9c:	4b15      	ldr	r3, [pc, #84]	@ (8007bf4 <prvAddNewTaskToReadyList+0xa4>)
 8007b9e:	6018      	str	r0, [r3, #0]
 8007ba0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8007ba4:	1d21      	adds	r1, r4, #4
 8007ba6:	4b14      	ldr	r3, [pc, #80]	@ (8007bf8 <prvAddNewTaskToReadyList+0xa8>)
 8007ba8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8007bac:	f7fa ff8e 	bl	8002acc <vListInsertEnd>
	taskEXIT_CRITICAL();
 8007bb0:	f7fb f962 	bl	8002e78 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 8007bb4:	4b0d      	ldr	r3, [pc, #52]	@ (8007bec <prvAddNewTaskToReadyList+0x9c>)
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	b17b      	cbz	r3, 8007bda <prvAddNewTaskToReadyList+0x8a>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007bba:	4b0b      	ldr	r3, [pc, #44]	@ (8007be8 <prvAddNewTaskToReadyList+0x98>)
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007bc0:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8007bc2:	429a      	cmp	r2, r3
 8007bc4:	d209      	bcs.n	8007bda <prvAddNewTaskToReadyList+0x8a>
			taskYIELD_IF_USING_PREEMPTION();
 8007bc6:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8007bca:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007bce:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8007bd2:	f3bf 8f4f 	dsb	sy
 8007bd6:	f3bf 8f6f 	isb	sy
}
 8007bda:	bd10      	pop	{r4, pc}
				prvInitialiseTaskLists();
 8007bdc:	f7ff ff84 	bl	8007ae8 <prvInitialiseTaskLists>
 8007be0:	e7d2      	b.n	8007b88 <prvAddNewTaskToReadyList+0x38>
 8007be2:	bf00      	nop
 8007be4:	200068a4 	.word	0x200068a4
 8007be8:	20006d78 	.word	0x20006d78
 8007bec:	20006898 	.word	0x20006898
 8007bf0:	20006888 	.word	0x20006888
 8007bf4:	2000689c 	.word	0x2000689c
 8007bf8:	20006918 	.word	0x20006918

08007bfc <prvDeleteTCB>:
	{
 8007bfc:	b510      	push	{r4, lr}
 8007bfe:	4604      	mov	r4, r0
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007c00:	f890 3059 	ldrb.w	r3, [r0, #89]	@ 0x59
 8007c04:	b163      	cbz	r3, 8007c20 <prvDeleteTCB+0x24>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007c06:	2b01      	cmp	r3, #1
 8007c08:	d011      	beq.n	8007c2e <prvDeleteTCB+0x32>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007c0a:	2b02      	cmp	r3, #2
 8007c0c:	d00e      	beq.n	8007c2c <prvDeleteTCB+0x30>
 8007c0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c12:	f383 8811 	msr	BASEPRI, r3
 8007c16:	f3bf 8f6f 	isb	sy
 8007c1a:	f3bf 8f4f 	dsb	sy
 8007c1e:	e7fe      	b.n	8007c1e <prvDeleteTCB+0x22>
				vPortFree( pxTCB->pxStack );
 8007c20:	6b00      	ldr	r0, [r0, #48]	@ 0x30
 8007c22:	f7fa fca7 	bl	8002574 <vPortFree>
				vPortFree( pxTCB );
 8007c26:	4620      	mov	r0, r4
 8007c28:	f7fa fca4 	bl	8002574 <vPortFree>
	}
 8007c2c:	bd10      	pop	{r4, pc}
				vPortFree( pxTCB );
 8007c2e:	f7fa fca1 	bl	8002574 <vPortFree>
 8007c32:	e7fb      	b.n	8007c2c <prvDeleteTCB+0x30>

08007c34 <prvCheckTasksWaitingTermination>:
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007c34:	4b0f      	ldr	r3, [pc, #60]	@ (8007c74 <prvCheckTasksWaitingTermination+0x40>)
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	b1d3      	cbz	r3, 8007c70 <prvCheckTasksWaitingTermination+0x3c>
{
 8007c3a:	b510      	push	{r4, lr}
			taskENTER_CRITICAL();
 8007c3c:	f7fb f8fa 	bl	8002e34 <vPortEnterCritical>
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007c40:	4b0d      	ldr	r3, [pc, #52]	@ (8007c78 <prvCheckTasksWaitingTermination+0x44>)
 8007c42:	68db      	ldr	r3, [r3, #12]
 8007c44:	68dc      	ldr	r4, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007c46:	1d20      	adds	r0, r4, #4
 8007c48:	f7fa ff64 	bl	8002b14 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007c4c:	4a0b      	ldr	r2, [pc, #44]	@ (8007c7c <prvCheckTasksWaitingTermination+0x48>)
 8007c4e:	6813      	ldr	r3, [r2, #0]
 8007c50:	3b01      	subs	r3, #1
 8007c52:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007c54:	4a07      	ldr	r2, [pc, #28]	@ (8007c74 <prvCheckTasksWaitingTermination+0x40>)
 8007c56:	6813      	ldr	r3, [r2, #0]
 8007c58:	3b01      	subs	r3, #1
 8007c5a:	6013      	str	r3, [r2, #0]
			taskEXIT_CRITICAL();
 8007c5c:	f7fb f90c 	bl	8002e78 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
 8007c60:	4620      	mov	r0, r4
 8007c62:	f7ff ffcb 	bl	8007bfc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007c66:	4b03      	ldr	r3, [pc, #12]	@ (8007c74 <prvCheckTasksWaitingTermination+0x40>)
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d1e6      	bne.n	8007c3c <prvCheckTasksWaitingTermination+0x8>
}
 8007c6e:	bd10      	pop	{r4, pc}
 8007c70:	4770      	bx	lr
 8007c72:	bf00      	nop
 8007c74:	200068bc 	.word	0x200068bc
 8007c78:	200068c0 	.word	0x200068c0
 8007c7c:	200068a4 	.word	0x200068a4

08007c80 <prvIdleTask>:
{
 8007c80:	b508      	push	{r3, lr}
		prvCheckTasksWaitingTermination();
 8007c82:	f7ff ffd7 	bl	8007c34 <prvCheckTasksWaitingTermination>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007c86:	4b07      	ldr	r3, [pc, #28]	@ (8007ca4 <prvIdleTask+0x24>)
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	2b01      	cmp	r3, #1
 8007c8c:	d9f9      	bls.n	8007c82 <prvIdleTask+0x2>
				taskYIELD();
 8007c8e:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8007c92:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007c96:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8007c9a:	f3bf 8f4f 	dsb	sy
 8007c9e:	f3bf 8f6f 	isb	sy
 8007ca2:	e7ee      	b.n	8007c82 <prvIdleTask+0x2>
 8007ca4:	20006918 	.word	0x20006918

08007ca8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007ca8:	b570      	push	{r4, r5, r6, lr}
 8007caa:	4604      	mov	r4, r0
 8007cac:	460d      	mov	r5, r1
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007cae:	4b17      	ldr	r3, [pc, #92]	@ (8007d0c <prvAddCurrentTaskToDelayedList+0x64>)
 8007cb0:	681e      	ldr	r6, [r3, #0]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007cb2:	4b17      	ldr	r3, [pc, #92]	@ (8007d10 <prvAddCurrentTaskToDelayedList+0x68>)
 8007cb4:	6818      	ldr	r0, [r3, #0]
 8007cb6:	3004      	adds	r0, #4
 8007cb8:	f7fa ff2c 	bl	8002b14 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007cbc:	f1b4 3fff 	cmp.w	r4, #4294967295
 8007cc0:	d00d      	beq.n	8007cde <prvAddCurrentTaskToDelayedList+0x36>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007cc2:	4434      	add	r4, r6

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007cc4:	4b12      	ldr	r3, [pc, #72]	@ (8007d10 <prvAddCurrentTaskToDelayedList+0x68>)
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	605c      	str	r4, [r3, #4]

			if( xTimeToWake < xConstTickCount )
 8007cca:	42a6      	cmp	r6, r4
 8007ccc:	d910      	bls.n	8007cf0 <prvAddCurrentTaskToDelayedList+0x48>
			{
				/* Wake time has overflowed.  Place this item in the overflow
				list. */
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007cce:	4b11      	ldr	r3, [pc, #68]	@ (8007d14 <prvAddCurrentTaskToDelayedList+0x6c>)
 8007cd0:	6818      	ldr	r0, [r3, #0]
 8007cd2:	4b0f      	ldr	r3, [pc, #60]	@ (8007d10 <prvAddCurrentTaskToDelayedList+0x68>)
 8007cd4:	6819      	ldr	r1, [r3, #0]
 8007cd6:	3104      	adds	r1, #4
 8007cd8:	f7fa ff03 	bl	8002ae2 <vListInsert>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007cdc:	bd70      	pop	{r4, r5, r6, pc}
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007cde:	2d00      	cmp	r5, #0
 8007ce0:	d0ef      	beq.n	8007cc2 <prvAddCurrentTaskToDelayedList+0x1a>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007ce2:	4b0b      	ldr	r3, [pc, #44]	@ (8007d10 <prvAddCurrentTaskToDelayedList+0x68>)
 8007ce4:	6819      	ldr	r1, [r3, #0]
 8007ce6:	3104      	adds	r1, #4
 8007ce8:	480b      	ldr	r0, [pc, #44]	@ (8007d18 <prvAddCurrentTaskToDelayedList+0x70>)
 8007cea:	f7fa feef 	bl	8002acc <vListInsertEnd>
 8007cee:	e7f5      	b.n	8007cdc <prvAddCurrentTaskToDelayedList+0x34>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007cf0:	4b0a      	ldr	r3, [pc, #40]	@ (8007d1c <prvAddCurrentTaskToDelayedList+0x74>)
 8007cf2:	6818      	ldr	r0, [r3, #0]
 8007cf4:	4b06      	ldr	r3, [pc, #24]	@ (8007d10 <prvAddCurrentTaskToDelayedList+0x68>)
 8007cf6:	6819      	ldr	r1, [r3, #0]
 8007cf8:	3104      	adds	r1, #4
 8007cfa:	f7fa fef2 	bl	8002ae2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007cfe:	4b08      	ldr	r3, [pc, #32]	@ (8007d20 <prvAddCurrentTaskToDelayedList+0x78>)
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	42a3      	cmp	r3, r4
 8007d04:	d9ea      	bls.n	8007cdc <prvAddCurrentTaskToDelayedList+0x34>
					xNextTaskUnblockTime = xTimeToWake;
 8007d06:	4b06      	ldr	r3, [pc, #24]	@ (8007d20 <prvAddCurrentTaskToDelayedList+0x78>)
 8007d08:	601c      	str	r4, [r3, #0]
}
 8007d0a:	e7e7      	b.n	8007cdc <prvAddCurrentTaskToDelayedList+0x34>
 8007d0c:	200068a0 	.word	0x200068a0
 8007d10:	20006d78 	.word	0x20006d78
 8007d14:	200068e8 	.word	0x200068e8
 8007d18:	200068a8 	.word	0x200068a8
 8007d1c:	200068ec 	.word	0x200068ec
 8007d20:	20006884 	.word	0x20006884

08007d24 <xTaskCreateStatic>:
	{
 8007d24:	b530      	push	{r4, r5, lr}
 8007d26:	b087      	sub	sp, #28
 8007d28:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
		configASSERT( puxStackBuffer != NULL );
 8007d2a:	b17c      	cbz	r4, 8007d4c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8007d2c:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 8007d2e:	b1b5      	cbz	r5, 8007d5e <xTaskCreateStatic+0x3a>
			volatile size_t xSize = sizeof( StaticTask_t );
 8007d30:	255c      	movs	r5, #92	@ 0x5c
 8007d32:	9504      	str	r5, [sp, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8007d34:	9d04      	ldr	r5, [sp, #16]
 8007d36:	2d5c      	cmp	r5, #92	@ 0x5c
 8007d38:	d01a      	beq.n	8007d70 <xTaskCreateStatic+0x4c>
 8007d3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d3e:	f383 8811 	msr	BASEPRI, r3
 8007d42:	f3bf 8f6f 	isb	sy
 8007d46:	f3bf 8f4f 	dsb	sy
 8007d4a:	e7fe      	b.n	8007d4a <xTaskCreateStatic+0x26>
 8007d4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d50:	f383 8811 	msr	BASEPRI, r3
 8007d54:	f3bf 8f6f 	isb	sy
 8007d58:	f3bf 8f4f 	dsb	sy
		configASSERT( puxStackBuffer != NULL );
 8007d5c:	e7fe      	b.n	8007d5c <xTaskCreateStatic+0x38>
 8007d5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d62:	f383 8811 	msr	BASEPRI, r3
 8007d66:	f3bf 8f6f 	isb	sy
 8007d6a:	f3bf 8f4f 	dsb	sy
		configASSERT( pxTaskBuffer != NULL );
 8007d6e:	e7fe      	b.n	8007d6e <xTaskCreateStatic+0x4a>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8007d70:	9d04      	ldr	r5, [sp, #16]
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007d72:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 8007d74:	632c      	str	r4, [r5, #48]	@ 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007d76:	2402      	movs	r4, #2
 8007d78:	f885 4059 	strb.w	r4, [r5, #89]	@ 0x59
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007d7c:	2400      	movs	r4, #0
 8007d7e:	9403      	str	r4, [sp, #12]
 8007d80:	9502      	str	r5, [sp, #8]
 8007d82:	ac05      	add	r4, sp, #20
 8007d84:	9401      	str	r4, [sp, #4]
 8007d86:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8007d88:	9400      	str	r4, [sp, #0]
 8007d8a:	f7ff fe5b 	bl	8007a44 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007d8e:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8007d90:	f7ff fede 	bl	8007b50 <prvAddNewTaskToReadyList>
	}
 8007d94:	9805      	ldr	r0, [sp, #20]
 8007d96:	b007      	add	sp, #28
 8007d98:	bd30      	pop	{r4, r5, pc}

08007d9a <xTaskCreate>:
	{
 8007d9a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007d9e:	b085      	sub	sp, #20
 8007da0:	4607      	mov	r7, r0
 8007da2:	4688      	mov	r8, r1
 8007da4:	4614      	mov	r4, r2
 8007da6:	461e      	mov	r6, r3
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8007da8:	0090      	lsls	r0, r2, #2
 8007daa:	f7fa fb61 	bl	8002470 <pvPortMalloc>
			if( pxStack != NULL )
 8007dae:	b308      	cbz	r0, 8007df4 <xTaskCreate+0x5a>
 8007db0:	4681      	mov	r9, r0
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8007db2:	205c      	movs	r0, #92	@ 0x5c
 8007db4:	f7fa fb5c 	bl	8002470 <pvPortMalloc>
				if( pxNewTCB != NULL )
 8007db8:	4605      	mov	r5, r0
 8007dba:	b1a8      	cbz	r0, 8007de8 <xTaskCreate+0x4e>
					pxNewTCB->pxStack = pxStack;
 8007dbc:	f8c0 9030 	str.w	r9, [r0, #48]	@ 0x30
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007dc0:	2300      	movs	r3, #0
 8007dc2:	f880 3059 	strb.w	r3, [r0, #89]	@ 0x59
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007dc6:	9303      	str	r3, [sp, #12]
 8007dc8:	9002      	str	r0, [sp, #8]
 8007dca:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007dcc:	9301      	str	r3, [sp, #4]
 8007dce:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007dd0:	9300      	str	r3, [sp, #0]
 8007dd2:	4633      	mov	r3, r6
 8007dd4:	4622      	mov	r2, r4
 8007dd6:	4641      	mov	r1, r8
 8007dd8:	4638      	mov	r0, r7
 8007dda:	f7ff fe33 	bl	8007a44 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007dde:	4628      	mov	r0, r5
 8007de0:	f7ff feb6 	bl	8007b50 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007de4:	2001      	movs	r0, #1
 8007de6:	e007      	b.n	8007df8 <xTaskCreate+0x5e>
					vPortFree( pxStack );
 8007de8:	4648      	mov	r0, r9
 8007dea:	f7fa fbc3 	bl	8002574 <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007dee:	f04f 30ff 	mov.w	r0, #4294967295
 8007df2:	e001      	b.n	8007df8 <xTaskCreate+0x5e>
 8007df4:	f04f 30ff 	mov.w	r0, #4294967295
	}
 8007df8:	b005      	add	sp, #20
 8007dfa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

08007e00 <vTaskStartScheduler>:
{
 8007e00:	b510      	push	{r4, lr}
 8007e02:	b088      	sub	sp, #32
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8007e04:	2400      	movs	r4, #0
 8007e06:	9405      	str	r4, [sp, #20]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007e08:	9406      	str	r4, [sp, #24]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007e0a:	aa07      	add	r2, sp, #28
 8007e0c:	a906      	add	r1, sp, #24
 8007e0e:	a805      	add	r0, sp, #20
 8007e10:	f7f9 fa1c 	bl	800124c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007e14:	9b05      	ldr	r3, [sp, #20]
 8007e16:	9302      	str	r3, [sp, #8]
 8007e18:	9b06      	ldr	r3, [sp, #24]
 8007e1a:	9301      	str	r3, [sp, #4]
 8007e1c:	9400      	str	r4, [sp, #0]
 8007e1e:	4623      	mov	r3, r4
 8007e20:	9a07      	ldr	r2, [sp, #28]
 8007e22:	4917      	ldr	r1, [pc, #92]	@ (8007e80 <vTaskStartScheduler+0x80>)
 8007e24:	4817      	ldr	r0, [pc, #92]	@ (8007e84 <vTaskStartScheduler+0x84>)
 8007e26:	f7ff ff7d 	bl	8007d24 <xTaskCreateStatic>
 8007e2a:	4b17      	ldr	r3, [pc, #92]	@ (8007e88 <vTaskStartScheduler+0x88>)
 8007e2c:	6018      	str	r0, [r3, #0]
		if( xIdleTaskHandle != NULL )
 8007e2e:	b1c0      	cbz	r0, 8007e62 <vTaskStartScheduler+0x62>
			xReturn = xTimerCreateTimerTask();
 8007e30:	f000 fde8 	bl	8008a04 <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
 8007e34:	2801      	cmp	r0, #1
 8007e36:	d115      	bne.n	8007e64 <vTaskStartScheduler+0x64>
 8007e38:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e3c:	f383 8811 	msr	BASEPRI, r3
 8007e40:	f3bf 8f6f 	isb	sy
 8007e44:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
 8007e48:	4b10      	ldr	r3, [pc, #64]	@ (8007e8c <vTaskStartScheduler+0x8c>)
 8007e4a:	f04f 32ff 	mov.w	r2, #4294967295
 8007e4e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007e50:	4b0f      	ldr	r3, [pc, #60]	@ (8007e90 <vTaskStartScheduler+0x90>)
 8007e52:	2201      	movs	r2, #1
 8007e54:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8007e56:	4b0f      	ldr	r3, [pc, #60]	@ (8007e94 <vTaskStartScheduler+0x94>)
 8007e58:	2200      	movs	r2, #0
 8007e5a:	601a      	str	r2, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
 8007e5c:	f7fb f884 	bl	8002f68 <xPortStartScheduler>
		}
 8007e60:	e003      	b.n	8007e6a <vTaskStartScheduler+0x6a>
			xReturn = pdFAIL;
 8007e62:	2000      	movs	r0, #0
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007e64:	f1b0 3fff 	cmp.w	r0, #4294967295
 8007e68:	d001      	beq.n	8007e6e <vTaskStartScheduler+0x6e>
}
 8007e6a:	b008      	add	sp, #32
 8007e6c:	bd10      	pop	{r4, pc}
 8007e6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e72:	f383 8811 	msr	BASEPRI, r3
 8007e76:	f3bf 8f6f 	isb	sy
 8007e7a:	f3bf 8f4f 	dsb	sy
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007e7e:	e7fe      	b.n	8007e7e <vTaskStartScheduler+0x7e>
 8007e80:	0800bc60 	.word	0x0800bc60
 8007e84:	08007c81 	.word	0x08007c81
 8007e88:	20006880 	.word	0x20006880
 8007e8c:	20006884 	.word	0x20006884
 8007e90:	20006898 	.word	0x20006898
 8007e94:	200068a0 	.word	0x200068a0

08007e98 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 8007e98:	4a02      	ldr	r2, [pc, #8]	@ (8007ea4 <vTaskSuspendAll+0xc>)
 8007e9a:	6813      	ldr	r3, [r2, #0]
 8007e9c:	3301      	adds	r3, #1
 8007e9e:	6013      	str	r3, [r2, #0]
}
 8007ea0:	4770      	bx	lr
 8007ea2:	bf00      	nop
 8007ea4:	2000687c 	.word	0x2000687c

08007ea8 <xTaskGetTickCount>:
		xTicks = xTickCount;
 8007ea8:	4b01      	ldr	r3, [pc, #4]	@ (8007eb0 <xTaskGetTickCount+0x8>)
 8007eaa:	6818      	ldr	r0, [r3, #0]
}
 8007eac:	4770      	bx	lr
 8007eae:	bf00      	nop
 8007eb0:	200068a0 	.word	0x200068a0

08007eb4 <xTaskIncrementTick>:
{
 8007eb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007eb6:	4b3a      	ldr	r3, [pc, #232]	@ (8007fa0 <xTaskIncrementTick+0xec>)
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d169      	bne.n	8007f92 <xTaskIncrementTick+0xde>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007ebe:	4b39      	ldr	r3, [pc, #228]	@ (8007fa4 <xTaskIncrementTick+0xf0>)
 8007ec0:	681d      	ldr	r5, [r3, #0]
 8007ec2:	3501      	adds	r5, #1
		xTickCount = xConstTickCount;
 8007ec4:	601d      	str	r5, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007ec6:	b9c5      	cbnz	r5, 8007efa <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
 8007ec8:	4b37      	ldr	r3, [pc, #220]	@ (8007fa8 <xTaskIncrementTick+0xf4>)
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	b143      	cbz	r3, 8007ee2 <xTaskIncrementTick+0x2e>
 8007ed0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ed4:	f383 8811 	msr	BASEPRI, r3
 8007ed8:	f3bf 8f6f 	isb	sy
 8007edc:	f3bf 8f4f 	dsb	sy
 8007ee0:	e7fe      	b.n	8007ee0 <xTaskIncrementTick+0x2c>
 8007ee2:	4a31      	ldr	r2, [pc, #196]	@ (8007fa8 <xTaskIncrementTick+0xf4>)
 8007ee4:	6811      	ldr	r1, [r2, #0]
 8007ee6:	4b31      	ldr	r3, [pc, #196]	@ (8007fac <xTaskIncrementTick+0xf8>)
 8007ee8:	6818      	ldr	r0, [r3, #0]
 8007eea:	6010      	str	r0, [r2, #0]
 8007eec:	6019      	str	r1, [r3, #0]
 8007eee:	4a30      	ldr	r2, [pc, #192]	@ (8007fb0 <xTaskIncrementTick+0xfc>)
 8007ef0:	6813      	ldr	r3, [r2, #0]
 8007ef2:	3301      	adds	r3, #1
 8007ef4:	6013      	str	r3, [r2, #0]
 8007ef6:	f7ff fd8f 	bl	8007a18 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007efa:	4b2e      	ldr	r3, [pc, #184]	@ (8007fb4 <xTaskIncrementTick+0x100>)
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	42ab      	cmp	r3, r5
 8007f00:	d93d      	bls.n	8007f7e <xTaskIncrementTick+0xca>
BaseType_t xSwitchRequired = pdFALSE;
 8007f02:	2700      	movs	r7, #0
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007f04:	4b2c      	ldr	r3, [pc, #176]	@ (8007fb8 <xTaskIncrementTick+0x104>)
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f0a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8007f0e:	009a      	lsls	r2, r3, #2
 8007f10:	4b2a      	ldr	r3, [pc, #168]	@ (8007fbc <xTaskIncrementTick+0x108>)
 8007f12:	589b      	ldr	r3, [r3, r2]
 8007f14:	2b01      	cmp	r3, #1
 8007f16:	d900      	bls.n	8007f1a <xTaskIncrementTick+0x66>
				xSwitchRequired = pdTRUE;
 8007f18:	2701      	movs	r7, #1
			if( xYieldPending != pdFALSE )
 8007f1a:	4b29      	ldr	r3, [pc, #164]	@ (8007fc0 <xTaskIncrementTick+0x10c>)
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	d03c      	beq.n	8007f9c <xTaskIncrementTick+0xe8>
				xSwitchRequired = pdTRUE;
 8007f22:	2701      	movs	r7, #1
	return xSwitchRequired;
 8007f24:	e03a      	b.n	8007f9c <xTaskIncrementTick+0xe8>
							xSwitchRequired = pdTRUE;
 8007f26:	2701      	movs	r7, #1
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007f28:	4b1f      	ldr	r3, [pc, #124]	@ (8007fa8 <xTaskIncrementTick+0xf4>)
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	b343      	cbz	r3, 8007f82 <xTaskIncrementTick+0xce>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007f30:	4b1d      	ldr	r3, [pc, #116]	@ (8007fa8 <xTaskIncrementTick+0xf4>)
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	68db      	ldr	r3, [r3, #12]
 8007f36:	68dc      	ldr	r4, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007f38:	6863      	ldr	r3, [r4, #4]
					if( xConstTickCount < xItemValue )
 8007f3a:	429d      	cmp	r5, r3
 8007f3c:	d326      	bcc.n	8007f8c <xTaskIncrementTick+0xd8>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007f3e:	1d26      	adds	r6, r4, #4
 8007f40:	4630      	mov	r0, r6
 8007f42:	f7fa fde7 	bl	8002b14 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007f46:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8007f48:	b11b      	cbz	r3, 8007f52 <xTaskIncrementTick+0x9e>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007f4a:	f104 0018 	add.w	r0, r4, #24
 8007f4e:	f7fa fde1 	bl	8002b14 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007f52:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8007f54:	4a1b      	ldr	r2, [pc, #108]	@ (8007fc4 <xTaskIncrementTick+0x110>)
 8007f56:	6812      	ldr	r2, [r2, #0]
 8007f58:	4293      	cmp	r3, r2
 8007f5a:	d901      	bls.n	8007f60 <xTaskIncrementTick+0xac>
 8007f5c:	4a19      	ldr	r2, [pc, #100]	@ (8007fc4 <xTaskIncrementTick+0x110>)
 8007f5e:	6013      	str	r3, [r2, #0]
 8007f60:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8007f64:	009a      	lsls	r2, r3, #2
 8007f66:	4631      	mov	r1, r6
 8007f68:	4814      	ldr	r0, [pc, #80]	@ (8007fbc <xTaskIncrementTick+0x108>)
 8007f6a:	4410      	add	r0, r2
 8007f6c:	f7fa fdae 	bl	8002acc <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007f70:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8007f72:	4b11      	ldr	r3, [pc, #68]	@ (8007fb8 <xTaskIncrementTick+0x104>)
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f78:	429a      	cmp	r2, r3
 8007f7a:	d2d4      	bcs.n	8007f26 <xTaskIncrementTick+0x72>
 8007f7c:	e7d4      	b.n	8007f28 <xTaskIncrementTick+0x74>
BaseType_t xSwitchRequired = pdFALSE;
 8007f7e:	2700      	movs	r7, #0
 8007f80:	e7d2      	b.n	8007f28 <xTaskIncrementTick+0x74>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007f82:	4b0c      	ldr	r3, [pc, #48]	@ (8007fb4 <xTaskIncrementTick+0x100>)
 8007f84:	f04f 32ff 	mov.w	r2, #4294967295
 8007f88:	601a      	str	r2, [r3, #0]
					break;
 8007f8a:	e7bb      	b.n	8007f04 <xTaskIncrementTick+0x50>
						xNextTaskUnblockTime = xItemValue;
 8007f8c:	4a09      	ldr	r2, [pc, #36]	@ (8007fb4 <xTaskIncrementTick+0x100>)
 8007f8e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007f90:	e7b8      	b.n	8007f04 <xTaskIncrementTick+0x50>
		++xPendedTicks;
 8007f92:	4a0d      	ldr	r2, [pc, #52]	@ (8007fc8 <xTaskIncrementTick+0x114>)
 8007f94:	6813      	ldr	r3, [r2, #0]
 8007f96:	3301      	adds	r3, #1
 8007f98:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
 8007f9a:	2700      	movs	r7, #0
}
 8007f9c:	4638      	mov	r0, r7
 8007f9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007fa0:	2000687c 	.word	0x2000687c
 8007fa4:	200068a0 	.word	0x200068a0
 8007fa8:	200068ec 	.word	0x200068ec
 8007fac:	200068e8 	.word	0x200068e8
 8007fb0:	2000688c 	.word	0x2000688c
 8007fb4:	20006884 	.word	0x20006884
 8007fb8:	20006d78 	.word	0x20006d78
 8007fbc:	20006918 	.word	0x20006918
 8007fc0:	20006890 	.word	0x20006890
 8007fc4:	2000689c 	.word	0x2000689c
 8007fc8:	20006894 	.word	0x20006894

08007fcc <xTaskResumeAll>:
{
 8007fcc:	b538      	push	{r3, r4, r5, lr}
	configASSERT( uxSchedulerSuspended );
 8007fce:	4b35      	ldr	r3, [pc, #212]	@ (80080a4 <xTaskResumeAll+0xd8>)
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	b943      	cbnz	r3, 8007fe6 <xTaskResumeAll+0x1a>
 8007fd4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007fd8:	f383 8811 	msr	BASEPRI, r3
 8007fdc:	f3bf 8f6f 	isb	sy
 8007fe0:	f3bf 8f4f 	dsb	sy
 8007fe4:	e7fe      	b.n	8007fe4 <xTaskResumeAll+0x18>
	taskENTER_CRITICAL();
 8007fe6:	f7fa ff25 	bl	8002e34 <vPortEnterCritical>
		--uxSchedulerSuspended;
 8007fea:	4b2e      	ldr	r3, [pc, #184]	@ (80080a4 <xTaskResumeAll+0xd8>)
 8007fec:	681a      	ldr	r2, [r3, #0]
 8007fee:	3a01      	subs	r2, #1
 8007ff0:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	d14f      	bne.n	8008098 <xTaskResumeAll+0xcc>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007ff8:	4b2b      	ldr	r3, [pc, #172]	@ (80080a8 <xTaskResumeAll+0xdc>)
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	b90b      	cbnz	r3, 8008002 <xTaskResumeAll+0x36>
BaseType_t xAlreadyYielded = pdFALSE;
 8007ffe:	2400      	movs	r4, #0
 8008000:	e04b      	b.n	800809a <xTaskResumeAll+0xce>
TCB_t *pxTCB = NULL;
 8008002:	2400      	movs	r4, #0
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008004:	4b29      	ldr	r3, [pc, #164]	@ (80080ac <xTaskResumeAll+0xe0>)
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	b31b      	cbz	r3, 8008052 <xTaskResumeAll+0x86>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800800a:	4b28      	ldr	r3, [pc, #160]	@ (80080ac <xTaskResumeAll+0xe0>)
 800800c:	68db      	ldr	r3, [r3, #12]
 800800e:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008010:	f104 0018 	add.w	r0, r4, #24
 8008014:	f7fa fd7e 	bl	8002b14 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008018:	1d25      	adds	r5, r4, #4
 800801a:	4628      	mov	r0, r5
 800801c:	f7fa fd7a 	bl	8002b14 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008020:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8008022:	4b23      	ldr	r3, [pc, #140]	@ (80080b0 <xTaskResumeAll+0xe4>)
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	4298      	cmp	r0, r3
 8008028:	d901      	bls.n	800802e <xTaskResumeAll+0x62>
 800802a:	4b21      	ldr	r3, [pc, #132]	@ (80080b0 <xTaskResumeAll+0xe4>)
 800802c:	6018      	str	r0, [r3, #0]
 800802e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8008032:	4629      	mov	r1, r5
 8008034:	4b1f      	ldr	r3, [pc, #124]	@ (80080b4 <xTaskResumeAll+0xe8>)
 8008036:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800803a:	f7fa fd47 	bl	8002acc <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800803e:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8008040:	4b1d      	ldr	r3, [pc, #116]	@ (80080b8 <xTaskResumeAll+0xec>)
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008046:	429a      	cmp	r2, r3
 8008048:	d3dc      	bcc.n	8008004 <xTaskResumeAll+0x38>
						xYieldPending = pdTRUE;
 800804a:	4b1c      	ldr	r3, [pc, #112]	@ (80080bc <xTaskResumeAll+0xf0>)
 800804c:	2201      	movs	r2, #1
 800804e:	601a      	str	r2, [r3, #0]
 8008050:	e7d8      	b.n	8008004 <xTaskResumeAll+0x38>
				if( pxTCB != NULL )
 8008052:	b10c      	cbz	r4, 8008058 <xTaskResumeAll+0x8c>
					prvResetNextTaskUnblockTime();
 8008054:	f7ff fce0 	bl	8007a18 <prvResetNextTaskUnblockTime>
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8008058:	4b19      	ldr	r3, [pc, #100]	@ (80080c0 <xTaskResumeAll+0xf4>)
 800805a:	681c      	ldr	r4, [r3, #0]
					if( xPendedCounts > ( TickType_t ) 0U )
 800805c:	b984      	cbnz	r4, 8008080 <xTaskResumeAll+0xb4>
				if( xYieldPending != pdFALSE )
 800805e:	4b17      	ldr	r3, [pc, #92]	@ (80080bc <xTaskResumeAll+0xf0>)
 8008060:	681c      	ldr	r4, [r3, #0]
 8008062:	b1d4      	cbz	r4, 800809a <xTaskResumeAll+0xce>
					taskYIELD_IF_USING_PREEMPTION();
 8008064:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8008068:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800806c:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8008070:	f3bf 8f4f 	dsb	sy
 8008074:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 8008078:	2401      	movs	r4, #1
 800807a:	e00e      	b.n	800809a <xTaskResumeAll+0xce>
						} while( xPendedCounts > ( TickType_t ) 0U );
 800807c:	3c01      	subs	r4, #1
 800807e:	d007      	beq.n	8008090 <xTaskResumeAll+0xc4>
							if( xTaskIncrementTick() != pdFALSE )
 8008080:	f7ff ff18 	bl	8007eb4 <xTaskIncrementTick>
 8008084:	2800      	cmp	r0, #0
 8008086:	d0f9      	beq.n	800807c <xTaskResumeAll+0xb0>
								xYieldPending = pdTRUE;
 8008088:	4b0c      	ldr	r3, [pc, #48]	@ (80080bc <xTaskResumeAll+0xf0>)
 800808a:	2201      	movs	r2, #1
 800808c:	601a      	str	r2, [r3, #0]
 800808e:	e7f5      	b.n	800807c <xTaskResumeAll+0xb0>
						xPendedTicks = 0;
 8008090:	4b0b      	ldr	r3, [pc, #44]	@ (80080c0 <xTaskResumeAll+0xf4>)
 8008092:	2200      	movs	r2, #0
 8008094:	601a      	str	r2, [r3, #0]
 8008096:	e7e2      	b.n	800805e <xTaskResumeAll+0x92>
BaseType_t xAlreadyYielded = pdFALSE;
 8008098:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 800809a:	f7fa feed 	bl	8002e78 <vPortExitCritical>
}
 800809e:	4620      	mov	r0, r4
 80080a0:	bd38      	pop	{r3, r4, r5, pc}
 80080a2:	bf00      	nop
 80080a4:	2000687c 	.word	0x2000687c
 80080a8:	200068a4 	.word	0x200068a4
 80080ac:	200068d4 	.word	0x200068d4
 80080b0:	2000689c 	.word	0x2000689c
 80080b4:	20006918 	.word	0x20006918
 80080b8:	20006d78 	.word	0x20006d78
 80080bc:	20006890 	.word	0x20006890
 80080c0:	20006894 	.word	0x20006894

080080c4 <vTaskDelay>:
	{
 80080c4:	b510      	push	{r4, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 80080c6:	b1a8      	cbz	r0, 80080f4 <vTaskDelay+0x30>
 80080c8:	4604      	mov	r4, r0
			configASSERT( uxSchedulerSuspended == 0 );
 80080ca:	4b10      	ldr	r3, [pc, #64]	@ (800810c <vTaskDelay+0x48>)
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	b143      	cbz	r3, 80080e2 <vTaskDelay+0x1e>
 80080d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80080d4:	f383 8811 	msr	BASEPRI, r3
 80080d8:	f3bf 8f6f 	isb	sy
 80080dc:	f3bf 8f4f 	dsb	sy
 80080e0:	e7fe      	b.n	80080e0 <vTaskDelay+0x1c>
			vTaskSuspendAll();
 80080e2:	f7ff fed9 	bl	8007e98 <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80080e6:	2100      	movs	r1, #0
 80080e8:	4620      	mov	r0, r4
 80080ea:	f7ff fddd 	bl	8007ca8 <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 80080ee:	f7ff ff6d 	bl	8007fcc <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 80080f2:	b948      	cbnz	r0, 8008108 <vTaskDelay+0x44>
			portYIELD_WITHIN_API();
 80080f4:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80080f8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80080fc:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8008100:	f3bf 8f4f 	dsb	sy
 8008104:	f3bf 8f6f 	isb	sy
	}
 8008108:	bd10      	pop	{r4, pc}
 800810a:	bf00      	nop
 800810c:	2000687c 	.word	0x2000687c

08008110 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008110:	4b20      	ldr	r3, [pc, #128]	@ (8008194 <vTaskSwitchContext+0x84>)
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	b11b      	cbz	r3, 800811e <vTaskSwitchContext+0xe>
		xYieldPending = pdTRUE;
 8008116:	4b20      	ldr	r3, [pc, #128]	@ (8008198 <vTaskSwitchContext+0x88>)
 8008118:	2201      	movs	r2, #1
 800811a:	601a      	str	r2, [r3, #0]
 800811c:	4770      	bx	lr
		xYieldPending = pdFALSE;
 800811e:	4b1e      	ldr	r3, [pc, #120]	@ (8008198 <vTaskSwitchContext+0x88>)
 8008120:	2200      	movs	r2, #0
 8008122:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008124:	4b1d      	ldr	r3, [pc, #116]	@ (800819c <vTaskSwitchContext+0x8c>)
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 800812c:	008a      	lsls	r2, r1, #2
 800812e:	491c      	ldr	r1, [pc, #112]	@ (80081a0 <vTaskSwitchContext+0x90>)
 8008130:	588a      	ldr	r2, [r1, r2]
 8008132:	b95a      	cbnz	r2, 800814c <vTaskSwitchContext+0x3c>
 8008134:	b10b      	cbz	r3, 800813a <vTaskSwitchContext+0x2a>
 8008136:	3b01      	subs	r3, #1
 8008138:	e7f6      	b.n	8008128 <vTaskSwitchContext+0x18>
 800813a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800813e:	f383 8811 	msr	BASEPRI, r3
 8008142:	f3bf 8f6f 	isb	sy
 8008146:	f3bf 8f4f 	dsb	sy
 800814a:	e7fe      	b.n	800814a <vTaskSwitchContext+0x3a>
 800814c:	4608      	mov	r0, r1
 800814e:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 8008152:	008a      	lsls	r2, r1, #2
 8008154:	4402      	add	r2, r0
 8008156:	6851      	ldr	r1, [r2, #4]
 8008158:	6849      	ldr	r1, [r1, #4]
 800815a:	6051      	str	r1, [r2, #4]
 800815c:	eb03 0c83 	add.w	ip, r3, r3, lsl #2
 8008160:	ea4f 028c 	mov.w	r2, ip, lsl #2
 8008164:	3208      	adds	r2, #8
 8008166:	4402      	add	r2, r0
 8008168:	4291      	cmp	r1, r2
 800816a:	d00b      	beq.n	8008184 <vTaskSwitchContext+0x74>
 800816c:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8008170:	0091      	lsls	r1, r2, #2
 8008172:	4a0b      	ldr	r2, [pc, #44]	@ (80081a0 <vTaskSwitchContext+0x90>)
 8008174:	440a      	add	r2, r1
 8008176:	6852      	ldr	r2, [r2, #4]
 8008178:	68d1      	ldr	r1, [r2, #12]
 800817a:	4a0a      	ldr	r2, [pc, #40]	@ (80081a4 <vTaskSwitchContext+0x94>)
 800817c:	6011      	str	r1, [r2, #0]
 800817e:	4a07      	ldr	r2, [pc, #28]	@ (800819c <vTaskSwitchContext+0x8c>)
 8008180:	6013      	str	r3, [r2, #0]
}
 8008182:	4770      	bx	lr
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008184:	6848      	ldr	r0, [r1, #4]
 8008186:	4662      	mov	r2, ip
 8008188:	0091      	lsls	r1, r2, #2
 800818a:	4a05      	ldr	r2, [pc, #20]	@ (80081a0 <vTaskSwitchContext+0x90>)
 800818c:	440a      	add	r2, r1
 800818e:	6050      	str	r0, [r2, #4]
 8008190:	e7ec      	b.n	800816c <vTaskSwitchContext+0x5c>
 8008192:	bf00      	nop
 8008194:	2000687c 	.word	0x2000687c
 8008198:	20006890 	.word	0x20006890
 800819c:	2000689c 	.word	0x2000689c
 80081a0:	20006918 	.word	0x20006918
 80081a4:	20006d78 	.word	0x20006d78

080081a8 <vTaskPlaceOnEventList>:
	configASSERT( pxEventList );
 80081a8:	b158      	cbz	r0, 80081c2 <vTaskPlaceOnEventList+0x1a>
{
 80081aa:	b510      	push	{r4, lr}
 80081ac:	460c      	mov	r4, r1
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80081ae:	4a09      	ldr	r2, [pc, #36]	@ (80081d4 <vTaskPlaceOnEventList+0x2c>)
 80081b0:	6811      	ldr	r1, [r2, #0]
 80081b2:	3118      	adds	r1, #24
 80081b4:	f7fa fc95 	bl	8002ae2 <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80081b8:	2101      	movs	r1, #1
 80081ba:	4620      	mov	r0, r4
 80081bc:	f7ff fd74 	bl	8007ca8 <prvAddCurrentTaskToDelayedList>
}
 80081c0:	bd10      	pop	{r4, pc}
 80081c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80081c6:	f383 8811 	msr	BASEPRI, r3
 80081ca:	f3bf 8f6f 	isb	sy
 80081ce:	f3bf 8f4f 	dsb	sy
	configASSERT( pxEventList );
 80081d2:	e7fe      	b.n	80081d2 <vTaskPlaceOnEventList+0x2a>
 80081d4:	20006d78 	.word	0x20006d78

080081d8 <vTaskPlaceOnEventListRestricted>:
	{
 80081d8:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxEventList );
 80081da:	b170      	cbz	r0, 80081fa <vTaskPlaceOnEventListRestricted+0x22>
 80081dc:	460d      	mov	r5, r1
 80081de:	4614      	mov	r4, r2
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80081e0:	4a0a      	ldr	r2, [pc, #40]	@ (800820c <vTaskPlaceOnEventListRestricted+0x34>)
 80081e2:	6811      	ldr	r1, [r2, #0]
 80081e4:	3118      	adds	r1, #24
 80081e6:	f7fa fc71 	bl	8002acc <vListInsertEnd>
		if( xWaitIndefinitely != pdFALSE )
 80081ea:	b10c      	cbz	r4, 80081f0 <vTaskPlaceOnEventListRestricted+0x18>
			xTicksToWait = portMAX_DELAY;
 80081ec:	f04f 35ff 	mov.w	r5, #4294967295
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80081f0:	4621      	mov	r1, r4
 80081f2:	4628      	mov	r0, r5
 80081f4:	f7ff fd58 	bl	8007ca8 <prvAddCurrentTaskToDelayedList>
	}
 80081f8:	bd38      	pop	{r3, r4, r5, pc}
 80081fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80081fe:	f383 8811 	msr	BASEPRI, r3
 8008202:	f3bf 8f6f 	isb	sy
 8008206:	f3bf 8f4f 	dsb	sy
		configASSERT( pxEventList );
 800820a:	e7fe      	b.n	800820a <vTaskPlaceOnEventListRestricted+0x32>
 800820c:	20006d78 	.word	0x20006d78

08008210 <xTaskRemoveFromEventList>:
{
 8008210:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008212:	68c3      	ldr	r3, [r0, #12]
 8008214:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 8008216:	b324      	cbz	r4, 8008262 <xTaskRemoveFromEventList+0x52>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8008218:	f104 0518 	add.w	r5, r4, #24
 800821c:	4628      	mov	r0, r5
 800821e:	f7fa fc79 	bl	8002b14 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008222:	4b18      	ldr	r3, [pc, #96]	@ (8008284 <xTaskRemoveFromEventList+0x74>)
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	bb2b      	cbnz	r3, 8008274 <xTaskRemoveFromEventList+0x64>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008228:	1d25      	adds	r5, r4, #4
 800822a:	4628      	mov	r0, r5
 800822c:	f7fa fc72 	bl	8002b14 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008230:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8008232:	4b15      	ldr	r3, [pc, #84]	@ (8008288 <xTaskRemoveFromEventList+0x78>)
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	4298      	cmp	r0, r3
 8008238:	d901      	bls.n	800823e <xTaskRemoveFromEventList+0x2e>
 800823a:	4b13      	ldr	r3, [pc, #76]	@ (8008288 <xTaskRemoveFromEventList+0x78>)
 800823c:	6018      	str	r0, [r3, #0]
 800823e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8008242:	4629      	mov	r1, r5
 8008244:	4b11      	ldr	r3, [pc, #68]	@ (800828c <xTaskRemoveFromEventList+0x7c>)
 8008246:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800824a:	f7fa fc3f 	bl	8002acc <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800824e:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8008250:	4b0f      	ldr	r3, [pc, #60]	@ (8008290 <xTaskRemoveFromEventList+0x80>)
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008256:	429a      	cmp	r2, r3
 8008258:	d911      	bls.n	800827e <xTaskRemoveFromEventList+0x6e>
		xYieldPending = pdTRUE;
 800825a:	2001      	movs	r0, #1
 800825c:	4b0d      	ldr	r3, [pc, #52]	@ (8008294 <xTaskRemoveFromEventList+0x84>)
 800825e:	6018      	str	r0, [r3, #0]
}
 8008260:	bd38      	pop	{r3, r4, r5, pc}
 8008262:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008266:	f383 8811 	msr	BASEPRI, r3
 800826a:	f3bf 8f6f 	isb	sy
 800826e:	f3bf 8f4f 	dsb	sy
	configASSERT( pxUnblockedTCB );
 8008272:	e7fe      	b.n	8008272 <xTaskRemoveFromEventList+0x62>
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008274:	4629      	mov	r1, r5
 8008276:	4808      	ldr	r0, [pc, #32]	@ (8008298 <xTaskRemoveFromEventList+0x88>)
 8008278:	f7fa fc28 	bl	8002acc <vListInsertEnd>
 800827c:	e7e7      	b.n	800824e <xTaskRemoveFromEventList+0x3e>
		xReturn = pdFALSE;
 800827e:	2000      	movs	r0, #0
	return xReturn;
 8008280:	e7ee      	b.n	8008260 <xTaskRemoveFromEventList+0x50>
 8008282:	bf00      	nop
 8008284:	2000687c 	.word	0x2000687c
 8008288:	2000689c 	.word	0x2000689c
 800828c:	20006918 	.word	0x20006918
 8008290:	20006d78 	.word	0x20006d78
 8008294:	20006890 	.word	0x20006890
 8008298:	200068d4 	.word	0x200068d4

0800829c <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800829c:	4b03      	ldr	r3, [pc, #12]	@ (80082ac <vTaskInternalSetTimeOutState+0x10>)
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80082a2:	4b03      	ldr	r3, [pc, #12]	@ (80082b0 <vTaskInternalSetTimeOutState+0x14>)
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	6043      	str	r3, [r0, #4]
}
 80082a8:	4770      	bx	lr
 80082aa:	bf00      	nop
 80082ac:	2000688c 	.word	0x2000688c
 80082b0:	200068a0 	.word	0x200068a0

080082b4 <xTaskCheckForTimeOut>:
	configASSERT( pxTimeOut );
 80082b4:	b1e0      	cbz	r0, 80082f0 <xTaskCheckForTimeOut+0x3c>
{
 80082b6:	b570      	push	{r4, r5, r6, lr}
 80082b8:	460c      	mov	r4, r1
 80082ba:	4605      	mov	r5, r0
	configASSERT( pxTicksToWait );
 80082bc:	b309      	cbz	r1, 8008302 <xTaskCheckForTimeOut+0x4e>
	taskENTER_CRITICAL();
 80082be:	f7fa fdb9 	bl	8002e34 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 80082c2:	4b1c      	ldr	r3, [pc, #112]	@ (8008334 <xTaskCheckForTimeOut+0x80>)
 80082c4:	6819      	ldr	r1, [r3, #0]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80082c6:	686b      	ldr	r3, [r5, #4]
 80082c8:	1ac8      	subs	r0, r1, r3
			if( *pxTicksToWait == portMAX_DELAY )
 80082ca:	6822      	ldr	r2, [r4, #0]
 80082cc:	f1b2 3fff 	cmp.w	r2, #4294967295
 80082d0:	d028      	beq.n	8008324 <xTaskCheckForTimeOut+0x70>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80082d2:	f8df c064 	ldr.w	ip, [pc, #100]	@ 8008338 <xTaskCheckForTimeOut+0x84>
 80082d6:	f8dc c000 	ldr.w	ip, [ip]
 80082da:	682e      	ldr	r6, [r5, #0]
 80082dc:	4566      	cmp	r6, ip
 80082de:	d001      	beq.n	80082e4 <xTaskCheckForTimeOut+0x30>
 80082e0:	428b      	cmp	r3, r1
 80082e2:	d924      	bls.n	800832e <xTaskCheckForTimeOut+0x7a>
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80082e4:	4282      	cmp	r2, r0
 80082e6:	d815      	bhi.n	8008314 <xTaskCheckForTimeOut+0x60>
			*pxTicksToWait = 0;
 80082e8:	2300      	movs	r3, #0
 80082ea:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
 80082ec:	2401      	movs	r4, #1
 80082ee:	e01a      	b.n	8008326 <xTaskCheckForTimeOut+0x72>
 80082f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80082f4:	f383 8811 	msr	BASEPRI, r3
 80082f8:	f3bf 8f6f 	isb	sy
 80082fc:	f3bf 8f4f 	dsb	sy
	configASSERT( pxTimeOut );
 8008300:	e7fe      	b.n	8008300 <xTaskCheckForTimeOut+0x4c>
 8008302:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008306:	f383 8811 	msr	BASEPRI, r3
 800830a:	f3bf 8f6f 	isb	sy
 800830e:	f3bf 8f4f 	dsb	sy
	configASSERT( pxTicksToWait );
 8008312:	e7fe      	b.n	8008312 <xTaskCheckForTimeOut+0x5e>
			*pxTicksToWait -= xElapsedTime;
 8008314:	1a5b      	subs	r3, r3, r1
 8008316:	4413      	add	r3, r2
 8008318:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800831a:	4628      	mov	r0, r5
 800831c:	f7ff ffbe 	bl	800829c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8008320:	2400      	movs	r4, #0
 8008322:	e000      	b.n	8008326 <xTaskCheckForTimeOut+0x72>
				xReturn = pdFALSE;
 8008324:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8008326:	f7fa fda7 	bl	8002e78 <vPortExitCritical>
}
 800832a:	4620      	mov	r0, r4
 800832c:	bd70      	pop	{r4, r5, r6, pc}
			xReturn = pdTRUE;
 800832e:	2401      	movs	r4, #1
 8008330:	e7f9      	b.n	8008326 <xTaskCheckForTimeOut+0x72>
 8008332:	bf00      	nop
 8008334:	200068a0 	.word	0x200068a0
 8008338:	2000688c 	.word	0x2000688c

0800833c <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 800833c:	4b01      	ldr	r3, [pc, #4]	@ (8008344 <vTaskMissedYield+0x8>)
 800833e:	2201      	movs	r2, #1
 8008340:	601a      	str	r2, [r3, #0]
}
 8008342:	4770      	bx	lr
 8008344:	20006890 	.word	0x20006890

08008348 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 8008348:	4b05      	ldr	r3, [pc, #20]	@ (8008360 <xTaskGetSchedulerState+0x18>)
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	b133      	cbz	r3, 800835c <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800834e:	4b05      	ldr	r3, [pc, #20]	@ (8008364 <xTaskGetSchedulerState+0x1c>)
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	b10b      	cbz	r3, 8008358 <xTaskGetSchedulerState+0x10>
				xReturn = taskSCHEDULER_SUSPENDED;
 8008354:	2000      	movs	r0, #0
	}
 8008356:	4770      	bx	lr
				xReturn = taskSCHEDULER_RUNNING;
 8008358:	2002      	movs	r0, #2
 800835a:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 800835c:	2001      	movs	r0, #1
 800835e:	4770      	bx	lr
 8008360:	20006898 	.word	0x20006898
 8008364:	2000687c 	.word	0x2000687c

08008368 <xTaskPriorityDisinherit>:
		if( pxMutexHolder != NULL )
 8008368:	2800      	cmp	r0, #0
 800836a:	d03b      	beq.n	80083e4 <xTaskPriorityDisinherit+0x7c>
	{
 800836c:	b538      	push	{r3, r4, r5, lr}
 800836e:	4604      	mov	r4, r0
			configASSERT( pxTCB == pxCurrentTCB );
 8008370:	4b1e      	ldr	r3, [pc, #120]	@ (80083ec <xTaskPriorityDisinherit+0x84>)
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	4283      	cmp	r3, r0
 8008376:	d008      	beq.n	800838a <xTaskPriorityDisinherit+0x22>
 8008378:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800837c:	f383 8811 	msr	BASEPRI, r3
 8008380:	f3bf 8f6f 	isb	sy
 8008384:	f3bf 8f4f 	dsb	sy
 8008388:	e7fe      	b.n	8008388 <xTaskPriorityDisinherit+0x20>
			configASSERT( pxTCB->uxMutexesHeld );
 800838a:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 800838c:	b943      	cbnz	r3, 80083a0 <xTaskPriorityDisinherit+0x38>
 800838e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008392:	f383 8811 	msr	BASEPRI, r3
 8008396:	f3bf 8f6f 	isb	sy
 800839a:	f3bf 8f4f 	dsb	sy
 800839e:	e7fe      	b.n	800839e <xTaskPriorityDisinherit+0x36>
			( pxTCB->uxMutexesHeld )--;
 80083a0:	3b01      	subs	r3, #1
 80083a2:	6503      	str	r3, [r0, #80]	@ 0x50
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80083a4:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 80083a6:	6cc2      	ldr	r2, [r0, #76]	@ 0x4c
 80083a8:	4291      	cmp	r1, r2
 80083aa:	d01d      	beq.n	80083e8 <xTaskPriorityDisinherit+0x80>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80083ac:	b10b      	cbz	r3, 80083b2 <xTaskPriorityDisinherit+0x4a>
	BaseType_t xReturn = pdFALSE;
 80083ae:	2000      	movs	r0, #0
	}
 80083b0:	bd38      	pop	{r3, r4, r5, pc}
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80083b2:	1d05      	adds	r5, r0, #4
 80083b4:	4628      	mov	r0, r5
 80083b6:	f7fa fbad 	bl	8002b14 <uxListRemove>
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80083ba:	6ce0      	ldr	r0, [r4, #76]	@ 0x4c
 80083bc:	62e0      	str	r0, [r4, #44]	@ 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80083be:	f1c0 0338 	rsb	r3, r0, #56	@ 0x38
 80083c2:	61a3      	str	r3, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 80083c4:	4b0a      	ldr	r3, [pc, #40]	@ (80083f0 <xTaskPriorityDisinherit+0x88>)
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	4298      	cmp	r0, r3
 80083ca:	d901      	bls.n	80083d0 <xTaskPriorityDisinherit+0x68>
 80083cc:	4b08      	ldr	r3, [pc, #32]	@ (80083f0 <xTaskPriorityDisinherit+0x88>)
 80083ce:	6018      	str	r0, [r3, #0]
 80083d0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80083d4:	4629      	mov	r1, r5
 80083d6:	4b07      	ldr	r3, [pc, #28]	@ (80083f4 <xTaskPriorityDisinherit+0x8c>)
 80083d8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80083dc:	f7fa fb76 	bl	8002acc <vListInsertEnd>
					xReturn = pdTRUE;
 80083e0:	2001      	movs	r0, #1
 80083e2:	e7e5      	b.n	80083b0 <xTaskPriorityDisinherit+0x48>
	BaseType_t xReturn = pdFALSE;
 80083e4:	2000      	movs	r0, #0
	}
 80083e6:	4770      	bx	lr
	BaseType_t xReturn = pdFALSE;
 80083e8:	2000      	movs	r0, #0
 80083ea:	e7e1      	b.n	80083b0 <xTaskPriorityDisinherit+0x48>
 80083ec:	20006d78 	.word	0x20006d78
 80083f0:	2000689c 	.word	0x2000689c
 80083f4:	20006918 	.word	0x20006918

080083f8 <thermistor_init>:
#include "thermistor.h"
#include "utils.h"


void thermistor_init(thermistor_t *thermistor, thermistor_conf_t cfg)
{
 80083f8:	b084      	sub	sp, #16
 80083fa:	b510      	push	{r4, lr}
 80083fc:	ed2d 8b02 	vpush	{d8}
 8008400:	f10d 0c14 	add.w	ip, sp, #20
 8008404:	e88c 000e 	stmia.w	ip, {r1, r2, r3}
    if (thermistor == NULL)
 8008408:	2800      	cmp	r0, #0
 800840a:	d060      	beq.n	80084ce <thermistor_init+0xd6>
 800840c:	4604      	mov	r4, r0
        log_error("Thermistor init failed!");
        return;
    }

    // https://en.wikipedia.org/wiki/Steinhart%E2%80%93Hart_equation
	float l1 = logf(cfg.resistance_1);
 800840e:	ed9d 0a08 	vldr	s0, [sp, #32]
 8008412:	f002 ffa7 	bl	800b364 <logf>
 8008416:	eef0 8a40 	vmov.f32	s17, s0
	float l2 = logf(cfg.resistance_2);
 800841a:	ed9d 0a09 	vldr	s0, [sp, #36]	@ 0x24
 800841e:	f002 ffa1 	bl	800b364 <logf>
 8008422:	eeb0 8a40 	vmov.f32	s16, s0
	float l3 = logf(cfg.resistance_3);
 8008426:	ed9d 0a0a 	vldr	s0, [sp, #40]	@ 0x28
 800842a:	f002 ff9b 	bl	800b364 <logf>

	float y1 = 1 / CELSIUS_TO_KELVIN(cfg.tempC_1);
 800842e:	ed9f 6a2a 	vldr	s12, [pc, #168]	@ 80084d8 <thermistor_init+0xe0>
 8008432:	eddd 7a05 	vldr	s15, [sp, #20]
 8008436:	ee77 7a86 	vadd.f32	s15, s15, s12
 800843a:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
 800843e:	eec5 6aa7 	vdiv.f32	s13, s11, s15
	float y2 = 1 / CELSIUS_TO_KELVIN(cfg.tempC_2);
 8008442:	eddd 7a06 	vldr	s15, [sp, #24]
 8008446:	ee77 7a86 	vadd.f32	s15, s15, s12
 800844a:	ee85 7aa7 	vdiv.f32	s14, s11, s15
	float y3 = 1 / CELSIUS_TO_KELVIN(cfg.tempC_3);
 800844e:	eddd 7a07 	vldr	s15, [sp, #28]
 8008452:	ee77 7a86 	vadd.f32	s15, s15, s12
 8008456:	ee85 6aa7 	vdiv.f32	s12, s11, s15

	float u2 = (y2 - y1) / (l2 - l1);
 800845a:	ee37 7a66 	vsub.f32	s14, s14, s13
 800845e:	ee78 5a68 	vsub.f32	s11, s16, s17
 8008462:	eec7 7a25 	vdiv.f32	s15, s14, s11
	float u3 = (y3 - y1) / (l3 - l1);
 8008466:	ee36 6a66 	vsub.f32	s12, s12, s13
 800846a:	ee70 5a68 	vsub.f32	s11, s0, s17
 800846e:	ee86 7a25 	vdiv.f32	s14, s12, s11

	thermistor->m_c = ((u3 - u2) / (l3 - l2)) / (l1 + l2 + l3);
 8008472:	ee37 7a67 	vsub.f32	s14, s14, s15
 8008476:	ee30 6a48 	vsub.f32	s12, s0, s16
 800847a:	eec7 5a06 	vdiv.f32	s11, s14, s12
 800847e:	ee38 7a88 	vadd.f32	s14, s17, s16
 8008482:	ee37 7a00 	vadd.f32	s14, s14, s0
 8008486:	ee85 6a87 	vdiv.f32	s12, s11, s14
 800848a:	ed84 6a05 	vstr	s12, [r4, #20]
	thermistor->m_b = u2 - thermistor->m_c * (l1 * l1 + l1 * l2 + l2 * l2);
 800848e:	ee68 5aa8 	vmul.f32	s11, s17, s17
 8008492:	ee28 7a88 	vmul.f32	s14, s17, s16
 8008496:	ee35 7a87 	vadd.f32	s14, s11, s14
 800849a:	ee28 8a08 	vmul.f32	s16, s16, s16
 800849e:	ee37 7a08 	vadd.f32	s14, s14, s16
 80084a2:	ee26 7a07 	vmul.f32	s14, s12, s14
 80084a6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80084aa:	edc4 7a04 	vstr	s15, [r4, #16]
	thermistor->m_a = y1 - (thermistor->m_b + l1 * l1 * thermistor->m_c) * l1;
 80084ae:	ee26 6a25 	vmul.f32	s12, s12, s11
 80084b2:	ee77 7a86 	vadd.f32	s15, s15, s12
 80084b6:	ee27 0aa8 	vmul.f32	s0, s15, s17
 80084ba:	ee76 6ac0 	vsub.f32	s13, s13, s0
 80084be:	edc4 6a03 	vstr	s13, [r4, #12]
	if (tempAt90percentPoint > cfg.tempC_3)
    {
        log_error("Thermistor configuration has failed 90% test");
	}
    */
}
 80084c2:	ecbd 8b02 	vpop	{d8}
 80084c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80084ca:	b004      	add	sp, #16
 80084cc:	4770      	bx	lr
        log_error("Thermistor init failed!");
 80084ce:	4803      	ldr	r0, [pc, #12]	@ (80084dc <thermistor_init+0xe4>)
 80084d0:	f7f9 fd64 	bl	8001f9c <log_error>
        return;
 80084d4:	e7f5      	b.n	80084c2 <thermistor_init+0xca>
 80084d6:	bf00      	nop
 80084d8:	43889333 	.word	0x43889333
 80084dc:	0800bc68 	.word	0x0800bc68

080084e0 <thermistor_get_temp>:

temperature_t thermistor_get_temp(thermistor_t *thermistor)
{
 80084e0:	b510      	push	{r4, lr}
 80084e2:	4604      	mov	r4, r0
    // This resistance should have already been validated - only
	// thing we can check is that it's non-negative
    float ohms = resistor_get_resistance(&thermistor->resistor);
 80084e4:	f7fb f9d8 	bl	8003898 <resistor_get_resistance>
    {
        log_error("Thermistor invalid resistance!");
        return NAN;
    }

	float lnR = logf(ohms);
 80084e8:	f002 ff3c 	bl	800b364 <logf>

	float lnR3 = lnR * lnR * lnR;
 80084ec:	ee60 6a00 	vmul.f32	s13, s0, s0
 80084f0:	ee66 6a80 	vmul.f32	s13, s13, s0

	float recip = thermistor->m_a + thermistor->m_b * lnR + thermistor->m_c * lnR3;
 80084f4:	edd4 7a03 	vldr	s15, [r4, #12]
 80084f8:	ed94 7a04 	vldr	s14, [r4, #16]
 80084fc:	ee27 7a00 	vmul.f32	s14, s14, s0
 8008500:	ee77 7a87 	vadd.f32	s15, s15, s14
 8008504:	ed94 7a05 	vldr	s14, [r4, #20]
 8008508:	ee27 7a26 	vmul.f32	s14, s14, s13
 800850c:	ee77 7a87 	vadd.f32	s15, s15, s14

	float kelvin = 1 / recip;
 8008510:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008514:	ee87 0a27 	vdiv.f32	s0, s14, s15

	float celsius = KELVIN_TO_CELSIUS(kelvin);
 8008518:	eddf 7a0f 	vldr	s15, [pc, #60]	@ 8008558 <thermistor_get_temp+0x78>
 800851c:	ee30 0a67 	vsub.f32	s0, s0, s15

	// bounds check result - please don't try to run this SGC when it is colder than -50C :)
	if (celsius < -50) {
 8008520:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 800855c <thermistor_get_temp+0x7c>
 8008524:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8008528:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800852c:	d407      	bmi.n	800853e <thermistor_get_temp+0x5e>
		log_error("Thermistor temp bound check failed!");
        return NAN;
	}

	if (celsius > 250) {
 800852e:	eddf 7a0c 	vldr	s15, [pc, #48]	@ 8008560 <thermistor_get_temp+0x80>
 8008532:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8008536:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800853a:	dc06      	bgt.n	800854a <thermistor_get_temp+0x6a>
		log_error("Thermistor temp bound check failed!");
        return NAN;
	}

	return celsius;
 800853c:	bd10      	pop	{r4, pc}
		log_error("Thermistor temp bound check failed!");
 800853e:	4809      	ldr	r0, [pc, #36]	@ (8008564 <thermistor_get_temp+0x84>)
 8008540:	f7f9 fd2c 	bl	8001f9c <log_error>
        return NAN;
 8008544:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 8008568 <thermistor_get_temp+0x88>
 8008548:	e7f8      	b.n	800853c <thermistor_get_temp+0x5c>
		log_error("Thermistor temp bound check failed!");
 800854a:	4806      	ldr	r0, [pc, #24]	@ (8008564 <thermistor_get_temp+0x84>)
 800854c:	f7f9 fd26 	bl	8001f9c <log_error>
        return NAN;
 8008550:	ed9f 0a05 	vldr	s0, [pc, #20]	@ 8008568 <thermistor_get_temp+0x88>
 8008554:	e7f2      	b.n	800853c <thermistor_get_temp+0x5c>
 8008556:	bf00      	nop
 8008558:	43889333 	.word	0x43889333
 800855c:	c2480000 	.word	0xc2480000
 8008560:	437a0000 	.word	0x437a0000
 8008564:	0800bc80 	.word	0x0800bc80
 8008568:	7fc00000 	.word	0x7fc00000

0800856c <MX_TIM2_Init>:
  HAL_TIM_MspPostInit(&htim1);

}
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800856c:	b500      	push	{lr}
 800856e:	b08f      	sub	sp, #60	@ 0x3c

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8008570:	2300      	movs	r3, #0
 8008572:	930a      	str	r3, [sp, #40]	@ 0x28
 8008574:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008576:	930c      	str	r3, [sp, #48]	@ 0x30
 8008578:	930d      	str	r3, [sp, #52]	@ 0x34
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800857a:	9308      	str	r3, [sp, #32]
 800857c:	9309      	str	r3, [sp, #36]	@ 0x24
  TIM_OC_InitTypeDef sConfigOC = {0};
 800857e:	9301      	str	r3, [sp, #4]
 8008580:	9302      	str	r3, [sp, #8]
 8008582:	9303      	str	r3, [sp, #12]
 8008584:	9304      	str	r3, [sp, #16]
 8008586:	9305      	str	r3, [sp, #20]
 8008588:	9306      	str	r3, [sp, #24]
 800858a:	9307      	str	r3, [sp, #28]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800858c:	481f      	ldr	r0, [pc, #124]	@ (800860c <MX_TIM2_Init+0xa0>)
 800858e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8008592:	6002      	str	r2, [r0, #0]
  htim2.Init.Prescaler = 84-1;
 8008594:	2253      	movs	r2, #83	@ 0x53
 8008596:	6042      	str	r2, [r0, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008598:	6083      	str	r3, [r0, #8]
  htim2.Init.Period = 4294967295;
 800859a:	f04f 32ff 	mov.w	r2, #4294967295
 800859e:	60c2      	str	r2, [r0, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80085a0:	6103      	str	r3, [r0, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80085a2:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80085a4:	f7fd ff9e 	bl	80064e4 <HAL_TIM_Base_Init>
 80085a8:	bb00      	cbnz	r0, 80085ec <MX_TIM2_Init+0x80>
  {
    Error_Handler();
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80085aa:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80085ae:	930a      	str	r3, [sp, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80085b0:	a90a      	add	r1, sp, #40	@ 0x28
 80085b2:	4816      	ldr	r0, [pc, #88]	@ (800860c <MX_TIM2_Init+0xa0>)
 80085b4:	f7fe f8f2 	bl	800679c <HAL_TIM_ConfigClockSource>
 80085b8:	b9d8      	cbnz	r0, 80085f2 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
  }
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 80085ba:	4814      	ldr	r0, [pc, #80]	@ (800860c <MX_TIM2_Init+0xa0>)
 80085bc:	f7fd ffbe 	bl	800653c <HAL_TIM_OC_Init>
 80085c0:	b9d0      	cbnz	r0, 80085f8 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80085c2:	2300      	movs	r3, #0
 80085c4:	9308      	str	r3, [sp, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80085c6:	9309      	str	r3, [sp, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80085c8:	a908      	add	r1, sp, #32
 80085ca:	4810      	ldr	r0, [pc, #64]	@ (800860c <MX_TIM2_Init+0xa0>)
 80085cc:	f7fe fa90 	bl	8006af0 <HAL_TIMEx_MasterConfigSynchronization>
 80085d0:	b9a8      	cbnz	r0, 80085fe <MX_TIM2_Init+0x92>
  {
    Error_Handler();
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 80085d2:	2200      	movs	r2, #0
 80085d4:	9201      	str	r2, [sp, #4]
  sConfigOC.Pulse = 0;
 80085d6:	9202      	str	r2, [sp, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80085d8:	9203      	str	r2, [sp, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80085da:	9205      	str	r2, [sp, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80085dc:	a901      	add	r1, sp, #4
 80085de:	480b      	ldr	r0, [pc, #44]	@ (800860c <MX_TIM2_Init+0xa0>)
 80085e0:	f7fe f832 	bl	8006648 <HAL_TIM_OC_ConfigChannel>
 80085e4:	b970      	cbnz	r0, 8008604 <MX_TIM2_Init+0x98>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80085e6:	b00f      	add	sp, #60	@ 0x3c
 80085e8:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 80085ec:	f7fa fabe 	bl	8002b6c <Error_Handler>
 80085f0:	e7db      	b.n	80085aa <MX_TIM2_Init+0x3e>
    Error_Handler();
 80085f2:	f7fa fabb 	bl	8002b6c <Error_Handler>
 80085f6:	e7e0      	b.n	80085ba <MX_TIM2_Init+0x4e>
    Error_Handler();
 80085f8:	f7fa fab8 	bl	8002b6c <Error_Handler>
 80085fc:	e7e1      	b.n	80085c2 <MX_TIM2_Init+0x56>
    Error_Handler();
 80085fe:	f7fa fab5 	bl	8002b6c <Error_Handler>
 8008602:	e7e6      	b.n	80085d2 <MX_TIM2_Init+0x66>
    Error_Handler();
 8008604:	f7fa fab2 	bl	8002b6c <Error_Handler>
}
 8008608:	e7ed      	b.n	80085e6 <MX_TIM2_Init+0x7a>
 800860a:	bf00      	nop
 800860c:	20006dc4 	.word	0x20006dc4

08008610 <HAL_TIM_PWM_MspInit>:
  HAL_TIM_MspPostInit(&htim3);

}

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8008610:	b500      	push	{lr}
 8008612:	b083      	sub	sp, #12

  if(tim_pwmHandle->Instance==TIM1)
 8008614:	6803      	ldr	r3, [r0, #0]
 8008616:	4a15      	ldr	r2, [pc, #84]	@ (800866c <HAL_TIM_PWM_MspInit+0x5c>)
 8008618:	4293      	cmp	r3, r2
 800861a:	d005      	beq.n	8008628 <HAL_TIM_PWM_MspInit+0x18>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
  else if(tim_pwmHandle->Instance==TIM3)
 800861c:	4a14      	ldr	r2, [pc, #80]	@ (8008670 <HAL_TIM_PWM_MspInit+0x60>)
 800861e:	4293      	cmp	r3, r2
 8008620:	d016      	beq.n	8008650 <HAL_TIM_PWM_MspInit+0x40>
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8008622:	b003      	add	sp, #12
 8008624:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_TIM1_CLK_ENABLE();
 8008628:	2200      	movs	r2, #0
 800862a:	9200      	str	r2, [sp, #0]
 800862c:	4b11      	ldr	r3, [pc, #68]	@ (8008674 <HAL_TIM_PWM_MspInit+0x64>)
 800862e:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8008630:	f041 0101 	orr.w	r1, r1, #1
 8008634:	6459      	str	r1, [r3, #68]	@ 0x44
 8008636:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008638:	f003 0301 	and.w	r3, r3, #1
 800863c:	9300      	str	r3, [sp, #0]
 800863e:	9b00      	ldr	r3, [sp, #0]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 15, 0);
 8008640:	210f      	movs	r1, #15
 8008642:	201a      	movs	r0, #26
 8008644:	f7fb ff78 	bl	8004538 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8008648:	201a      	movs	r0, #26
 800864a:	f7fb ff85 	bl	8004558 <HAL_NVIC_EnableIRQ>
 800864e:	e7e8      	b.n	8008622 <HAL_TIM_PWM_MspInit+0x12>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8008650:	2300      	movs	r3, #0
 8008652:	9301      	str	r3, [sp, #4]
 8008654:	4b07      	ldr	r3, [pc, #28]	@ (8008674 <HAL_TIM_PWM_MspInit+0x64>)
 8008656:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008658:	f042 0202 	orr.w	r2, r2, #2
 800865c:	641a      	str	r2, [r3, #64]	@ 0x40
 800865e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008660:	f003 0302 	and.w	r3, r3, #2
 8008664:	9301      	str	r3, [sp, #4]
 8008666:	9b01      	ldr	r3, [sp, #4]
}
 8008668:	e7db      	b.n	8008622 <HAL_TIM_PWM_MspInit+0x12>
 800866a:	bf00      	nop
 800866c:	40010000 	.word	0x40010000
 8008670:	40000400 	.word	0x40000400
 8008674:	40023800 	.word	0x40023800

08008678 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{

  if(tim_baseHandle->Instance==TIM2)
 8008678:	6803      	ldr	r3, [r0, #0]
 800867a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800867e:	d000      	beq.n	8008682 <HAL_TIM_Base_MspInit+0xa>
 8008680:	4770      	bx	lr
{
 8008682:	b500      	push	{lr}
 8008684:	b083      	sub	sp, #12
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8008686:	2200      	movs	r2, #0
 8008688:	9201      	str	r2, [sp, #4]
 800868a:	f503 330e 	add.w	r3, r3, #145408	@ 0x23800
 800868e:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 8008690:	f041 0101 	orr.w	r1, r1, #1
 8008694:	6419      	str	r1, [r3, #64]	@ 0x40
 8008696:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008698:	f003 0301 	and.w	r3, r3, #1
 800869c:	9301      	str	r3, [sp, #4]
 800869e:	9b01      	ldr	r3, [sp, #4]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 80086a0:	2105      	movs	r1, #5
 80086a2:	201c      	movs	r0, #28
 80086a4:	f7fb ff48 	bl	8004538 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80086a8:	201c      	movs	r0, #28
 80086aa:	f7fb ff55 	bl	8004558 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 80086ae:	b003      	add	sp, #12
 80086b0:	f85d fb04 	ldr.w	pc, [sp], #4

080086b4 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80086b4:	b500      	push	{lr}
 80086b6:	b089      	sub	sp, #36	@ 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80086b8:	2300      	movs	r3, #0
 80086ba:	9303      	str	r3, [sp, #12]
 80086bc:	9304      	str	r3, [sp, #16]
 80086be:	9305      	str	r3, [sp, #20]
 80086c0:	9306      	str	r3, [sp, #24]
 80086c2:	9307      	str	r3, [sp, #28]
  if(timHandle->Instance==TIM1)
 80086c4:	6803      	ldr	r3, [r0, #0]
 80086c6:	4a1c      	ldr	r2, [pc, #112]	@ (8008738 <HAL_TIM_MspPostInit+0x84>)
 80086c8:	4293      	cmp	r3, r2
 80086ca:	d005      	beq.n	80086d8 <HAL_TIM_MspPostInit+0x24>

  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }
  else if(timHandle->Instance==TIM3)
 80086cc:	4a1b      	ldr	r2, [pc, #108]	@ (800873c <HAL_TIM_MspPostInit+0x88>)
 80086ce:	4293      	cmp	r3, r2
 80086d0:	d01a      	beq.n	8008708 <HAL_TIM_MspPostInit+0x54>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80086d2:	b009      	add	sp, #36	@ 0x24
 80086d4:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80086d8:	2300      	movs	r3, #0
 80086da:	9301      	str	r3, [sp, #4]
 80086dc:	4b18      	ldr	r3, [pc, #96]	@ (8008740 <HAL_TIM_MspPostInit+0x8c>)
 80086de:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80086e0:	f042 0201 	orr.w	r2, r2, #1
 80086e4:	631a      	str	r2, [r3, #48]	@ 0x30
 80086e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80086e8:	f003 0301 	and.w	r3, r3, #1
 80086ec:	9301      	str	r3, [sp, #4]
 80086ee:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = PWM_OUT_1_Pin|PWM_OUT_2_Pin|PWM_OUT_3_Pin;
 80086f0:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 80086f4:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80086f6:	2302      	movs	r3, #2
 80086f8:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80086fa:	2301      	movs	r3, #1
 80086fc:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80086fe:	a903      	add	r1, sp, #12
 8008700:	4810      	ldr	r0, [pc, #64]	@ (8008744 <HAL_TIM_MspPostInit+0x90>)
 8008702:	f7fc f941 	bl	8004988 <HAL_GPIO_Init>
 8008706:	e7e4      	b.n	80086d2 <HAL_TIM_MspPostInit+0x1e>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8008708:	2300      	movs	r3, #0
 800870a:	9302      	str	r3, [sp, #8]
 800870c:	4b0c      	ldr	r3, [pc, #48]	@ (8008740 <HAL_TIM_MspPostInit+0x8c>)
 800870e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008710:	f042 0204 	orr.w	r2, r2, #4
 8008714:	631a      	str	r2, [r3, #48]	@ 0x30
 8008716:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008718:	f003 0304 	and.w	r3, r3, #4
 800871c:	9302      	str	r3, [sp, #8]
 800871e:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = DC_MOTOR2_1_Pin|DC_MOTOR2_2_Pin|DC_MOTOR1_1_Pin|DC_MOTOR1_2_Pin;
 8008720:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 8008724:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008726:	2302      	movs	r3, #2
 8008728:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800872a:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800872c:	a903      	add	r1, sp, #12
 800872e:	4806      	ldr	r0, [pc, #24]	@ (8008748 <HAL_TIM_MspPostInit+0x94>)
 8008730:	f7fc f92a 	bl	8004988 <HAL_GPIO_Init>
}
 8008734:	e7cd      	b.n	80086d2 <HAL_TIM_MspPostInit+0x1e>
 8008736:	bf00      	nop
 8008738:	40010000 	.word	0x40010000
 800873c:	40000400 	.word	0x40000400
 8008740:	40023800 	.word	0x40023800
 8008744:	40020000 	.word	0x40020000
 8008748:	40020800 	.word	0x40020800

0800874c <MX_TIM1_Init>:
{
 800874c:	b510      	push	{r4, lr}
 800874e:	b092      	sub	sp, #72	@ 0x48
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8008750:	2400      	movs	r4, #0
 8008752:	9410      	str	r4, [sp, #64]	@ 0x40
 8008754:	9411      	str	r4, [sp, #68]	@ 0x44
  TIM_OC_InitTypeDef sConfigOC = {0};
 8008756:	9409      	str	r4, [sp, #36]	@ 0x24
 8008758:	940a      	str	r4, [sp, #40]	@ 0x28
 800875a:	940b      	str	r4, [sp, #44]	@ 0x2c
 800875c:	940c      	str	r4, [sp, #48]	@ 0x30
 800875e:	940d      	str	r4, [sp, #52]	@ 0x34
 8008760:	940e      	str	r4, [sp, #56]	@ 0x38
 8008762:	940f      	str	r4, [sp, #60]	@ 0x3c
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8008764:	2220      	movs	r2, #32
 8008766:	4621      	mov	r1, r4
 8008768:	a801      	add	r0, sp, #4
 800876a:	f002 f977 	bl	800aa5c <memset>
  htim1.Instance = TIM1;
 800876e:	482c      	ldr	r0, [pc, #176]	@ (8008820 <MX_TIM1_Init+0xd4>)
 8008770:	4b2c      	ldr	r3, [pc, #176]	@ (8008824 <MX_TIM1_Init+0xd8>)
 8008772:	6003      	str	r3, [r0, #0]
  htim1.Init.Prescaler = 0;
 8008774:	6044      	str	r4, [r0, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008776:	6084      	str	r4, [r0, #8]
  htim1.Init.Period = 65535;
 8008778:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800877c:	60c3      	str	r3, [r0, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800877e:	6104      	str	r4, [r0, #16]
  htim1.Init.RepetitionCounter = 0;
 8008780:	6144      	str	r4, [r0, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8008782:	6184      	str	r4, [r0, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8008784:	f7fd ff06 	bl	8006594 <HAL_TIM_PWM_Init>
 8008788:	2800      	cmp	r0, #0
 800878a:	d136      	bne.n	80087fa <MX_TIM1_Init+0xae>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800878c:	2300      	movs	r3, #0
 800878e:	9310      	str	r3, [sp, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8008790:	9311      	str	r3, [sp, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8008792:	a910      	add	r1, sp, #64	@ 0x40
 8008794:	4822      	ldr	r0, [pc, #136]	@ (8008820 <MX_TIM1_Init+0xd4>)
 8008796:	f7fe f9ab 	bl	8006af0 <HAL_TIMEx_MasterConfigSynchronization>
 800879a:	2800      	cmp	r0, #0
 800879c:	d130      	bne.n	8008800 <MX_TIM1_Init+0xb4>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800879e:	2360      	movs	r3, #96	@ 0x60
 80087a0:	9309      	str	r3, [sp, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 80087a2:	2200      	movs	r2, #0
 80087a4:	920a      	str	r2, [sp, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80087a6:	920b      	str	r2, [sp, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80087a8:	920c      	str	r2, [sp, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80087aa:	920d      	str	r2, [sp, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80087ac:	920e      	str	r2, [sp, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80087ae:	920f      	str	r2, [sp, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80087b0:	a909      	add	r1, sp, #36	@ 0x24
 80087b2:	481b      	ldr	r0, [pc, #108]	@ (8008820 <MX_TIM1_Init+0xd4>)
 80087b4:	f7fd ff77 	bl	80066a6 <HAL_TIM_PWM_ConfigChannel>
 80087b8:	bb28      	cbnz	r0, 8008806 <MX_TIM1_Init+0xba>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80087ba:	2204      	movs	r2, #4
 80087bc:	a909      	add	r1, sp, #36	@ 0x24
 80087be:	4818      	ldr	r0, [pc, #96]	@ (8008820 <MX_TIM1_Init+0xd4>)
 80087c0:	f7fd ff71 	bl	80066a6 <HAL_TIM_PWM_ConfigChannel>
 80087c4:	bb10      	cbnz	r0, 800880c <MX_TIM1_Init+0xc0>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80087c6:	2208      	movs	r2, #8
 80087c8:	a909      	add	r1, sp, #36	@ 0x24
 80087ca:	4815      	ldr	r0, [pc, #84]	@ (8008820 <MX_TIM1_Init+0xd4>)
 80087cc:	f7fd ff6b 	bl	80066a6 <HAL_TIM_PWM_ConfigChannel>
 80087d0:	b9f8      	cbnz	r0, 8008812 <MX_TIM1_Init+0xc6>
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80087d2:	2300      	movs	r3, #0
 80087d4:	9301      	str	r3, [sp, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80087d6:	9302      	str	r3, [sp, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80087d8:	9303      	str	r3, [sp, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80087da:	9304      	str	r3, [sp, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80087dc:	9305      	str	r3, [sp, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80087de:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80087e2:	9206      	str	r2, [sp, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80087e4:	9308      	str	r3, [sp, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80087e6:	a901      	add	r1, sp, #4
 80087e8:	480d      	ldr	r0, [pc, #52]	@ (8008820 <MX_TIM1_Init+0xd4>)
 80087ea:	f7fe f9bf 	bl	8006b6c <HAL_TIMEx_ConfigBreakDeadTime>
 80087ee:	b998      	cbnz	r0, 8008818 <MX_TIM1_Init+0xcc>
  HAL_TIM_MspPostInit(&htim1);
 80087f0:	480b      	ldr	r0, [pc, #44]	@ (8008820 <MX_TIM1_Init+0xd4>)
 80087f2:	f7ff ff5f 	bl	80086b4 <HAL_TIM_MspPostInit>
}
 80087f6:	b012      	add	sp, #72	@ 0x48
 80087f8:	bd10      	pop	{r4, pc}
    Error_Handler();
 80087fa:	f7fa f9b7 	bl	8002b6c <Error_Handler>
 80087fe:	e7c5      	b.n	800878c <MX_TIM1_Init+0x40>
    Error_Handler();
 8008800:	f7fa f9b4 	bl	8002b6c <Error_Handler>
 8008804:	e7cb      	b.n	800879e <MX_TIM1_Init+0x52>
    Error_Handler();
 8008806:	f7fa f9b1 	bl	8002b6c <Error_Handler>
 800880a:	e7d6      	b.n	80087ba <MX_TIM1_Init+0x6e>
    Error_Handler();
 800880c:	f7fa f9ae 	bl	8002b6c <Error_Handler>
 8008810:	e7d9      	b.n	80087c6 <MX_TIM1_Init+0x7a>
    Error_Handler();
 8008812:	f7fa f9ab 	bl	8002b6c <Error_Handler>
 8008816:	e7dc      	b.n	80087d2 <MX_TIM1_Init+0x86>
    Error_Handler();
 8008818:	f7fa f9a8 	bl	8002b6c <Error_Handler>
 800881c:	e7e8      	b.n	80087f0 <MX_TIM1_Init+0xa4>
 800881e:	bf00      	nop
 8008820:	20006e0c 	.word	0x20006e0c
 8008824:	40010000 	.word	0x40010000

08008828 <MX_TIM3_Init>:
{
 8008828:	b500      	push	{lr}
 800882a:	b08b      	sub	sp, #44	@ 0x2c
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800882c:	2300      	movs	r3, #0
 800882e:	9308      	str	r3, [sp, #32]
 8008830:	9309      	str	r3, [sp, #36]	@ 0x24
  TIM_OC_InitTypeDef sConfigOC = {0};
 8008832:	9301      	str	r3, [sp, #4]
 8008834:	9302      	str	r3, [sp, #8]
 8008836:	9303      	str	r3, [sp, #12]
 8008838:	9304      	str	r3, [sp, #16]
 800883a:	9305      	str	r3, [sp, #20]
 800883c:	9306      	str	r3, [sp, #24]
 800883e:	9307      	str	r3, [sp, #28]
  htim3.Instance = TIM3;
 8008840:	4825      	ldr	r0, [pc, #148]	@ (80088d8 <MX_TIM3_Init+0xb0>)
 8008842:	4a26      	ldr	r2, [pc, #152]	@ (80088dc <MX_TIM3_Init+0xb4>)
 8008844:	6002      	str	r2, [r0, #0]
  htim3.Init.Prescaler = 0;
 8008846:	6043      	str	r3, [r0, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008848:	6083      	str	r3, [r0, #8]
  htim3.Init.Period = 65535;
 800884a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800884e:	60c2      	str	r2, [r0, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8008850:	6103      	str	r3, [r0, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8008852:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8008854:	f7fd fe9e 	bl	8006594 <HAL_TIM_PWM_Init>
 8008858:	bb58      	cbnz	r0, 80088b2 <MX_TIM3_Init+0x8a>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800885a:	2300      	movs	r3, #0
 800885c:	9308      	str	r3, [sp, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800885e:	9309      	str	r3, [sp, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8008860:	a908      	add	r1, sp, #32
 8008862:	481d      	ldr	r0, [pc, #116]	@ (80088d8 <MX_TIM3_Init+0xb0>)
 8008864:	f7fe f944 	bl	8006af0 <HAL_TIMEx_MasterConfigSynchronization>
 8008868:	bb30      	cbnz	r0, 80088b8 <MX_TIM3_Init+0x90>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800886a:	2360      	movs	r3, #96	@ 0x60
 800886c:	9301      	str	r3, [sp, #4]
  sConfigOC.Pulse = 0;
 800886e:	2200      	movs	r2, #0
 8008870:	9202      	str	r2, [sp, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8008872:	9203      	str	r2, [sp, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8008874:	9205      	str	r2, [sp, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8008876:	a901      	add	r1, sp, #4
 8008878:	4817      	ldr	r0, [pc, #92]	@ (80088d8 <MX_TIM3_Init+0xb0>)
 800887a:	f7fd ff14 	bl	80066a6 <HAL_TIM_PWM_ConfigChannel>
 800887e:	b9f0      	cbnz	r0, 80088be <MX_TIM3_Init+0x96>
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8008880:	2204      	movs	r2, #4
 8008882:	eb0d 0102 	add.w	r1, sp, r2
 8008886:	4814      	ldr	r0, [pc, #80]	@ (80088d8 <MX_TIM3_Init+0xb0>)
 8008888:	f7fd ff0d 	bl	80066a6 <HAL_TIM_PWM_ConfigChannel>
 800888c:	b9d0      	cbnz	r0, 80088c4 <MX_TIM3_Init+0x9c>
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800888e:	2208      	movs	r2, #8
 8008890:	a901      	add	r1, sp, #4
 8008892:	4811      	ldr	r0, [pc, #68]	@ (80088d8 <MX_TIM3_Init+0xb0>)
 8008894:	f7fd ff07 	bl	80066a6 <HAL_TIM_PWM_ConfigChannel>
 8008898:	b9b8      	cbnz	r0, 80088ca <MX_TIM3_Init+0xa2>
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800889a:	220c      	movs	r2, #12
 800889c:	a901      	add	r1, sp, #4
 800889e:	480e      	ldr	r0, [pc, #56]	@ (80088d8 <MX_TIM3_Init+0xb0>)
 80088a0:	f7fd ff01 	bl	80066a6 <HAL_TIM_PWM_ConfigChannel>
 80088a4:	b9a0      	cbnz	r0, 80088d0 <MX_TIM3_Init+0xa8>
  HAL_TIM_MspPostInit(&htim3);
 80088a6:	480c      	ldr	r0, [pc, #48]	@ (80088d8 <MX_TIM3_Init+0xb0>)
 80088a8:	f7ff ff04 	bl	80086b4 <HAL_TIM_MspPostInit>
}
 80088ac:	b00b      	add	sp, #44	@ 0x2c
 80088ae:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 80088b2:	f7fa f95b 	bl	8002b6c <Error_Handler>
 80088b6:	e7d0      	b.n	800885a <MX_TIM3_Init+0x32>
    Error_Handler();
 80088b8:	f7fa f958 	bl	8002b6c <Error_Handler>
 80088bc:	e7d5      	b.n	800886a <MX_TIM3_Init+0x42>
    Error_Handler();
 80088be:	f7fa f955 	bl	8002b6c <Error_Handler>
 80088c2:	e7dd      	b.n	8008880 <MX_TIM3_Init+0x58>
    Error_Handler();
 80088c4:	f7fa f952 	bl	8002b6c <Error_Handler>
 80088c8:	e7e1      	b.n	800888e <MX_TIM3_Init+0x66>
    Error_Handler();
 80088ca:	f7fa f94f 	bl	8002b6c <Error_Handler>
 80088ce:	e7e4      	b.n	800889a <MX_TIM3_Init+0x72>
    Error_Handler();
 80088d0:	f7fa f94c 	bl	8002b6c <Error_Handler>
 80088d4:	e7e7      	b.n	80088a6 <MX_TIM3_Init+0x7e>
 80088d6:	bf00      	nop
 80088d8:	20006d7c 	.word	0x20006d7c
 80088dc:	40000400 	.word	0x40000400

080088e0 <prvGetNextExpireTime>:
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80088e0:	4b06      	ldr	r3, [pc, #24]	@ (80088fc <prvGetNextExpireTime+0x1c>)
 80088e2:	681a      	ldr	r2, [r3, #0]
 80088e4:	6813      	ldr	r3, [r2, #0]
 80088e6:	b92b      	cbnz	r3, 80088f4 <prvGetNextExpireTime+0x14>
 80088e8:	2301      	movs	r3, #1
 80088ea:	6003      	str	r3, [r0, #0]
	if( *pxListWasEmpty == pdFALSE )
 80088ec:	b923      	cbnz	r3, 80088f8 <prvGetNextExpireTime+0x18>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80088ee:	68d3      	ldr	r3, [r2, #12]
 80088f0:	6818      	ldr	r0, [r3, #0]
 80088f2:	4770      	bx	lr
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80088f4:	2300      	movs	r3, #0
 80088f6:	e7f8      	b.n	80088ea <prvGetNextExpireTime+0xa>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80088f8:	2000      	movs	r0, #0
	}

	return xNextExpireTime;
}
 80088fa:	4770      	bx	lr
 80088fc:	20006f54 	.word	0x20006f54

08008900 <prvInsertTimerInActiveList>:
	return xTimeNow;
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8008900:	b508      	push	{r3, lr}
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8008902:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008904:	6100      	str	r0, [r0, #16]

	if( xNextExpiryTime <= xTimeNow )
 8008906:	4291      	cmp	r1, r2
 8008908:	d80c      	bhi.n	8008924 <prvInsertTimerInActiveList+0x24>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800890a:	1ad2      	subs	r2, r2, r3
 800890c:	6983      	ldr	r3, [r0, #24]
 800890e:	429a      	cmp	r2, r3
 8008910:	d301      	bcc.n	8008916 <prvInsertTimerInActiveList+0x16>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8008912:	2001      	movs	r0, #1
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
		}
	}

	return xProcessTimerNow;
}
 8008914:	bd08      	pop	{r3, pc}
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8008916:	1d01      	adds	r1, r0, #4
 8008918:	4b09      	ldr	r3, [pc, #36]	@ (8008940 <prvInsertTimerInActiveList+0x40>)
 800891a:	6818      	ldr	r0, [r3, #0]
 800891c:	f7fa f8e1 	bl	8002ae2 <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 8008920:	2000      	movs	r0, #0
 8008922:	e7f7      	b.n	8008914 <prvInsertTimerInActiveList+0x14>
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8008924:	429a      	cmp	r2, r3
 8008926:	d201      	bcs.n	800892c <prvInsertTimerInActiveList+0x2c>
 8008928:	4299      	cmp	r1, r3
 800892a:	d206      	bcs.n	800893a <prvInsertTimerInActiveList+0x3a>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800892c:	1d01      	adds	r1, r0, #4
 800892e:	4b05      	ldr	r3, [pc, #20]	@ (8008944 <prvInsertTimerInActiveList+0x44>)
 8008930:	6818      	ldr	r0, [r3, #0]
 8008932:	f7fa f8d6 	bl	8002ae2 <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 8008936:	2000      	movs	r0, #0
 8008938:	e7ec      	b.n	8008914 <prvInsertTimerInActiveList+0x14>
			xProcessTimerNow = pdTRUE;
 800893a:	2001      	movs	r0, #1
	return xProcessTimerNow;
 800893c:	e7ea      	b.n	8008914 <prvInsertTimerInActiveList+0x14>
 800893e:	bf00      	nop
 8008940:	20006f50 	.word	0x20006f50
 8008944:	20006f54 	.word	0x20006f54

08008948 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8008948:	b530      	push	{r4, r5, lr}
 800894a:	b083      	sub	sp, #12
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800894c:	f7fa fa72 	bl	8002e34 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8008950:	4b11      	ldr	r3, [pc, #68]	@ (8008998 <prvCheckForValidListAndQueue+0x50>)
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	b11b      	cbz	r3, 800895e <prvCheckForValidListAndQueue+0x16>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008956:	f7fa fa8f 	bl	8002e78 <vPortExitCritical>
}
 800895a:	b003      	add	sp, #12
 800895c:	bd30      	pop	{r4, r5, pc}
			vListInitialise( &xActiveTimerList1 );
 800895e:	4d0f      	ldr	r5, [pc, #60]	@ (800899c <prvCheckForValidListAndQueue+0x54>)
 8008960:	4628      	mov	r0, r5
 8008962:	f7fa f8a5 	bl	8002ab0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8008966:	4c0e      	ldr	r4, [pc, #56]	@ (80089a0 <prvCheckForValidListAndQueue+0x58>)
 8008968:	4620      	mov	r0, r4
 800896a:	f7fa f8a1 	bl	8002ab0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800896e:	4b0d      	ldr	r3, [pc, #52]	@ (80089a4 <prvCheckForValidListAndQueue+0x5c>)
 8008970:	601d      	str	r5, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8008972:	4b0d      	ldr	r3, [pc, #52]	@ (80089a8 <prvCheckForValidListAndQueue+0x60>)
 8008974:	601c      	str	r4, [r3, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8008976:	2300      	movs	r3, #0
 8008978:	9300      	str	r3, [sp, #0]
 800897a:	4b0c      	ldr	r3, [pc, #48]	@ (80089ac <prvCheckForValidListAndQueue+0x64>)
 800897c:	4a0c      	ldr	r2, [pc, #48]	@ (80089b0 <prvCheckForValidListAndQueue+0x68>)
 800897e:	2110      	movs	r1, #16
 8008980:	200a      	movs	r0, #10
 8008982:	f7fa fc9e 	bl	80032c2 <xQueueGenericCreateStatic>
 8008986:	4b04      	ldr	r3, [pc, #16]	@ (8008998 <prvCheckForValidListAndQueue+0x50>)
 8008988:	6018      	str	r0, [r3, #0]
				if( xTimerQueue != NULL )
 800898a:	2800      	cmp	r0, #0
 800898c:	d0e3      	beq.n	8008956 <prvCheckForValidListAndQueue+0xe>
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800898e:	4909      	ldr	r1, [pc, #36]	@ (80089b4 <prvCheckForValidListAndQueue+0x6c>)
 8008990:	f7fa ff36 	bl	8003800 <vQueueAddToRegistry>
 8008994:	e7df      	b.n	8008956 <prvCheckForValidListAndQueue+0xe>
 8008996:	bf00      	nop
 8008998:	20006f4c 	.word	0x20006f4c
 800899c:	20006f6c 	.word	0x20006f6c
 80089a0:	20006f58 	.word	0x20006f58
 80089a4:	20006f54 	.word	0x20006f54
 80089a8:	20006f50 	.word	0x20006f50
 80089ac:	20006e54 	.word	0x20006e54
 80089b0:	20006ea4 	.word	0x20006ea4
 80089b4:	0800bca4 	.word	0x0800bca4

080089b8 <prvInitialiseNewTimer>:
{
 80089b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80089bc:	9f07      	ldr	r7, [sp, #28]
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 80089be:	b941      	cbnz	r1, 80089d2 <prvInitialiseNewTimer+0x1a>
 80089c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80089c4:	f383 8811 	msr	BASEPRI, r3
 80089c8:	f3bf 8f6f 	isb	sy
 80089cc:	f3bf 8f4f 	dsb	sy
 80089d0:	e7fe      	b.n	80089d0 <prvInitialiseNewTimer+0x18>
 80089d2:	4606      	mov	r6, r0
 80089d4:	4614      	mov	r4, r2
 80089d6:	461d      	mov	r5, r3
 80089d8:	4688      	mov	r8, r1
	if( pxNewTimer != NULL )
 80089da:	b18f      	cbz	r7, 8008a00 <prvInitialiseNewTimer+0x48>
		prvCheckForValidListAndQueue();
 80089dc:	f7ff ffb4 	bl	8008948 <prvCheckForValidListAndQueue>
		pxNewTimer->pcTimerName = pcTimerName;
 80089e0:	603e      	str	r6, [r7, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 80089e2:	f8c7 8018 	str.w	r8, [r7, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 80089e6:	61fd      	str	r5, [r7, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 80089e8:	9b06      	ldr	r3, [sp, #24]
 80089ea:	623b      	str	r3, [r7, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 80089ec:	1d38      	adds	r0, r7, #4
 80089ee:	f7fa f86a 	bl	8002ac6 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 80089f2:	b12c      	cbz	r4, 8008a00 <prvInitialiseNewTimer+0x48>
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 80089f4:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80089f8:	f043 0304 	orr.w	r3, r3, #4
 80089fc:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
}
 8008a00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08008a04 <xTimerCreateTimerTask>:
{
 8008a04:	b510      	push	{r4, lr}
 8008a06:	b088      	sub	sp, #32
	prvCheckForValidListAndQueue();
 8008a08:	f7ff ff9e 	bl	8008948 <prvCheckForValidListAndQueue>
	if( xTimerQueue != NULL )
 8008a0c:	4b12      	ldr	r3, [pc, #72]	@ (8008a58 <xTimerCreateTimerTask+0x54>)
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	b1cb      	cbz	r3, 8008a46 <xTimerCreateTimerTask+0x42>
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8008a12:	2400      	movs	r4, #0
 8008a14:	9405      	str	r4, [sp, #20]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8008a16:	9406      	str	r4, [sp, #24]
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8008a18:	aa07      	add	r2, sp, #28
 8008a1a:	a906      	add	r1, sp, #24
 8008a1c:	a805      	add	r0, sp, #20
 8008a1e:	f7f8 fc21 	bl	8001264 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8008a22:	9b05      	ldr	r3, [sp, #20]
 8008a24:	9302      	str	r3, [sp, #8]
 8008a26:	9b06      	ldr	r3, [sp, #24]
 8008a28:	9301      	str	r3, [sp, #4]
 8008a2a:	2302      	movs	r3, #2
 8008a2c:	9300      	str	r3, [sp, #0]
 8008a2e:	4623      	mov	r3, r4
 8008a30:	9a07      	ldr	r2, [sp, #28]
 8008a32:	490a      	ldr	r1, [pc, #40]	@ (8008a5c <xTimerCreateTimerTask+0x58>)
 8008a34:	480a      	ldr	r0, [pc, #40]	@ (8008a60 <xTimerCreateTimerTask+0x5c>)
 8008a36:	f7ff f975 	bl	8007d24 <xTaskCreateStatic>
 8008a3a:	4b0a      	ldr	r3, [pc, #40]	@ (8008a64 <xTimerCreateTimerTask+0x60>)
 8008a3c:	6018      	str	r0, [r3, #0]
			if( xTimerTaskHandle != NULL )
 8008a3e:	b110      	cbz	r0, 8008a46 <xTimerCreateTimerTask+0x42>
}
 8008a40:	2001      	movs	r0, #1
 8008a42:	b008      	add	sp, #32
 8008a44:	bd10      	pop	{r4, pc}
 8008a46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a4a:	f383 8811 	msr	BASEPRI, r3
 8008a4e:	f3bf 8f6f 	isb	sy
 8008a52:	f3bf 8f4f 	dsb	sy
	configASSERT( xReturn );
 8008a56:	e7fe      	b.n	8008a56 <xTimerCreateTimerTask+0x52>
 8008a58:	20006f4c 	.word	0x20006f4c
 8008a5c:	0800bcac 	.word	0x0800bcac
 8008a60:	08008df5 	.word	0x08008df5
 8008a64:	20006f48 	.word	0x20006f48

08008a68 <xTimerCreate>:
	{
 8008a68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008a6c:	b082      	sub	sp, #8
 8008a6e:	4604      	mov	r4, r0
 8008a70:	4688      	mov	r8, r1
 8008a72:	4617      	mov	r7, r2
 8008a74:	461d      	mov	r5, r3
		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 8008a76:	202c      	movs	r0, #44	@ 0x2c
 8008a78:	f7f9 fcfa 	bl	8002470 <pvPortMalloc>
		if( pxNewTimer != NULL )
 8008a7c:	4606      	mov	r6, r0
 8008a7e:	b158      	cbz	r0, 8008a98 <xTimerCreate+0x30>
			pxNewTimer->ucStatus = 0x00;
 8008a80:	2300      	movs	r3, #0
 8008a82:	f880 3028 	strb.w	r3, [r0, #40]	@ 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8008a86:	9001      	str	r0, [sp, #4]
 8008a88:	9b08      	ldr	r3, [sp, #32]
 8008a8a:	9300      	str	r3, [sp, #0]
 8008a8c:	462b      	mov	r3, r5
 8008a8e:	463a      	mov	r2, r7
 8008a90:	4641      	mov	r1, r8
 8008a92:	4620      	mov	r0, r4
 8008a94:	f7ff ff90 	bl	80089b8 <prvInitialiseNewTimer>
	}
 8008a98:	4630      	mov	r0, r6
 8008a9a:	b002      	add	sp, #8
 8008a9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08008aa0 <xTimerCreateStatic>:
	{
 8008aa0:	b510      	push	{r4, lr}
 8008aa2:	b084      	sub	sp, #16
 8008aa4:	4684      	mov	ip, r0
			volatile size_t xSize = sizeof( StaticTimer_t );
 8008aa6:	202c      	movs	r0, #44	@ 0x2c
 8008aa8:	9003      	str	r0, [sp, #12]
			configASSERT( xSize == sizeof( Timer_t ) );
 8008aaa:	9803      	ldr	r0, [sp, #12]
 8008aac:	282c      	cmp	r0, #44	@ 0x2c
 8008aae:	d008      	beq.n	8008ac2 <xTimerCreateStatic+0x22>
 8008ab0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ab4:	f383 8811 	msr	BASEPRI, r3
 8008ab8:	f3bf 8f6f 	isb	sy
 8008abc:	f3bf 8f4f 	dsb	sy
 8008ac0:	e7fe      	b.n	8008ac0 <xTimerCreateStatic+0x20>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8008ac2:	9803      	ldr	r0, [sp, #12]
		configASSERT( pxTimerBuffer );
 8008ac4:	9807      	ldr	r0, [sp, #28]
 8008ac6:	b160      	cbz	r0, 8008ae2 <xTimerCreateStatic+0x42>
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 8008ac8:	2002      	movs	r0, #2
 8008aca:	9c07      	ldr	r4, [sp, #28]
 8008acc:	f884 0028 	strb.w	r0, [r4, #40]	@ 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8008ad0:	9401      	str	r4, [sp, #4]
 8008ad2:	9806      	ldr	r0, [sp, #24]
 8008ad4:	9000      	str	r0, [sp, #0]
 8008ad6:	4660      	mov	r0, ip
 8008ad8:	f7ff ff6e 	bl	80089b8 <prvInitialiseNewTimer>
	}
 8008adc:	9807      	ldr	r0, [sp, #28]
 8008ade:	b004      	add	sp, #16
 8008ae0:	bd10      	pop	{r4, pc}
 8008ae2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ae6:	f383 8811 	msr	BASEPRI, r3
 8008aea:	f3bf 8f6f 	isb	sy
 8008aee:	f3bf 8f4f 	dsb	sy
		configASSERT( pxTimerBuffer );
 8008af2:	e7fe      	b.n	8008af2 <xTimerCreateStatic+0x52>

08008af4 <xTimerGenericCommand>:
	configASSERT( xTimer );
 8008af4:	b1b8      	cbz	r0, 8008b26 <xTimerGenericCommand+0x32>
 8008af6:	469c      	mov	ip, r3
 8008af8:	4603      	mov	r3, r0
	if( xTimerQueue != NULL )
 8008afa:	4818      	ldr	r0, [pc, #96]	@ (8008b5c <xTimerGenericCommand+0x68>)
 8008afc:	6800      	ldr	r0, [r0, #0]
 8008afe:	b358      	cbz	r0, 8008b58 <xTimerGenericCommand+0x64>
{
 8008b00:	b500      	push	{lr}
 8008b02:	b085      	sub	sp, #20
		xMessage.xMessageID = xCommandID;
 8008b04:	9100      	str	r1, [sp, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8008b06:	9201      	str	r2, [sp, #4]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8008b08:	9302      	str	r3, [sp, #8]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8008b0a:	2905      	cmp	r1, #5
 8008b0c:	dc1c      	bgt.n	8008b48 <xTimerGenericCommand+0x54>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8008b0e:	f7ff fc1b 	bl	8008348 <xTaskGetSchedulerState>
 8008b12:	2802      	cmp	r0, #2
 8008b14:	d010      	beq.n	8008b38 <xTimerGenericCommand+0x44>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8008b16:	2300      	movs	r3, #0
 8008b18:	461a      	mov	r2, r3
 8008b1a:	4669      	mov	r1, sp
 8008b1c:	480f      	ldr	r0, [pc, #60]	@ (8008b5c <xTimerGenericCommand+0x68>)
 8008b1e:	6800      	ldr	r0, [r0, #0]
 8008b20:	f7fa fc3d 	bl	800339e <xQueueGenericSend>
 8008b24:	e015      	b.n	8008b52 <xTimerGenericCommand+0x5e>
 8008b26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b2a:	f383 8811 	msr	BASEPRI, r3
 8008b2e:	f3bf 8f6f 	isb	sy
 8008b32:	f3bf 8f4f 	dsb	sy
	configASSERT( xTimer );
 8008b36:	e7fe      	b.n	8008b36 <xTimerGenericCommand+0x42>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8008b38:	2300      	movs	r3, #0
 8008b3a:	9a06      	ldr	r2, [sp, #24]
 8008b3c:	4669      	mov	r1, sp
 8008b3e:	4807      	ldr	r0, [pc, #28]	@ (8008b5c <xTimerGenericCommand+0x68>)
 8008b40:	6800      	ldr	r0, [r0, #0]
 8008b42:	f7fa fc2c 	bl	800339e <xQueueGenericSend>
 8008b46:	e004      	b.n	8008b52 <xTimerGenericCommand+0x5e>
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8008b48:	2300      	movs	r3, #0
 8008b4a:	4662      	mov	r2, ip
 8008b4c:	4669      	mov	r1, sp
 8008b4e:	f7fa fcea 	bl	8003526 <xQueueGenericSendFromISR>
}
 8008b52:	b005      	add	sp, #20
 8008b54:	f85d fb04 	ldr.w	pc, [sp], #4
BaseType_t xReturn = pdFAIL;
 8008b58:	2000      	movs	r0, #0
}
 8008b5a:	4770      	bx	lr
 8008b5c:	20006f4c 	.word	0x20006f4c

08008b60 <prvSwitchTimerLists>:
{
 8008b60:	b570      	push	{r4, r5, r6, lr}
 8008b62:	b082      	sub	sp, #8
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008b64:	4b1b      	ldr	r3, [pc, #108]	@ (8008bd4 <prvSwitchTimerLists+0x74>)
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	681a      	ldr	r2, [r3, #0]
 8008b6a:	b362      	cbz	r2, 8008bc6 <prvSwitchTimerLists+0x66>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008b6c:	68db      	ldr	r3, [r3, #12]
 8008b6e:	681e      	ldr	r6, [r3, #0]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008b70:	68dc      	ldr	r4, [r3, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008b72:	1d25      	adds	r5, r4, #4
 8008b74:	4628      	mov	r0, r5
 8008b76:	f7f9 ffcd 	bl	8002b14 <uxListRemove>
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008b7a:	6a23      	ldr	r3, [r4, #32]
 8008b7c:	4620      	mov	r0, r4
 8008b7e:	4798      	blx	r3
		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008b80:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 8008b84:	f013 0f04 	tst.w	r3, #4
 8008b88:	d0ec      	beq.n	8008b64 <prvSwitchTimerLists+0x4>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8008b8a:	69a3      	ldr	r3, [r4, #24]
 8008b8c:	4433      	add	r3, r6
			if( xReloadTime > xNextExpireTime )
 8008b8e:	429e      	cmp	r6, r3
 8008b90:	d207      	bcs.n	8008ba2 <prvSwitchTimerLists+0x42>
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8008b92:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008b94:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008b96:	4629      	mov	r1, r5
 8008b98:	4b0e      	ldr	r3, [pc, #56]	@ (8008bd4 <prvSwitchTimerLists+0x74>)
 8008b9a:	6818      	ldr	r0, [r3, #0]
 8008b9c:	f7f9 ffa1 	bl	8002ae2 <vListInsert>
 8008ba0:	e7e0      	b.n	8008b64 <prvSwitchTimerLists+0x4>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008ba2:	2100      	movs	r1, #0
 8008ba4:	9100      	str	r1, [sp, #0]
 8008ba6:	460b      	mov	r3, r1
 8008ba8:	4632      	mov	r2, r6
 8008baa:	4620      	mov	r0, r4
 8008bac:	f7ff ffa2 	bl	8008af4 <xTimerGenericCommand>
				configASSERT( xResult );
 8008bb0:	2800      	cmp	r0, #0
 8008bb2:	d1d7      	bne.n	8008b64 <prvSwitchTimerLists+0x4>
 8008bb4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008bb8:	f383 8811 	msr	BASEPRI, r3
 8008bbc:	f3bf 8f6f 	isb	sy
 8008bc0:	f3bf 8f4f 	dsb	sy
 8008bc4:	e7fe      	b.n	8008bc4 <prvSwitchTimerLists+0x64>
	pxCurrentTimerList = pxOverflowTimerList;
 8008bc6:	4a04      	ldr	r2, [pc, #16]	@ (8008bd8 <prvSwitchTimerLists+0x78>)
 8008bc8:	6810      	ldr	r0, [r2, #0]
 8008bca:	4902      	ldr	r1, [pc, #8]	@ (8008bd4 <prvSwitchTimerLists+0x74>)
 8008bcc:	6008      	str	r0, [r1, #0]
	pxOverflowTimerList = pxTemp;
 8008bce:	6013      	str	r3, [r2, #0]
}
 8008bd0:	b002      	add	sp, #8
 8008bd2:	bd70      	pop	{r4, r5, r6, pc}
 8008bd4:	20006f54 	.word	0x20006f54
 8008bd8:	20006f50 	.word	0x20006f50

08008bdc <prvSampleTimeNow>:
{
 8008bdc:	b538      	push	{r3, r4, r5, lr}
 8008bde:	4605      	mov	r5, r0
	xTimeNow = xTaskGetTickCount();
 8008be0:	f7ff f962 	bl	8007ea8 <xTaskGetTickCount>
 8008be4:	4604      	mov	r4, r0
	if( xTimeNow < xLastTime )
 8008be6:	4b07      	ldr	r3, [pc, #28]	@ (8008c04 <prvSampleTimeNow+0x28>)
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	4283      	cmp	r3, r0
 8008bec:	d805      	bhi.n	8008bfa <prvSampleTimeNow+0x1e>
		*pxTimerListsWereSwitched = pdFALSE;
 8008bee:	2300      	movs	r3, #0
 8008bf0:	602b      	str	r3, [r5, #0]
	xLastTime = xTimeNow;
 8008bf2:	4b04      	ldr	r3, [pc, #16]	@ (8008c04 <prvSampleTimeNow+0x28>)
 8008bf4:	601c      	str	r4, [r3, #0]
}
 8008bf6:	4620      	mov	r0, r4
 8008bf8:	bd38      	pop	{r3, r4, r5, pc}
		prvSwitchTimerLists();
 8008bfa:	f7ff ffb1 	bl	8008b60 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8008bfe:	2301      	movs	r3, #1
 8008c00:	602b      	str	r3, [r5, #0]
 8008c02:	e7f6      	b.n	8008bf2 <prvSampleTimeNow+0x16>
 8008c04:	20006f44 	.word	0x20006f44

08008c08 <prvProcessExpiredTimer>:
{
 8008c08:	b570      	push	{r4, r5, r6, lr}
 8008c0a:	b082      	sub	sp, #8
 8008c0c:	4606      	mov	r6, r0
 8008c0e:	460d      	mov	r5, r1
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008c10:	4917      	ldr	r1, [pc, #92]	@ (8008c70 <prvProcessExpiredTimer+0x68>)
 8008c12:	6809      	ldr	r1, [r1, #0]
 8008c14:	68c9      	ldr	r1, [r1, #12]
 8008c16:	68cc      	ldr	r4, [r1, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008c18:	1d20      	adds	r0, r4, #4
 8008c1a:	f7f9 ff7b 	bl	8002b14 <uxListRemove>
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008c1e:	f894 c028 	ldrb.w	ip, [r4, #40]	@ 0x28
 8008c22:	f01c 0f04 	tst.w	ip, #4
 8008c26:	d108      	bne.n	8008c3a <prvProcessExpiredTimer+0x32>
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008c28:	f02c 0c01 	bic.w	ip, ip, #1
 8008c2c:	f884 c028 	strb.w	ip, [r4, #40]	@ 0x28
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008c30:	6a23      	ldr	r3, [r4, #32]
 8008c32:	4620      	mov	r0, r4
 8008c34:	4798      	blx	r3
}
 8008c36:	b002      	add	sp, #8
 8008c38:	bd70      	pop	{r4, r5, r6, pc}
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8008c3a:	69a1      	ldr	r1, [r4, #24]
 8008c3c:	4633      	mov	r3, r6
 8008c3e:	462a      	mov	r2, r5
 8008c40:	4431      	add	r1, r6
 8008c42:	4620      	mov	r0, r4
 8008c44:	f7ff fe5c 	bl	8008900 <prvInsertTimerInActiveList>
 8008c48:	2800      	cmp	r0, #0
 8008c4a:	d0f1      	beq.n	8008c30 <prvProcessExpiredTimer+0x28>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008c4c:	2100      	movs	r1, #0
 8008c4e:	9100      	str	r1, [sp, #0]
 8008c50:	460b      	mov	r3, r1
 8008c52:	4632      	mov	r2, r6
 8008c54:	4620      	mov	r0, r4
 8008c56:	f7ff ff4d 	bl	8008af4 <xTimerGenericCommand>
			configASSERT( xResult );
 8008c5a:	2800      	cmp	r0, #0
 8008c5c:	d1e8      	bne.n	8008c30 <prvProcessExpiredTimer+0x28>
 8008c5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c62:	f383 8811 	msr	BASEPRI, r3
 8008c66:	f3bf 8f6f 	isb	sy
 8008c6a:	f3bf 8f4f 	dsb	sy
 8008c6e:	e7fe      	b.n	8008c6e <prvProcessExpiredTimer+0x66>
 8008c70:	20006f54 	.word	0x20006f54

08008c74 <prvProcessTimerOrBlockTask>:
{
 8008c74:	b570      	push	{r4, r5, r6, lr}
 8008c76:	b082      	sub	sp, #8
 8008c78:	4606      	mov	r6, r0
 8008c7a:	460c      	mov	r4, r1
	vTaskSuspendAll();
 8008c7c:	f7ff f90c 	bl	8007e98 <vTaskSuspendAll>
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008c80:	a801      	add	r0, sp, #4
 8008c82:	f7ff ffab 	bl	8008bdc <prvSampleTimeNow>
		if( xTimerListsWereSwitched == pdFALSE )
 8008c86:	9b01      	ldr	r3, [sp, #4]
 8008c88:	bb33      	cbnz	r3, 8008cd8 <prvProcessTimerOrBlockTask+0x64>
 8008c8a:	4605      	mov	r5, r0
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8008c8c:	b9e4      	cbnz	r4, 8008cc8 <prvProcessTimerOrBlockTask+0x54>
 8008c8e:	42b0      	cmp	r0, r6
 8008c90:	d213      	bcs.n	8008cba <prvProcessTimerOrBlockTask+0x46>
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8008c92:	4622      	mov	r2, r4
 8008c94:	1b71      	subs	r1, r6, r5
 8008c96:	4b12      	ldr	r3, [pc, #72]	@ (8008ce0 <prvProcessTimerOrBlockTask+0x6c>)
 8008c98:	6818      	ldr	r0, [r3, #0]
 8008c9a:	f7fa fdc5 	bl	8003828 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8008c9e:	f7ff f995 	bl	8007fcc <xTaskResumeAll>
 8008ca2:	b9d8      	cbnz	r0, 8008cdc <prvProcessTimerOrBlockTask+0x68>
					portYIELD_WITHIN_API();
 8008ca4:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8008ca8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008cac:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8008cb0:	f3bf 8f4f 	dsb	sy
 8008cb4:	f3bf 8f6f 	isb	sy
 8008cb8:	e010      	b.n	8008cdc <prvProcessTimerOrBlockTask+0x68>
				( void ) xTaskResumeAll();
 8008cba:	f7ff f987 	bl	8007fcc <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8008cbe:	4629      	mov	r1, r5
 8008cc0:	4630      	mov	r0, r6
 8008cc2:	f7ff ffa1 	bl	8008c08 <prvProcessExpiredTimer>
 8008cc6:	e009      	b.n	8008cdc <prvProcessTimerOrBlockTask+0x68>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8008cc8:	4a06      	ldr	r2, [pc, #24]	@ (8008ce4 <prvProcessTimerOrBlockTask+0x70>)
 8008cca:	6812      	ldr	r2, [r2, #0]
 8008ccc:	6812      	ldr	r2, [r2, #0]
 8008cce:	b90a      	cbnz	r2, 8008cd4 <prvProcessTimerOrBlockTask+0x60>
 8008cd0:	2401      	movs	r4, #1
 8008cd2:	e7de      	b.n	8008c92 <prvProcessTimerOrBlockTask+0x1e>
 8008cd4:	461c      	mov	r4, r3
 8008cd6:	e7dc      	b.n	8008c92 <prvProcessTimerOrBlockTask+0x1e>
			( void ) xTaskResumeAll();
 8008cd8:	f7ff f978 	bl	8007fcc <xTaskResumeAll>
}
 8008cdc:	b002      	add	sp, #8
 8008cde:	bd70      	pop	{r4, r5, r6, pc}
 8008ce0:	20006f4c 	.word	0x20006f4c
 8008ce4:	20006f50 	.word	0x20006f50

08008ce8 <prvProcessReceivedCommands>:
{
 8008ce8:	b510      	push	{r4, lr}
 8008cea:	b088      	sub	sp, #32
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008cec:	e002      	b.n	8008cf4 <prvProcessReceivedCommands+0xc>
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8008cee:	9b04      	ldr	r3, [sp, #16]
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	da0f      	bge.n	8008d14 <prvProcessReceivedCommands+0x2c>
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008cf4:	2200      	movs	r2, #0
 8008cf6:	a904      	add	r1, sp, #16
 8008cf8:	4b3d      	ldr	r3, [pc, #244]	@ (8008df0 <prvProcessReceivedCommands+0x108>)
 8008cfa:	6818      	ldr	r0, [r3, #0]
 8008cfc:	f7fa fc7a 	bl	80035f4 <xQueueReceive>
 8008d00:	2800      	cmp	r0, #0
 8008d02:	d072      	beq.n	8008dea <prvProcessReceivedCommands+0x102>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8008d04:	9b04      	ldr	r3, [sp, #16]
 8008d06:	2b00      	cmp	r3, #0
 8008d08:	daf1      	bge.n	8008cee <prvProcessReceivedCommands+0x6>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8008d0a:	9907      	ldr	r1, [sp, #28]
 8008d0c:	9806      	ldr	r0, [sp, #24]
 8008d0e:	9b05      	ldr	r3, [sp, #20]
 8008d10:	4798      	blx	r3
 8008d12:	e7ec      	b.n	8008cee <prvProcessReceivedCommands+0x6>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8008d14:	9c06      	ldr	r4, [sp, #24]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8008d16:	6963      	ldr	r3, [r4, #20]
 8008d18:	b113      	cbz	r3, 8008d20 <prvProcessReceivedCommands+0x38>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008d1a:	1d20      	adds	r0, r4, #4
 8008d1c:	f7f9 fefa 	bl	8002b14 <uxListRemove>
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008d20:	a803      	add	r0, sp, #12
 8008d22:	f7ff ff5b 	bl	8008bdc <prvSampleTimeNow>
 8008d26:	4602      	mov	r2, r0
			switch( xMessage.xMessageID )
 8008d28:	9b04      	ldr	r3, [sp, #16]
 8008d2a:	2b09      	cmp	r3, #9
 8008d2c:	d8e2      	bhi.n	8008cf4 <prvProcessReceivedCommands+0xc>
 8008d2e:	e8df f003 	tbb	[pc, r3]
 8008d32:	0505      	.short	0x0505
 8008d34:	4e362f05 	.word	0x4e362f05
 8008d38:	362f0505 	.word	0x362f0505
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008d3c:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 8008d40:	f043 0301 	orr.w	r3, r3, #1
 8008d44:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8008d48:	9b05      	ldr	r3, [sp, #20]
 8008d4a:	69a1      	ldr	r1, [r4, #24]
 8008d4c:	4419      	add	r1, r3
 8008d4e:	4620      	mov	r0, r4
 8008d50:	f7ff fdd6 	bl	8008900 <prvInsertTimerInActiveList>
 8008d54:	2800      	cmp	r0, #0
 8008d56:	d0cd      	beq.n	8008cf4 <prvProcessReceivedCommands+0xc>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008d58:	6a23      	ldr	r3, [r4, #32]
 8008d5a:	4620      	mov	r0, r4
 8008d5c:	4798      	blx	r3
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008d5e:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 8008d62:	f013 0f04 	tst.w	r3, #4
 8008d66:	d0c5      	beq.n	8008cf4 <prvProcessReceivedCommands+0xc>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8008d68:	69a2      	ldr	r2, [r4, #24]
 8008d6a:	2100      	movs	r1, #0
 8008d6c:	9100      	str	r1, [sp, #0]
 8008d6e:	460b      	mov	r3, r1
 8008d70:	9805      	ldr	r0, [sp, #20]
 8008d72:	4402      	add	r2, r0
 8008d74:	4620      	mov	r0, r4
 8008d76:	f7ff febd 	bl	8008af4 <xTimerGenericCommand>
							configASSERT( xResult );
 8008d7a:	2800      	cmp	r0, #0
 8008d7c:	d1ba      	bne.n	8008cf4 <prvProcessReceivedCommands+0xc>
 8008d7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d82:	f383 8811 	msr	BASEPRI, r3
 8008d86:	f3bf 8f6f 	isb	sy
 8008d8a:	f3bf 8f4f 	dsb	sy
 8008d8e:	e7fe      	b.n	8008d8e <prvProcessReceivedCommands+0xa6>
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008d90:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 8008d94:	f023 0301 	bic.w	r3, r3, #1
 8008d98:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
					break;
 8008d9c:	e7aa      	b.n	8008cf4 <prvProcessReceivedCommands+0xc>
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008d9e:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 8008da2:	f043 0301 	orr.w	r3, r3, #1
 8008da6:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8008daa:	9905      	ldr	r1, [sp, #20]
 8008dac:	61a1      	str	r1, [r4, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8008dae:	b129      	cbz	r1, 8008dbc <prvProcessReceivedCommands+0xd4>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8008db0:	4603      	mov	r3, r0
 8008db2:	4401      	add	r1, r0
 8008db4:	4620      	mov	r0, r4
 8008db6:	f7ff fda3 	bl	8008900 <prvInsertTimerInActiveList>
					break;
 8008dba:	e79b      	b.n	8008cf4 <prvProcessReceivedCommands+0xc>
 8008dbc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008dc0:	f383 8811 	msr	BASEPRI, r3
 8008dc4:	f3bf 8f6f 	isb	sy
 8008dc8:	f3bf 8f4f 	dsb	sy
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8008dcc:	e7fe      	b.n	8008dcc <prvProcessReceivedCommands+0xe4>
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8008dce:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 8008dd2:	f013 0f02 	tst.w	r3, #2
 8008dd6:	d004      	beq.n	8008de2 <prvProcessReceivedCommands+0xfa>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008dd8:	f023 0301 	bic.w	r3, r3, #1
 8008ddc:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
 8008de0:	e788      	b.n	8008cf4 <prvProcessReceivedCommands+0xc>
							vPortFree( pxTimer );
 8008de2:	4620      	mov	r0, r4
 8008de4:	f7f9 fbc6 	bl	8002574 <vPortFree>
 8008de8:	e784      	b.n	8008cf4 <prvProcessReceivedCommands+0xc>
}
 8008dea:	b008      	add	sp, #32
 8008dec:	bd10      	pop	{r4, pc}
 8008dee:	bf00      	nop
 8008df0:	20006f4c 	.word	0x20006f4c

08008df4 <prvTimerTask>:
{
 8008df4:	b500      	push	{lr}
 8008df6:	b083      	sub	sp, #12
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008df8:	a801      	add	r0, sp, #4
 8008dfa:	f7ff fd71 	bl	80088e0 <prvGetNextExpireTime>
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8008dfe:	9901      	ldr	r1, [sp, #4]
 8008e00:	f7ff ff38 	bl	8008c74 <prvProcessTimerOrBlockTask>
		prvProcessReceivedCommands();
 8008e04:	f7ff ff70 	bl	8008ce8 <prvProcessReceivedCommands>
	for( ;; )
 8008e08:	e7f6      	b.n	8008df8 <prvTimerTask+0x4>

08008e0a <pvTimerGetTimerID>:
void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
Timer_t * const pxTimer = xTimer;
void *pvReturn;

	configASSERT( xTimer );
 8008e0a:	b140      	cbz	r0, 8008e1e <pvTimerGetTimerID+0x14>
{
 8008e0c:	b510      	push	{r4, lr}
 8008e0e:	4604      	mov	r4, r0

	taskENTER_CRITICAL();
 8008e10:	f7fa f810 	bl	8002e34 <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 8008e14:	69e4      	ldr	r4, [r4, #28]
	}
	taskEXIT_CRITICAL();
 8008e16:	f7fa f82f 	bl	8002e78 <vPortExitCritical>

	return pvReturn;
}
 8008e1a:	4620      	mov	r0, r4
 8008e1c:	bd10      	pop	{r4, pc}
 8008e1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e22:	f383 8811 	msr	BASEPRI, r3
 8008e26:	f3bf 8f6f 	isb	sy
 8008e2a:	f3bf 8f4f 	dsb	sy
	configASSERT( xTimer );
 8008e2e:	e7fe      	b.n	8008e2e <pvTimerGetTimerID+0x24>

08008e30 <controller_timing_start>:

void update_next_event(void);

void controller_timing_start(TIM_HandleTypeDef *htim)
{
    if (htim == NULL)
 8008e30:	b320      	cbz	r0, 8008e7c <controller_timing_start+0x4c>
{
 8008e32:	b510      	push	{r4, lr}
        /**
         * @todo throw an error
         */
        return;
    }
    timer = htim;
 8008e34:	4c12      	ldr	r4, [pc, #72]	@ (8008e80 <controller_timing_start+0x50>)
 8008e36:	6020      	str	r0, [r4, #0]
    
    /**
     * This assumes that sys clock is the same as timer clock
     */
    timer->Instance->PSC = (HAL_RCC_GetSysClockFreq() / 1000000UL) - 1;
 8008e38:	f7fc ffe6 	bl	8005e08 <HAL_RCC_GetSysClockFreq>
 8008e3c:	4b11      	ldr	r3, [pc, #68]	@ (8008e84 <controller_timing_start+0x54>)
 8008e3e:	fba3 2300 	umull	r2, r3, r3, r0
 8008e42:	0c9b      	lsrs	r3, r3, #18
 8008e44:	6820      	ldr	r0, [r4, #0]
 8008e46:	6802      	ldr	r2, [r0, #0]
 8008e48:	3b01      	subs	r3, #1
 8008e4a:	6293      	str	r3, [r2, #40]	@ 0x28
    //timer->Instance->ARR = 100000;
    timer->Instance->EGR |= TIM_EGR_UG;  // Force an update event → immediately reloads PSC
 8008e4c:	6802      	ldr	r2, [r0, #0]
 8008e4e:	6953      	ldr	r3, [r2, #20]
 8008e50:	f043 0301 	orr.w	r3, r3, #1
 8008e54:	6153      	str	r3, [r2, #20]

    HAL_TIM_Base_Start_IT(timer);
 8008e56:	f7fd fa01 	bl	800625c <HAL_TIM_Base_Start_IT>
    HAL_TIM_OC_Start_IT(timer, TIM_CHANNEL_1);    
 8008e5a:	2100      	movs	r1, #0
 8008e5c:	6820      	ldr	r0, [r4, #0]
 8008e5e:	f7fd fd2b 	bl	80068b8 <HAL_TIM_OC_Start_IT>

    for (size_t i = 0; i < SCHEDULER_MAX_EVENTS; i++)
 8008e62:	2300      	movs	r3, #0
 8008e64:	2b31      	cmp	r3, #49	@ 0x31
 8008e66:	d808      	bhi.n	8008e7a <controller_timing_start+0x4a>
    {
        event_queue[i].state = EVENT_STATE_INACTIVE;
 8008e68:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 8008e6c:	4a06      	ldr	r2, [pc, #24]	@ (8008e88 <controller_timing_start+0x58>)
 8008e6e:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8008e72:	2100      	movs	r1, #0
 8008e74:	7411      	strb	r1, [r2, #16]
    for (size_t i = 0; i < SCHEDULER_MAX_EVENTS; i++)
 8008e76:	3301      	adds	r3, #1
 8008e78:	e7f4      	b.n	8008e64 <controller_timing_start+0x34>
    }
    
}
 8008e7a:	bd10      	pop	{r4, pc}
 8008e7c:	4770      	bx	lr
 8008e7e:	bf00      	nop
 8008e80:	20007368 	.word	0x20007368
 8008e84:	431bde83 	.word	0x431bde83
 8008e88:	20006f80 	.word	0x20006f80

08008e8c <get_time_us>:

time_us_t get_time_us(void)
{
    return timer->Instance->CNT;
 8008e8c:	4b02      	ldr	r3, [pc, #8]	@ (8008e98 <get_time_us+0xc>)
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	6a58      	ldr	r0, [r3, #36]	@ 0x24
}
 8008e94:	4770      	bx	lr
 8008e96:	bf00      	nop
 8008e98:	20007368 	.word	0x20007368

08008e9c <get_time_ms>:

time_ms_t get_time_ms(void)
{
    return timer->Instance->CNT / 1000U;
 8008e9c:	4b04      	ldr	r3, [pc, #16]	@ (8008eb0 <get_time_ms+0x14>)
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	681b      	ldr	r3, [r3, #0]
 8008ea2:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8008ea4:	4b03      	ldr	r3, [pc, #12]	@ (8008eb4 <get_time_ms+0x18>)
 8008ea6:	fba3 3000 	umull	r3, r0, r3, r0
}
 8008eaa:	0980      	lsrs	r0, r0, #6
 8008eac:	4770      	bx	lr
 8008eae:	bf00      	nop
 8008eb0:	20007368 	.word	0x20007368
 8008eb4:	10624dd3 	.word	0x10624dd3

08008eb8 <update_next_event>:

void update_next_event(void)
{
 8008eb8:	b410      	push	{r4}
    time_us_t nearest_time = 0xFFFFFFFF;
    bool found = false;

    for (size_t i = 0; i < SCHEDULER_MAX_EVENTS; i++)
 8008eba:	2300      	movs	r3, #0
    bool found = false;
 8008ebc:	4618      	mov	r0, r3
    time_us_t nearest_time = 0xFFFFFFFF;
 8008ebe:	f04f 34ff 	mov.w	r4, #4294967295
    for (size_t i = 0; i < SCHEDULER_MAX_EVENTS; i++)
 8008ec2:	e006      	b.n	8008ed2 <update_next_event+0x1a>
        
        /* This will handle wraparound safely aparantly, but i don't know how it works yet :( */
        if (!found || (int32_t)(event_queue[i].timestamp_us - nearest_time) < 0)
        {
            found = true;
            nearest_time = event_queue[i].timestamp_us;
 8008ec4:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 8008ec8:	008a      	lsls	r2, r1, #2
 8008eca:	4910      	ldr	r1, [pc, #64]	@ (8008f0c <update_next_event+0x54>)
 8008ecc:	588c      	ldr	r4, [r1, r2]
            found = true;
 8008ece:	2001      	movs	r0, #1
    for (size_t i = 0; i < SCHEDULER_MAX_EVENTS; i++)
 8008ed0:	3301      	adds	r3, #1
 8008ed2:	2b31      	cmp	r3, #49	@ 0x31
 8008ed4:	d812      	bhi.n	8008efc <update_next_event+0x44>
        if (event_queue[i].state != EVENT_STATE_PENDING) continue;
 8008ed6:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8008eda:	0091      	lsls	r1, r2, #2
 8008edc:	4a0b      	ldr	r2, [pc, #44]	@ (8008f0c <update_next_event+0x54>)
 8008ede:	440a      	add	r2, r1
 8008ee0:	7c12      	ldrb	r2, [r2, #16]
 8008ee2:	2a01      	cmp	r2, #1
 8008ee4:	d1f4      	bne.n	8008ed0 <update_next_event+0x18>
        if (!found || (int32_t)(event_queue[i].timestamp_us - nearest_time) < 0)
 8008ee6:	2800      	cmp	r0, #0
 8008ee8:	d0ec      	beq.n	8008ec4 <update_next_event+0xc>
 8008eea:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 8008eee:	008a      	lsls	r2, r1, #2
 8008ef0:	4906      	ldr	r1, [pc, #24]	@ (8008f0c <update_next_event+0x54>)
 8008ef2:	588a      	ldr	r2, [r1, r2]
 8008ef4:	1b12      	subs	r2, r2, r4
 8008ef6:	2a00      	cmp	r2, #0
 8008ef8:	daea      	bge.n	8008ed0 <update_next_event+0x18>
 8008efa:	e7e3      	b.n	8008ec4 <update_next_event+0xc>
        }        
    }

    if (found) {
 8008efc:	b118      	cbz	r0, 8008f06 <update_next_event+0x4e>
        // Schedule next interrupt
        timer->Instance->CCR1 = nearest_time;
 8008efe:	4b04      	ldr	r3, [pc, #16]	@ (8008f10 <update_next_event+0x58>)
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	681b      	ldr	r3, [r3, #0]
 8008f04:	635c      	str	r4, [r3, #52]	@ 0x34
    } else {
        // No pending events — disable future interrupts or set a dummy compare
        /* Should i set a compare in the near future ?*/
        //timer->Instance->CCR1 = 0xFFFFFFFF;
    }
}
 8008f06:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008f0a:	4770      	bx	lr
 8008f0c:	20006f80 	.word	0x20006f80
 8008f10:	20007368 	.word	0x20007368

08008f14 <scheduler_timer_callback>:

void scheduler_timer_callback()
{
 8008f14:	b538      	push	{r3, r4, r5, lr}
    // Exit early if this wasn't a CCR1 match
    if (!(timer->Instance->SR & TIM_SR_CC1IF))
 8008f16:	4b23      	ldr	r3, [pc, #140]	@ (8008fa4 <scheduler_timer_callback+0x90>)
 8008f18:	681a      	ldr	r2, [r3, #0]
 8008f1a:	6813      	ldr	r3, [r2, #0]
 8008f1c:	6919      	ldr	r1, [r3, #16]
 8008f1e:	f011 0f02 	tst.w	r1, #2
 8008f22:	d03e      	beq.n	8008fa2 <scheduler_timer_callback+0x8e>
    {
        return;
    }

    timer->Instance->SR &= ~TIM_SR_CC1IF;  // Clear the compare match flag
 8008f24:	6919      	ldr	r1, [r3, #16]
 8008f26:	f021 0102 	bic.w	r1, r1, #2
 8008f2a:	6119      	str	r1, [r3, #16]
    time_us_t time_now_us = timer->Instance->CNT; // I have avoided the function call overhead here. might be minimal anyways...
 8008f2c:	6813      	ldr	r3, [r2, #0]
 8008f2e:	6a5d      	ldr	r5, [r3, #36]	@ 0x24

    for (int i = 0; i < SCHEDULER_MAX_EVENTS; i++) {
 8008f30:	2400      	movs	r4, #0
 8008f32:	e00e      	b.n	8008f52 <scheduler_timer_callback+0x3e>
        {
            event_queue[i].callback_arg(event_queue[i].arg);
        }
        else
        {
            event_queue[i].callback_noarg();
 8008f34:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 8008f38:	009a      	lsls	r2, r3, #2
 8008f3a:	4b1b      	ldr	r3, [pc, #108]	@ (8008fa8 <scheduler_timer_callback+0x94>)
 8008f3c:	4413      	add	r3, r2
 8008f3e:	689b      	ldr	r3, [r3, #8]
 8008f40:	4798      	blx	r3
        }

        event_queue[i].state = EVENT_STATE_INACTIVE;
 8008f42:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 8008f46:	009a      	lsls	r2, r3, #2
 8008f48:	4b17      	ldr	r3, [pc, #92]	@ (8008fa8 <scheduler_timer_callback+0x94>)
 8008f4a:	4413      	add	r3, r2
 8008f4c:	2200      	movs	r2, #0
 8008f4e:	741a      	strb	r2, [r3, #16]
    for (int i = 0; i < SCHEDULER_MAX_EVENTS; i++) {
 8008f50:	3401      	adds	r4, #1
 8008f52:	2c31      	cmp	r4, #49	@ 0x31
 8008f54:	dc23      	bgt.n	8008f9e <scheduler_timer_callback+0x8a>
        if (event_queue[i].state != EVENT_STATE_PENDING) continue;
 8008f56:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 8008f5a:	009a      	lsls	r2, r3, #2
 8008f5c:	4b12      	ldr	r3, [pc, #72]	@ (8008fa8 <scheduler_timer_callback+0x94>)
 8008f5e:	4413      	add	r3, r2
 8008f60:	7c1b      	ldrb	r3, [r3, #16]
 8008f62:	2b01      	cmp	r3, #1
 8008f64:	d1f4      	bne.n	8008f50 <scheduler_timer_callback+0x3c>
        if ((int32_t)(time_now_us - event_queue[i].timestamp_us) < 0)
 8008f66:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 8008f6a:	0093      	lsls	r3, r2, #2
 8008f6c:	4a0e      	ldr	r2, [pc, #56]	@ (8008fa8 <scheduler_timer_callback+0x94>)
 8008f6e:	58d3      	ldr	r3, [r2, r3]
 8008f70:	1aeb      	subs	r3, r5, r3
 8008f72:	2b00      	cmp	r3, #0
 8008f74:	dbec      	blt.n	8008f50 <scheduler_timer_callback+0x3c>
        event_queue[i].state = EVENT_STATE_ACTIVE;
 8008f76:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 8008f7a:	009a      	lsls	r2, r3, #2
 8008f7c:	4b0a      	ldr	r3, [pc, #40]	@ (8008fa8 <scheduler_timer_callback+0x94>)
 8008f7e:	4413      	add	r3, r2
 8008f80:	2202      	movs	r2, #2
 8008f82:	741a      	strb	r2, [r3, #16]
        if (event_queue[i].uses_arg)
 8008f84:	7c5b      	ldrb	r3, [r3, #17]
 8008f86:	2b00      	cmp	r3, #0
 8008f88:	d0d4      	beq.n	8008f34 <scheduler_timer_callback+0x20>
            event_queue[i].callback_arg(event_queue[i].arg);
 8008f8a:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 8008f8e:	fa03 f202 	lsl.w	r2, r3, r2
 8008f92:	4b05      	ldr	r3, [pc, #20]	@ (8008fa8 <scheduler_timer_callback+0x94>)
 8008f94:	4413      	add	r3, r2
 8008f96:	685a      	ldr	r2, [r3, #4]
 8008f98:	68d8      	ldr	r0, [r3, #12]
 8008f9a:	4790      	blx	r2
 8008f9c:	e7d1      	b.n	8008f42 <scheduler_timer_callback+0x2e>
    }

    update_next_event();  // Schedule the next event
 8008f9e:	f7ff ff8b 	bl	8008eb8 <update_next_event>
}
 8008fa2:	bd38      	pop	{r3, r4, r5, pc}
 8008fa4:	20007368 	.word	0x20007368
 8008fa8:	20006f80 	.word	0x20006f80

08008fac <scheduler_schedule_event_with_arg>:


bool scheduler_schedule_event_with_arg(time_us_t timestamp_us, void (*callback)(void *), void *arg)
{
    if (callback == NULL) return false;
 8008fac:	b319      	cbz	r1, 8008ff6 <scheduler_schedule_event_with_arg+0x4a>
{
 8008fae:	b538      	push	{r3, r4, r5, lr}
 8008fb0:	460d      	mov	r5, r1

    for (size_t i = 0; i < SCHEDULER_MAX_EVENTS; i++) {
 8008fb2:	2300      	movs	r3, #0
 8008fb4:	e000      	b.n	8008fb8 <scheduler_schedule_event_with_arg+0xc>
 8008fb6:	3301      	adds	r3, #1
 8008fb8:	2b31      	cmp	r3, #49	@ 0x31
 8008fba:	d81a      	bhi.n	8008ff2 <scheduler_schedule_event_with_arg+0x46>
        if (event_queue[i].state == EVENT_STATE_INACTIVE) {
 8008fbc:	eb03 0c83 	add.w	ip, r3, r3, lsl #2
 8008fc0:	490e      	ldr	r1, [pc, #56]	@ (8008ffc <scheduler_schedule_event_with_arg+0x50>)
 8008fc2:	eb01 018c 	add.w	r1, r1, ip, lsl #2
 8008fc6:	7c09      	ldrb	r1, [r1, #16]
 8008fc8:	2900      	cmp	r1, #0
 8008fca:	d1f4      	bne.n	8008fb6 <scheduler_schedule_event_with_arg+0xa>
            event_queue[i].timestamp_us = timestamp_us;
 8008fcc:	490b      	ldr	r1, [pc, #44]	@ (8008ffc <scheduler_schedule_event_with_arg+0x50>)
 8008fce:	4664      	mov	r4, ip
 8008fd0:	eb01 0c8c 	add.w	ip, r1, ip, lsl #2
 8008fd4:	f841 0024 	str.w	r0, [r1, r4, lsl #2]
            event_queue[i].callback_arg = callback;
 8008fd8:	f8cc 5004 	str.w	r5, [ip, #4]
            event_queue[i].arg = arg;
 8008fdc:	f8cc 200c 	str.w	r2, [ip, #12]
            event_queue[i].uses_arg = true;
 8008fe0:	2401      	movs	r4, #1
 8008fe2:	f88c 4011 	strb.w	r4, [ip, #17]
            event_queue[i].state = EVENT_STATE_PENDING;
 8008fe6:	f88c 4010 	strb.w	r4, [ip, #16]

            update_next_event();
 8008fea:	f7ff ff65 	bl	8008eb8 <update_next_event>
            return true;
 8008fee:	4620      	mov	r0, r4
        }
    }

    return false;
}
 8008ff0:	bd38      	pop	{r3, r4, r5, pc}
    return false;
 8008ff2:	2000      	movs	r0, #0
 8008ff4:	e7fc      	b.n	8008ff0 <scheduler_schedule_event_with_arg+0x44>
    if (callback == NULL) return false;
 8008ff6:	2000      	movs	r0, #0
}
 8008ff8:	4770      	bx	lr
 8008ffa:	bf00      	nop
 8008ffc:	20006f80 	.word	0x20006f80

08009000 <set_filtering>:



void set_filtering(trigger_t *trigger)
{
  switch (*(trigger->filtering))
 8009000:	6843      	ldr	r3, [r0, #4]
 8009002:	781b      	ldrb	r3, [r3, #0]
 8009004:	2b03      	cmp	r3, #3
 8009006:	d813      	bhi.n	8009030 <set_filtering+0x30>
 8009008:	e8df f003 	tbb	[pc, r3]
 800900c:	0c090502 	.word	0x0c090502
  {
  case TRIGGER_FILTERING_NONE:
    trigger->_trigger_filter_time_us = 0;
 8009010:	2300      	movs	r3, #0
 8009012:	6083      	str	r3, [r0, #8]
    break;
 8009014:	4770      	bx	lr
  case TRIGGER_FILTERING_LITE:
    trigger->_trigger_filter_time_us = trigger->_current_tooth_gap_us / 4U;
 8009016:	6983      	ldr	r3, [r0, #24]
 8009018:	089b      	lsrs	r3, r3, #2
 800901a:	6083      	str	r3, [r0, #8]
    break;
 800901c:	4770      	bx	lr
  case TRIGGER_FILTERING_MEDIUM:
    trigger->_trigger_filter_time_us = trigger->_current_tooth_gap_us / 1U;
 800901e:	6983      	ldr	r3, [r0, #24]
 8009020:	6083      	str	r3, [r0, #8]
    break;
 8009022:	4770      	bx	lr
  case TRIGGER_FILTERING_AGGRESSIVE:
    trigger->_trigger_filter_time_us = trigger->_current_tooth_gap_us * 3 / 4;
 8009024:	6983      	ldr	r3, [r0, #24]
 8009026:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800902a:	089b      	lsrs	r3, r3, #2
 800902c:	6083      	str	r3, [r0, #8]
    break;
 800902e:	4770      	bx	lr
  default:
    // Handle invalid filtering level
    trigger->_trigger_filter_time_us = 0;
 8009030:	2300      	movs	r3, #0
 8009032:	6083      	str	r3, [r0, #8]
    break;
  }
}
 8009034:	4770      	bx	lr
	...

08009038 <trigger_init>:

void trigger_init(trigger_t *trigger, trigger_wheel_type_t wheel_type, uint8_t *filtering, status_t sync_status_bit, uint8_t trigger_number)
{
 8009038:	b538      	push	{r3, r4, r5, lr}
 800903a:	f89d 5010 	ldrb.w	r5, [sp, #16]
  bool temp_status = true;
  if (trigger == NULL)
 800903e:	b158      	cbz	r0, 8009058 <trigger_init+0x20>
 8009040:	4604      	mov	r4, r0
  {
    log_error("Trigger initialization failed. Trigger is NULL.");
    return;
  }
  trigger->filtering = filtering;
 8009042:	6042      	str	r2, [r0, #4]
  trigger->status_synced_index = sync_status_bit;
 8009044:	7043      	strb	r3, [r0, #1]

  switch (wheel_type)
 8009046:	b159      	cbz	r1, 8009060 <trigger_init+0x28>
 8009048:	2901      	cmp	r1, #1
 800904a:	d018      	beq.n	800907e <trigger_init+0x46>
    trigger->_missing_teeth = 1;
    trigger->_full_teeth = 29;
    break;

  default:
    trigger->initialized = temp_status;
 800904c:	2301      	movs	r3, #1
 800904e:	7003      	strb	r3, [r0, #0]
    log_error("Trigger initialization failed. Wheel type not recognized.");
 8009050:	481d      	ldr	r0, [pc, #116]	@ (80090c8 <trigger_init+0x90>)
 8009052:	f7f8 ffa3 	bl	8001f9c <log_error>
    break;
 8009056:	e009      	b.n	800906c <trigger_init+0x34>
    log_error("Trigger initialization failed. Trigger is NULL.");
 8009058:	481c      	ldr	r0, [pc, #112]	@ (80090cc <trigger_init+0x94>)
 800905a:	f7f8 ff9f 	bl	8001f9c <log_error>
    return;
 800905e:	e02e      	b.n	80090be <trigger_init+0x86>
    trigger->_missing_teeth = 2;
 8009060:	2302      	movs	r3, #2
 8009062:	f880 3028 	strb.w	r3, [r0, #40]	@ 0x28
    trigger->_full_teeth = 60;
 8009066:	233c      	movs	r3, #60	@ 0x3c
 8009068:	f880 3027 	strb.w	r3, [r0, #39]	@ 0x27
  }

  switch (trigger_number)
 800906c:	b175      	cbz	r5, 800908c <trigger_init+0x54>
 800906e:	2d01      	cmp	r5, #1
 8009070:	d026      	beq.n	80090c0 <trigger_init+0x88>
    break;
  case 1:
    trigger->status_synced_index = STATUS_TRIGGER2_SYNCED;
    break;
  default:
    log_error("Trigger initialization failed. unknown trigger number.");
 8009072:	4817      	ldr	r0, [pc, #92]	@ (80090d0 <trigger_init+0x98>)
 8009074:	f7f8 ff92 	bl	8001f9c <log_error>
    trigger->initialized = false;
 8009078:	2300      	movs	r3, #0
 800907a:	7023      	strb	r3, [r4, #0]
    return;
 800907c:	e01f      	b.n	80090be <trigger_init+0x86>
    trigger->_missing_teeth = 1;
 800907e:	2301      	movs	r3, #1
 8009080:	f880 3028 	strb.w	r3, [r0, #40]	@ 0x28
    trigger->_full_teeth = 29;
 8009084:	231d      	movs	r3, #29
 8009086:	f880 3027 	strb.w	r3, [r0, #39]	@ 0x27
    break;
 800908a:	e7ef      	b.n	800906c <trigger_init+0x34>
    trigger->status_synced_index = STATUS_TRIGGER1_SYNCED;
 800908c:	2303      	movs	r3, #3
 800908e:	7063      	strb	r3, [r4, #1]
  }

  change_bit(&runtime.status, trigger->status_synced_index, false);
 8009090:	7863      	ldrb	r3, [r4, #1]
    if (bit > 31)
 8009092:	2b1f      	cmp	r3, #31
 8009094:	d807      	bhi.n	80090a6 <trigger_init+0x6e>
        *var &= ~(1u << bit);
 8009096:	480f      	ldr	r0, [pc, #60]	@ (80090d4 <trigger_init+0x9c>)
 8009098:	6802      	ldr	r2, [r0, #0]
 800909a:	2101      	movs	r1, #1
 800909c:	fa01 f303 	lsl.w	r3, r1, r3
 80090a0:	ea22 0203 	bic.w	r2, r2, r3
 80090a4:	6002      	str	r2, [r0, #0]
  set_filtering(trigger);
 80090a6:	4620      	mov	r0, r4
 80090a8:	f7ff ffaa 	bl	8009000 <set_filtering>
  trigger->_trigger_actual_teeth = trigger->_full_teeth - trigger->_missing_teeth;
 80090ac:	f894 3027 	ldrb.w	r3, [r4, #39]	@ 0x27
 80090b0:	f894 2028 	ldrb.w	r2, [r4, #40]	@ 0x28
 80090b4:	1a9b      	subs	r3, r3, r2
 80090b6:	f884 3026 	strb.w	r3, [r4, #38]	@ 0x26
  trigger->initialized = true;
 80090ba:	2301      	movs	r3, #1
 80090bc:	7023      	strb	r3, [r4, #0]
}
 80090be:	bd38      	pop	{r3, r4, r5, pc}
    trigger->status_synced_index = STATUS_TRIGGER2_SYNCED;
 80090c0:	2304      	movs	r3, #4
 80090c2:	7063      	strb	r3, [r4, #1]
    break;
 80090c4:	e7e4      	b.n	8009090 <trigger_init+0x58>
 80090c6:	bf00      	nop
 80090c8:	0800bce4 	.word	0x0800bce4
 80090cc:	0800bcb4 	.word	0x0800bcb4
 80090d0:	0800bd20 	.word	0x0800bd20
 80090d4:	200012f4 	.word	0x200012f4

080090d8 <crankshaft_get_rpm>:
}

rpm_t crankshaft_get_rpm()
{
  return runtime.rpm;
}
 80090d8:	4b01      	ldr	r3, [pc, #4]	@ (80090e0 <crankshaft_get_rpm+0x8>)
 80090da:	ed93 0a05 	vldr	s0, [r3, #20]
 80090de:	4770      	bx	lr
 80090e0:	200012f4 	.word	0x200012f4

080090e4 <crankshaft_get_angle>:
 * @note angle is updated on every trigger event!
 */
angle_t crankshaft_get_angle()
{
  return runtime.crankshaft_angle;
}
 80090e4:	4b01      	ldr	r3, [pc, #4]	@ (80090ec <crankshaft_get_angle+0x8>)
 80090e6:	ed93 0a03 	vldr	s0, [r3, #12]
 80090ea:	4770      	bx	lr
 80090ec:	200012f4 	.word	0x200012f4

080090f0 <trigger_tooth_handle>:
{
 80090f0:	b538      	push	{r3, r4, r5, lr}
 80090f2:	ed2d 8b02 	vpush	{d8}
  if (!trigger->initialized)
 80090f6:	7805      	ldrb	r5, [r0, #0]
 80090f8:	2d00      	cmp	r5, #0
 80090fa:	d07f      	beq.n	80091fc <trigger_tooth_handle+0x10c>
 80090fc:	4604      	mov	r4, r0
  trigger->_tooth_time_us[0] = get_time_us();
 80090fe:	f7ff fec5 	bl	8008e8c <get_time_us>
 8009102:	60e0      	str	r0, [r4, #12]
  trigger->_current_tooth_gap_us = trigger->_tooth_time_us[0] - trigger->_tooth_time_us[1];
 8009104:	6922      	ldr	r2, [r4, #16]
 8009106:	1a80      	subs	r0, r0, r2
 8009108:	61a0      	str	r0, [r4, #24]
  if (trigger->_current_tooth_gap_us < trigger->_trigger_filter_time_us) // Pulses should never be less than _trigger_filter_time_us, so if they are it means a false trigger. (A 36-1 wheel at 8000rpm will have triggers approx. every 200uS)
 800910a:	68a3      	ldr	r3, [r4, #8]
 800910c:	4298      	cmp	r0, r3
 800910e:	d372      	bcc.n	80091f6 <trigger_tooth_handle+0x106>
  trigger->_counted_tooth++; // Increment the tooth counter
 8009110:	8ca3      	ldrh	r3, [r4, #36]	@ 0x24
 8009112:	3301      	adds	r3, #1
 8009114:	b29b      	uxth	r3, r3
 8009116:	84a3      	strh	r3, [r4, #36]	@ 0x24
  previous_tooth_gap = trigger->_tooth_time_us[1] - trigger->_tooth_time_us[2];
 8009118:	6961      	ldr	r1, [r4, #20]
 800911a:	1a52      	subs	r2, r2, r1
  if (previous_tooth_gap < trigger->_current_tooth_gap_us)
 800911c:	4290      	cmp	r0, r2
 800911e:	d971      	bls.n	8009204 <trigger_tooth_handle+0x114>
    trigger->_shorter_tooth_gap = previous_tooth_gap;
 8009120:	61e2      	str	r2, [r4, #28]
  if (trigger->_missing_teeth == 1)
 8009122:	f894 2028 	ldrb.w	r2, [r4, #40]	@ 0x28
 8009126:	2a01      	cmp	r2, #1
 8009128:	d06e      	beq.n	8009208 <trigger_tooth_handle+0x118>
    trigger->_target_tooth_gap_us = trigger->_shorter_tooth_gap * trigger->_missing_teeth;
 800912a:	69e1      	ldr	r1, [r4, #28]
 800912c:	fb02 f101 	mul.w	r1, r2, r1
 8009130:	6221      	str	r1, [r4, #32]
  if ((trigger->_current_tooth_gap_us > trigger->_target_tooth_gap_us) || (trigger->_counted_tooth > trigger->_trigger_actual_teeth))
 8009132:	6a22      	ldr	r2, [r4, #32]
 8009134:	4290      	cmp	r0, r2
 8009136:	d804      	bhi.n	8009142 <trigger_tooth_handle+0x52>
 8009138:	f894 2026 	ldrb.w	r2, [r4, #38]	@ 0x26
 800913c:	4293      	cmp	r3, r2
 800913e:	f240 8084 	bls.w	800924a <trigger_tooth_handle+0x15a>
    if (trigger->_counted_tooth < trigger->_trigger_actual_teeth)
 8009142:	f894 2026 	ldrb.w	r2, [r4, #38]	@ 0x26
 8009146:	4293      	cmp	r3, r2
 8009148:	d26a      	bcs.n	8009220 <trigger_tooth_handle+0x130>
      change_bit(&runtime.status, trigger->status_synced_index, TS_NOT_SYNCED);
 800914a:	7863      	ldrb	r3, [r4, #1]
    if (bit > 31)
 800914c:	2b1f      	cmp	r3, #31
 800914e:	d807      	bhi.n	8009160 <trigger_tooth_handle+0x70>
        *var &= ~(1u << bit);
 8009150:	4857      	ldr	r0, [pc, #348]	@ (80092b0 <trigger_tooth_handle+0x1c0>)
 8009152:	6802      	ldr	r2, [r0, #0]
 8009154:	2101      	movs	r1, #1
 8009156:	fa01 f303 	lsl.w	r3, r1, r3
 800915a:	ea22 0203 	bic.w	r2, r2, r3
 800915e:	6002      	str	r2, [r0, #0]
      runtime.sync_loss_counter++;
 8009160:	4a53      	ldr	r2, [pc, #332]	@ (80092b0 <trigger_tooth_handle+0x1c0>)
 8009162:	6853      	ldr	r3, [r2, #4]
 8009164:	3301      	adds	r3, #1
 8009166:	6053      	str	r3, [r2, #4]
      if (trigger->status_synced_index == STATUS_TRIGGER1_SYNCED)
 8009168:	7863      	ldrb	r3, [r4, #1]
 800916a:	2b03      	cmp	r3, #3
 800916c:	d052      	beq.n	8009214 <trigger_tooth_handle+0x124>
      trigger->_counted_tooth = 0;
 800916e:	2300      	movs	r3, #0
 8009170:	84a3      	strh	r3, [r4, #36]	@ 0x24
  runtime.crankshaft_angle = 360.0f / (angle_t)trigger->_full_teeth * (angle_t)trigger->_counted_tooth;
 8009172:	f894 1027 	ldrb.w	r1, [r4, #39]	@ 0x27
 8009176:	ee07 1a90 	vmov	s15, r1
 800917a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800917e:	eddf 6a4d 	vldr	s13, [pc, #308]	@ 80092b4 <trigger_tooth_handle+0x1c4>
 8009182:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009186:	8ca3      	ldrh	r3, [r4, #36]	@ 0x24
 8009188:	ee07 3a10 	vmov	s14, r3
 800918c:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8009190:	ee67 7a87 	vmul.f32	s15, s15, s14
 8009194:	4a46      	ldr	r2, [pc, #280]	@ (80092b0 <trigger_tooth_handle+0x1c0>)
 8009196:	edc2 7a03 	vstr	s15, [r2, #12]
  runtime.rpm = (rpm_t)(CONVERSION_FACTOR_SECONDS_TO_MICROSECONDS * CONVERSION_FACTOR_MINUTES_TO_SECONDS / trigger->_shorter_tooth_gap / trigger->_full_teeth);
 800919a:	69e0      	ldr	r0, [r4, #28]
 800919c:	4b46      	ldr	r3, [pc, #280]	@ (80092b8 <trigger_tooth_handle+0x1c8>)
 800919e:	fbb3 f3f0 	udiv	r3, r3, r0
 80091a2:	fbb3 f3f1 	udiv	r3, r3, r1
 80091a6:	ee07 3a90 	vmov	s15, r3
 80091aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80091ae:	edc2 7a05 	vstr	s15, [r2, #20]
  if (get_bit(runtime.status, trigger->status_synced_index) == TS_FULLY_SYNCED && runtime.rpm >= config.cranking_rpm_threshold)
 80091b2:	6812      	ldr	r2, [r2, #0]
 80091b4:	7863      	ldrb	r3, [r4, #1]
    if (bit < 32)
 80091b6:	2b1f      	cmp	r3, #31
 80091b8:	d949      	bls.n	800924e <trigger_tooth_handle+0x15e>
 80091ba:	2b1f      	cmp	r3, #31
 80091bc:	d959      	bls.n	8009272 <trigger_tooth_handle+0x182>
 80091be:	2b1f      	cmp	r3, #31
 80091c0:	d969      	bls.n	8009296 <trigger_tooth_handle+0x1a6>
    runtime.spinning_state = SS_SPINNING_UP;
 80091c2:	4b3b      	ldr	r3, [pc, #236]	@ (80092b0 <trigger_tooth_handle+0x1c0>)
 80091c4:	2201      	movs	r2, #1
 80091c6:	f883 2049 	strb.w	r2, [r3, #73]	@ 0x49
  if (is_missing_teeth == false)
 80091ca:	2d00      	cmp	r5, #0
 80091cc:	d06c      	beq.n	80092a8 <trigger_tooth_handle+0x1b8>
  trigger->_tooth_time_us[2] = trigger->_tooth_time_us[1];
 80091ce:	6923      	ldr	r3, [r4, #16]
 80091d0:	6163      	str	r3, [r4, #20]
  trigger->_tooth_time_us[1] = trigger->_tooth_time_us[0];
 80091d2:	68e3      	ldr	r3, [r4, #12]
 80091d4:	6123      	str	r3, [r4, #16]
  ignition_trigger_event_handle(crankshaft_get_angle(), crankshaft_get_rpm(), get_time_us());
 80091d6:	f7ff ff85 	bl	80090e4 <crankshaft_get_angle>
 80091da:	eeb0 8a40 	vmov.f32	s16, s0
 80091de:	f7ff ff7b 	bl	80090d8 <crankshaft_get_rpm>
 80091e2:	eef0 8a40 	vmov.f32	s17, s0
 80091e6:	f7ff fe51 	bl	8008e8c <get_time_us>
 80091ea:	eef0 0a68 	vmov.f32	s1, s17
 80091ee:	eeb0 0a48 	vmov.f32	s0, s16
 80091f2:	f7f9 fb17 	bl	8002824 <ignition_trigger_event_handle>
}
 80091f6:	ecbd 8b02 	vpop	{d8}
 80091fa:	bd38      	pop	{r3, r4, r5, pc}
    log_error("Trigger is not initialized.");
 80091fc:	482f      	ldr	r0, [pc, #188]	@ (80092bc <trigger_tooth_handle+0x1cc>)
 80091fe:	f7f8 fecd 	bl	8001f9c <log_error>
    return;
 8009202:	e7f8      	b.n	80091f6 <trigger_tooth_handle+0x106>
    trigger->_shorter_tooth_gap = trigger->_current_tooth_gap_us;
 8009204:	61e0      	str	r0, [r4, #28]
 8009206:	e78c      	b.n	8009122 <trigger_tooth_handle+0x32>
    trigger->_target_tooth_gap_us = (3 * trigger->_shorter_tooth_gap) >> 1;
 8009208:	69e2      	ldr	r2, [r4, #28]
 800920a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800920e:	0852      	lsrs	r2, r2, #1
 8009210:	6222      	str	r2, [r4, #32]
 8009212:	e78e      	b.n	8009132 <trigger_tooth_handle+0x42>
        runtime.total_revolutions = 0;
 8009214:	4613      	mov	r3, r2
 8009216:	2200      	movs	r2, #0
 8009218:	609a      	str	r2, [r3, #8]
        runtime.rpm = 0;
 800921a:	2200      	movs	r2, #0
 800921c:	615a      	str	r2, [r3, #20]
 800921e:	e7a6      	b.n	800916e <trigger_tooth_handle+0x7e>
      change_bit(&runtime.status, trigger->status_synced_index, TS_FULLY_SYNCED);
 8009220:	7863      	ldrb	r3, [r4, #1]
    if (bit > 31)
 8009222:	2b1f      	cmp	r3, #31
 8009224:	d806      	bhi.n	8009234 <trigger_tooth_handle+0x144>
        *var |= (1u << bit);
 8009226:	4822      	ldr	r0, [pc, #136]	@ (80092b0 <trigger_tooth_handle+0x1c0>)
 8009228:	6802      	ldr	r2, [r0, #0]
 800922a:	2101      	movs	r1, #1
 800922c:	fa01 f303 	lsl.w	r3, r1, r3
 8009230:	431a      	orrs	r2, r3
 8009232:	6002      	str	r2, [r0, #0]
      if (trigger->status_synced_index == STATUS_TRIGGER1_SYNCED)
 8009234:	7863      	ldrb	r3, [r4, #1]
 8009236:	2b03      	cmp	r3, #3
 8009238:	d002      	beq.n	8009240 <trigger_tooth_handle+0x150>
      trigger->_counted_tooth = 0;
 800923a:	2300      	movs	r3, #0
 800923c:	84a3      	strh	r3, [r4, #36]	@ 0x24
 800923e:	e798      	b.n	8009172 <trigger_tooth_handle+0x82>
        runtime.total_revolutions++;
 8009240:	4a1b      	ldr	r2, [pc, #108]	@ (80092b0 <trigger_tooth_handle+0x1c0>)
 8009242:	6893      	ldr	r3, [r2, #8]
 8009244:	3301      	adds	r3, #1
 8009246:	6093      	str	r3, [r2, #8]
 8009248:	e7f7      	b.n	800923a <trigger_tooth_handle+0x14a>
  bool is_missing_teeth = false;
 800924a:	2500      	movs	r5, #0
 800924c:	e791      	b.n	8009172 <trigger_tooth_handle+0x82>
        return (flags >> bit) & 1u;
 800924e:	fa22 f103 	lsr.w	r1, r2, r3
  if (get_bit(runtime.status, trigger->status_synced_index) == TS_FULLY_SYNCED && runtime.rpm >= config.cranking_rpm_threshold)
 8009252:	f011 0f01 	tst.w	r1, #1
 8009256:	d0b0      	beq.n	80091ba <trigger_tooth_handle+0xca>
 8009258:	4919      	ldr	r1, [pc, #100]	@ (80092c0 <trigger_tooth_handle+0x1d0>)
 800925a:	ed91 7a80 	vldr	s14, [r1, #512]	@ 0x200
 800925e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009262:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009266:	dba8      	blt.n	80091ba <trigger_tooth_handle+0xca>
    runtime.spinning_state = SS_RUNNING;
 8009268:	4b11      	ldr	r3, [pc, #68]	@ (80092b0 <trigger_tooth_handle+0x1c0>)
 800926a:	2203      	movs	r2, #3
 800926c:	f883 2049 	strb.w	r2, [r3, #73]	@ 0x49
 8009270:	e7ab      	b.n	80091ca <trigger_tooth_handle+0xda>
 8009272:	fa22 f103 	lsr.w	r1, r2, r3
  else if (get_bit(runtime.status, trigger->status_synced_index) == TS_FULLY_SYNCED && runtime.rpm < config.cranking_rpm_threshold)
 8009276:	f011 0f01 	tst.w	r1, #1
 800927a:	d0a0      	beq.n	80091be <trigger_tooth_handle+0xce>
 800927c:	4910      	ldr	r1, [pc, #64]	@ (80092c0 <trigger_tooth_handle+0x1d0>)
 800927e:	ed91 7a80 	vldr	s14, [r1, #512]	@ 0x200
 8009282:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009286:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800928a:	d598      	bpl.n	80091be <trigger_tooth_handle+0xce>
    runtime.spinning_state = SS_CRANKING;
 800928c:	4b08      	ldr	r3, [pc, #32]	@ (80092b0 <trigger_tooth_handle+0x1c0>)
 800928e:	2202      	movs	r2, #2
 8009290:	f883 2049 	strb.w	r2, [r3, #73]	@ 0x49
 8009294:	e799      	b.n	80091ca <trigger_tooth_handle+0xda>
 8009296:	40da      	lsrs	r2, r3
  else if (get_bit(runtime.status, trigger->status_synced_index) == TS_NOT_SYNCED)
 8009298:	f012 0f01 	tst.w	r2, #1
 800929c:	d091      	beq.n	80091c2 <trigger_tooth_handle+0xd2>
    runtime.spinning_state = SS_STOPPED;
 800929e:	4b04      	ldr	r3, [pc, #16]	@ (80092b0 <trigger_tooth_handle+0x1c0>)
 80092a0:	2200      	movs	r2, #0
 80092a2:	f883 2049 	strb.w	r2, [r3, #73]	@ 0x49
 80092a6:	e790      	b.n	80091ca <trigger_tooth_handle+0xda>
    set_filtering(trigger);
 80092a8:	4620      	mov	r0, r4
 80092aa:	f7ff fea9 	bl	8009000 <set_filtering>
 80092ae:	e78e      	b.n	80091ce <trigger_tooth_handle+0xde>
 80092b0:	200012f4 	.word	0x200012f4
 80092b4:	43b40000 	.word	0x43b40000
 80092b8:	03938700 	.word	0x03938700
 80092bc:	0800bd58 	.word	0x0800bd58
 80092c0:	20002344 	.word	0x20002344

080092c4 <trigger_simulator_init>:

static void (*trigger_callback)(trigger_t *arg);  //passing an argument
static trigger_t *trigger_callback_arg;           // data to pass to callback_arg

void trigger_simulator_init(uint8_t full_teeth, uint8_t missing_teeth, void (*cb)(trigger_t *arg), trigger_t *arg)
{
 80092c4:	b410      	push	{r4}
    wheel_full_teeth = full_teeth;
 80092c6:	4c05      	ldr	r4, [pc, #20]	@ (80092dc <trigger_simulator_init+0x18>)
 80092c8:	7020      	strb	r0, [r4, #0]
    wheel_missing_teeth = missing_teeth;
 80092ca:	4805      	ldr	r0, [pc, #20]	@ (80092e0 <trigger_simulator_init+0x1c>)
 80092cc:	7001      	strb	r1, [r0, #0]
    trigger_callback = cb;
 80092ce:	4905      	ldr	r1, [pc, #20]	@ (80092e4 <trigger_simulator_init+0x20>)
 80092d0:	600a      	str	r2, [r1, #0]
    trigger_callback_arg = arg;
 80092d2:	4a05      	ldr	r2, [pc, #20]	@ (80092e8 <trigger_simulator_init+0x24>)
 80092d4:	6013      	str	r3, [r2, #0]
}
 80092d6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80092da:	4770      	bx	lr
 80092dc:	2000737d 	.word	0x2000737d
 80092e0:	2000737c 	.word	0x2000737c
 80092e4:	20007378 	.word	0x20007378
 80092e8:	20007374 	.word	0x20007374

080092ec <trigger_simulator_update>:

void trigger_simulator_update(rpm_t rpm)
{
    if (trigger_callback == NULL)
 80092ec:	4b22      	ldr	r3, [pc, #136]	@ (8009378 <trigger_simulator_update+0x8c>)
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	2b00      	cmp	r3, #0
 80092f2:	d040      	beq.n	8009376 <trigger_simulator_update+0x8a>
    {
        return;
    }
    if (wheel_full_teeth == 0) {
 80092f4:	4b21      	ldr	r3, [pc, #132]	@ (800937c <trigger_simulator_update+0x90>)
 80092f6:	781b      	ldrb	r3, [r3, #0]
 80092f8:	2b00      	cmp	r3, #0
 80092fa:	d03c      	beq.n	8009376 <trigger_simulator_update+0x8a>
{
 80092fc:	b510      	push	{r4, lr}
    if (rpm == 0)
 80092fe:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8009302:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009306:	d030      	beq.n	800936a <trigger_simulator_update+0x7e>
    return (time_us_t)60.0f * 1e6f / (rpm * 360.0f);
 8009308:	eddf 7a1d 	vldr	s15, [pc, #116]	@ 8009380 <trigger_simulator_update+0x94>
 800930c:	ee20 0a27 	vmul.f32	s0, s0, s15
 8009310:	ed9f 7a1c 	vldr	s14, [pc, #112]	@ 8009384 <trigger_simulator_update+0x98>
 8009314:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8009318:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800931c:	ee17 4a90 	vmov	r4, s15
        return; // Prevent division by zero
    }
    time_us_t tooth_interval = microseconds_per_degree(rpm) * 360 / wheel_full_teeth;
 8009320:	f44f 72b4 	mov.w	r2, #360	@ 0x168
 8009324:	fb02 f404 	mul.w	r4, r2, r4
 8009328:	fbb4 f4f3 	udiv	r4, r4, r3

    time_us_t current_time = get_time_us();
 800932c:	f7ff fdae 	bl	8008e8c <get_time_us>
    static time_us_t prev_time = 0;


    if ((int32_t)(current_time - prev_time) < tooth_interval)
 8009330:	4b15      	ldr	r3, [pc, #84]	@ (8009388 <trigger_simulator_update+0x9c>)
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	1ac3      	subs	r3, r0, r3
 8009336:	42a3      	cmp	r3, r4
 8009338:	d316      	bcc.n	8009368 <trigger_simulator_update+0x7c>
    {
        return;
    }
    prev_time = current_time;
 800933a:	4b13      	ldr	r3, [pc, #76]	@ (8009388 <trigger_simulator_update+0x9c>)
 800933c:	6018      	str	r0, [r3, #0]
    
    static uint8_t current_tooth_index = 0;

    if (current_tooth_index < wheel_missing_teeth)
 800933e:	4b13      	ldr	r3, [pc, #76]	@ (800938c <trigger_simulator_update+0xa0>)
 8009340:	781a      	ldrb	r2, [r3, #0]
 8009342:	4b13      	ldr	r3, [pc, #76]	@ (8009390 <trigger_simulator_update+0xa4>)
 8009344:	781b      	ldrb	r3, [r3, #0]
 8009346:	429a      	cmp	r2, r3
 8009348:	d304      	bcc.n	8009354 <trigger_simulator_update+0x68>
    {
        // welll do nothing!
    }
    else
    {
        trigger_callback(trigger_callback_arg);
 800934a:	4b0b      	ldr	r3, [pc, #44]	@ (8009378 <trigger_simulator_update+0x8c>)
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	4a11      	ldr	r2, [pc, #68]	@ (8009394 <trigger_simulator_update+0xa8>)
 8009350:	6810      	ldr	r0, [r2, #0]
 8009352:	4798      	blx	r3
    }
    

    if (current_tooth_index < (wheel_full_teeth - 1))
 8009354:	4b0d      	ldr	r3, [pc, #52]	@ (800938c <trigger_simulator_update+0xa0>)
 8009356:	781a      	ldrb	r2, [r3, #0]
 8009358:	4b08      	ldr	r3, [pc, #32]	@ (800937c <trigger_simulator_update+0x90>)
 800935a:	781b      	ldrb	r3, [r3, #0]
 800935c:	3b01      	subs	r3, #1
 800935e:	429a      	cmp	r2, r3
 8009360:	da05      	bge.n	800936e <trigger_simulator_update+0x82>
    {
        current_tooth_index++;
 8009362:	3201      	adds	r2, #1
 8009364:	4b09      	ldr	r3, [pc, #36]	@ (800938c <trigger_simulator_update+0xa0>)
 8009366:	701a      	strb	r2, [r3, #0]
    {
        current_tooth_index = 0;
    }


}
 8009368:	bd10      	pop	{r4, pc}
        return 0;
 800936a:	2400      	movs	r4, #0
 800936c:	e7d8      	b.n	8009320 <trigger_simulator_update+0x34>
        current_tooth_index = 0;
 800936e:	4b07      	ldr	r3, [pc, #28]	@ (800938c <trigger_simulator_update+0xa0>)
 8009370:	2200      	movs	r2, #0
 8009372:	701a      	strb	r2, [r3, #0]
 8009374:	e7f8      	b.n	8009368 <trigger_simulator_update+0x7c>
 8009376:	4770      	bx	lr
 8009378:	20007378 	.word	0x20007378
 800937c:	2000737d 	.word	0x2000737d
 8009380:	43b40000 	.word	0x43b40000
 8009384:	4c64e1c0 	.word	0x4c64e1c0
 8009388:	20007370 	.word	0x20007370
 800938c:	2000736c 	.word	0x2000736c
 8009390:	2000737c 	.word	0x2000737c
 8009394:	20007374 	.word	0x20007374

08009398 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8009398:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800939a:	2200      	movs	r2, #0
 800939c:	490f      	ldr	r1, [pc, #60]	@ (80093dc <MX_USB_DEVICE_Init+0x44>)
 800939e:	4810      	ldr	r0, [pc, #64]	@ (80093e0 <MX_USB_DEVICE_Init+0x48>)
 80093a0:	f000 fc60 	bl	8009c64 <USBD_Init>
 80093a4:	b970      	cbnz	r0, 80093c4 <MX_USB_DEVICE_Init+0x2c>
  {
    Error_Handler();
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80093a6:	490f      	ldr	r1, [pc, #60]	@ (80093e4 <MX_USB_DEVICE_Init+0x4c>)
 80093a8:	480d      	ldr	r0, [pc, #52]	@ (80093e0 <MX_USB_DEVICE_Init+0x48>)
 80093aa:	f000 fc72 	bl	8009c92 <USBD_RegisterClass>
 80093ae:	b960      	cbnz	r0, 80093ca <MX_USB_DEVICE_Init+0x32>
  {
    Error_Handler();
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80093b0:	490d      	ldr	r1, [pc, #52]	@ (80093e8 <MX_USB_DEVICE_Init+0x50>)
 80093b2:	480b      	ldr	r0, [pc, #44]	@ (80093e0 <MX_USB_DEVICE_Init+0x48>)
 80093b4:	f000 fa39 	bl	800982a <USBD_CDC_RegisterInterface>
 80093b8:	b950      	cbnz	r0, 80093d0 <MX_USB_DEVICE_Init+0x38>
  {
    Error_Handler();
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80093ba:	4809      	ldr	r0, [pc, #36]	@ (80093e0 <MX_USB_DEVICE_Init+0x48>)
 80093bc:	f000 fc89 	bl	8009cd2 <USBD_Start>
 80093c0:	b948      	cbnz	r0, 80093d6 <MX_USB_DEVICE_Init+0x3e>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80093c2:	bd08      	pop	{r3, pc}
    Error_Handler();
 80093c4:	f7f9 fbd2 	bl	8002b6c <Error_Handler>
 80093c8:	e7ed      	b.n	80093a6 <MX_USB_DEVICE_Init+0xe>
    Error_Handler();
 80093ca:	f7f9 fbcf 	bl	8002b6c <Error_Handler>
 80093ce:	e7ef      	b.n	80093b0 <MX_USB_DEVICE_Init+0x18>
    Error_Handler();
 80093d0:	f7f9 fbcc 	bl	8002b6c <Error_Handler>
 80093d4:	e7f1      	b.n	80093ba <MX_USB_DEVICE_Init+0x22>
    Error_Handler();
 80093d6:	f7f9 fbc9 	bl	8002b6c <Error_Handler>
}
 80093da:	e7f2      	b.n	80093c2 <MX_USB_DEVICE_Init+0x2a>
 80093dc:	20000144 	.word	0x20000144
 80093e0:	20007380 	.word	0x20007380
 80093e4:	200000b8 	.word	0x200000b8
 80093e8:	200000fc 	.word	0x200000fc

080093ec <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80093ec:	b510      	push	{r4, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80093ee:	f8d0 32d4 	ldr.w	r3, [r0, #724]	@ 0x2d4
 80093f2:	f103 02b0 	add.w	r2, r3, #176	@ 0xb0
 80093f6:	f850 4022 	ldr.w	r4, [r0, r2, lsl #2]

  if (hcdc == NULL)
 80093fa:	b18c      	cbz	r4, 8009420 <USBD_CDC_EP0_RxReady+0x34>
  {
    return (uint8_t)USBD_FAIL;
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80093fc:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 8009400:	6843      	ldr	r3, [r0, #4]
 8009402:	b17b      	cbz	r3, 8009424 <USBD_CDC_EP0_RxReady+0x38>
 8009404:	f894 0200 	ldrb.w	r0, [r4, #512]	@ 0x200
 8009408:	28ff      	cmp	r0, #255	@ 0xff
 800940a:	d00d      	beq.n	8009428 <USBD_CDC_EP0_RxReady+0x3c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800940c:	689b      	ldr	r3, [r3, #8]
 800940e:	f894 2201 	ldrb.w	r2, [r4, #513]	@ 0x201
 8009412:	4621      	mov	r1, r4
 8009414:	4798      	blx	r3
                                                                     (uint8_t *)hcdc->data,
                                                                     (uint16_t)hcdc->CmdLength);
    hcdc->CmdOpCode = 0xFFU;
 8009416:	23ff      	movs	r3, #255	@ 0xff
 8009418:	f884 3200 	strb.w	r3, [r4, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 800941c:	2000      	movs	r0, #0
}
 800941e:	bd10      	pop	{r4, pc}
    return (uint8_t)USBD_FAIL;
 8009420:	2003      	movs	r0, #3
 8009422:	e7fc      	b.n	800941e <USBD_CDC_EP0_RxReady+0x32>
  return (uint8_t)USBD_OK;
 8009424:	2000      	movs	r0, #0
 8009426:	e7fa      	b.n	800941e <USBD_CDC_EP0_RxReady+0x32>
 8009428:	2000      	movs	r0, #0
 800942a:	e7f8      	b.n	800941e <USBD_CDC_EP0_RxReady+0x32>

0800942c <USBD_CDC_GetDeviceQualifierDescriptor>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800942c:	230a      	movs	r3, #10
 800942e:	8003      	strh	r3, [r0, #0]

  return USBD_CDC_DeviceQualifierDesc;
}
 8009430:	4800      	ldr	r0, [pc, #0]	@ (8009434 <USBD_CDC_GetDeviceQualifierDescriptor+0x8>)
 8009432:	4770      	bx	lr
 8009434:	200000f0 	.word	0x200000f0

08009438 <USBD_CDC_GetOtherSpeedCfgDesc>:
{
 8009438:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800943a:	4606      	mov	r6, r0
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800943c:	4f0f      	ldr	r7, [pc, #60]	@ (800947c <USBD_CDC_GetOtherSpeedCfgDesc+0x44>)
 800943e:	2182      	movs	r1, #130	@ 0x82
 8009440:	4638      	mov	r0, r7
 8009442:	f000 fdf9 	bl	800a038 <USBD_GetEpDesc>
 8009446:	4605      	mov	r5, r0
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8009448:	2101      	movs	r1, #1
 800944a:	4638      	mov	r0, r7
 800944c:	f000 fdf4 	bl	800a038 <USBD_GetEpDesc>
 8009450:	4604      	mov	r4, r0
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8009452:	2181      	movs	r1, #129	@ 0x81
 8009454:	4638      	mov	r0, r7
 8009456:	f000 fdef 	bl	800a038 <USBD_GetEpDesc>
  if (pEpCmdDesc != NULL)
 800945a:	b10d      	cbz	r5, 8009460 <USBD_CDC_GetOtherSpeedCfgDesc+0x28>
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800945c:	2210      	movs	r2, #16
 800945e:	71aa      	strb	r2, [r5, #6]
  if (pEpOutDesc != NULL)
 8009460:	b11c      	cbz	r4, 800946a <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009462:	2240      	movs	r2, #64	@ 0x40
 8009464:	7122      	strb	r2, [r4, #4]
 8009466:	2200      	movs	r2, #0
 8009468:	7162      	strb	r2, [r4, #5]
  if (pEpInDesc != NULL)
 800946a:	b118      	cbz	r0, 8009474 <USBD_CDC_GetOtherSpeedCfgDesc+0x3c>
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800946c:	2240      	movs	r2, #64	@ 0x40
 800946e:	7102      	strb	r2, [r0, #4]
 8009470:	2200      	movs	r2, #0
 8009472:	7142      	strb	r2, [r0, #5]
  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8009474:	2343      	movs	r3, #67	@ 0x43
 8009476:	8033      	strh	r3, [r6, #0]
}
 8009478:	4800      	ldr	r0, [pc, #0]	@ (800947c <USBD_CDC_GetOtherSpeedCfgDesc+0x44>)
 800947a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800947c:	20000074 	.word	0x20000074

08009480 <USBD_CDC_GetFSCfgDesc>:
{
 8009480:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009482:	4606      	mov	r6, r0
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8009484:	4f0f      	ldr	r7, [pc, #60]	@ (80094c4 <USBD_CDC_GetFSCfgDesc+0x44>)
 8009486:	2182      	movs	r1, #130	@ 0x82
 8009488:	4638      	mov	r0, r7
 800948a:	f000 fdd5 	bl	800a038 <USBD_GetEpDesc>
 800948e:	4605      	mov	r5, r0
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8009490:	2101      	movs	r1, #1
 8009492:	4638      	mov	r0, r7
 8009494:	f000 fdd0 	bl	800a038 <USBD_GetEpDesc>
 8009498:	4604      	mov	r4, r0
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800949a:	2181      	movs	r1, #129	@ 0x81
 800949c:	4638      	mov	r0, r7
 800949e:	f000 fdcb 	bl	800a038 <USBD_GetEpDesc>
  if (pEpCmdDesc != NULL)
 80094a2:	b10d      	cbz	r5, 80094a8 <USBD_CDC_GetFSCfgDesc+0x28>
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80094a4:	2210      	movs	r2, #16
 80094a6:	71aa      	strb	r2, [r5, #6]
  if (pEpOutDesc != NULL)
 80094a8:	b11c      	cbz	r4, 80094b2 <USBD_CDC_GetFSCfgDesc+0x32>
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80094aa:	2240      	movs	r2, #64	@ 0x40
 80094ac:	7122      	strb	r2, [r4, #4]
 80094ae:	2200      	movs	r2, #0
 80094b0:	7162      	strb	r2, [r4, #5]
  if (pEpInDesc != NULL)
 80094b2:	b118      	cbz	r0, 80094bc <USBD_CDC_GetFSCfgDesc+0x3c>
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80094b4:	2240      	movs	r2, #64	@ 0x40
 80094b6:	7102      	strb	r2, [r0, #4]
 80094b8:	2200      	movs	r2, #0
 80094ba:	7142      	strb	r2, [r0, #5]
  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80094bc:	2343      	movs	r3, #67	@ 0x43
 80094be:	8033      	strh	r3, [r6, #0]
}
 80094c0:	4800      	ldr	r0, [pc, #0]	@ (80094c4 <USBD_CDC_GetFSCfgDesc+0x44>)
 80094c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80094c4:	20000074 	.word	0x20000074

080094c8 <USBD_CDC_GetHSCfgDesc>:
{
 80094c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80094ca:	4606      	mov	r6, r0
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80094cc:	4f0f      	ldr	r7, [pc, #60]	@ (800950c <USBD_CDC_GetHSCfgDesc+0x44>)
 80094ce:	2182      	movs	r1, #130	@ 0x82
 80094d0:	4638      	mov	r0, r7
 80094d2:	f000 fdb1 	bl	800a038 <USBD_GetEpDesc>
 80094d6:	4605      	mov	r5, r0
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80094d8:	2101      	movs	r1, #1
 80094da:	4638      	mov	r0, r7
 80094dc:	f000 fdac 	bl	800a038 <USBD_GetEpDesc>
 80094e0:	4604      	mov	r4, r0
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80094e2:	2181      	movs	r1, #129	@ 0x81
 80094e4:	4638      	mov	r0, r7
 80094e6:	f000 fda7 	bl	800a038 <USBD_GetEpDesc>
  if (pEpCmdDesc != NULL)
 80094ea:	b10d      	cbz	r5, 80094f0 <USBD_CDC_GetHSCfgDesc+0x28>
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 80094ec:	2210      	movs	r2, #16
 80094ee:	71aa      	strb	r2, [r5, #6]
  if (pEpOutDesc != NULL)
 80094f0:	b11c      	cbz	r4, 80094fa <USBD_CDC_GetHSCfgDesc+0x32>
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80094f2:	2200      	movs	r2, #0
 80094f4:	7122      	strb	r2, [r4, #4]
 80094f6:	2202      	movs	r2, #2
 80094f8:	7162      	strb	r2, [r4, #5]
  if (pEpInDesc != NULL)
 80094fa:	b118      	cbz	r0, 8009504 <USBD_CDC_GetHSCfgDesc+0x3c>
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80094fc:	2200      	movs	r2, #0
 80094fe:	7102      	strb	r2, [r0, #4]
 8009500:	2202      	movs	r2, #2
 8009502:	7142      	strb	r2, [r0, #5]
  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8009504:	2343      	movs	r3, #67	@ 0x43
 8009506:	8033      	strh	r3, [r6, #0]
}
 8009508:	4800      	ldr	r0, [pc, #0]	@ (800950c <USBD_CDC_GetHSCfgDesc+0x44>)
 800950a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800950c:	20000074 	.word	0x20000074

08009510 <USBD_CDC_DataOut>:
{
 8009510:	b538      	push	{r3, r4, r5, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009512:	f8d0 32d4 	ldr.w	r3, [r0, #724]	@ 0x2d4
 8009516:	33b0      	adds	r3, #176	@ 0xb0
 8009518:	f850 5023 	ldr.w	r5, [r0, r3, lsl #2]
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800951c:	b195      	cbz	r5, 8009544 <USBD_CDC_DataOut+0x34>
 800951e:	4604      	mov	r4, r0
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8009520:	f000 fb48 	bl	8009bb4 <USBD_LL_GetRxDataSize>
 8009524:	f8c5 020c 	str.w	r0, [r5, #524]	@ 0x20c
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8009528:	f8d4 32d4 	ldr.w	r3, [r4, #724]	@ 0x2d4
 800952c:	33b0      	adds	r3, #176	@ 0xb0
 800952e:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 8009532:	6863      	ldr	r3, [r4, #4]
 8009534:	68db      	ldr	r3, [r3, #12]
 8009536:	f505 7103 	add.w	r1, r5, #524	@ 0x20c
 800953a:	f8d5 0204 	ldr.w	r0, [r5, #516]	@ 0x204
 800953e:	4798      	blx	r3
  return (uint8_t)USBD_OK;
 8009540:	2000      	movs	r0, #0
}
 8009542:	bd38      	pop	{r3, r4, r5, pc}
    return (uint8_t)USBD_FAIL;
 8009544:	2003      	movs	r0, #3
 8009546:	e7fc      	b.n	8009542 <USBD_CDC_DataOut+0x32>

08009548 <USBD_CDC_DataIn>:
{
 8009548:	b538      	push	{r3, r4, r5, lr}
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800954a:	f8d0 52c8 	ldr.w	r5, [r0, #712]	@ 0x2c8
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800954e:	f8d0 32d4 	ldr.w	r3, [r0, #724]	@ 0x2d4
 8009552:	33b0      	adds	r3, #176	@ 0xb0
 8009554:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
 8009558:	b384      	cbz	r4, 80095bc <USBD_CDC_DataIn+0x74>
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800955a:	f001 030f 	and.w	r3, r1, #15
 800955e:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8009562:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8009566:	6992      	ldr	r2, [r2, #24]
 8009568:	b14a      	cbz	r2, 800957e <USBD_CDC_DataIn+0x36>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800956a:	eb03 0cc3 	add.w	ip, r3, r3, lsl #3
 800956e:	eb05 058c 	add.w	r5, r5, ip, lsl #2
 8009572:	69ed      	ldr	r5, [r5, #28]
 8009574:	fbb2 fcf5 	udiv	ip, r2, r5
 8009578:	fb05 221c 	mls	r2, r5, ip, r2
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800957c:	b192      	cbz	r2, 80095a4 <USBD_CDC_DataIn+0x5c>
    hcdc->TxState = 0U;
 800957e:	2300      	movs	r3, #0
 8009580:	f8c4 3214 	str.w	r3, [r4, #532]	@ 0x214
    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8009584:	f8d0 32d4 	ldr.w	r3, [r0, #724]	@ 0x2d4
 8009588:	33b0      	adds	r3, #176	@ 0xb0
 800958a:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 800958e:	6843      	ldr	r3, [r0, #4]
 8009590:	691b      	ldr	r3, [r3, #16]
 8009592:	b1ab      	cbz	r3, 80095c0 <USBD_CDC_DataIn+0x78>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8009594:	460a      	mov	r2, r1
 8009596:	f504 7104 	add.w	r1, r4, #528	@ 0x210
 800959a:	f8d4 0208 	ldr.w	r0, [r4, #520]	@ 0x208
 800959e:	4798      	blx	r3
  return (uint8_t)USBD_OK;
 80095a0:	2000      	movs	r0, #0
}
 80095a2:	bd38      	pop	{r3, r4, r5, pc}
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 80095a4:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80095a8:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 80095ac:	2400      	movs	r4, #0
 80095ae:	619c      	str	r4, [r3, #24]
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80095b0:	4623      	mov	r3, r4
 80095b2:	4622      	mov	r2, r4
 80095b4:	f000 fb46 	bl	8009c44 <USBD_LL_Transmit>
  return (uint8_t)USBD_OK;
 80095b8:	4620      	mov	r0, r4
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80095ba:	e7f2      	b.n	80095a2 <USBD_CDC_DataIn+0x5a>
    return (uint8_t)USBD_FAIL;
 80095bc:	2003      	movs	r0, #3
 80095be:	e7f0      	b.n	80095a2 <USBD_CDC_DataIn+0x5a>
  return (uint8_t)USBD_OK;
 80095c0:	2000      	movs	r0, #0
 80095c2:	e7ee      	b.n	80095a2 <USBD_CDC_DataIn+0x5a>

080095c4 <USBD_CDC_Setup>:
{
 80095c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80095c6:	b083      	sub	sp, #12
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80095c8:	f8d0 32d4 	ldr.w	r3, [r0, #724]	@ 0x2d4
 80095cc:	f103 02b0 	add.w	r2, r3, #176	@ 0xb0
 80095d0:	f850 7022 	ldr.w	r7, [r0, r2, lsl #2]
  uint8_t ifalt = 0U;
 80095d4:	2200      	movs	r2, #0
 80095d6:	f88d 2007 	strb.w	r2, [sp, #7]
  uint16_t status_info = 0U;
 80095da:	f8ad 2004 	strh.w	r2, [sp, #4]
  if (hcdc == NULL)
 80095de:	2f00      	cmp	r7, #0
 80095e0:	d078      	beq.n	80096d4 <USBD_CDC_Setup+0x110>
 80095e2:	4604      	mov	r4, r0
 80095e4:	460d      	mov	r5, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80095e6:	7809      	ldrb	r1, [r1, #0]
 80095e8:	f011 0660 	ands.w	r6, r1, #96	@ 0x60
 80095ec:	d034      	beq.n	8009658 <USBD_CDC_Setup+0x94>
 80095ee:	2e20      	cmp	r6, #32
 80095f0:	d169      	bne.n	80096c6 <USBD_CDC_Setup+0x102>
      if (req->wLength != 0U)
 80095f2:	88ea      	ldrh	r2, [r5, #6]
 80095f4:	b32a      	cbz	r2, 8009642 <USBD_CDC_Setup+0x7e>
        if ((req->bmRequest & 0x80U) != 0U)
 80095f6:	f011 0f80 	tst.w	r1, #128	@ 0x80
 80095fa:	d10e      	bne.n	800961a <USBD_CDC_Setup+0x56>
          hcdc->CmdOpCode = req->bRequest;
 80095fc:	786b      	ldrb	r3, [r5, #1]
 80095fe:	f887 3200 	strb.w	r3, [r7, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8009602:	88ea      	ldrh	r2, [r5, #6]
 8009604:	2a3f      	cmp	r2, #63	@ 0x3f
 8009606:	d81a      	bhi.n	800963e <USBD_CDC_Setup+0x7a>
 8009608:	b2d2      	uxtb	r2, r2
 800960a:	f887 2201 	strb.w	r2, [r7, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800960e:	4639      	mov	r1, r7
 8009610:	4620      	mov	r0, r4
 8009612:	f001 f97a 	bl	800a90a <USBD_CtlPrepareRx>
  USBD_StatusTypeDef ret = USBD_OK;
 8009616:	2600      	movs	r6, #0
 8009618:	e059      	b.n	80096ce <USBD_CDC_Setup+0x10a>
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800961a:	33b0      	adds	r3, #176	@ 0xb0
 800961c:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8009620:	685b      	ldr	r3, [r3, #4]
 8009622:	689b      	ldr	r3, [r3, #8]
 8009624:	4639      	mov	r1, r7
 8009626:	7868      	ldrb	r0, [r5, #1]
 8009628:	4798      	blx	r3
          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800962a:	88ea      	ldrh	r2, [r5, #6]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800962c:	2a07      	cmp	r2, #7
 800962e:	bf28      	it	cs
 8009630:	2207      	movcs	r2, #7
 8009632:	4639      	mov	r1, r7
 8009634:	4620      	mov	r0, r4
 8009636:	f001 f953 	bl	800a8e0 <USBD_CtlSendData>
  USBD_StatusTypeDef ret = USBD_OK;
 800963a:	2600      	movs	r6, #0
 800963c:	e047      	b.n	80096ce <USBD_CDC_Setup+0x10a>
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800963e:	2240      	movs	r2, #64	@ 0x40
 8009640:	e7e3      	b.n	800960a <USBD_CDC_Setup+0x46>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8009642:	33b0      	adds	r3, #176	@ 0xb0
 8009644:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8009648:	685b      	ldr	r3, [r3, #4]
 800964a:	689b      	ldr	r3, [r3, #8]
 800964c:	2200      	movs	r2, #0
 800964e:	4629      	mov	r1, r5
 8009650:	7868      	ldrb	r0, [r5, #1]
 8009652:	4798      	blx	r3
  USBD_StatusTypeDef ret = USBD_OK;
 8009654:	2600      	movs	r6, #0
 8009656:	e03a      	b.n	80096ce <USBD_CDC_Setup+0x10a>
      switch (req->bRequest)
 8009658:	786f      	ldrb	r7, [r5, #1]
 800965a:	2f0b      	cmp	r7, #11
 800965c:	d82e      	bhi.n	80096bc <USBD_CDC_Setup+0xf8>
 800965e:	e8df f007 	tbb	[pc, r7]
 8009662:	3606      	.short	0x3606
 8009664:	2d2d2d2d 	.word	0x2d2d2d2d
 8009668:	2d2d2d2d 	.word	0x2d2d2d2d
 800966c:	2415      	.short	0x2415
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800966e:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8009672:	2b03      	cmp	r3, #3
 8009674:	d004      	beq.n	8009680 <USBD_CDC_Setup+0xbc>
            USBD_CtlError(pdev, req);
 8009676:	4629      	mov	r1, r5
 8009678:	f000 fd1b 	bl	800a0b2 <USBD_CtlError>
            ret = USBD_FAIL;
 800967c:	2603      	movs	r6, #3
 800967e:	e026      	b.n	80096ce <USBD_CDC_Setup+0x10a>
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8009680:	2202      	movs	r2, #2
 8009682:	a901      	add	r1, sp, #4
 8009684:	f001 f92c 	bl	800a8e0 <USBD_CtlSendData>
  USBD_StatusTypeDef ret = USBD_OK;
 8009688:	463e      	mov	r6, r7
 800968a:	e020      	b.n	80096ce <USBD_CDC_Setup+0x10a>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800968c:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8009690:	2b03      	cmp	r3, #3
 8009692:	d004      	beq.n	800969e <USBD_CDC_Setup+0xda>
            USBD_CtlError(pdev, req);
 8009694:	4629      	mov	r1, r5
 8009696:	f000 fd0c 	bl	800a0b2 <USBD_CtlError>
            ret = USBD_FAIL;
 800969a:	2603      	movs	r6, #3
 800969c:	e017      	b.n	80096ce <USBD_CDC_Setup+0x10a>
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800969e:	2201      	movs	r2, #1
 80096a0:	f10d 0107 	add.w	r1, sp, #7
 80096a4:	f001 f91c 	bl	800a8e0 <USBD_CtlSendData>
 80096a8:	e011      	b.n	80096ce <USBD_CDC_Setup+0x10a>
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80096aa:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 80096ae:	2b03      	cmp	r3, #3
 80096b0:	d00d      	beq.n	80096ce <USBD_CDC_Setup+0x10a>
            USBD_CtlError(pdev, req);
 80096b2:	4629      	mov	r1, r5
 80096b4:	f000 fcfd 	bl	800a0b2 <USBD_CtlError>
            ret = USBD_FAIL;
 80096b8:	2603      	movs	r6, #3
 80096ba:	e008      	b.n	80096ce <USBD_CDC_Setup+0x10a>
          USBD_CtlError(pdev, req);
 80096bc:	4629      	mov	r1, r5
 80096be:	f000 fcf8 	bl	800a0b2 <USBD_CtlError>
          ret = USBD_FAIL;
 80096c2:	2603      	movs	r6, #3
          break;
 80096c4:	e003      	b.n	80096ce <USBD_CDC_Setup+0x10a>
      USBD_CtlError(pdev, req);
 80096c6:	4629      	mov	r1, r5
 80096c8:	f000 fcf3 	bl	800a0b2 <USBD_CtlError>
      ret = USBD_FAIL;
 80096cc:	2603      	movs	r6, #3
}
 80096ce:	4630      	mov	r0, r6
 80096d0:	b003      	add	sp, #12
 80096d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return (uint8_t)USBD_FAIL;
 80096d4:	2603      	movs	r6, #3
 80096d6:	e7fa      	b.n	80096ce <USBD_CDC_Setup+0x10a>

080096d8 <USBD_CDC_DeInit>:
{
 80096d8:	b538      	push	{r3, r4, r5, lr}
 80096da:	4604      	mov	r4, r0
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 80096dc:	2181      	movs	r1, #129	@ 0x81
 80096de:	f000 fa91 	bl	8009c04 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 80096e2:	2500      	movs	r5, #0
 80096e4:	8725      	strh	r5, [r4, #56]	@ 0x38
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 80096e6:	2101      	movs	r1, #1
 80096e8:	4620      	mov	r0, r4
 80096ea:	f000 fa8b 	bl	8009c04 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 80096ee:	f8a4 5178 	strh.w	r5, [r4, #376]	@ 0x178
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 80096f2:	2182      	movs	r1, #130	@ 0x82
 80096f4:	4620      	mov	r0, r4
 80096f6:	f000 fa85 	bl	8009c04 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 80096fa:	f8a4 504c 	strh.w	r5, [r4, #76]	@ 0x4c
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 80096fe:	f8a4 504e 	strh.w	r5, [r4, #78]	@ 0x4e
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8009702:	f8d4 32d4 	ldr.w	r3, [r4, #724]	@ 0x2d4
 8009706:	f103 02b0 	add.w	r2, r3, #176	@ 0xb0
 800970a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800970e:	b19a      	cbz	r2, 8009738 <USBD_CDC_DeInit+0x60>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8009710:	33b0      	adds	r3, #176	@ 0xb0
 8009712:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009716:	685b      	ldr	r3, [r3, #4]
 8009718:	685b      	ldr	r3, [r3, #4]
 800971a:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800971c:	f8d4 32d4 	ldr.w	r3, [r4, #724]	@ 0x2d4
 8009720:	33b0      	adds	r3, #176	@ 0xb0
 8009722:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
 8009726:	f000 fa4f 	bl	8009bc8 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800972a:	f8d4 32d4 	ldr.w	r3, [r4, #724]	@ 0x2d4
 800972e:	33b0      	adds	r3, #176	@ 0xb0
 8009730:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
    pdev->pClassData = NULL;
 8009734:	f8c4 52bc 	str.w	r5, [r4, #700]	@ 0x2bc
}
 8009738:	2000      	movs	r0, #0
 800973a:	bd38      	pop	{r3, r4, r5, pc}

0800973c <USBD_CDC_Init>:
{
 800973c:	b570      	push	{r4, r5, r6, lr}
 800973e:	4604      	mov	r4, r0
  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8009740:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8009744:	f000 fa3c 	bl	8009bc0 <USBD_static_malloc>
  if (hcdc == NULL)
 8009748:	2800      	cmp	r0, #0
 800974a:	d049      	beq.n	80097e0 <USBD_CDC_Init+0xa4>
 800974c:	4605      	mov	r5, r0
  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800974e:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8009752:	2100      	movs	r1, #0
 8009754:	f001 f982 	bl	800aa5c <memset>
  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8009758:	f8d4 32d4 	ldr.w	r3, [r4, #724]	@ 0x2d4
 800975c:	33b0      	adds	r3, #176	@ 0xb0
 800975e:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8009762:	f8c4 52bc 	str.w	r5, [r4, #700]	@ 0x2bc
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009766:	7c23      	ldrb	r3, [r4, #16]
 8009768:	2b00      	cmp	r3, #0
 800976a:	d141      	bne.n	80097f0 <USBD_CDC_Init+0xb4>
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800976c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009770:	2202      	movs	r2, #2
 8009772:	2181      	movs	r1, #129	@ 0x81
 8009774:	4620      	mov	r0, r4
 8009776:	f000 fa3a 	bl	8009bee <USBD_LL_OpenEP>
    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800977a:	2601      	movs	r6, #1
 800977c:	8726      	strh	r6, [r4, #56]	@ 0x38
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800977e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009782:	2202      	movs	r2, #2
 8009784:	4631      	mov	r1, r6
 8009786:	4620      	mov	r0, r4
 8009788:	f000 fa31 	bl	8009bee <USBD_LL_OpenEP>
    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800978c:	f8a4 6178 	strh.w	r6, [r4, #376]	@ 0x178
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8009790:	2310      	movs	r3, #16
 8009792:	f8a4 304e 	strh.w	r3, [r4, #78]	@ 0x4e
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8009796:	2308      	movs	r3, #8
 8009798:	2203      	movs	r2, #3
 800979a:	2182      	movs	r1, #130	@ 0x82
 800979c:	4620      	mov	r0, r4
 800979e:	f000 fa26 	bl	8009bee <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 80097a2:	2301      	movs	r3, #1
 80097a4:	f8a4 304c 	strh.w	r3, [r4, #76]	@ 0x4c
  hcdc->RxBuffer = NULL;
 80097a8:	2600      	movs	r6, #0
 80097aa:	f8c5 6204 	str.w	r6, [r5, #516]	@ 0x204
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 80097ae:	f8d4 32d4 	ldr.w	r3, [r4, #724]	@ 0x2d4
 80097b2:	33b0      	adds	r3, #176	@ 0xb0
 80097b4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80097b8:	685b      	ldr	r3, [r3, #4]
 80097ba:	681b      	ldr	r3, [r3, #0]
 80097bc:	4798      	blx	r3
  hcdc->TxState = 0U;
 80097be:	f8c5 6214 	str.w	r6, [r5, #532]	@ 0x214
  hcdc->RxState = 0U;
 80097c2:	f8c5 6218 	str.w	r6, [r5, #536]	@ 0x218
  if (hcdc->RxBuffer == NULL)
 80097c6:	f8d5 2204 	ldr.w	r2, [r5, #516]	@ 0x204
 80097ca:	b362      	cbz	r2, 8009826 <USBD_CDC_Init+0xea>
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80097cc:	7c25      	ldrb	r5, [r4, #16]
 80097ce:	bb1d      	cbnz	r5, 8009818 <USBD_CDC_Init+0xdc>
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80097d0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80097d4:	2101      	movs	r1, #1
 80097d6:	4620      	mov	r0, r4
 80097d8:	f000 fa3c 	bl	8009c54 <USBD_LL_PrepareReceive>
}
 80097dc:	4628      	mov	r0, r5
 80097de:	bd70      	pop	{r4, r5, r6, pc}
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80097e0:	f8d4 32d4 	ldr.w	r3, [r4, #724]	@ 0x2d4
 80097e4:	33b0      	adds	r3, #176	@ 0xb0
 80097e6:	2200      	movs	r2, #0
 80097e8:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
    return (uint8_t)USBD_EMEM;
 80097ec:	2502      	movs	r5, #2
 80097ee:	e7f5      	b.n	80097dc <USBD_CDC_Init+0xa0>
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80097f0:	2340      	movs	r3, #64	@ 0x40
 80097f2:	2202      	movs	r2, #2
 80097f4:	2181      	movs	r1, #129	@ 0x81
 80097f6:	4620      	mov	r0, r4
 80097f8:	f000 f9f9 	bl	8009bee <USBD_LL_OpenEP>
    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80097fc:	2601      	movs	r6, #1
 80097fe:	8726      	strh	r6, [r4, #56]	@ 0x38
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8009800:	2340      	movs	r3, #64	@ 0x40
 8009802:	2202      	movs	r2, #2
 8009804:	4631      	mov	r1, r6
 8009806:	4620      	mov	r0, r4
 8009808:	f000 f9f1 	bl	8009bee <USBD_LL_OpenEP>
    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800980c:	f8a4 6178 	strh.w	r6, [r4, #376]	@ 0x178
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8009810:	2310      	movs	r3, #16
 8009812:	f8a4 304e 	strh.w	r3, [r4, #78]	@ 0x4e
 8009816:	e7be      	b.n	8009796 <USBD_CDC_Init+0x5a>
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009818:	2340      	movs	r3, #64	@ 0x40
 800981a:	2101      	movs	r1, #1
 800981c:	4620      	mov	r0, r4
 800981e:	f000 fa19 	bl	8009c54 <USBD_LL_PrepareReceive>
  return (uint8_t)USBD_OK;
 8009822:	2500      	movs	r5, #0
 8009824:	e7da      	b.n	80097dc <USBD_CDC_Init+0xa0>
    return (uint8_t)USBD_EMEM;
 8009826:	2502      	movs	r5, #2
 8009828:	e7d8      	b.n	80097dc <USBD_CDC_Init+0xa0>

0800982a <USBD_CDC_RegisterInterface>:
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
  if (fops == NULL)
 800982a:	b139      	cbz	r1, 800983c <USBD_CDC_RegisterInterface+0x12>
  {
    return (uint8_t)USBD_FAIL;
  }

  pdev->pUserData[pdev->classId] = fops;
 800982c:	f8d0 32d4 	ldr.w	r3, [r0, #724]	@ 0x2d4
 8009830:	33b0      	adds	r3, #176	@ 0xb0
 8009832:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8009836:	6041      	str	r1, [r0, #4]

  return (uint8_t)USBD_OK;
 8009838:	2000      	movs	r0, #0
 800983a:	4770      	bx	lr
    return (uint8_t)USBD_FAIL;
 800983c:	2003      	movs	r0, #3
}
 800983e:	4770      	bx	lr

08009840 <USBD_CDC_SetTxBuffer>:
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009840:	f8d0 32d4 	ldr.w	r3, [r0, #724]	@ 0x2d4
 8009844:	33b0      	adds	r3, #176	@ 0xb0
 8009846:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800984a:	b12b      	cbz	r3, 8009858 <USBD_CDC_SetTxBuffer+0x18>
  {
    return (uint8_t)USBD_FAIL;
  }

  hcdc->TxBuffer = pbuff;
 800984c:	f8c3 1208 	str.w	r1, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8009850:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 8009854:	2000      	movs	r0, #0
 8009856:	4770      	bx	lr
    return (uint8_t)USBD_FAIL;
 8009858:	2003      	movs	r0, #3
}
 800985a:	4770      	bx	lr

0800985c <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800985c:	f8d0 32d4 	ldr.w	r3, [r0, #724]	@ 0x2d4
 8009860:	33b0      	adds	r3, #176	@ 0xb0
 8009862:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]

  if (hcdc == NULL)
 8009866:	b11b      	cbz	r3, 8009870 <USBD_CDC_SetRxBuffer+0x14>
  {
    return (uint8_t)USBD_FAIL;
  }

  hcdc->RxBuffer = pbuff;
 8009868:	f8c3 1204 	str.w	r1, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800986c:	2000      	movs	r0, #0
 800986e:	4770      	bx	lr
    return (uint8_t)USBD_FAIL;
 8009870:	2003      	movs	r0, #3
}
 8009872:	4770      	bx	lr

08009874 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8009874:	b508      	push	{r3, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009876:	f8d0 32d4 	ldr.w	r3, [r0, #724]	@ 0x2d4
 800987a:	33b0      	adds	r3, #176	@ 0xb0
 800987c:	f850 2023 	ldr.w	r2, [r0, r3, lsl #2]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8009880:	b18a      	cbz	r2, 80098a6 <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
  }

  if (hcdc->TxState == 0U)
 8009882:	f8d2 3214 	ldr.w	r3, [r2, #532]	@ 0x214
 8009886:	b10b      	cbz	r3, 800988c <USBD_CDC_TransmitPacket+0x18>
  USBD_StatusTypeDef ret = USBD_BUSY;
 8009888:	2001      	movs	r0, #1

    ret = USBD_OK;
  }

  return (uint8_t)ret;
}
 800988a:	bd08      	pop	{r3, pc}
    hcdc->TxState = 1U;
 800988c:	2301      	movs	r3, #1
 800988e:	f8c2 3214 	str.w	r3, [r2, #532]	@ 0x214
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8009892:	f8d2 3210 	ldr.w	r3, [r2, #528]	@ 0x210
 8009896:	62c3      	str	r3, [r0, #44]	@ 0x2c
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8009898:	f8d2 2208 	ldr.w	r2, [r2, #520]	@ 0x208
 800989c:	2181      	movs	r1, #129	@ 0x81
 800989e:	f000 f9d1 	bl	8009c44 <USBD_LL_Transmit>
    ret = USBD_OK;
 80098a2:	2000      	movs	r0, #0
 80098a4:	e7f1      	b.n	800988a <USBD_CDC_TransmitPacket+0x16>
    return (uint8_t)USBD_FAIL;
 80098a6:	2003      	movs	r0, #3
 80098a8:	e7ef      	b.n	800988a <USBD_CDC_TransmitPacket+0x16>

080098aa <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80098aa:	b510      	push	{r4, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80098ac:	f8d0 32d4 	ldr.w	r3, [r0, #724]	@ 0x2d4
 80098b0:	33b0      	adds	r3, #176	@ 0xb0
 80098b2:	f850 2023 	ldr.w	r2, [r0, r3, lsl #2]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80098b6:	b192      	cbz	r2, 80098de <USBD_CDC_ReceivePacket+0x34>
  {
    return (uint8_t)USBD_FAIL;
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80098b8:	7c04      	ldrb	r4, [r0, #16]
 80098ba:	b944      	cbnz	r4, 80098ce <USBD_CDC_ReceivePacket+0x24>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80098bc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80098c0:	f8d2 2204 	ldr.w	r2, [r2, #516]	@ 0x204
 80098c4:	2101      	movs	r1, #1
 80098c6:	f000 f9c5 	bl	8009c54 <USBD_LL_PrepareReceive>
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
}
 80098ca:	4620      	mov	r0, r4
 80098cc:	bd10      	pop	{r4, pc}
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80098ce:	2340      	movs	r3, #64	@ 0x40
 80098d0:	f8d2 2204 	ldr.w	r2, [r2, #516]	@ 0x204
 80098d4:	2101      	movs	r1, #1
 80098d6:	f000 f9bd 	bl	8009c54 <USBD_LL_PrepareReceive>
  return (uint8_t)USBD_OK;
 80098da:	2400      	movs	r4, #0
 80098dc:	e7f5      	b.n	80098ca <USBD_CDC_ReceivePacket+0x20>
    return (uint8_t)USBD_FAIL;
 80098de:	2403      	movs	r4, #3
 80098e0:	e7f3      	b.n	80098ca <USBD_CDC_ReceivePacket+0x20>

080098e2 <CDC_DeInit_FS>:
static int8_t CDC_DeInit_FS(void)
{
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
  /* USER CODE END 4 */
}
 80098e2:	2000      	movs	r0, #0
 80098e4:	4770      	bx	lr

080098e6 <CDC_Control_FS>:
    break;
  }

  return (USBD_OK);
  /* USER CODE END 5 */
}
 80098e6:	2000      	movs	r0, #0
 80098e8:	4770      	bx	lr

080098ea <CDC_TransmitCplt_FS>:
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
}
 80098ea:	2000      	movs	r0, #0
 80098ec:	4770      	bx	lr
	...

080098f0 <CDC_Receive_FS>:
{
 80098f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80098f2:	b083      	sub	sp, #12
 80098f4:	4605      	mov	r5, r0
 80098f6:	460e      	mov	r6, r1
    if ((rx_offset + *Len) > sizeof(rx_buffer)) {
 80098f8:	680a      	ldr	r2, [r1, #0]
 80098fa:	4b17      	ldr	r3, [pc, #92]	@ (8009958 <CDC_Receive_FS+0x68>)
 80098fc:	681b      	ldr	r3, [r3, #0]
 80098fe:	4413      	add	r3, r2
 8009900:	f240 411e 	movw	r1, #1054	@ 0x41e
 8009904:	428b      	cmp	r3, r1
 8009906:	d902      	bls.n	800990e <CDC_Receive_FS+0x1e>
        rx_offset = 0;  // recover safely
 8009908:	4b13      	ldr	r3, [pc, #76]	@ (8009958 <CDC_Receive_FS+0x68>)
 800990a:	2100      	movs	r1, #0
 800990c:	6019      	str	r1, [r3, #0]
    memcpy(&rx_buffer[rx_offset], Buf, *Len);
 800990e:	4f12      	ldr	r7, [pc, #72]	@ (8009958 <CDC_Receive_FS+0x68>)
 8009910:	683c      	ldr	r4, [r7, #0]
 8009912:	4629      	mov	r1, r5
 8009914:	4811      	ldr	r0, [pc, #68]	@ (800995c <CDC_Receive_FS+0x6c>)
 8009916:	4420      	add	r0, r4
 8009918:	f001 f8d4 	bl	800aac4 <memcpy>
    rx_offset += *Len;
 800991c:	6833      	ldr	r3, [r6, #0]
 800991e:	441c      	add	r4, r3
 8009920:	603c      	str	r4, [r7, #0]
    if (*Len < CDC_DATA_FS_MAX_PACKET_SIZE) {
 8009922:	2b3f      	cmp	r3, #63	@ 0x3f
 8009924:	d90a      	bls.n	800993c <CDC_Receive_FS+0x4c>
    USBD_CDC_SetRxBuffer(&hUsbDeviceFS, Buf);
 8009926:	4c0e      	ldr	r4, [pc, #56]	@ (8009960 <CDC_Receive_FS+0x70>)
 8009928:	4629      	mov	r1, r5
 800992a:	4620      	mov	r0, r4
 800992c:	f7ff ff96 	bl	800985c <USBD_CDC_SetRxBuffer>
    USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8009930:	4620      	mov	r0, r4
 8009932:	f7ff ffba 	bl	80098aa <USBD_CDC_ReceivePacket>
}
 8009936:	2000      	movs	r0, #0
 8009938:	b003      	add	sp, #12
 800993a:	bdf0      	pop	{r4, r5, r6, r7, pc}
        usb_packet_ptr_t packet = {
 800993c:	4b07      	ldr	r3, [pc, #28]	@ (800995c <CDC_Receive_FS+0x6c>)
 800993e:	9300      	str	r3, [sp, #0]
 8009940:	9401      	str	r4, [sp, #4]
        osMessageQueuePut(usb_rx_queue, &packet, 0, 0);
 8009942:	2300      	movs	r3, #0
 8009944:	461a      	mov	r2, r3
 8009946:	4669      	mov	r1, sp
 8009948:	4806      	ldr	r0, [pc, #24]	@ (8009964 <CDC_Receive_FS+0x74>)
 800994a:	6800      	ldr	r0, [r0, #0]
 800994c:	f7f7 fbfb 	bl	8001146 <osMessageQueuePut>
        rx_offset = 0;  // ready for next message
 8009950:	2200      	movs	r2, #0
 8009952:	603a      	str	r2, [r7, #0]
 8009954:	e7e7      	b.n	8009926 <CDC_Receive_FS+0x36>
 8009956:	bf00      	nop
 8009958:	2000765c 	.word	0x2000765c
 800995c:	20000a04 	.word	0x20000a04
 8009960:	20007380 	.word	0x20007380
 8009964:	20001244 	.word	0x20001244

08009968 <CDC_Init_FS>:
{
 8009968:	b510      	push	{r4, lr}
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800996a:	4c06      	ldr	r4, [pc, #24]	@ (8009984 <CDC_Init_FS+0x1c>)
 800996c:	2200      	movs	r2, #0
 800996e:	4906      	ldr	r1, [pc, #24]	@ (8009988 <CDC_Init_FS+0x20>)
 8009970:	4620      	mov	r0, r4
 8009972:	f7ff ff65 	bl	8009840 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8009976:	4905      	ldr	r1, [pc, #20]	@ (800998c <CDC_Init_FS+0x24>)
 8009978:	4620      	mov	r0, r4
 800997a:	f7ff ff6f 	bl	800985c <USBD_CDC_SetRxBuffer>
}
 800997e:	2000      	movs	r0, #0
 8009980:	bd10      	pop	{r4, pc}
 8009982:	bf00      	nop
 8009984:	20007380 	.word	0x20007380
 8009988:	20007660 	.word	0x20007660
 800998c:	20007a60 	.word	0x20007a60

08009990 <CDC_Transmit_FS>:
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8009990:	4b09      	ldr	r3, [pc, #36]	@ (80099b8 <CDC_Transmit_FS+0x28>)
 8009992:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
  if (hcdc->TxState != 0){
 8009996:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800999a:	b10b      	cbz	r3, 80099a0 <CDC_Transmit_FS+0x10>
    return USBD_BUSY;
 800999c:	2001      	movs	r0, #1
}
 800999e:	4770      	bx	lr
{
 80099a0:	b510      	push	{r4, lr}
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80099a2:	4c05      	ldr	r4, [pc, #20]	@ (80099b8 <CDC_Transmit_FS+0x28>)
 80099a4:	460a      	mov	r2, r1
 80099a6:	4601      	mov	r1, r0
 80099a8:	4620      	mov	r0, r4
 80099aa:	f7ff ff49 	bl	8009840 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80099ae:	4620      	mov	r0, r4
 80099b0:	f7ff ff60 	bl	8009874 <USBD_CDC_TransmitPacket>
}
 80099b4:	bd10      	pop	{r4, pc}
 80099b6:	bf00      	nop
 80099b8:	20007380 	.word	0x20007380

080099bc <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80099bc:	b530      	push	{r4, r5, lr}
 80099be:	b089      	sub	sp, #36	@ 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80099c0:	2300      	movs	r3, #0
 80099c2:	9303      	str	r3, [sp, #12]
 80099c4:	9304      	str	r3, [sp, #16]
 80099c6:	9305      	str	r3, [sp, #20]
 80099c8:	9306      	str	r3, [sp, #24]
 80099ca:	9307      	str	r3, [sp, #28]
  if(pcdHandle->Instance==USB_OTG_FS)
 80099cc:	6803      	ldr	r3, [r0, #0]
 80099ce:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80099d2:	d001      	beq.n	80099d8 <HAL_PCD_MspInit+0x1c>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80099d4:	b009      	add	sp, #36	@ 0x24
 80099d6:	bd30      	pop	{r4, r5, pc}
 80099d8:	aa03      	add	r2, sp, #12
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80099da:	2500      	movs	r5, #0
 80099dc:	9501      	str	r5, [sp, #4]
 80099de:	4c17      	ldr	r4, [pc, #92]	@ (8009a3c <HAL_PCD_MspInit+0x80>)
 80099e0:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80099e2:	f043 0301 	orr.w	r3, r3, #1
 80099e6:	6323      	str	r3, [r4, #48]	@ 0x30
 80099e8:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80099ea:	f003 0301 	and.w	r3, r3, #1
 80099ee:	9301      	str	r3, [sp, #4]
 80099f0:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80099f2:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80099f6:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80099f8:	2302      	movs	r3, #2
 80099fa:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80099fc:	2303      	movs	r3, #3
 80099fe:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8009a00:	230a      	movs	r3, #10
 8009a02:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009a04:	4611      	mov	r1, r2
 8009a06:	480e      	ldr	r0, [pc, #56]	@ (8009a40 <HAL_PCD_MspInit+0x84>)
 8009a08:	f7fa ffbe 	bl	8004988 <HAL_GPIO_Init>
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8009a0c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8009a0e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009a12:	6363      	str	r3, [r4, #52]	@ 0x34
 8009a14:	9502      	str	r5, [sp, #8]
 8009a16:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8009a18:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8009a1c:	6463      	str	r3, [r4, #68]	@ 0x44
 8009a1e:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8009a20:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009a24:	9302      	str	r3, [sp, #8]
 8009a26:	9b02      	ldr	r3, [sp, #8]
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 8009a28:	462a      	mov	r2, r5
 8009a2a:	2105      	movs	r1, #5
 8009a2c:	2043      	movs	r0, #67	@ 0x43
 8009a2e:	f7fa fd83 	bl	8004538 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8009a32:	2043      	movs	r0, #67	@ 0x43
 8009a34:	f7fa fd90 	bl	8004558 <HAL_NVIC_EnableIRQ>
}
 8009a38:	e7cc      	b.n	80099d4 <HAL_PCD_MspInit+0x18>
 8009a3a:	bf00      	nop
 8009a3c:	40023800 	.word	0x40023800
 8009a40:	40020000 	.word	0x40020000

08009a44 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009a44:	b508      	push	{r3, lr}
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009a46:	f200 419c 	addw	r1, r0, #1180	@ 0x49c
 8009a4a:	f8d0 04e0 	ldr.w	r0, [r0, #1248]	@ 0x4e0
 8009a4e:	f000 f956 	bl	8009cfe <USBD_LL_SetupStage>
}
 8009a52:	bd08      	pop	{r3, pc}

08009a54 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009a54:	b508      	push	{r3, lr}
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8009a56:	eb01 03c1 	add.w	r3, r1, r1, lsl #3
 8009a5a:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8009a5e:	f8d3 2260 	ldr.w	r2, [r3, #608]	@ 0x260
 8009a62:	f8d0 04e0 	ldr.w	r0, [r0, #1248]	@ 0x4e0
 8009a66:	f000 fa17 	bl	8009e98 <USBD_LL_DataOutStage>
}
 8009a6a:	bd08      	pop	{r3, pc}

08009a6c <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009a6c:	b508      	push	{r3, lr}
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8009a6e:	eb01 03c1 	add.w	r3, r1, r1, lsl #3
 8009a72:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8009a76:	6a1a      	ldr	r2, [r3, #32]
 8009a78:	f8d0 04e0 	ldr.w	r0, [r0, #1248]	@ 0x4e0
 8009a7c:	f000 fa6c 	bl	8009f58 <USBD_LL_DataInStage>
}
 8009a80:	bd08      	pop	{r3, pc}

08009a82 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009a82:	b508      	push	{r3, lr}
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8009a84:	f8d0 04e0 	ldr.w	r0, [r0, #1248]	@ 0x4e0
 8009a88:	f000 f9b4 	bl	8009df4 <USBD_LL_SOF>
}
 8009a8c:	bd08      	pop	{r3, pc}

08009a8e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009a8e:	b510      	push	{r4, lr}
 8009a90:	4604      	mov	r4, r0
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8009a92:	79c3      	ldrb	r3, [r0, #7]
 8009a94:	2b02      	cmp	r3, #2
 8009a96:	d109      	bne.n	8009aac <HAL_PCD_ResetCallback+0x1e>
  {
    Error_Handler();
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8009a98:	2101      	movs	r1, #1
 8009a9a:	f8d4 04e0 	ldr.w	r0, [r4, #1248]	@ 0x4e0
 8009a9e:	f000 f98c 	bl	8009dba <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8009aa2:	f8d4 04e0 	ldr.w	r0, [r4, #1248]	@ 0x4e0
 8009aa6:	f000 f956 	bl	8009d56 <USBD_LL_Reset>
}
 8009aaa:	bd10      	pop	{r4, pc}
    Error_Handler();
 8009aac:	f7f9 f85e 	bl	8002b6c <Error_Handler>
 8009ab0:	e7f2      	b.n	8009a98 <HAL_PCD_ResetCallback+0xa>
	...

08009ab4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009ab4:	b510      	push	{r4, lr}
 8009ab6:	4604      	mov	r4, r0
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009ab8:	f8d0 04e0 	ldr.w	r0, [r0, #1248]	@ 0x4e0
 8009abc:	f000 f980 	bl	8009dc0 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8009ac0:	6822      	ldr	r2, [r4, #0]
 8009ac2:	f8d2 3e00 	ldr.w	r3, [r2, #3584]	@ 0xe00
 8009ac6:	f043 0301 	orr.w	r3, r3, #1
 8009aca:	f8c2 3e00 	str.w	r3, [r2, #3584]	@ 0xe00
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8009ace:	7ae3      	ldrb	r3, [r4, #11]
 8009ad0:	b123      	cbz	r3, 8009adc <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009ad2:	4a03      	ldr	r2, [pc, #12]	@ (8009ae0 <HAL_PCD_SuspendCallback+0x2c>)
 8009ad4:	6913      	ldr	r3, [r2, #16]
 8009ad6:	f043 0306 	orr.w	r3, r3, #6
 8009ada:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8009adc:	bd10      	pop	{r4, pc}
 8009ade:	bf00      	nop
 8009ae0:	e000ed00 	.word	0xe000ed00

08009ae4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009ae4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009ae6:	f8d0 04e0 	ldr.w	r0, [r0, #1248]	@ 0x4e0
 8009aea:	f000 f977 	bl	8009ddc <USBD_LL_Resume>
}
 8009aee:	bd08      	pop	{r3, pc}

08009af0 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009af0:	b508      	push	{r3, lr}
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009af2:	f8d0 04e0 	ldr.w	r0, [r0, #1248]	@ 0x4e0
 8009af6:	f000 f9a3 	bl	8009e40 <USBD_LL_IsoOUTIncomplete>
}
 8009afa:	bd08      	pop	{r3, pc}

08009afc <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009afc:	b508      	push	{r3, lr}
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009afe:	f8d0 04e0 	ldr.w	r0, [r0, #1248]	@ 0x4e0
 8009b02:	f000 f987 	bl	8009e14 <USBD_LL_IsoINIncomplete>
}
 8009b06:	bd08      	pop	{r3, pc}

08009b08 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009b08:	b508      	push	{r3, lr}
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8009b0a:	f8d0 04e0 	ldr.w	r0, [r0, #1248]	@ 0x4e0
 8009b0e:	f000 f9ad 	bl	8009e6c <USBD_LL_DevConnected>
}
 8009b12:	bd08      	pop	{r3, pc}

08009b14 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009b14:	b508      	push	{r3, lr}
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8009b16:	f8d0 04e0 	ldr.w	r0, [r0, #1248]	@ 0x4e0
 8009b1a:	f000 f9a9 	bl	8009e70 <USBD_LL_DevDisconnected>
}
 8009b1e:	bd08      	pop	{r3, pc}

08009b20 <USBD_LL_Init>:
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8009b20:	7802      	ldrb	r2, [r0, #0]
 8009b22:	b10a      	cbz	r2, 8009b28 <USBD_LL_Init+0x8>
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
  }
  return USBD_OK;
}
 8009b24:	2000      	movs	r0, #0
 8009b26:	4770      	bx	lr
{
 8009b28:	b510      	push	{r4, lr}
 8009b2a:	4603      	mov	r3, r0
  hpcd_USB_OTG_FS.pData = pdev;
 8009b2c:	4815      	ldr	r0, [pc, #84]	@ (8009b84 <USBD_LL_Init+0x64>)
 8009b2e:	f8c0 34e0 	str.w	r3, [r0, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 8009b32:	f8c3 02c8 	str.w	r0, [r3, #712]	@ 0x2c8
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8009b36:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8009b3a:	6003      	str	r3, [r0, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8009b3c:	2304      	movs	r3, #4
 8009b3e:	7103      	strb	r3, [r0, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8009b40:	2202      	movs	r2, #2
 8009b42:	71c2      	strb	r2, [r0, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8009b44:	2300      	movs	r3, #0
 8009b46:	7183      	strb	r3, [r0, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8009b48:	7242      	strb	r2, [r0, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8009b4a:	7283      	strb	r3, [r0, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8009b4c:	72c3      	strb	r3, [r0, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8009b4e:	7303      	strb	r3, [r0, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8009b50:	7383      	strb	r3, [r0, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8009b52:	73c3      	strb	r3, [r0, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8009b54:	f7fb f988 	bl	8004e68 <HAL_PCD_Init>
 8009b58:	b980      	cbnz	r0, 8009b7c <USBD_LL_Init+0x5c>
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8009b5a:	4c0a      	ldr	r4, [pc, #40]	@ (8009b84 <USBD_LL_Init+0x64>)
 8009b5c:	2180      	movs	r1, #128	@ 0x80
 8009b5e:	4620      	mov	r0, r4
 8009b60:	f7fb ff51 	bl	8005a06 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8009b64:	2240      	movs	r2, #64	@ 0x40
 8009b66:	2100      	movs	r1, #0
 8009b68:	4620      	mov	r0, r4
 8009b6a:	f7fb ff26 	bl	80059ba <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8009b6e:	2280      	movs	r2, #128	@ 0x80
 8009b70:	2101      	movs	r1, #1
 8009b72:	4620      	mov	r0, r4
 8009b74:	f7fb ff21 	bl	80059ba <HAL_PCDEx_SetTxFiFo>
}
 8009b78:	2000      	movs	r0, #0
 8009b7a:	bd10      	pop	{r4, pc}
    Error_Handler( );
 8009b7c:	f7f8 fff6 	bl	8002b6c <Error_Handler>
 8009b80:	e7eb      	b.n	8009b5a <USBD_LL_Init+0x3a>
 8009b82:	bf00      	nop
 8009b84:	20008080 	.word	0x20008080

08009b88 <USBD_LL_IsStallEP>:
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009b88:	f8d0 32c8 	ldr.w	r3, [r0, #712]	@ 0x2c8

  if((ep_addr & 0x80) == 0x80)
 8009b8c:	f011 0f80 	tst.w	r1, #128	@ 0x80
 8009b90:	d108      	bne.n	8009ba4 <USBD_LL_IsStallEP+0x1c>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8009b92:	f001 017f 	and.w	r1, r1, #127	@ 0x7f
 8009b96:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 8009b9a:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 8009b9e:	f893 0256 	ldrb.w	r0, [r3, #598]	@ 0x256
  }
}
 8009ba2:	4770      	bx	lr
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8009ba4:	f001 017f 	and.w	r1, r1, #127	@ 0x7f
 8009ba8:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 8009bac:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 8009bb0:	7d98      	ldrb	r0, [r3, #22]
 8009bb2:	4770      	bx	lr

08009bb4 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009bb4:	b508      	push	{r3, lr}
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8009bb6:	f8d0 02c8 	ldr.w	r0, [r0, #712]	@ 0x2c8
 8009bba:	f7fb fb59 	bl	8005270 <HAL_PCD_EP_GetRxCount>
}
 8009bbe:	bd08      	pop	{r3, pc}

08009bc0 <USBD_static_malloc>:
  */
void *USBD_static_malloc(uint32_t size)
{
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
}
 8009bc0:	4800      	ldr	r0, [pc, #0]	@ (8009bc4 <USBD_static_malloc+0x4>)
 8009bc2:	4770      	bx	lr
 8009bc4:	20007e60 	.word	0x20007e60

08009bc8 <USBD_static_free>:
  * @retval None
  */
void USBD_static_free(void *p)
{

}
 8009bc8:	4770      	bx	lr

08009bca <USBD_Get_USB_Status>:
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
  USBD_StatusTypeDef usb_status = USBD_OK;

  switch (hal_status)
 8009bca:	2803      	cmp	r0, #3
 8009bcc:	d805      	bhi.n	8009bda <USBD_Get_USB_Status+0x10>
 8009bce:	e8df f000 	tbb	[pc, r0]
 8009bd2:	0405      	.short	0x0405
 8009bd4:	0502      	.short	0x0502
    break;
    case HAL_ERROR :
      usb_status = USBD_FAIL;
    break;
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009bd6:	2001      	movs	r0, #1
    break;
 8009bd8:	4770      	bx	lr
      usb_status = USBD_FAIL;
 8009bda:	2003      	movs	r0, #3
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;
}
 8009bdc:	4770      	bx	lr

08009bde <USBD_LL_Start>:
{
 8009bde:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_Start(pdev->pData);
 8009be0:	f8d0 02c8 	ldr.w	r0, [r0, #712]	@ 0x2c8
 8009be4:	f7fb f9c1 	bl	8004f6a <HAL_PCD_Start>
  usb_status =  USBD_Get_USB_Status(hal_status);
 8009be8:	f7ff ffef 	bl	8009bca <USBD_Get_USB_Status>
}
 8009bec:	bd08      	pop	{r3, pc}

08009bee <USBD_LL_OpenEP>:
{
 8009bee:	b508      	push	{r3, lr}
 8009bf0:	4694      	mov	ip, r2
 8009bf2:	461a      	mov	r2, r3
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009bf4:	4663      	mov	r3, ip
 8009bf6:	f8d0 02c8 	ldr.w	r0, [r0, #712]	@ 0x2c8
 8009bfa:	f7fb fa96 	bl	800512a <HAL_PCD_EP_Open>
  usb_status =  USBD_Get_USB_Status(hal_status);
 8009bfe:	f7ff ffe4 	bl	8009bca <USBD_Get_USB_Status>
}
 8009c02:	bd08      	pop	{r3, pc}

08009c04 <USBD_LL_CloseEP>:
{
 8009c04:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8009c06:	f8d0 02c8 	ldr.w	r0, [r0, #712]	@ 0x2c8
 8009c0a:	f7fb fad4 	bl	80051b6 <HAL_PCD_EP_Close>
  usb_status =  USBD_Get_USB_Status(hal_status);
 8009c0e:	f7ff ffdc 	bl	8009bca <USBD_Get_USB_Status>
}
 8009c12:	bd08      	pop	{r3, pc}

08009c14 <USBD_LL_StallEP>:
{
 8009c14:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009c16:	f8d0 02c8 	ldr.w	r0, [r0, #712]	@ 0x2c8
 8009c1a:	f7fb fb57 	bl	80052cc <HAL_PCD_EP_SetStall>
  usb_status =  USBD_Get_USB_Status(hal_status);
 8009c1e:	f7ff ffd4 	bl	8009bca <USBD_Get_USB_Status>
}
 8009c22:	bd08      	pop	{r3, pc}

08009c24 <USBD_LL_ClearStallEP>:
{
 8009c24:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8009c26:	f8d0 02c8 	ldr.w	r0, [r0, #712]	@ 0x2c8
 8009c2a:	f7fb fb92 	bl	8005352 <HAL_PCD_EP_ClrStall>
  usb_status =  USBD_Get_USB_Status(hal_status);
 8009c2e:	f7ff ffcc 	bl	8009bca <USBD_Get_USB_Status>
}
 8009c32:	bd08      	pop	{r3, pc}

08009c34 <USBD_LL_SetUSBAddress>:
{
 8009c34:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009c36:	f8d0 02c8 	ldr.w	r0, [r0, #712]	@ 0x2c8
 8009c3a:	f7fb fa63 	bl	8005104 <HAL_PCD_SetAddress>
  usb_status =  USBD_Get_USB_Status(hal_status);
 8009c3e:	f7ff ffc4 	bl	8009bca <USBD_Get_USB_Status>
}
 8009c42:	bd08      	pop	{r3, pc}

08009c44 <USBD_LL_Transmit>:
{
 8009c44:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8009c46:	f8d0 02c8 	ldr.w	r0, [r0, #712]	@ 0x2c8
 8009c4a:	f7fb fb1a 	bl	8005282 <HAL_PCD_EP_Transmit>
  usb_status =  USBD_Get_USB_Status(hal_status);
 8009c4e:	f7ff ffbc 	bl	8009bca <USBD_Get_USB_Status>
}
 8009c52:	bd08      	pop	{r3, pc}

08009c54 <USBD_LL_PrepareReceive>:
{
 8009c54:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8009c56:	f8d0 02c8 	ldr.w	r0, [r0, #712]	@ 0x2c8
 8009c5a:	f7fb fae4 	bl	8005226 <HAL_PCD_EP_Receive>
  usb_status =  USBD_Get_USB_Status(hal_status);
 8009c5e:	f7ff ffb4 	bl	8009bca <USBD_Get_USB_Status>
}
 8009c62:	bd08      	pop	{r3, pc}

08009c64 <USBD_Init>:
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8009c64:	b198      	cbz	r0, 8009c8e <USBD_Init+0x2a>
{
 8009c66:	b508      	push	{r3, lr}
 8009c68:	4603      	mov	r3, r0
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8009c6a:	2000      	movs	r0, #0
 8009c6c:	f8c3 02b8 	str.w	r0, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8009c70:	f8c3 02c4 	str.w	r0, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8009c74:	f8c3 02d0 	str.w	r0, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8009c78:	b109      	cbz	r1, 8009c7e <USBD_Init+0x1a>
  {
    pdev->pDesc = pdesc;
 8009c7a:	f8c3 12b4 	str.w	r1, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009c7e:	2101      	movs	r1, #1
 8009c80:	f883 129c 	strb.w	r1, [r3, #668]	@ 0x29c
  pdev->id = id;
 8009c84:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8009c86:	4618      	mov	r0, r3
 8009c88:	f7ff ff4a 	bl	8009b20 <USBD_LL_Init>

  return ret;
}
 8009c8c:	bd08      	pop	{r3, pc}
    return USBD_FAIL;
 8009c8e:	2003      	movs	r0, #3
}
 8009c90:	4770      	bx	lr

08009c92 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8009c92:	b510      	push	{r4, lr}
 8009c94:	b082      	sub	sp, #8
  uint16_t len = 0U;
 8009c96:	2300      	movs	r3, #0
 8009c98:	f8ad 3006 	strh.w	r3, [sp, #6]

  if (pclass == NULL)
 8009c9c:	b1b9      	cbz	r1, 8009cce <USBD_RegisterClass+0x3c>
 8009c9e:	4604      	mov	r4, r0
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8009ca0:	f8c0 12b8 	str.w	r1, [r0, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8009ca4:	f8d0 22d4 	ldr.w	r2, [r0, #724]	@ 0x2d4
 8009ca8:	6acb      	ldr	r3, [r1, #44]	@ 0x2c
 8009caa:	b143      	cbz	r3, 8009cbe <USBD_RegisterClass+0x2c>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8009cac:	32ae      	adds	r2, #174	@ 0xae
 8009cae:	f850 3022 	ldr.w	r3, [r0, r2, lsl #2]
 8009cb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009cb4:	f10d 0006 	add.w	r0, sp, #6
 8009cb8:	4798      	blx	r3
 8009cba:	f8c4 02d0 	str.w	r0, [r4, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 8009cbe:	f8d4 32d8 	ldr.w	r3, [r4, #728]	@ 0x2d8
 8009cc2:	3301      	adds	r3, #1
 8009cc4:	f8c4 32d8 	str.w	r3, [r4, #728]	@ 0x2d8

  return USBD_OK;
 8009cc8:	2000      	movs	r0, #0
}
 8009cca:	b002      	add	sp, #8
 8009ccc:	bd10      	pop	{r4, pc}
    return USBD_FAIL;
 8009cce:	2003      	movs	r0, #3
 8009cd0:	e7fb      	b.n	8009cca <USBD_RegisterClass+0x38>

08009cd2 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8009cd2:	b508      	push	{r3, lr}
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8009cd4:	f7ff ff83 	bl	8009bde <USBD_LL_Start>
}
 8009cd8:	bd08      	pop	{r3, pc}

08009cda <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009cda:	b508      	push	{r3, lr}
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8009cdc:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8
 8009ce0:	b113      	cbz	r3, 8009ce8 <USBD_SetClassConfig+0xe>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8009ce2:	681b      	ldr	r3, [r3, #0]
 8009ce4:	4798      	blx	r3
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
}
 8009ce6:	bd08      	pop	{r3, pc}
  USBD_StatusTypeDef ret = USBD_OK;
 8009ce8:	2000      	movs	r0, #0
 8009cea:	e7fc      	b.n	8009ce6 <USBD_SetClassConfig+0xc>

08009cec <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009cec:	b508      	push	{r3, lr}
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8009cee:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8
 8009cf2:	685b      	ldr	r3, [r3, #4]
 8009cf4:	4798      	blx	r3
 8009cf6:	b900      	cbnz	r0, 8009cfa <USBD_ClrClassConfig+0xe>
    ret = USBD_FAIL;
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
}
 8009cf8:	bd08      	pop	{r3, pc}
    ret = USBD_FAIL;
 8009cfa:	2003      	movs	r0, #3
 8009cfc:	e7fc      	b.n	8009cf8 <USBD_ClrClassConfig+0xc>

08009cfe <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8009cfe:	b538      	push	{r3, r4, r5, lr}
 8009d00:	4604      	mov	r4, r0
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8009d02:	f200 25aa 	addw	r5, r0, #682	@ 0x2aa
 8009d06:	4628      	mov	r0, r5
 8009d08:	f000 f9bf 	bl	800a08a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8009d0c:	2301      	movs	r3, #1
 8009d0e:	f8c4 3294 	str.w	r3, [r4, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8009d12:	f8b4 32b0 	ldrh.w	r3, [r4, #688]	@ 0x2b0
 8009d16:	f8c4 3298 	str.w	r3, [r4, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8009d1a:	f894 12aa 	ldrb.w	r1, [r4, #682]	@ 0x2aa
 8009d1e:	f001 031f 	and.w	r3, r1, #31
 8009d22:	2b01      	cmp	r3, #1
 8009d24:	d007      	beq.n	8009d36 <USBD_LL_SetupStage+0x38>
 8009d26:	2b02      	cmp	r3, #2
 8009d28:	d00a      	beq.n	8009d40 <USBD_LL_SetupStage+0x42>
 8009d2a:	b973      	cbnz	r3, 8009d4a <USBD_LL_SetupStage+0x4c>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8009d2c:	4629      	mov	r1, r5
 8009d2e:	4620      	mov	r0, r4
 8009d30:	f000 fb80 	bl	800a434 <USBD_StdDevReq>
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
      break;
  }

  return ret;
}
 8009d34:	bd38      	pop	{r3, r4, r5, pc}
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8009d36:	4629      	mov	r1, r5
 8009d38:	4620      	mov	r0, r4
 8009d3a:	f000 fbb6 	bl	800a4aa <USBD_StdItfReq>
      break;
 8009d3e:	e7f9      	b.n	8009d34 <USBD_LL_SetupStage+0x36>
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8009d40:	4629      	mov	r1, r5
 8009d42:	4620      	mov	r0, r4
 8009d44:	f000 fbf3 	bl	800a52e <USBD_StdEPReq>
      break;
 8009d48:	e7f4      	b.n	8009d34 <USBD_LL_SetupStage+0x36>
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8009d4a:	f001 0180 	and.w	r1, r1, #128	@ 0x80
 8009d4e:	4620      	mov	r0, r4
 8009d50:	f7ff ff60 	bl	8009c14 <USBD_LL_StallEP>
      break;
 8009d54:	e7ee      	b.n	8009d34 <USBD_LL_SetupStage+0x36>

08009d56 <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8009d56:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d58:	4604      	mov	r4, r0
  USBD_StatusTypeDef ret = USBD_OK;

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009d5a:	2301      	movs	r3, #1
 8009d5c:	f880 329c 	strb.w	r3, [r0, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8009d60:	2300      	movs	r3, #0
 8009d62:	f8c0 3294 	str.w	r3, [r0, #660]	@ 0x294
  pdev->dev_config = 0U;
 8009d66:	6043      	str	r3, [r0, #4]
  pdev->dev_remote_wakeup = 0U;
 8009d68:	f8c0 32a4 	str.w	r3, [r0, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8009d6c:	f880 32a0 	strb.w	r3, [r0, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8009d70:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8
 8009d74:	b1db      	cbz	r3, 8009dae <USBD_LL_Reset+0x58>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8009d76:	685b      	ldr	r3, [r3, #4]
 8009d78:	b1db      	cbz	r3, 8009db2 <USBD_LL_Reset+0x5c>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8009d7a:	2100      	movs	r1, #0
 8009d7c:	4798      	blx	r3
 8009d7e:	4607      	mov	r7, r0
 8009d80:	b9c8      	cbnz	r0, 8009db6 <USBD_LL_Reset+0x60>
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009d82:	2340      	movs	r3, #64	@ 0x40
 8009d84:	2200      	movs	r2, #0
 8009d86:	4611      	mov	r1, r2
 8009d88:	4620      	mov	r0, r4
 8009d8a:	f7ff ff30 	bl	8009bee <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8009d8e:	2601      	movs	r6, #1
 8009d90:	f8a4 6164 	strh.w	r6, [r4, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8009d94:	2540      	movs	r5, #64	@ 0x40
 8009d96:	f8c4 5160 	str.w	r5, [r4, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009d9a:	462b      	mov	r3, r5
 8009d9c:	2200      	movs	r2, #0
 8009d9e:	2180      	movs	r1, #128	@ 0x80
 8009da0:	4620      	mov	r0, r4
 8009da2:	f7ff ff24 	bl	8009bee <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8009da6:	84a6      	strh	r6, [r4, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8009da8:	6225      	str	r5, [r4, #32]

  return ret;
}
 8009daa:	4638      	mov	r0, r7
 8009dac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  USBD_StatusTypeDef ret = USBD_OK;
 8009dae:	2700      	movs	r7, #0
 8009db0:	e7e7      	b.n	8009d82 <USBD_LL_Reset+0x2c>
 8009db2:	2700      	movs	r7, #0
 8009db4:	e7e5      	b.n	8009d82 <USBD_LL_Reset+0x2c>
        ret = USBD_FAIL;
 8009db6:	2703      	movs	r7, #3
 8009db8:	e7e3      	b.n	8009d82 <USBD_LL_Reset+0x2c>

08009dba <USBD_LL_SetSpeed>:
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
  pdev->dev_speed = speed;
 8009dba:	7401      	strb	r1, [r0, #16]

  return USBD_OK;
}
 8009dbc:	2000      	movs	r0, #0
 8009dbe:	4770      	bx	lr

08009dc0 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8009dc0:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8009dc4:	2b04      	cmp	r3, #4
 8009dc6:	d004      	beq.n	8009dd2 <USBD_LL_Suspend+0x12>
  {
    pdev->dev_old_state = pdev->dev_state;
 8009dc8:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8009dcc:	b2db      	uxtb	r3, r3
 8009dce:	f880 329d 	strb.w	r3, [r0, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8009dd2:	2304      	movs	r3, #4
 8009dd4:	f880 329c 	strb.w	r3, [r0, #668]	@ 0x29c

  return USBD_OK;
}
 8009dd8:	2000      	movs	r0, #0
 8009dda:	4770      	bx	lr

08009ddc <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8009ddc:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8009de0:	2b04      	cmp	r3, #4
 8009de2:	d001      	beq.n	8009de8 <USBD_LL_Resume+0xc>
  {
    pdev->dev_state = pdev->dev_old_state;
  }

  return USBD_OK;
}
 8009de4:	2000      	movs	r0, #0
 8009de6:	4770      	bx	lr
    pdev->dev_state = pdev->dev_old_state;
 8009de8:	f890 329d 	ldrb.w	r3, [r0, #669]	@ 0x29d
 8009dec:	b2db      	uxtb	r3, r3
 8009dee:	f880 329c 	strb.w	r3, [r0, #668]	@ 0x29c
 8009df2:	e7f7      	b.n	8009de4 <USBD_LL_Resume+0x8>

08009df4 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8009df4:	b508      	push	{r3, lr}
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009df6:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8009dfa:	2b03      	cmp	r3, #3
 8009dfc:	d001      	beq.n	8009e02 <USBD_LL_SOF+0xe>
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
}
 8009dfe:	2000      	movs	r0, #0
 8009e00:	bd08      	pop	{r3, pc}
    if (pdev->pClass[0] != NULL)
 8009e02:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8
 8009e06:	2b00      	cmp	r3, #0
 8009e08:	d0f9      	beq.n	8009dfe <USBD_LL_SOF+0xa>
      if (pdev->pClass[0]->SOF != NULL)
 8009e0a:	69db      	ldr	r3, [r3, #28]
 8009e0c:	2b00      	cmp	r3, #0
 8009e0e:	d0f6      	beq.n	8009dfe <USBD_LL_SOF+0xa>
        (void)pdev->pClass[0]->SOF(pdev);
 8009e10:	4798      	blx	r3
 8009e12:	e7f4      	b.n	8009dfe <USBD_LL_SOF+0xa>

08009e14 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8009e14:	b508      	push	{r3, lr}
  if (pdev->pClass[pdev->classId] == NULL)
 8009e16:	f8d0 32d4 	ldr.w	r3, [r0, #724]	@ 0x2d4
 8009e1a:	33ae      	adds	r3, #174	@ 0xae
 8009e1c:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8009e20:	b153      	cbz	r3, 8009e38 <USBD_LL_IsoINIncomplete+0x24>
  {
    return USBD_FAIL;
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009e22:	f890 229c 	ldrb.w	r2, [r0, #668]	@ 0x29c
 8009e26:	2a03      	cmp	r2, #3
 8009e28:	d001      	beq.n	8009e2e <USBD_LL_IsoINIncomplete+0x1a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
    }
  }

  return USBD_OK;
 8009e2a:	2000      	movs	r0, #0
}
 8009e2c:	bd08      	pop	{r3, pc}
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8009e2e:	6a1b      	ldr	r3, [r3, #32]
 8009e30:	b123      	cbz	r3, 8009e3c <USBD_LL_IsoINIncomplete+0x28>
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8009e32:	4798      	blx	r3
  return USBD_OK;
 8009e34:	2000      	movs	r0, #0
 8009e36:	e7f9      	b.n	8009e2c <USBD_LL_IsoINIncomplete+0x18>
    return USBD_FAIL;
 8009e38:	2003      	movs	r0, #3
 8009e3a:	e7f7      	b.n	8009e2c <USBD_LL_IsoINIncomplete+0x18>
  return USBD_OK;
 8009e3c:	2000      	movs	r0, #0
 8009e3e:	e7f5      	b.n	8009e2c <USBD_LL_IsoINIncomplete+0x18>

08009e40 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8009e40:	b508      	push	{r3, lr}
  if (pdev->pClass[pdev->classId] == NULL)
 8009e42:	f8d0 32d4 	ldr.w	r3, [r0, #724]	@ 0x2d4
 8009e46:	33ae      	adds	r3, #174	@ 0xae
 8009e48:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8009e4c:	b153      	cbz	r3, 8009e64 <USBD_LL_IsoOUTIncomplete+0x24>
  {
    return USBD_FAIL;
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009e4e:	f890 229c 	ldrb.w	r2, [r0, #668]	@ 0x29c
 8009e52:	2a03      	cmp	r2, #3
 8009e54:	d001      	beq.n	8009e5a <USBD_LL_IsoOUTIncomplete+0x1a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
    }
  }

  return USBD_OK;
 8009e56:	2000      	movs	r0, #0
}
 8009e58:	bd08      	pop	{r3, pc}
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8009e5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009e5c:	b123      	cbz	r3, 8009e68 <USBD_LL_IsoOUTIncomplete+0x28>
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8009e5e:	4798      	blx	r3
  return USBD_OK;
 8009e60:	2000      	movs	r0, #0
 8009e62:	e7f9      	b.n	8009e58 <USBD_LL_IsoOUTIncomplete+0x18>
    return USBD_FAIL;
 8009e64:	2003      	movs	r0, #3
 8009e66:	e7f7      	b.n	8009e58 <USBD_LL_IsoOUTIncomplete+0x18>
  return USBD_OK;
 8009e68:	2000      	movs	r0, #0
 8009e6a:	e7f5      	b.n	8009e58 <USBD_LL_IsoOUTIncomplete+0x18>

08009e6c <USBD_LL_DevConnected>:
{
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
}
 8009e6c:	2000      	movs	r0, #0
 8009e6e:	4770      	bx	lr

08009e70 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8009e70:	b508      	push	{r3, lr}
  USBD_StatusTypeDef   ret = USBD_OK;

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009e72:	2301      	movs	r3, #1
 8009e74:	f880 329c 	strb.w	r3, [r0, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8009e78:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8
 8009e7c:	b123      	cbz	r3, 8009e88 <USBD_LL_DevDisconnected+0x18>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8009e7e:	685b      	ldr	r3, [r3, #4]
 8009e80:	7901      	ldrb	r1, [r0, #4]
 8009e82:	4798      	blx	r3
 8009e84:	b910      	cbnz	r0, 8009e8c <USBD_LL_DevDisconnected+0x1c>
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
}
 8009e86:	bd08      	pop	{r3, pc}
  USBD_StatusTypeDef   ret = USBD_OK;
 8009e88:	2000      	movs	r0, #0
 8009e8a:	e7fc      	b.n	8009e86 <USBD_LL_DevDisconnected+0x16>
      ret = USBD_FAIL;
 8009e8c:	2003      	movs	r0, #3
 8009e8e:	e7fa      	b.n	8009e86 <USBD_LL_DevDisconnected+0x16>

08009e90 <USBD_CoreFindIF>:
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
#endif /* USE_USBD_COMPOSITE */
}
 8009e90:	2000      	movs	r0, #0
 8009e92:	4770      	bx	lr

08009e94 <USBD_CoreFindEP>:
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
#endif /* USE_USBD_COMPOSITE */
}
 8009e94:	2000      	movs	r0, #0
 8009e96:	4770      	bx	lr

08009e98 <USBD_LL_DataOutStage>:
{
 8009e98:	b538      	push	{r3, r4, r5, lr}
 8009e9a:	4604      	mov	r4, r0
  if (epnum == 0U)
 8009e9c:	460d      	mov	r5, r1
 8009e9e:	2900      	cmp	r1, #0
 8009ea0:	d141      	bne.n	8009f26 <USBD_LL_DataOutStage+0x8e>
 8009ea2:	4613      	mov	r3, r2
    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8009ea4:	f8d0 2294 	ldr.w	r2, [r0, #660]	@ 0x294
 8009ea8:	2a03      	cmp	r2, #3
 8009eaa:	d001      	beq.n	8009eb0 <USBD_LL_DataOutStage+0x18>
  return USBD_OK;
 8009eac:	4608      	mov	r0, r1
}
 8009eae:	bd38      	pop	{r3, r4, r5, pc}
      if (pep->rem_length > pep->maxpacket)
 8009eb0:	f8d0 115c 	ldr.w	r1, [r0, #348]	@ 0x15c
 8009eb4:	f8d0 2160 	ldr.w	r2, [r0, #352]	@ 0x160
 8009eb8:	4291      	cmp	r1, r2
 8009eba:	d809      	bhi.n	8009ed0 <USBD_LL_DataOutStage+0x38>
        switch (pdev->request.bmRequest & 0x1FU)
 8009ebc:	f890 32aa 	ldrb.w	r3, [r0, #682]	@ 0x2aa
 8009ec0:	f003 031f 	and.w	r3, r3, #31
 8009ec4:	2b01      	cmp	r3, #1
 8009ec6:	d00e      	beq.n	8009ee6 <USBD_LL_DataOutStage+0x4e>
 8009ec8:	2b02      	cmp	r3, #2
 8009eca:	d01a      	beq.n	8009f02 <USBD_LL_DataOutStage+0x6a>
 8009ecc:	4628      	mov	r0, r5
 8009ece:	e00f      	b.n	8009ef0 <USBD_LL_DataOutStage+0x58>
        pep->rem_length -= pep->maxpacket;
 8009ed0:	1a89      	subs	r1, r1, r2
 8009ed2:	f8c0 115c 	str.w	r1, [r0, #348]	@ 0x15c
        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8009ed6:	428a      	cmp	r2, r1
 8009ed8:	bf28      	it	cs
 8009eda:	460a      	movcs	r2, r1
 8009edc:	4619      	mov	r1, r3
 8009ede:	f000 fd23 	bl	800a928 <USBD_CtlContinueRx>
  return USBD_OK;
 8009ee2:	4628      	mov	r0, r5
 8009ee4:	e7e3      	b.n	8009eae <USBD_LL_DataOutStage+0x16>
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8009ee6:	f890 12ae 	ldrb.w	r1, [r0, #686]	@ 0x2ae
 8009eea:	f7ff ffd1 	bl	8009e90 <USBD_CoreFindIF>
        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8009eee:	b918      	cbnz	r0, 8009ef8 <USBD_LL_DataOutStage+0x60>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009ef0:	f894 329c 	ldrb.w	r3, [r4, #668]	@ 0x29c
 8009ef4:	2b03      	cmp	r3, #3
 8009ef6:	d009      	beq.n	8009f0c <USBD_LL_DataOutStage+0x74>
        (void)USBD_CtlSendStatus(pdev);
 8009ef8:	4620      	mov	r0, r4
 8009efa:	f000 fd1d 	bl	800a938 <USBD_CtlSendStatus>
  return USBD_OK;
 8009efe:	4628      	mov	r0, r5
 8009f00:	e7d5      	b.n	8009eae <USBD_LL_DataOutStage+0x16>
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8009f02:	f890 12ae 	ldrb.w	r1, [r0, #686]	@ 0x2ae
 8009f06:	f7ff ffc5 	bl	8009e94 <USBD_CoreFindEP>
            break;
 8009f0a:	e7f0      	b.n	8009eee <USBD_LL_DataOutStage+0x56>
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8009f0c:	f100 03ae 	add.w	r3, r0, #174	@ 0xae
 8009f10:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8009f14:	691a      	ldr	r2, [r3, #16]
 8009f16:	2a00      	cmp	r2, #0
 8009f18:	d0ee      	beq.n	8009ef8 <USBD_LL_DataOutStage+0x60>
              pdev->classId = idx;
 8009f1a:	f8c4 02d4 	str.w	r0, [r4, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8009f1e:	691b      	ldr	r3, [r3, #16]
 8009f20:	4620      	mov	r0, r4
 8009f22:	4798      	blx	r3
 8009f24:	e7e8      	b.n	8009ef8 <USBD_LL_DataOutStage+0x60>
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8009f26:	f001 017f 	and.w	r1, r1, #127	@ 0x7f
 8009f2a:	f7ff ffb3 	bl	8009e94 <USBD_CoreFindEP>
    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009f2e:	b988      	cbnz	r0, 8009f54 <USBD_LL_DataOutStage+0xbc>
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009f30:	f894 329c 	ldrb.w	r3, [r4, #668]	@ 0x29c
 8009f34:	2b03      	cmp	r3, #3
 8009f36:	d1ba      	bne.n	8009eae <USBD_LL_DataOutStage+0x16>
        if (pdev->pClass[idx]->DataOut != NULL)
 8009f38:	f100 03ae 	add.w	r3, r0, #174	@ 0xae
 8009f3c:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8009f40:	699a      	ldr	r2, [r3, #24]
 8009f42:	2a00      	cmp	r2, #0
 8009f44:	d0b3      	beq.n	8009eae <USBD_LL_DataOutStage+0x16>
          pdev->classId = idx;
 8009f46:	f8c4 02d4 	str.w	r0, [r4, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8009f4a:	699b      	ldr	r3, [r3, #24]
 8009f4c:	4629      	mov	r1, r5
 8009f4e:	4620      	mov	r0, r4
 8009f50:	4798      	blx	r3
      if (ret != USBD_OK)
 8009f52:	e7ac      	b.n	8009eae <USBD_LL_DataOutStage+0x16>
  return USBD_OK;
 8009f54:	2000      	movs	r0, #0
 8009f56:	e7aa      	b.n	8009eae <USBD_LL_DataOutStage+0x16>

08009f58 <USBD_LL_DataInStage>:
{
 8009f58:	b538      	push	{r3, r4, r5, lr}
 8009f5a:	4604      	mov	r4, r0
  if (epnum == 0U)
 8009f5c:	460d      	mov	r5, r1
 8009f5e:	2900      	cmp	r1, #0
 8009f60:	d14a      	bne.n	8009ff8 <USBD_LL_DataInStage+0xa0>
 8009f62:	4613      	mov	r3, r2
    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8009f64:	f8d0 2294 	ldr.w	r2, [r0, #660]	@ 0x294
 8009f68:	2a02      	cmp	r2, #2
 8009f6a:	d007      	beq.n	8009f7c <USBD_LL_DataInStage+0x24>
    if (pdev->dev_test_mode != 0U)
 8009f6c:	f894 02a0 	ldrb.w	r0, [r4, #672]	@ 0x2a0
 8009f70:	b118      	cbz	r0, 8009f7a <USBD_LL_DataInStage+0x22>
      pdev->dev_test_mode = 0U;
 8009f72:	2300      	movs	r3, #0
 8009f74:	f884 32a0 	strb.w	r3, [r4, #672]	@ 0x2a0
  return USBD_OK;
 8009f78:	4628      	mov	r0, r5
}
 8009f7a:	bd38      	pop	{r3, r4, r5, pc}
      if (pep->rem_length > pep->maxpacket)
 8009f7c:	69c2      	ldr	r2, [r0, #28]
 8009f7e:	6a01      	ldr	r1, [r0, #32]
 8009f80:	428a      	cmp	r2, r1
 8009f82:	d80d      	bhi.n	8009fa0 <USBD_LL_DataInStage+0x48>
        if ((pep->maxpacket == pep->rem_length) &&
 8009f84:	428a      	cmp	r2, r1
 8009f86:	d017      	beq.n	8009fb8 <USBD_LL_DataInStage+0x60>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009f88:	f894 329c 	ldrb.w	r3, [r4, #668]	@ 0x29c
 8009f8c:	2b03      	cmp	r3, #3
 8009f8e:	d027      	beq.n	8009fe0 <USBD_LL_DataInStage+0x88>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8009f90:	2180      	movs	r1, #128	@ 0x80
 8009f92:	4620      	mov	r0, r4
 8009f94:	f7ff fe3e 	bl	8009c14 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8009f98:	4620      	mov	r0, r4
 8009f9a:	f000 fcd8 	bl	800a94e <USBD_CtlReceiveStatus>
 8009f9e:	e7e5      	b.n	8009f6c <USBD_LL_DataInStage+0x14>
        pep->rem_length -= pep->maxpacket;
 8009fa0:	1a52      	subs	r2, r2, r1
 8009fa2:	61c2      	str	r2, [r0, #28]
        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8009fa4:	4619      	mov	r1, r3
 8009fa6:	f000 fca8 	bl	800a8fa <USBD_CtlContinueSendData>
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009faa:	2300      	movs	r3, #0
 8009fac:	461a      	mov	r2, r3
 8009fae:	4619      	mov	r1, r3
 8009fb0:	4620      	mov	r0, r4
 8009fb2:	f7ff fe4f 	bl	8009c54 <USBD_LL_PrepareReceive>
 8009fb6:	e7d9      	b.n	8009f6c <USBD_LL_DataInStage+0x14>
            (pep->total_length >= pep->maxpacket) &&
 8009fb8:	6983      	ldr	r3, [r0, #24]
        if ((pep->maxpacket == pep->rem_length) &&
 8009fba:	4299      	cmp	r1, r3
 8009fbc:	d8e4      	bhi.n	8009f88 <USBD_LL_DataInStage+0x30>
            (pep->total_length < pdev->ep0_data_len))
 8009fbe:	f8d0 2298 	ldr.w	r2, [r0, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8009fc2:	4293      	cmp	r3, r2
 8009fc4:	d2e0      	bcs.n	8009f88 <USBD_LL_DataInStage+0x30>
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8009fc6:	2200      	movs	r2, #0
 8009fc8:	4611      	mov	r1, r2
 8009fca:	f000 fc96 	bl	800a8fa <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8009fce:	2100      	movs	r1, #0
 8009fd0:	f8c4 1298 	str.w	r1, [r4, #664]	@ 0x298
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009fd4:	460b      	mov	r3, r1
 8009fd6:	460a      	mov	r2, r1
 8009fd8:	4620      	mov	r0, r4
 8009fda:	f7ff fe3b 	bl	8009c54 <USBD_LL_PrepareReceive>
 8009fde:	e7c5      	b.n	8009f6c <USBD_LL_DataInStage+0x14>
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8009fe0:	f8d4 32b8 	ldr.w	r3, [r4, #696]	@ 0x2b8
 8009fe4:	68da      	ldr	r2, [r3, #12]
 8009fe6:	2a00      	cmp	r2, #0
 8009fe8:	d0d2      	beq.n	8009f90 <USBD_LL_DataInStage+0x38>
              pdev->classId = 0U;
 8009fea:	2200      	movs	r2, #0
 8009fec:	f8c4 22d4 	str.w	r2, [r4, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8009ff0:	68db      	ldr	r3, [r3, #12]
 8009ff2:	4620      	mov	r0, r4
 8009ff4:	4798      	blx	r3
 8009ff6:	e7cb      	b.n	8009f90 <USBD_LL_DataInStage+0x38>
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8009ff8:	f041 0180 	orr.w	r1, r1, #128	@ 0x80
 8009ffc:	f7ff ff4a 	bl	8009e94 <USBD_CoreFindEP>
    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a000:	b988      	cbnz	r0, 800a026 <USBD_LL_DataInStage+0xce>
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a002:	f894 329c 	ldrb.w	r3, [r4, #668]	@ 0x29c
 800a006:	2b03      	cmp	r3, #3
 800a008:	d1b7      	bne.n	8009f7a <USBD_LL_DataInStage+0x22>
        if (pdev->pClass[idx]->DataIn != NULL)
 800a00a:	f100 03ae 	add.w	r3, r0, #174	@ 0xae
 800a00e:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 800a012:	695a      	ldr	r2, [r3, #20]
 800a014:	2a00      	cmp	r2, #0
 800a016:	d0b0      	beq.n	8009f7a <USBD_LL_DataInStage+0x22>
          pdev->classId = idx;
 800a018:	f8c4 02d4 	str.w	r0, [r4, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800a01c:	695b      	ldr	r3, [r3, #20]
 800a01e:	4629      	mov	r1, r5
 800a020:	4620      	mov	r0, r4
 800a022:	4798      	blx	r3
          if (ret != USBD_OK)
 800a024:	e7a9      	b.n	8009f7a <USBD_LL_DataInStage+0x22>
  return USBD_OK;
 800a026:	2000      	movs	r0, #0
 800a028:	e7a7      	b.n	8009f7a <USBD_LL_DataInStage+0x22>

0800a02a <USBD_GetNextDesc>:
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;

  *ptr += pnext->bLength;
 800a02a:	880b      	ldrh	r3, [r1, #0]
 800a02c:	7802      	ldrb	r2, [r0, #0]
 800a02e:	4413      	add	r3, r2
 800a030:	800b      	strh	r3, [r1, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800a032:	7803      	ldrb	r3, [r0, #0]

  return (pnext);
}
 800a034:	4418      	add	r0, r3
 800a036:	4770      	bx	lr

0800a038 <USBD_GetEpDesc>:
  if (desc->wTotalLength > desc->bLength)
 800a038:	8842      	ldrh	r2, [r0, #2]
 800a03a:	7803      	ldrb	r3, [r0, #0]
 800a03c:	429a      	cmp	r2, r3
 800a03e:	d918      	bls.n	800a072 <USBD_GetEpDesc+0x3a>
{
 800a040:	b530      	push	{r4, r5, lr}
 800a042:	b083      	sub	sp, #12
 800a044:	4604      	mov	r4, r0
 800a046:	460d      	mov	r5, r1
    ptr = desc->bLength;
 800a048:	f8ad 3006 	strh.w	r3, [sp, #6]
    while (ptr < desc->wTotalLength)
 800a04c:	8863      	ldrh	r3, [r4, #2]
 800a04e:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800a052:	429a      	cmp	r2, r3
 800a054:	d20a      	bcs.n	800a06c <USBD_GetEpDesc+0x34>
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800a056:	f10d 0106 	add.w	r1, sp, #6
 800a05a:	f7ff ffe6 	bl	800a02a <USBD_GetNextDesc>
      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800a05e:	7843      	ldrb	r3, [r0, #1]
 800a060:	2b05      	cmp	r3, #5
 800a062:	d1f3      	bne.n	800a04c <USBD_GetEpDesc+0x14>
        if (pEpDesc->bEndpointAddress == EpAddr)
 800a064:	7883      	ldrb	r3, [r0, #2]
 800a066:	42ab      	cmp	r3, r5
 800a068:	d1f0      	bne.n	800a04c <USBD_GetEpDesc+0x14>
 800a06a:	e000      	b.n	800a06e <USBD_GetEpDesc+0x36>
 800a06c:	2000      	movs	r0, #0
}
 800a06e:	b003      	add	sp, #12
 800a070:	bd30      	pop	{r4, r5, pc}
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800a072:	2000      	movs	r0, #0
}
 800a074:	4770      	bx	lr

0800a076 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800a076:	4603      	mov	r3, r0
  uint8_t  len = 0U;
 800a078:	2000      	movs	r0, #0
  uint8_t *pbuff = buf;

  while (*pbuff != (uint8_t)'\0')
 800a07a:	e002      	b.n	800a082 <USBD_GetLen+0xc>
  {
    len++;
 800a07c:	3001      	adds	r0, #1
 800a07e:	b2c0      	uxtb	r0, r0
    pbuff++;
 800a080:	3301      	adds	r3, #1
  while (*pbuff != (uint8_t)'\0')
 800a082:	781a      	ldrb	r2, [r3, #0]
 800a084:	2a00      	cmp	r2, #0
 800a086:	d1f9      	bne.n	800a07c <USBD_GetLen+0x6>
  }

  return len;
}
 800a088:	4770      	bx	lr

0800a08a <USBD_ParseSetupRequest>:
  req->bmRequest = *(uint8_t *)(pbuff);
 800a08a:	780b      	ldrb	r3, [r1, #0]
 800a08c:	7003      	strb	r3, [r0, #0]
  req->bRequest = *(uint8_t *)(pbuff);
 800a08e:	784b      	ldrb	r3, [r1, #1]
 800a090:	7043      	strb	r3, [r0, #1]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;

  _Byte1 = *(uint8_t *)_pbuff;
 800a092:	788b      	ldrb	r3, [r1, #2]
  _pbuff++;
  _Byte2 = *(uint8_t *)_pbuff;
 800a094:	78ca      	ldrb	r2, [r1, #3]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800a096:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  req->wValue = SWAPBYTE(pbuff);
 800a09a:	8043      	strh	r3, [r0, #2]
  _Byte1 = *(uint8_t *)_pbuff;
 800a09c:	790b      	ldrb	r3, [r1, #4]
  _Byte2 = *(uint8_t *)_pbuff;
 800a09e:	794a      	ldrb	r2, [r1, #5]
  _SwapVal = (_Byte2 << 8) | _Byte1;
 800a0a0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  req->wIndex = SWAPBYTE(pbuff);
 800a0a4:	8083      	strh	r3, [r0, #4]
  _Byte1 = *(uint8_t *)_pbuff;
 800a0a6:	798b      	ldrb	r3, [r1, #6]
  _Byte2 = *(uint8_t *)_pbuff;
 800a0a8:	79ca      	ldrb	r2, [r1, #7]
  _SwapVal = (_Byte2 << 8) | _Byte1;
 800a0aa:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  req->wLength = SWAPBYTE(pbuff);
 800a0ae:	80c3      	strh	r3, [r0, #6]
}
 800a0b0:	4770      	bx	lr

0800a0b2 <USBD_CtlError>:
{
 800a0b2:	b510      	push	{r4, lr}
 800a0b4:	4604      	mov	r4, r0
  (void)USBD_LL_StallEP(pdev, 0x80U);
 800a0b6:	2180      	movs	r1, #128	@ 0x80
 800a0b8:	f7ff fdac 	bl	8009c14 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800a0bc:	2100      	movs	r1, #0
 800a0be:	4620      	mov	r0, r4
 800a0c0:	f7ff fda8 	bl	8009c14 <USBD_LL_StallEP>
}
 800a0c4:	bd10      	pop	{r4, pc}

0800a0c6 <USBD_GetDescriptor>:
{
 800a0c6:	b530      	push	{r4, r5, lr}
 800a0c8:	b083      	sub	sp, #12
 800a0ca:	4604      	mov	r4, r0
 800a0cc:	460d      	mov	r5, r1
  uint16_t len = 0U;
 800a0ce:	2300      	movs	r3, #0
 800a0d0:	f8ad 3006 	strh.w	r3, [sp, #6]
  switch (req->wValue >> 8)
 800a0d4:	884a      	ldrh	r2, [r1, #2]
 800a0d6:	0a13      	lsrs	r3, r2, #8
 800a0d8:	3b01      	subs	r3, #1
 800a0da:	2b06      	cmp	r3, #6
 800a0dc:	f200 80aa 	bhi.w	800a234 <USBD_GetDescriptor+0x16e>
 800a0e0:	e8df f003 	tbb	[pc, r3]
 800a0e4:	a8321e04 	.word	0xa8321e04
 800a0e8:	8ca8      	.short	0x8ca8
 800a0ea:	99          	.byte	0x99
 800a0eb:	00          	.byte	0x00
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800a0ec:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 800a0f0:	681b      	ldr	r3, [r3, #0]
 800a0f2:	f10d 0106 	add.w	r1, sp, #6
 800a0f6:	7c00      	ldrb	r0, [r0, #16]
 800a0f8:	4798      	blx	r3
  if (req->wLength != 0U)
 800a0fa:	88ea      	ldrh	r2, [r5, #6]
 800a0fc:	2a00      	cmp	r2, #0
 800a0fe:	f000 80a3 	beq.w	800a248 <USBD_GetDescriptor+0x182>
    if (len != 0U)
 800a102:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800a106:	2b00      	cmp	r3, #0
 800a108:	f000 8099 	beq.w	800a23e <USBD_GetDescriptor+0x178>
      len = MIN(len, req->wLength);
 800a10c:	429a      	cmp	r2, r3
 800a10e:	bf28      	it	cs
 800a110:	461a      	movcs	r2, r3
 800a112:	f8ad 2006 	strh.w	r2, [sp, #6]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800a116:	4601      	mov	r1, r0
 800a118:	4620      	mov	r0, r4
 800a11a:	f000 fbe1 	bl	800a8e0 <USBD_CtlSendData>
 800a11e:	e08c      	b.n	800a23a <USBD_GetDescriptor+0x174>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a120:	7c03      	ldrb	r3, [r0, #16]
 800a122:	b943      	cbnz	r3, 800a136 <USBD_GetDescriptor+0x70>
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800a124:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8
 800a128:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a12a:	f10d 0006 	add.w	r0, sp, #6
 800a12e:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a130:	2302      	movs	r3, #2
 800a132:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 800a134:	e7e1      	b.n	800a0fa <USBD_GetDescriptor+0x34>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800a136:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8
 800a13a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a13c:	f10d 0006 	add.w	r0, sp, #6
 800a140:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a142:	2302      	movs	r3, #2
 800a144:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 800a146:	e7d8      	b.n	800a0fa <USBD_GetDescriptor+0x34>
      switch ((uint8_t)(req->wValue))
 800a148:	b2d2      	uxtb	r2, r2
 800a14a:	2a05      	cmp	r2, #5
 800a14c:	d852      	bhi.n	800a1f4 <USBD_GetDescriptor+0x12e>
 800a14e:	e8df f002 	tbb	[pc, r2]
 800a152:	1003      	.short	0x1003
 800a154:	44372a1d 	.word	0x44372a1d
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800a158:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 800a15c:	685b      	ldr	r3, [r3, #4]
 800a15e:	b123      	cbz	r3, 800a16a <USBD_GetDescriptor+0xa4>
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800a160:	f10d 0106 	add.w	r1, sp, #6
 800a164:	7c00      	ldrb	r0, [r0, #16]
 800a166:	4798      	blx	r3
  if (err != 0U)
 800a168:	e7c7      	b.n	800a0fa <USBD_GetDescriptor+0x34>
            USBD_CtlError(pdev, req);
 800a16a:	4629      	mov	r1, r5
 800a16c:	f7ff ffa1 	bl	800a0b2 <USBD_CtlError>
  if (err != 0U)
 800a170:	e063      	b.n	800a23a <USBD_GetDescriptor+0x174>
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800a172:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 800a176:	689b      	ldr	r3, [r3, #8]
 800a178:	b123      	cbz	r3, 800a184 <USBD_GetDescriptor+0xbe>
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800a17a:	f10d 0106 	add.w	r1, sp, #6
 800a17e:	7c00      	ldrb	r0, [r0, #16]
 800a180:	4798      	blx	r3
  if (err != 0U)
 800a182:	e7ba      	b.n	800a0fa <USBD_GetDescriptor+0x34>
            USBD_CtlError(pdev, req);
 800a184:	4629      	mov	r1, r5
 800a186:	f7ff ff94 	bl	800a0b2 <USBD_CtlError>
  if (err != 0U)
 800a18a:	e056      	b.n	800a23a <USBD_GetDescriptor+0x174>
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800a18c:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 800a190:	68db      	ldr	r3, [r3, #12]
 800a192:	b123      	cbz	r3, 800a19e <USBD_GetDescriptor+0xd8>
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800a194:	f10d 0106 	add.w	r1, sp, #6
 800a198:	7c00      	ldrb	r0, [r0, #16]
 800a19a:	4798      	blx	r3
  if (err != 0U)
 800a19c:	e7ad      	b.n	800a0fa <USBD_GetDescriptor+0x34>
            USBD_CtlError(pdev, req);
 800a19e:	4629      	mov	r1, r5
 800a1a0:	f7ff ff87 	bl	800a0b2 <USBD_CtlError>
  if (err != 0U)
 800a1a4:	e049      	b.n	800a23a <USBD_GetDescriptor+0x174>
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800a1a6:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 800a1aa:	691b      	ldr	r3, [r3, #16]
 800a1ac:	b123      	cbz	r3, 800a1b8 <USBD_GetDescriptor+0xf2>
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800a1ae:	f10d 0106 	add.w	r1, sp, #6
 800a1b2:	7c00      	ldrb	r0, [r0, #16]
 800a1b4:	4798      	blx	r3
  if (err != 0U)
 800a1b6:	e7a0      	b.n	800a0fa <USBD_GetDescriptor+0x34>
            USBD_CtlError(pdev, req);
 800a1b8:	4629      	mov	r1, r5
 800a1ba:	f7ff ff7a 	bl	800a0b2 <USBD_CtlError>
  if (err != 0U)
 800a1be:	e03c      	b.n	800a23a <USBD_GetDescriptor+0x174>
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800a1c0:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 800a1c4:	695b      	ldr	r3, [r3, #20]
 800a1c6:	b123      	cbz	r3, 800a1d2 <USBD_GetDescriptor+0x10c>
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800a1c8:	f10d 0106 	add.w	r1, sp, #6
 800a1cc:	7c00      	ldrb	r0, [r0, #16]
 800a1ce:	4798      	blx	r3
  if (err != 0U)
 800a1d0:	e793      	b.n	800a0fa <USBD_GetDescriptor+0x34>
            USBD_CtlError(pdev, req);
 800a1d2:	4629      	mov	r1, r5
 800a1d4:	f7ff ff6d 	bl	800a0b2 <USBD_CtlError>
  if (err != 0U)
 800a1d8:	e02f      	b.n	800a23a <USBD_GetDescriptor+0x174>
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800a1da:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 800a1de:	699b      	ldr	r3, [r3, #24]
 800a1e0:	b123      	cbz	r3, 800a1ec <USBD_GetDescriptor+0x126>
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800a1e2:	f10d 0106 	add.w	r1, sp, #6
 800a1e6:	7c00      	ldrb	r0, [r0, #16]
 800a1e8:	4798      	blx	r3
  if (err != 0U)
 800a1ea:	e786      	b.n	800a0fa <USBD_GetDescriptor+0x34>
            USBD_CtlError(pdev, req);
 800a1ec:	4629      	mov	r1, r5
 800a1ee:	f7ff ff60 	bl	800a0b2 <USBD_CtlError>
  if (err != 0U)
 800a1f2:	e022      	b.n	800a23a <USBD_GetDescriptor+0x174>
          USBD_CtlError(pdev, req);
 800a1f4:	4629      	mov	r1, r5
 800a1f6:	f7ff ff5c 	bl	800a0b2 <USBD_CtlError>
  if (err != 0U)
 800a1fa:	e01e      	b.n	800a23a <USBD_GetDescriptor+0x174>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a1fc:	7c03      	ldrb	r3, [r0, #16]
 800a1fe:	b933      	cbnz	r3, 800a20e <USBD_GetDescriptor+0x148>
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800a200:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8
 800a204:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a206:	f10d 0006 	add.w	r0, sp, #6
 800a20a:	4798      	blx	r3
  if (err != 0U)
 800a20c:	e775      	b.n	800a0fa <USBD_GetDescriptor+0x34>
        USBD_CtlError(pdev, req);
 800a20e:	4629      	mov	r1, r5
 800a210:	f7ff ff4f 	bl	800a0b2 <USBD_CtlError>
  if (err != 0U)
 800a214:	e011      	b.n	800a23a <USBD_GetDescriptor+0x174>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a216:	7c03      	ldrb	r3, [r0, #16]
 800a218:	b943      	cbnz	r3, 800a22c <USBD_GetDescriptor+0x166>
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800a21a:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8
 800a21e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a220:	f10d 0006 	add.w	r0, sp, #6
 800a224:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800a226:	2307      	movs	r3, #7
 800a228:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 800a22a:	e766      	b.n	800a0fa <USBD_GetDescriptor+0x34>
        USBD_CtlError(pdev, req);
 800a22c:	4629      	mov	r1, r5
 800a22e:	f7ff ff40 	bl	800a0b2 <USBD_CtlError>
  if (err != 0U)
 800a232:	e002      	b.n	800a23a <USBD_GetDescriptor+0x174>
      USBD_CtlError(pdev, req);
 800a234:	4629      	mov	r1, r5
 800a236:	f7ff ff3c 	bl	800a0b2 <USBD_CtlError>
}
 800a23a:	b003      	add	sp, #12
 800a23c:	bd30      	pop	{r4, r5, pc}
      USBD_CtlError(pdev, req);
 800a23e:	4629      	mov	r1, r5
 800a240:	4620      	mov	r0, r4
 800a242:	f7ff ff36 	bl	800a0b2 <USBD_CtlError>
 800a246:	e7f8      	b.n	800a23a <USBD_GetDescriptor+0x174>
    (void)USBD_CtlSendStatus(pdev);
 800a248:	4620      	mov	r0, r4
 800a24a:	f000 fb75 	bl	800a938 <USBD_CtlSendStatus>
 800a24e:	e7f4      	b.n	800a23a <USBD_GetDescriptor+0x174>

0800a250 <USBD_SetAddress>:
{
 800a250:	b538      	push	{r3, r4, r5, lr}
 800a252:	4604      	mov	r4, r0
  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800a254:	888b      	ldrh	r3, [r1, #4]
 800a256:	b9f3      	cbnz	r3, 800a296 <USBD_SetAddress+0x46>
 800a258:	88cb      	ldrh	r3, [r1, #6]
 800a25a:	b9e3      	cbnz	r3, 800a296 <USBD_SetAddress+0x46>
 800a25c:	884b      	ldrh	r3, [r1, #2]
 800a25e:	2b7f      	cmp	r3, #127	@ 0x7f
 800a260:	d819      	bhi.n	800a296 <USBD_SetAddress+0x46>
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800a262:	f003 057f 	and.w	r5, r3, #127	@ 0x7f
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a266:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 800a26a:	2b03      	cmp	r3, #3
 800a26c:	d00c      	beq.n	800a288 <USBD_SetAddress+0x38>
      pdev->dev_address = dev_addr;
 800a26e:	f880 529e 	strb.w	r5, [r0, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800a272:	4629      	mov	r1, r5
 800a274:	f7ff fcde 	bl	8009c34 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800a278:	4620      	mov	r0, r4
 800a27a:	f000 fb5d 	bl	800a938 <USBD_CtlSendStatus>
      if (dev_addr != 0U)
 800a27e:	b135      	cbz	r5, 800a28e <USBD_SetAddress+0x3e>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a280:	2302      	movs	r3, #2
 800a282:	f884 329c 	strb.w	r3, [r4, #668]	@ 0x29c
 800a286:	e009      	b.n	800a29c <USBD_SetAddress+0x4c>
      USBD_CtlError(pdev, req);
 800a288:	f7ff ff13 	bl	800a0b2 <USBD_CtlError>
 800a28c:	e006      	b.n	800a29c <USBD_SetAddress+0x4c>
        pdev->dev_state = USBD_STATE_DEFAULT;
 800a28e:	2301      	movs	r3, #1
 800a290:	f884 329c 	strb.w	r3, [r4, #668]	@ 0x29c
 800a294:	e002      	b.n	800a29c <USBD_SetAddress+0x4c>
    USBD_CtlError(pdev, req);
 800a296:	4620      	mov	r0, r4
 800a298:	f7ff ff0b 	bl	800a0b2 <USBD_CtlError>
}
 800a29c:	bd38      	pop	{r3, r4, r5, pc}
	...

0800a2a0 <USBD_SetConfig>:
{
 800a2a0:	b570      	push	{r4, r5, r6, lr}
 800a2a2:	4604      	mov	r4, r0
 800a2a4:	460e      	mov	r6, r1
  cfgidx = (uint8_t)(req->wValue);
 800a2a6:	788d      	ldrb	r5, [r1, #2]
 800a2a8:	4b2f      	ldr	r3, [pc, #188]	@ (800a368 <USBD_SetConfig+0xc8>)
 800a2aa:	701d      	strb	r5, [r3, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800a2ac:	2d01      	cmp	r5, #1
 800a2ae:	d810      	bhi.n	800a2d2 <USBD_SetConfig+0x32>
  switch (pdev->dev_state)
 800a2b0:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 800a2b4:	b2da      	uxtb	r2, r3
 800a2b6:	2b02      	cmp	r3, #2
 800a2b8:	d00f      	beq.n	800a2da <USBD_SetConfig+0x3a>
 800a2ba:	2a03      	cmp	r2, #3
 800a2bc:	d026      	beq.n	800a30c <USBD_SetConfig+0x6c>
      USBD_CtlError(pdev, req);
 800a2be:	f7ff fef8 	bl	800a0b2 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800a2c2:	4b29      	ldr	r3, [pc, #164]	@ (800a368 <USBD_SetConfig+0xc8>)
 800a2c4:	7819      	ldrb	r1, [r3, #0]
 800a2c6:	4620      	mov	r0, r4
 800a2c8:	f7ff fd10 	bl	8009cec <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800a2cc:	2503      	movs	r5, #3
}
 800a2ce:	4628      	mov	r0, r5
 800a2d0:	bd70      	pop	{r4, r5, r6, pc}
    USBD_CtlError(pdev, req);
 800a2d2:	f7ff feee 	bl	800a0b2 <USBD_CtlError>
    return USBD_FAIL;
 800a2d6:	2503      	movs	r5, #3
 800a2d8:	e7f9      	b.n	800a2ce <USBD_SetConfig+0x2e>
      if (cfgidx != 0U)
 800a2da:	b1a5      	cbz	r5, 800a306 <USBD_SetConfig+0x66>
        pdev->dev_config = cfgidx;
 800a2dc:	6045      	str	r5, [r0, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800a2de:	4629      	mov	r1, r5
 800a2e0:	f7ff fcfb 	bl	8009cda <USBD_SetClassConfig>
        if (ret != USBD_OK)
 800a2e4:	4605      	mov	r5, r0
 800a2e6:	b138      	cbz	r0, 800a2f8 <USBD_SetConfig+0x58>
          USBD_CtlError(pdev, req);
 800a2e8:	4631      	mov	r1, r6
 800a2ea:	4620      	mov	r0, r4
 800a2ec:	f7ff fee1 	bl	800a0b2 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800a2f0:	2302      	movs	r3, #2
 800a2f2:	f884 329c 	strb.w	r3, [r4, #668]	@ 0x29c
 800a2f6:	e7ea      	b.n	800a2ce <USBD_SetConfig+0x2e>
          (void)USBD_CtlSendStatus(pdev);
 800a2f8:	4620      	mov	r0, r4
 800a2fa:	f000 fb1d 	bl	800a938 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800a2fe:	2303      	movs	r3, #3
 800a300:	f884 329c 	strb.w	r3, [r4, #668]	@ 0x29c
 800a304:	e7e3      	b.n	800a2ce <USBD_SetConfig+0x2e>
        (void)USBD_CtlSendStatus(pdev);
 800a306:	f000 fb17 	bl	800a938 <USBD_CtlSendStatus>
 800a30a:	e7e0      	b.n	800a2ce <USBD_SetConfig+0x2e>
      if (cfgidx == 0U)
 800a30c:	b1cd      	cbz	r5, 800a342 <USBD_SetConfig+0xa2>
      else if (cfgidx != pdev->dev_config)
 800a30e:	6841      	ldr	r1, [r0, #4]
 800a310:	428d      	cmp	r5, r1
 800a312:	d025      	beq.n	800a360 <USBD_SetConfig+0xc0>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a314:	b2c9      	uxtb	r1, r1
 800a316:	f7ff fce9 	bl	8009cec <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800a31a:	4b13      	ldr	r3, [pc, #76]	@ (800a368 <USBD_SetConfig+0xc8>)
 800a31c:	7819      	ldrb	r1, [r3, #0]
 800a31e:	6061      	str	r1, [r4, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800a320:	4620      	mov	r0, r4
 800a322:	f7ff fcda 	bl	8009cda <USBD_SetClassConfig>
        if (ret != USBD_OK)
 800a326:	4605      	mov	r5, r0
 800a328:	b1b0      	cbz	r0, 800a358 <USBD_SetConfig+0xb8>
          USBD_CtlError(pdev, req);
 800a32a:	4631      	mov	r1, r6
 800a32c:	4620      	mov	r0, r4
 800a32e:	f7ff fec0 	bl	800a0b2 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a332:	7921      	ldrb	r1, [r4, #4]
 800a334:	4620      	mov	r0, r4
 800a336:	f7ff fcd9 	bl	8009cec <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800a33a:	2302      	movs	r3, #2
 800a33c:	f884 329c 	strb.w	r3, [r4, #668]	@ 0x29c
 800a340:	e7c5      	b.n	800a2ce <USBD_SetConfig+0x2e>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a342:	2302      	movs	r3, #2
 800a344:	f880 329c 	strb.w	r3, [r0, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800a348:	6045      	str	r5, [r0, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800a34a:	4629      	mov	r1, r5
 800a34c:	f7ff fcce 	bl	8009cec <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800a350:	4620      	mov	r0, r4
 800a352:	f000 faf1 	bl	800a938 <USBD_CtlSendStatus>
 800a356:	e7ba      	b.n	800a2ce <USBD_SetConfig+0x2e>
          (void)USBD_CtlSendStatus(pdev);
 800a358:	4620      	mov	r0, r4
 800a35a:	f000 faed 	bl	800a938 <USBD_CtlSendStatus>
 800a35e:	e7b6      	b.n	800a2ce <USBD_SetConfig+0x2e>
        (void)USBD_CtlSendStatus(pdev);
 800a360:	f000 faea 	bl	800a938 <USBD_CtlSendStatus>
  USBD_StatusTypeDef ret = USBD_OK;
 800a364:	2500      	movs	r5, #0
 800a366:	e7b2      	b.n	800a2ce <USBD_SetConfig+0x2e>
 800a368:	20008564 	.word	0x20008564

0800a36c <USBD_GetConfig>:
{
 800a36c:	b508      	push	{r3, lr}
  if (req->wLength != 1U)
 800a36e:	88cb      	ldrh	r3, [r1, #6]
 800a370:	2b01      	cmp	r3, #1
 800a372:	d10b      	bne.n	800a38c <USBD_GetConfig+0x20>
    switch (pdev->dev_state)
 800a374:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 800a378:	b2da      	uxtb	r2, r3
 800a37a:	2b02      	cmp	r3, #2
 800a37c:	d909      	bls.n	800a392 <USBD_GetConfig+0x26>
 800a37e:	2a03      	cmp	r2, #3
 800a380:	d111      	bne.n	800a3a6 <USBD_GetConfig+0x3a>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800a382:	2201      	movs	r2, #1
 800a384:	1d01      	adds	r1, r0, #4
 800a386:	f000 faab 	bl	800a8e0 <USBD_CtlSendData>
        break;
 800a38a:	e001      	b.n	800a390 <USBD_GetConfig+0x24>
    USBD_CtlError(pdev, req);
 800a38c:	f7ff fe91 	bl	800a0b2 <USBD_CtlError>
}
 800a390:	bd08      	pop	{r3, pc}
    switch (pdev->dev_state)
 800a392:	b252      	sxtb	r2, r2
 800a394:	b13a      	cbz	r2, 800a3a6 <USBD_GetConfig+0x3a>
        pdev->dev_default_config = 0U;
 800a396:	4601      	mov	r1, r0
 800a398:	2300      	movs	r3, #0
 800a39a:	f841 3f08 	str.w	r3, [r1, #8]!
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800a39e:	2201      	movs	r2, #1
 800a3a0:	f000 fa9e 	bl	800a8e0 <USBD_CtlSendData>
        break;
 800a3a4:	e7f4      	b.n	800a390 <USBD_GetConfig+0x24>
        USBD_CtlError(pdev, req);
 800a3a6:	f7ff fe84 	bl	800a0b2 <USBD_CtlError>
}
 800a3aa:	e7f1      	b.n	800a390 <USBD_GetConfig+0x24>

0800a3ac <USBD_GetStatus>:
{
 800a3ac:	b508      	push	{r3, lr}
  switch (pdev->dev_state)
 800a3ae:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 800a3b2:	3b01      	subs	r3, #1
 800a3b4:	2b02      	cmp	r3, #2
 800a3b6:	d812      	bhi.n	800a3de <USBD_GetStatus+0x32>
      if (req->wLength != 0x2U)
 800a3b8:	88cb      	ldrh	r3, [r1, #6]
 800a3ba:	2b02      	cmp	r3, #2
 800a3bc:	d10c      	bne.n	800a3d8 <USBD_GetStatus+0x2c>
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800a3be:	2301      	movs	r3, #1
 800a3c0:	60c3      	str	r3, [r0, #12]
      if (pdev->dev_remote_wakeup != 0U)
 800a3c2:	f8d0 32a4 	ldr.w	r3, [r0, #676]	@ 0x2a4
 800a3c6:	b10b      	cbz	r3, 800a3cc <USBD_GetStatus+0x20>
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800a3c8:	2303      	movs	r3, #3
 800a3ca:	60c3      	str	r3, [r0, #12]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800a3cc:	2202      	movs	r2, #2
 800a3ce:	f100 010c 	add.w	r1, r0, #12
 800a3d2:	f000 fa85 	bl	800a8e0 <USBD_CtlSendData>
}
 800a3d6:	bd08      	pop	{r3, pc}
        USBD_CtlError(pdev, req);
 800a3d8:	f7ff fe6b 	bl	800a0b2 <USBD_CtlError>
        break;
 800a3dc:	e7fb      	b.n	800a3d6 <USBD_GetStatus+0x2a>
      USBD_CtlError(pdev, req);
 800a3de:	f7ff fe68 	bl	800a0b2 <USBD_CtlError>
}
 800a3e2:	e7f8      	b.n	800a3d6 <USBD_GetStatus+0x2a>

0800a3e4 <USBD_SetFeature>:
{
 800a3e4:	b508      	push	{r3, lr}
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a3e6:	884b      	ldrh	r3, [r1, #2]
 800a3e8:	2b01      	cmp	r3, #1
 800a3ea:	d004      	beq.n	800a3f6 <USBD_SetFeature+0x12>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800a3ec:	2b02      	cmp	r3, #2
 800a3ee:	d007      	beq.n	800a400 <USBD_SetFeature+0x1c>
    USBD_CtlError(pdev, req);
 800a3f0:	f7ff fe5f 	bl	800a0b2 <USBD_CtlError>
}
 800a3f4:	bd08      	pop	{r3, pc}
    pdev->dev_remote_wakeup = 1U;
 800a3f6:	f8c0 32a4 	str.w	r3, [r0, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800a3fa:	f000 fa9d 	bl	800a938 <USBD_CtlSendStatus>
 800a3fe:	e7f9      	b.n	800a3f4 <USBD_SetFeature+0x10>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800a400:	888b      	ldrh	r3, [r1, #4]
 800a402:	0a1b      	lsrs	r3, r3, #8
 800a404:	f880 32a0 	strb.w	r3, [r0, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800a408:	f000 fa96 	bl	800a938 <USBD_CtlSendStatus>
 800a40c:	e7f2      	b.n	800a3f4 <USBD_SetFeature+0x10>

0800a40e <USBD_ClrFeature>:
{
 800a40e:	b508      	push	{r3, lr}
  switch (pdev->dev_state)
 800a410:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 800a414:	3b01      	subs	r3, #1
 800a416:	2b02      	cmp	r3, #2
 800a418:	d809      	bhi.n	800a42e <USBD_ClrFeature+0x20>
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a41a:	884b      	ldrh	r3, [r1, #2]
 800a41c:	2b01      	cmp	r3, #1
 800a41e:	d000      	beq.n	800a422 <USBD_ClrFeature+0x14>
}
 800a420:	bd08      	pop	{r3, pc}
        pdev->dev_remote_wakeup = 0U;
 800a422:	2300      	movs	r3, #0
 800a424:	f8c0 32a4 	str.w	r3, [r0, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800a428:	f000 fa86 	bl	800a938 <USBD_CtlSendStatus>
 800a42c:	e7f8      	b.n	800a420 <USBD_ClrFeature+0x12>
      USBD_CtlError(pdev, req);
 800a42e:	f7ff fe40 	bl	800a0b2 <USBD_CtlError>
}
 800a432:	e7f5      	b.n	800a420 <USBD_ClrFeature+0x12>

0800a434 <USBD_StdDevReq>:
{
 800a434:	b538      	push	{r3, r4, r5, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a436:	780c      	ldrb	r4, [r1, #0]
 800a438:	f004 0460 	and.w	r4, r4, #96	@ 0x60
 800a43c:	2c20      	cmp	r4, #32
 800a43e:	d006      	beq.n	800a44e <USBD_StdDevReq+0x1a>
 800a440:	2c40      	cmp	r4, #64	@ 0x40
 800a442:	d004      	beq.n	800a44e <USBD_StdDevReq+0x1a>
 800a444:	b16c      	cbz	r4, 800a462 <USBD_StdDevReq+0x2e>
      USBD_CtlError(pdev, req);
 800a446:	f7ff fe34 	bl	800a0b2 <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 800a44a:	2400      	movs	r4, #0
      break;
 800a44c:	e007      	b.n	800a45e <USBD_StdDevReq+0x2a>
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800a44e:	f8d0 32d4 	ldr.w	r3, [r0, #724]	@ 0x2d4
 800a452:	33ae      	adds	r3, #174	@ 0xae
 800a454:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800a458:	689b      	ldr	r3, [r3, #8]
 800a45a:	4798      	blx	r3
 800a45c:	4604      	mov	r4, r0
}
 800a45e:	4620      	mov	r0, r4
 800a460:	bd38      	pop	{r3, r4, r5, pc}
      switch (req->bRequest)
 800a462:	784d      	ldrb	r5, [r1, #1]
 800a464:	2d09      	cmp	r5, #9
 800a466:	d81d      	bhi.n	800a4a4 <USBD_StdDevReq+0x70>
 800a468:	e8df f005 	tbb	[pc, r5]
 800a46c:	161c1912 	.word	0x161c1912
 800a470:	1c05081c 	.word	0x1c05081c
 800a474:	0b0f      	.short	0x0b0f
          USBD_GetDescriptor(pdev, req);
 800a476:	f7ff fe26 	bl	800a0c6 <USBD_GetDescriptor>
          break;
 800a47a:	e7f0      	b.n	800a45e <USBD_StdDevReq+0x2a>
          USBD_SetAddress(pdev, req);
 800a47c:	f7ff fee8 	bl	800a250 <USBD_SetAddress>
          break;
 800a480:	e7ed      	b.n	800a45e <USBD_StdDevReq+0x2a>
          ret = USBD_SetConfig(pdev, req);
 800a482:	f7ff ff0d 	bl	800a2a0 <USBD_SetConfig>
 800a486:	4604      	mov	r4, r0
          break;
 800a488:	e7e9      	b.n	800a45e <USBD_StdDevReq+0x2a>
          USBD_GetConfig(pdev, req);
 800a48a:	f7ff ff6f 	bl	800a36c <USBD_GetConfig>
          break;
 800a48e:	e7e6      	b.n	800a45e <USBD_StdDevReq+0x2a>
          USBD_GetStatus(pdev, req);
 800a490:	f7ff ff8c 	bl	800a3ac <USBD_GetStatus>
  USBD_StatusTypeDef ret = USBD_OK;
 800a494:	462c      	mov	r4, r5
          break;
 800a496:	e7e2      	b.n	800a45e <USBD_StdDevReq+0x2a>
          USBD_SetFeature(pdev, req);
 800a498:	f7ff ffa4 	bl	800a3e4 <USBD_SetFeature>
          break;
 800a49c:	e7df      	b.n	800a45e <USBD_StdDevReq+0x2a>
          USBD_ClrFeature(pdev, req);
 800a49e:	f7ff ffb6 	bl	800a40e <USBD_ClrFeature>
          break;
 800a4a2:	e7dc      	b.n	800a45e <USBD_StdDevReq+0x2a>
          USBD_CtlError(pdev, req);
 800a4a4:	f7ff fe05 	bl	800a0b2 <USBD_CtlError>
          break;
 800a4a8:	e7d9      	b.n	800a45e <USBD_StdDevReq+0x2a>

0800a4aa <USBD_StdItfReq>:
{
 800a4aa:	b570      	push	{r4, r5, r6, lr}
 800a4ac:	4605      	mov	r5, r0
 800a4ae:	460c      	mov	r4, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a4b0:	780b      	ldrb	r3, [r1, #0]
 800a4b2:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800a4b6:	2b20      	cmp	r3, #32
 800a4b8:	d007      	beq.n	800a4ca <USBD_StdItfReq+0x20>
 800a4ba:	2b40      	cmp	r3, #64	@ 0x40
 800a4bc:	d005      	beq.n	800a4ca <USBD_StdItfReq+0x20>
 800a4be:	b123      	cbz	r3, 800a4ca <USBD_StdItfReq+0x20>
      USBD_CtlError(pdev, req);
 800a4c0:	f7ff fdf7 	bl	800a0b2 <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 800a4c4:	2600      	movs	r6, #0
}
 800a4c6:	4630      	mov	r0, r6
 800a4c8:	bd70      	pop	{r4, r5, r6, pc}
      switch (pdev->dev_state)
 800a4ca:	f895 329c 	ldrb.w	r3, [r5, #668]	@ 0x29c
 800a4ce:	3b01      	subs	r3, #1
 800a4d0:	2b02      	cmp	r3, #2
 800a4d2:	d826      	bhi.n	800a522 <USBD_StdItfReq+0x78>
          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800a4d4:	7921      	ldrb	r1, [r4, #4]
 800a4d6:	2901      	cmp	r1, #1
 800a4d8:	d905      	bls.n	800a4e6 <USBD_StdItfReq+0x3c>
            USBD_CtlError(pdev, req);
 800a4da:	4621      	mov	r1, r4
 800a4dc:	4628      	mov	r0, r5
 800a4de:	f7ff fde8 	bl	800a0b2 <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 800a4e2:	2600      	movs	r6, #0
 800a4e4:	e7ef      	b.n	800a4c6 <USBD_StdItfReq+0x1c>
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800a4e6:	4628      	mov	r0, r5
 800a4e8:	f7ff fcd2 	bl	8009e90 <USBD_CoreFindIF>
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a4ec:	b968      	cbnz	r0, 800a50a <USBD_StdItfReq+0x60>
              if (pdev->pClass[idx]->Setup != NULL)
 800a4ee:	f100 02ae 	add.w	r2, r0, #174	@ 0xae
 800a4f2:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 800a4f6:	6891      	ldr	r1, [r2, #8]
 800a4f8:	b189      	cbz	r1, 800a51e <USBD_StdItfReq+0x74>
                pdev->classId = idx;
 800a4fa:	f8c5 02d4 	str.w	r0, [r5, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800a4fe:	6893      	ldr	r3, [r2, #8]
 800a500:	4621      	mov	r1, r4
 800a502:	4628      	mov	r0, r5
 800a504:	4798      	blx	r3
 800a506:	4606      	mov	r6, r0
 800a508:	e000      	b.n	800a50c <USBD_StdItfReq+0x62>
              ret = USBD_FAIL;
 800a50a:	2603      	movs	r6, #3
            if ((req->wLength == 0U) && (ret == USBD_OK))
 800a50c:	88e3      	ldrh	r3, [r4, #6]
 800a50e:	2b00      	cmp	r3, #0
 800a510:	d1d9      	bne.n	800a4c6 <USBD_StdItfReq+0x1c>
 800a512:	2e00      	cmp	r6, #0
 800a514:	d1d7      	bne.n	800a4c6 <USBD_StdItfReq+0x1c>
              (void)USBD_CtlSendStatus(pdev);
 800a516:	4628      	mov	r0, r5
 800a518:	f000 fa0e 	bl	800a938 <USBD_CtlSendStatus>
 800a51c:	e7d3      	b.n	800a4c6 <USBD_StdItfReq+0x1c>
                ret = USBD_FAIL;
 800a51e:	2603      	movs	r6, #3
 800a520:	e7f4      	b.n	800a50c <USBD_StdItfReq+0x62>
          USBD_CtlError(pdev, req);
 800a522:	4621      	mov	r1, r4
 800a524:	4628      	mov	r0, r5
 800a526:	f7ff fdc4 	bl	800a0b2 <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 800a52a:	2600      	movs	r6, #0
          break;
 800a52c:	e7cb      	b.n	800a4c6 <USBD_StdItfReq+0x1c>

0800a52e <USBD_StdEPReq>:
{
 800a52e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a532:	4606      	mov	r6, r0
 800a534:	460d      	mov	r5, r1
  ep_addr = LOBYTE(req->wIndex);
 800a536:	888b      	ldrh	r3, [r1, #4]
 800a538:	b2df      	uxtb	r7, r3
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a53a:	780c      	ldrb	r4, [r1, #0]
 800a53c:	f004 0460 	and.w	r4, r4, #96	@ 0x60
 800a540:	2c20      	cmp	r4, #32
 800a542:	d008      	beq.n	800a556 <USBD_StdEPReq+0x28>
 800a544:	2c40      	cmp	r4, #64	@ 0x40
 800a546:	d006      	beq.n	800a556 <USBD_StdEPReq+0x28>
 800a548:	b1dc      	cbz	r4, 800a582 <USBD_StdEPReq+0x54>
      USBD_CtlError(pdev, req);
 800a54a:	f7ff fdb2 	bl	800a0b2 <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 800a54e:	2400      	movs	r4, #0
}
 800a550:	4620      	mov	r0, r4
 800a552:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800a556:	4639      	mov	r1, r7
 800a558:	4630      	mov	r0, r6
 800a55a:	f7ff fc9b 	bl	8009e94 <USBD_CoreFindEP>
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a55e:	4604      	mov	r4, r0
 800a560:	2800      	cmp	r0, #0
 800a562:	f040 80fc 	bne.w	800a75e <USBD_StdEPReq+0x230>
        pdev->classId = idx;
 800a566:	f8c6 02d4 	str.w	r0, [r6, #724]	@ 0x2d4
        if (pdev->pClass[idx]->Setup != NULL)
 800a56a:	f100 03ae 	add.w	r3, r0, #174	@ 0xae
 800a56e:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 800a572:	689b      	ldr	r3, [r3, #8]
 800a574:	2b00      	cmp	r3, #0
 800a576:	d0eb      	beq.n	800a550 <USBD_StdEPReq+0x22>
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800a578:	4629      	mov	r1, r5
 800a57a:	4630      	mov	r0, r6
 800a57c:	4798      	blx	r3
 800a57e:	4604      	mov	r4, r0
 800a580:	e7e6      	b.n	800a550 <USBD_StdEPReq+0x22>
      switch (req->bRequest)
 800a582:	f891 8001 	ldrb.w	r8, [r1, #1]
 800a586:	f1b8 0f01 	cmp.w	r8, #1
 800a58a:	d031      	beq.n	800a5f0 <USBD_StdEPReq+0xc2>
 800a58c:	f1b8 0f03 	cmp.w	r8, #3
 800a590:	d005      	beq.n	800a59e <USBD_StdEPReq+0x70>
 800a592:	f1b8 0f00 	cmp.w	r8, #0
 800a596:	d067      	beq.n	800a668 <USBD_StdEPReq+0x13a>
          USBD_CtlError(pdev, req);
 800a598:	f7ff fd8b 	bl	800a0b2 <USBD_CtlError>
          break;
 800a59c:	e7d8      	b.n	800a550 <USBD_StdEPReq+0x22>
          switch (pdev->dev_state)
 800a59e:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 800a5a2:	b2da      	uxtb	r2, r3
 800a5a4:	2b02      	cmp	r3, #2
 800a5a6:	d004      	beq.n	800a5b2 <USBD_StdEPReq+0x84>
 800a5a8:	2a03      	cmp	r2, #3
 800a5aa:	d012      	beq.n	800a5d2 <USBD_StdEPReq+0xa4>
              USBD_CtlError(pdev, req);
 800a5ac:	f7ff fd81 	bl	800a0b2 <USBD_CtlError>
              break;
 800a5b0:	e7ce      	b.n	800a550 <USBD_StdEPReq+0x22>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a5b2:	b10f      	cbz	r7, 800a5b8 <USBD_StdEPReq+0x8a>
 800a5b4:	2f80      	cmp	r7, #128	@ 0x80
 800a5b6:	d104      	bne.n	800a5c2 <USBD_StdEPReq+0x94>
                USBD_CtlError(pdev, req);
 800a5b8:	4629      	mov	r1, r5
 800a5ba:	4630      	mov	r0, r6
 800a5bc:	f7ff fd79 	bl	800a0b2 <USBD_CtlError>
 800a5c0:	e7c6      	b.n	800a550 <USBD_StdEPReq+0x22>
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800a5c2:	4639      	mov	r1, r7
 800a5c4:	f7ff fb26 	bl	8009c14 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800a5c8:	2180      	movs	r1, #128	@ 0x80
 800a5ca:	4630      	mov	r0, r6
 800a5cc:	f7ff fb22 	bl	8009c14 <USBD_LL_StallEP>
 800a5d0:	e7be      	b.n	800a550 <USBD_StdEPReq+0x22>
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a5d2:	884b      	ldrh	r3, [r1, #2]
 800a5d4:	b923      	cbnz	r3, 800a5e0 <USBD_StdEPReq+0xb2>
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800a5d6:	b11f      	cbz	r7, 800a5e0 <USBD_StdEPReq+0xb2>
 800a5d8:	2f80      	cmp	r7, #128	@ 0x80
 800a5da:	d001      	beq.n	800a5e0 <USBD_StdEPReq+0xb2>
 800a5dc:	88cb      	ldrh	r3, [r1, #6]
 800a5de:	b11b      	cbz	r3, 800a5e8 <USBD_StdEPReq+0xba>
              (void)USBD_CtlSendStatus(pdev);
 800a5e0:	4630      	mov	r0, r6
 800a5e2:	f000 f9a9 	bl	800a938 <USBD_CtlSendStatus>
              break;
 800a5e6:	e7b3      	b.n	800a550 <USBD_StdEPReq+0x22>
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800a5e8:	4639      	mov	r1, r7
 800a5ea:	f7ff fb13 	bl	8009c14 <USBD_LL_StallEP>
 800a5ee:	e7f7      	b.n	800a5e0 <USBD_StdEPReq+0xb2>
          switch (pdev->dev_state)
 800a5f0:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 800a5f4:	b2da      	uxtb	r2, r3
 800a5f6:	2b02      	cmp	r3, #2
 800a5f8:	d004      	beq.n	800a604 <USBD_StdEPReq+0xd6>
 800a5fa:	2a03      	cmp	r2, #3
 800a5fc:	d012      	beq.n	800a624 <USBD_StdEPReq+0xf6>
              USBD_CtlError(pdev, req);
 800a5fe:	f7ff fd58 	bl	800a0b2 <USBD_CtlError>
              break;
 800a602:	e7a5      	b.n	800a550 <USBD_StdEPReq+0x22>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a604:	b10f      	cbz	r7, 800a60a <USBD_StdEPReq+0xdc>
 800a606:	2f80      	cmp	r7, #128	@ 0x80
 800a608:	d104      	bne.n	800a614 <USBD_StdEPReq+0xe6>
                USBD_CtlError(pdev, req);
 800a60a:	4629      	mov	r1, r5
 800a60c:	4630      	mov	r0, r6
 800a60e:	f7ff fd50 	bl	800a0b2 <USBD_CtlError>
 800a612:	e79d      	b.n	800a550 <USBD_StdEPReq+0x22>
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800a614:	4639      	mov	r1, r7
 800a616:	f7ff fafd 	bl	8009c14 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800a61a:	2180      	movs	r1, #128	@ 0x80
 800a61c:	4630      	mov	r0, r6
 800a61e:	f7ff faf9 	bl	8009c14 <USBD_LL_StallEP>
 800a622:	e795      	b.n	800a550 <USBD_StdEPReq+0x22>
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a624:	884b      	ldrh	r3, [r1, #2]
 800a626:	2b00      	cmp	r3, #0
 800a628:	d192      	bne.n	800a550 <USBD_StdEPReq+0x22>
                if ((ep_addr & 0x7FU) != 0x00U)
 800a62a:	f017 0f7f 	tst.w	r7, #127	@ 0x7f
 800a62e:	d117      	bne.n	800a660 <USBD_StdEPReq+0x132>
                (void)USBD_CtlSendStatus(pdev);
 800a630:	4630      	mov	r0, r6
 800a632:	f000 f981 	bl	800a938 <USBD_CtlSendStatus>
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800a636:	4639      	mov	r1, r7
 800a638:	4630      	mov	r0, r6
 800a63a:	f7ff fc2b 	bl	8009e94 <USBD_CoreFindEP>
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a63e:	2800      	cmp	r0, #0
 800a640:	d186      	bne.n	800a550 <USBD_StdEPReq+0x22>
                  pdev->classId = idx;
 800a642:	f8c6 02d4 	str.w	r0, [r6, #724]	@ 0x2d4
                  if (pdev->pClass[idx]->Setup != NULL)
 800a646:	f100 02ae 	add.w	r2, r0, #174	@ 0xae
 800a64a:	f856 2022 	ldr.w	r2, [r6, r2, lsl #2]
 800a64e:	6892      	ldr	r2, [r2, #8]
 800a650:	2a00      	cmp	r2, #0
 800a652:	f000 8086 	beq.w	800a762 <USBD_StdEPReq+0x234>
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800a656:	4629      	mov	r1, r5
 800a658:	4630      	mov	r0, r6
 800a65a:	4790      	blx	r2
 800a65c:	4604      	mov	r4, r0
 800a65e:	e777      	b.n	800a550 <USBD_StdEPReq+0x22>
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800a660:	4639      	mov	r1, r7
 800a662:	f7ff fadf 	bl	8009c24 <USBD_LL_ClearStallEP>
 800a666:	e7e3      	b.n	800a630 <USBD_StdEPReq+0x102>
          switch (pdev->dev_state)
 800a668:	f890 229c 	ldrb.w	r2, [r0, #668]	@ 0x29c
 800a66c:	b2d1      	uxtb	r1, r2
 800a66e:	2a02      	cmp	r2, #2
 800a670:	d006      	beq.n	800a680 <USBD_StdEPReq+0x152>
 800a672:	2903      	cmp	r1, #3
 800a674:	d029      	beq.n	800a6ca <USBD_StdEPReq+0x19c>
              USBD_CtlError(pdev, req);
 800a676:	4629      	mov	r1, r5
 800a678:	f7ff fd1b 	bl	800a0b2 <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 800a67c:	4644      	mov	r4, r8
              break;
 800a67e:	e767      	b.n	800a550 <USBD_StdEPReq+0x22>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a680:	b10f      	cbz	r7, 800a686 <USBD_StdEPReq+0x158>
 800a682:	2f80      	cmp	r7, #128	@ 0x80
 800a684:	d113      	bne.n	800a6ae <USBD_StdEPReq+0x180>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a686:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800a68a:	d115      	bne.n	800a6b8 <USBD_StdEPReq+0x18a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a68c:	f007 077f 	and.w	r7, r7, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a690:	eb07 0787 	add.w	r7, r7, r7, lsl #2
 800a694:	00b9      	lsls	r1, r7, #2
 800a696:	f501 71a8 	add.w	r1, r1, #336	@ 0x150
 800a69a:	4431      	add	r1, r6
 800a69c:	3104      	adds	r1, #4
              pep->status = 0x0000U;
 800a69e:	2300      	movs	r3, #0
 800a6a0:	600b      	str	r3, [r1, #0]
              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800a6a2:	2202      	movs	r2, #2
 800a6a4:	4630      	mov	r0, r6
 800a6a6:	f000 f91b 	bl	800a8e0 <USBD_CtlSendData>
  USBD_StatusTypeDef ret = USBD_OK;
 800a6aa:	4644      	mov	r4, r8
              break;
 800a6ac:	e750      	b.n	800a550 <USBD_StdEPReq+0x22>
                USBD_CtlError(pdev, req);
 800a6ae:	4629      	mov	r1, r5
 800a6b0:	f7ff fcff 	bl	800a0b2 <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 800a6b4:	4644      	mov	r4, r8
                break;
 800a6b6:	e74b      	b.n	800a550 <USBD_StdEPReq+0x22>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a6b8:	f007 077f 	and.w	r7, r7, #127	@ 0x7f
 800a6bc:	eb07 0787 	add.w	r7, r7, r7, lsl #2
 800a6c0:	00b9      	lsls	r1, r7, #2
 800a6c2:	3110      	adds	r1, #16
 800a6c4:	4431      	add	r1, r6
 800a6c6:	3104      	adds	r1, #4
 800a6c8:	e7e9      	b.n	800a69e <USBD_StdEPReq+0x170>
              if ((ep_addr & 0x80U) == 0x80U)
 800a6ca:	b25b      	sxtb	r3, r3
 800a6cc:	2b00      	cmp	r3, #0
 800a6ce:	db1f      	blt.n	800a710 <USBD_StdEPReq+0x1e2>
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800a6d0:	f007 020f 	and.w	r2, r7, #15
 800a6d4:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 800a6d8:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800a6dc:	f8b2 2164 	ldrh.w	r2, [r2, #356]	@ 0x164
 800a6e0:	b322      	cbz	r2, 800a72c <USBD_StdEPReq+0x1fe>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a6e2:	2b00      	cmp	r3, #0
 800a6e4:	db27      	blt.n	800a736 <USBD_StdEPReq+0x208>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a6e6:	f007 037f 	and.w	r3, r7, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a6ea:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800a6ee:	009c      	lsls	r4, r3, #2
 800a6f0:	f504 74a8 	add.w	r4, r4, #336	@ 0x150
 800a6f4:	4434      	add	r4, r6
 800a6f6:	3404      	adds	r4, #4
              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800a6f8:	b10f      	cbz	r7, 800a6fe <USBD_StdEPReq+0x1d0>
 800a6fa:	2f80      	cmp	r7, #128	@ 0x80
 800a6fc:	d124      	bne.n	800a748 <USBD_StdEPReq+0x21a>
                pep->status = 0x0000U;
 800a6fe:	2300      	movs	r3, #0
 800a700:	6023      	str	r3, [r4, #0]
              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800a702:	2202      	movs	r2, #2
 800a704:	4621      	mov	r1, r4
 800a706:	4630      	mov	r0, r6
 800a708:	f000 f8ea 	bl	800a8e0 <USBD_CtlSendData>
  USBD_StatusTypeDef ret = USBD_OK;
 800a70c:	4644      	mov	r4, r8
              break;
 800a70e:	e71f      	b.n	800a550 <USBD_StdEPReq+0x22>
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800a710:	f007 020f 	and.w	r2, r7, #15
 800a714:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 800a718:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800a71c:	8c92      	ldrh	r2, [r2, #36]	@ 0x24
 800a71e:	2a00      	cmp	r2, #0
 800a720:	d1df      	bne.n	800a6e2 <USBD_StdEPReq+0x1b4>
                  USBD_CtlError(pdev, req);
 800a722:	4629      	mov	r1, r5
 800a724:	f7ff fcc5 	bl	800a0b2 <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 800a728:	4644      	mov	r4, r8
                  break;
 800a72a:	e711      	b.n	800a550 <USBD_StdEPReq+0x22>
                  USBD_CtlError(pdev, req);
 800a72c:	4629      	mov	r1, r5
 800a72e:	f7ff fcc0 	bl	800a0b2 <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 800a732:	4644      	mov	r4, r8
                  break;
 800a734:	e70c      	b.n	800a550 <USBD_StdEPReq+0x22>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a736:	f007 037f 	and.w	r3, r7, #127	@ 0x7f
 800a73a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800a73e:	009c      	lsls	r4, r3, #2
 800a740:	3410      	adds	r4, #16
 800a742:	4434      	add	r4, r6
 800a744:	3404      	adds	r4, #4
 800a746:	e7d7      	b.n	800a6f8 <USBD_StdEPReq+0x1ca>
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800a748:	4639      	mov	r1, r7
 800a74a:	4630      	mov	r0, r6
 800a74c:	f7ff fa1c 	bl	8009b88 <USBD_LL_IsStallEP>
 800a750:	b110      	cbz	r0, 800a758 <USBD_StdEPReq+0x22a>
                pep->status = 0x0001U;
 800a752:	2301      	movs	r3, #1
 800a754:	6023      	str	r3, [r4, #0]
 800a756:	e7d4      	b.n	800a702 <USBD_StdEPReq+0x1d4>
                pep->status = 0x0000U;
 800a758:	2300      	movs	r3, #0
 800a75a:	6023      	str	r3, [r4, #0]
 800a75c:	e7d1      	b.n	800a702 <USBD_StdEPReq+0x1d4>
  USBD_StatusTypeDef ret = USBD_OK;
 800a75e:	2400      	movs	r4, #0
 800a760:	e6f6      	b.n	800a550 <USBD_StdEPReq+0x22>
 800a762:	4604      	mov	r4, r0
 800a764:	e6f4      	b.n	800a550 <USBD_StdEPReq+0x22>

0800a766 <USBD_GetString>:
  if (desc == NULL)
 800a766:	b300      	cbz	r0, 800a7aa <USBD_GetString+0x44>
{
 800a768:	b570      	push	{r4, r5, r6, lr}
 800a76a:	460d      	mov	r5, r1
 800a76c:	4616      	mov	r6, r2
 800a76e:	4604      	mov	r4, r0
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 800a770:	f7ff fc81 	bl	800a076 <USBD_GetLen>
 800a774:	3001      	adds	r0, #1
 800a776:	0043      	lsls	r3, r0, #1
 800a778:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a77c:	d806      	bhi.n	800a78c <USBD_GetString+0x26>
 800a77e:	b29b      	uxth	r3, r3
 800a780:	8033      	strh	r3, [r6, #0]
  unicode[idx] = *(uint8_t *)len;
 800a782:	702b      	strb	r3, [r5, #0]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800a784:	2303      	movs	r3, #3
 800a786:	706b      	strb	r3, [r5, #1]
  idx++;
 800a788:	2302      	movs	r3, #2
  while (*pdesc != (uint8_t)'\0')
 800a78a:	e00a      	b.n	800a7a2 <USBD_GetString+0x3c>
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 800a78c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a790:	e7f6      	b.n	800a780 <USBD_GetString+0x1a>
    unicode[idx] = *pdesc;
 800a792:	54ea      	strb	r2, [r5, r3]
    pdesc++;
 800a794:	3401      	adds	r4, #1
    idx++;
 800a796:	1c5a      	adds	r2, r3, #1
 800a798:	b2d2      	uxtb	r2, r2
    unicode[idx] = 0U;
 800a79a:	2100      	movs	r1, #0
 800a79c:	54a9      	strb	r1, [r5, r2]
    idx++;
 800a79e:	3302      	adds	r3, #2
 800a7a0:	b2db      	uxtb	r3, r3
  while (*pdesc != (uint8_t)'\0')
 800a7a2:	7822      	ldrb	r2, [r4, #0]
 800a7a4:	2a00      	cmp	r2, #0
 800a7a6:	d1f4      	bne.n	800a792 <USBD_GetString+0x2c>
}
 800a7a8:	bd70      	pop	{r4, r5, r6, pc}
 800a7aa:	4770      	bx	lr

0800a7ac <USBD_FS_DeviceDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800a7ac:	2312      	movs	r3, #18
 800a7ae:	800b      	strh	r3, [r1, #0]
  return USBD_FS_DeviceDesc;
}
 800a7b0:	4800      	ldr	r0, [pc, #0]	@ (800a7b4 <USBD_FS_DeviceDescriptor+0x8>)
 800a7b2:	4770      	bx	lr
 800a7b4:	20000130 	.word	0x20000130

0800a7b8 <USBD_FS_LangIDStrDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800a7b8:	2304      	movs	r3, #4
 800a7ba:	800b      	strh	r3, [r1, #0]
  return USBD_LangIDDesc;
}
 800a7bc:	4800      	ldr	r0, [pc, #0]	@ (800a7c0 <USBD_FS_LangIDStrDescriptor+0x8>)
 800a7be:	4770      	bx	lr
 800a7c0:	2000012c 	.word	0x2000012c

0800a7c4 <IntToUnicode>:
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
  uint8_t idx = 0;

  for (idx = 0; idx < len; idx++)
 800a7c4:	2300      	movs	r3, #0
 800a7c6:	4293      	cmp	r3, r2
 800a7c8:	d21e      	bcs.n	800a808 <IntToUnicode+0x44>
{
 800a7ca:	b500      	push	{lr}
 800a7cc:	e010      	b.n	800a7f0 <IntToUnicode+0x2c>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800a7ce:	f10c 0c37 	add.w	ip, ip, #55	@ 0x37
 800a7d2:	f801 c013 	strb.w	ip, [r1, r3, lsl #1]
    }

    value = value << 4;
 800a7d6:	0100      	lsls	r0, r0, #4

    pbuf[2 * idx + 1] = 0;
 800a7d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800a7dc:	f10c 0c01 	add.w	ip, ip, #1
 800a7e0:	f04f 0e00 	mov.w	lr, #0
 800a7e4:	f801 e00c 	strb.w	lr, [r1, ip]
  for (idx = 0; idx < len; idx++)
 800a7e8:	3301      	adds	r3, #1
 800a7ea:	b2db      	uxtb	r3, r3
 800a7ec:	4293      	cmp	r3, r2
 800a7ee:	d209      	bcs.n	800a804 <IntToUnicode+0x40>
    if (((value >> 28)) < 0xA)
 800a7f0:	ea4f 7c10 	mov.w	ip, r0, lsr #28
 800a7f4:	f1b0 4f20 	cmp.w	r0, #2684354560	@ 0xa0000000
 800a7f8:	d2e9      	bcs.n	800a7ce <IntToUnicode+0xa>
      pbuf[2 * idx] = (value >> 28) + '0';
 800a7fa:	f10c 0c30 	add.w	ip, ip, #48	@ 0x30
 800a7fe:	f801 c013 	strb.w	ip, [r1, r3, lsl #1]
 800a802:	e7e8      	b.n	800a7d6 <IntToUnicode+0x12>
  }
}
 800a804:	f85d fb04 	ldr.w	pc, [sp], #4
 800a808:	4770      	bx	lr
	...

0800a80c <Get_SerialNum>:
{
 800a80c:	b538      	push	{r3, r4, r5, lr}
  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800a80e:	4b0b      	ldr	r3, [pc, #44]	@ (800a83c <Get_SerialNum+0x30>)
 800a810:	f8d3 0a10 	ldr.w	r0, [r3, #2576]	@ 0xa10
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800a814:	f8d3 4a14 	ldr.w	r4, [r3, #2580]	@ 0xa14
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800a818:	f8d3 3a18 	ldr.w	r3, [r3, #2584]	@ 0xa18
  if (deviceserial0 != 0)
 800a81c:	18c0      	adds	r0, r0, r3
 800a81e:	d100      	bne.n	800a822 <Get_SerialNum+0x16>
}
 800a820:	bd38      	pop	{r3, r4, r5, pc}
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800a822:	4d07      	ldr	r5, [pc, #28]	@ (800a840 <Get_SerialNum+0x34>)
 800a824:	2208      	movs	r2, #8
 800a826:	4629      	mov	r1, r5
 800a828:	f7ff ffcc 	bl	800a7c4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800a82c:	2204      	movs	r2, #4
 800a82e:	f105 0110 	add.w	r1, r5, #16
 800a832:	4620      	mov	r0, r4
 800a834:	f7ff ffc6 	bl	800a7c4 <IntToUnicode>
}
 800a838:	e7f2      	b.n	800a820 <Get_SerialNum+0x14>
 800a83a:	bf00      	nop
 800a83c:	1fff7000 	.word	0x1fff7000
 800a840:	20000112 	.word	0x20000112

0800a844 <USBD_FS_SerialStrDescriptor>:
{
 800a844:	b508      	push	{r3, lr}
  *length = USB_SIZ_STRING_SERIAL;
 800a846:	231a      	movs	r3, #26
 800a848:	800b      	strh	r3, [r1, #0]
  Get_SerialNum();
 800a84a:	f7ff ffdf 	bl	800a80c <Get_SerialNum>
}
 800a84e:	4801      	ldr	r0, [pc, #4]	@ (800a854 <USBD_FS_SerialStrDescriptor+0x10>)
 800a850:	bd08      	pop	{r3, pc}
 800a852:	bf00      	nop
 800a854:	20000110 	.word	0x20000110

0800a858 <USBD_FS_ProductStrDescriptor>:
{
 800a858:	b508      	push	{r3, lr}
 800a85a:	460a      	mov	r2, r1
  if(speed == 0)
 800a85c:	b928      	cbnz	r0, 800a86a <USBD_FS_ProductStrDescriptor+0x12>
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a85e:	4905      	ldr	r1, [pc, #20]	@ (800a874 <USBD_FS_ProductStrDescriptor+0x1c>)
 800a860:	4805      	ldr	r0, [pc, #20]	@ (800a878 <USBD_FS_ProductStrDescriptor+0x20>)
 800a862:	f7ff ff80 	bl	800a766 <USBD_GetString>
}
 800a866:	4803      	ldr	r0, [pc, #12]	@ (800a874 <USBD_FS_ProductStrDescriptor+0x1c>)
 800a868:	bd08      	pop	{r3, pc}
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a86a:	4902      	ldr	r1, [pc, #8]	@ (800a874 <USBD_FS_ProductStrDescriptor+0x1c>)
 800a86c:	4802      	ldr	r0, [pc, #8]	@ (800a878 <USBD_FS_ProductStrDescriptor+0x20>)
 800a86e:	f7ff ff7a 	bl	800a766 <USBD_GetString>
 800a872:	e7f8      	b.n	800a866 <USBD_FS_ProductStrDescriptor+0xe>
 800a874:	20008568 	.word	0x20008568
 800a878:	0800bd74 	.word	0x0800bd74

0800a87c <USBD_FS_ManufacturerStrDescriptor>:
{
 800a87c:	b510      	push	{r4, lr}
 800a87e:	460a      	mov	r2, r1
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800a880:	4c03      	ldr	r4, [pc, #12]	@ (800a890 <USBD_FS_ManufacturerStrDescriptor+0x14>)
 800a882:	4621      	mov	r1, r4
 800a884:	4803      	ldr	r0, [pc, #12]	@ (800a894 <USBD_FS_ManufacturerStrDescriptor+0x18>)
 800a886:	f7ff ff6e 	bl	800a766 <USBD_GetString>
}
 800a88a:	4620      	mov	r0, r4
 800a88c:	bd10      	pop	{r4, pc}
 800a88e:	bf00      	nop
 800a890:	20008568 	.word	0x20008568
 800a894:	0800bd90 	.word	0x0800bd90

0800a898 <USBD_FS_ConfigStrDescriptor>:
{
 800a898:	b508      	push	{r3, lr}
 800a89a:	460a      	mov	r2, r1
  if(speed == USBD_SPEED_HIGH)
 800a89c:	b928      	cbnz	r0, 800a8aa <USBD_FS_ConfigStrDescriptor+0x12>
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a89e:	4905      	ldr	r1, [pc, #20]	@ (800a8b4 <USBD_FS_ConfigStrDescriptor+0x1c>)
 800a8a0:	4805      	ldr	r0, [pc, #20]	@ (800a8b8 <USBD_FS_ConfigStrDescriptor+0x20>)
 800a8a2:	f7ff ff60 	bl	800a766 <USBD_GetString>
}
 800a8a6:	4803      	ldr	r0, [pc, #12]	@ (800a8b4 <USBD_FS_ConfigStrDescriptor+0x1c>)
 800a8a8:	bd08      	pop	{r3, pc}
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a8aa:	4902      	ldr	r1, [pc, #8]	@ (800a8b4 <USBD_FS_ConfigStrDescriptor+0x1c>)
 800a8ac:	4802      	ldr	r0, [pc, #8]	@ (800a8b8 <USBD_FS_ConfigStrDescriptor+0x20>)
 800a8ae:	f7ff ff5a 	bl	800a766 <USBD_GetString>
 800a8b2:	e7f8      	b.n	800a8a6 <USBD_FS_ConfigStrDescriptor+0xe>
 800a8b4:	20008568 	.word	0x20008568
 800a8b8:	0800bda4 	.word	0x0800bda4

0800a8bc <USBD_FS_InterfaceStrDescriptor>:
{
 800a8bc:	b508      	push	{r3, lr}
 800a8be:	460a      	mov	r2, r1
  if(speed == 0)
 800a8c0:	b928      	cbnz	r0, 800a8ce <USBD_FS_InterfaceStrDescriptor+0x12>
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a8c2:	4905      	ldr	r1, [pc, #20]	@ (800a8d8 <USBD_FS_InterfaceStrDescriptor+0x1c>)
 800a8c4:	4805      	ldr	r0, [pc, #20]	@ (800a8dc <USBD_FS_InterfaceStrDescriptor+0x20>)
 800a8c6:	f7ff ff4e 	bl	800a766 <USBD_GetString>
}
 800a8ca:	4803      	ldr	r0, [pc, #12]	@ (800a8d8 <USBD_FS_InterfaceStrDescriptor+0x1c>)
 800a8cc:	bd08      	pop	{r3, pc}
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a8ce:	4902      	ldr	r1, [pc, #8]	@ (800a8d8 <USBD_FS_InterfaceStrDescriptor+0x1c>)
 800a8d0:	4802      	ldr	r0, [pc, #8]	@ (800a8dc <USBD_FS_InterfaceStrDescriptor+0x20>)
 800a8d2:	f7ff ff48 	bl	800a766 <USBD_GetString>
 800a8d6:	e7f8      	b.n	800a8ca <USBD_FS_InterfaceStrDescriptor+0xe>
 800a8d8:	20008568 	.word	0x20008568
 800a8dc:	0800bdb0 	.word	0x0800bdb0

0800a8e0 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800a8e0:	b508      	push	{r3, lr}
 800a8e2:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800a8e4:	2202      	movs	r2, #2
 800a8e6:	f8c0 2294 	str.w	r2, [r0, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800a8ea:	6183      	str	r3, [r0, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800a8ec:	61c3      	str	r3, [r0, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a8ee:	460a      	mov	r2, r1
 800a8f0:	2100      	movs	r1, #0
 800a8f2:	f7ff f9a7 	bl	8009c44 <USBD_LL_Transmit>

  return USBD_OK;
}
 800a8f6:	2000      	movs	r0, #0
 800a8f8:	bd08      	pop	{r3, pc}

0800a8fa <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800a8fa:	b508      	push	{r3, lr}
 800a8fc:	4613      	mov	r3, r2
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a8fe:	460a      	mov	r2, r1
 800a900:	2100      	movs	r1, #0
 800a902:	f7ff f99f 	bl	8009c44 <USBD_LL_Transmit>

  return USBD_OK;
}
 800a906:	2000      	movs	r0, #0
 800a908:	bd08      	pop	{r3, pc}

0800a90a <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800a90a:	b508      	push	{r3, lr}
 800a90c:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800a90e:	2203      	movs	r2, #3
 800a910:	f8c0 2294 	str.w	r2, [r0, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800a914:	f8c0 3158 	str.w	r3, [r0, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800a918:	f8c0 315c 	str.w	r3, [r0, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a91c:	460a      	mov	r2, r1
 800a91e:	2100      	movs	r1, #0
 800a920:	f7ff f998 	bl	8009c54 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 800a924:	2000      	movs	r0, #0
 800a926:	bd08      	pop	{r3, pc}

0800a928 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800a928:	b508      	push	{r3, lr}
 800a92a:	4613      	mov	r3, r2
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a92c:	460a      	mov	r2, r1
 800a92e:	2100      	movs	r1, #0
 800a930:	f7ff f990 	bl	8009c54 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 800a934:	2000      	movs	r0, #0
 800a936:	bd08      	pop	{r3, pc}

0800a938 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800a938:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800a93a:	2204      	movs	r2, #4
 800a93c:	f8c0 2294 	str.w	r2, [r0, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800a940:	2300      	movs	r3, #0
 800a942:	461a      	mov	r2, r3
 800a944:	4619      	mov	r1, r3
 800a946:	f7ff f97d 	bl	8009c44 <USBD_LL_Transmit>

  return USBD_OK;
}
 800a94a:	2000      	movs	r0, #0
 800a94c:	bd08      	pop	{r3, pc}

0800a94e <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800a94e:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800a950:	2205      	movs	r2, #5
 800a952:	f8c0 2294 	str.w	r2, [r0, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a956:	2300      	movs	r3, #0
 800a958:	461a      	mov	r2, r3
 800a95a:	4619      	mov	r1, r3
 800a95c:	f7ff f97a 	bl	8009c54 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 800a960:	2000      	movs	r0, #0
 800a962:	bd08      	pop	{r3, pc}

0800a964 <crc32_inc>:
    unsigned long crc32;
    unsigned char *byte_buf;
    size_t i;

    /** accumulate crc32 for buffer **/
    crc32 = in_crc32 ^ 0xFFFFFFFF;
 800a964:	43c0      	mvns	r0, r0
    byte_buf = (unsigned char *)buf;
    for (i = 0; i < size; i++)
 800a966:	f04f 0c00 	mov.w	ip, #0
 800a96a:	4594      	cmp	ip, r2
 800a96c:	d211      	bcs.n	800a992 <crc32_inc+0x2e>
{
 800a96e:	b410      	push	{r4}
    {
        crc32 = (crc32 >> 8) ^ crcTable[(crc32 ^ byte_buf[i]) & 0xFF];
 800a970:	f811 300c 	ldrb.w	r3, [r1, ip]
 800a974:	4043      	eors	r3, r0
 800a976:	b2db      	uxtb	r3, r3
 800a978:	4c07      	ldr	r4, [pc, #28]	@ (800a998 <crc32_inc+0x34>)
 800a97a:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 800a97e:	ea83 2010 	eor.w	r0, r3, r0, lsr #8
    for (i = 0; i < size; i++)
 800a982:	f10c 0c01 	add.w	ip, ip, #1
 800a986:	4594      	cmp	ip, r2
 800a988:	d3f2      	bcc.n	800a970 <crc32_inc+0xc>
    }
    return (crc32 ^ 0xFFFFFFFF);
}
 800a98a:	43c0      	mvns	r0, r0
 800a98c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a990:	4770      	bx	lr
 800a992:	43c0      	mvns	r0, r0
 800a994:	4770      	bx	lr
 800a996:	bf00      	nop
 800a998:	0800bea4 	.word	0x0800bea4

0800a99c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800a99c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800a9d4 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 800a9a0:	f7fc ff6a 	bl	8007878 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800a9a4:	480c      	ldr	r0, [pc, #48]	@ (800a9d8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800a9a6:	490d      	ldr	r1, [pc, #52]	@ (800a9dc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800a9a8:	4a0d      	ldr	r2, [pc, #52]	@ (800a9e0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800a9aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800a9ac:	e002      	b.n	800a9b4 <LoopCopyDataInit>

0800a9ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800a9ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800a9b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800a9b2:	3304      	adds	r3, #4

0800a9b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800a9b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800a9b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800a9b8:	d3f9      	bcc.n	800a9ae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800a9ba:	4a0a      	ldr	r2, [pc, #40]	@ (800a9e4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800a9bc:	4c0a      	ldr	r4, [pc, #40]	@ (800a9e8 <LoopFillZerobss+0x22>)
  movs r3, #0
 800a9be:	2300      	movs	r3, #0
  b LoopFillZerobss
 800a9c0:	e001      	b.n	800a9c6 <LoopFillZerobss>

0800a9c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800a9c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800a9c4:	3204      	adds	r2, #4

0800a9c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800a9c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800a9c8:	d3fb      	bcc.n	800a9c2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800a9ca:	f000 f855 	bl	800aa78 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800a9ce:	f7f8 f925 	bl	8002c1c <main>
  bx  lr    
 800a9d2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800a9d4:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 800a9d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800a9dc:	200001b0 	.word	0x200001b0
  ldr r2, =_sidata
 800a9e0:	0800c2e8 	.word	0x0800c2e8
  ldr r2, =_sbss
 800a9e4:	200001b0 	.word	0x200001b0
  ldr r4, =_ebss
 800a9e8:	200088b0 	.word	0x200088b0

0800a9ec <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800a9ec:	e7fe      	b.n	800a9ec <ADC_IRQHandler>
	...

0800a9f0 <sniprintf>:
 800a9f0:	b40c      	push	{r2, r3}
 800a9f2:	b530      	push	{r4, r5, lr}
 800a9f4:	4b18      	ldr	r3, [pc, #96]	@ (800aa58 <sniprintf+0x68>)
 800a9f6:	1e0c      	subs	r4, r1, #0
 800a9f8:	681d      	ldr	r5, [r3, #0]
 800a9fa:	b09d      	sub	sp, #116	@ 0x74
 800a9fc:	da08      	bge.n	800aa10 <sniprintf+0x20>
 800a9fe:	238b      	movs	r3, #139	@ 0x8b
 800aa00:	602b      	str	r3, [r5, #0]
 800aa02:	f04f 30ff 	mov.w	r0, #4294967295
 800aa06:	b01d      	add	sp, #116	@ 0x74
 800aa08:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800aa0c:	b002      	add	sp, #8
 800aa0e:	4770      	bx	lr
 800aa10:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800aa14:	f8ad 3014 	strh.w	r3, [sp, #20]
 800aa18:	f04f 0300 	mov.w	r3, #0
 800aa1c:	931b      	str	r3, [sp, #108]	@ 0x6c
 800aa1e:	bf14      	ite	ne
 800aa20:	f104 33ff 	addne.w	r3, r4, #4294967295
 800aa24:	4623      	moveq	r3, r4
 800aa26:	9304      	str	r3, [sp, #16]
 800aa28:	9307      	str	r3, [sp, #28]
 800aa2a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800aa2e:	9002      	str	r0, [sp, #8]
 800aa30:	9006      	str	r0, [sp, #24]
 800aa32:	f8ad 3016 	strh.w	r3, [sp, #22]
 800aa36:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800aa38:	ab21      	add	r3, sp, #132	@ 0x84
 800aa3a:	a902      	add	r1, sp, #8
 800aa3c:	4628      	mov	r0, r5
 800aa3e:	9301      	str	r3, [sp, #4]
 800aa40:	f000 f9a6 	bl	800ad90 <_svfiprintf_r>
 800aa44:	1c43      	adds	r3, r0, #1
 800aa46:	bfbc      	itt	lt
 800aa48:	238b      	movlt	r3, #139	@ 0x8b
 800aa4a:	602b      	strlt	r3, [r5, #0]
 800aa4c:	2c00      	cmp	r4, #0
 800aa4e:	d0da      	beq.n	800aa06 <sniprintf+0x16>
 800aa50:	9b02      	ldr	r3, [sp, #8]
 800aa52:	2200      	movs	r2, #0
 800aa54:	701a      	strb	r2, [r3, #0]
 800aa56:	e7d6      	b.n	800aa06 <sniprintf+0x16>
 800aa58:	20000160 	.word	0x20000160

0800aa5c <memset>:
 800aa5c:	4402      	add	r2, r0
 800aa5e:	4603      	mov	r3, r0
 800aa60:	4293      	cmp	r3, r2
 800aa62:	d100      	bne.n	800aa66 <memset+0xa>
 800aa64:	4770      	bx	lr
 800aa66:	f803 1b01 	strb.w	r1, [r3], #1
 800aa6a:	e7f9      	b.n	800aa60 <memset+0x4>

0800aa6c <__errno>:
 800aa6c:	4b01      	ldr	r3, [pc, #4]	@ (800aa74 <__errno+0x8>)
 800aa6e:	6818      	ldr	r0, [r3, #0]
 800aa70:	4770      	bx	lr
 800aa72:	bf00      	nop
 800aa74:	20000160 	.word	0x20000160

0800aa78 <__libc_init_array>:
 800aa78:	b570      	push	{r4, r5, r6, lr}
 800aa7a:	4b0d      	ldr	r3, [pc, #52]	@ (800aab0 <__libc_init_array+0x38>)
 800aa7c:	4d0d      	ldr	r5, [pc, #52]	@ (800aab4 <__libc_init_array+0x3c>)
 800aa7e:	1b5b      	subs	r3, r3, r5
 800aa80:	109c      	asrs	r4, r3, #2
 800aa82:	2600      	movs	r6, #0
 800aa84:	42a6      	cmp	r6, r4
 800aa86:	d109      	bne.n	800aa9c <__libc_init_array+0x24>
 800aa88:	f000 ff18 	bl	800b8bc <_init>
 800aa8c:	4d0a      	ldr	r5, [pc, #40]	@ (800aab8 <__libc_init_array+0x40>)
 800aa8e:	4b0b      	ldr	r3, [pc, #44]	@ (800aabc <__libc_init_array+0x44>)
 800aa90:	1b5b      	subs	r3, r3, r5
 800aa92:	109c      	asrs	r4, r3, #2
 800aa94:	2600      	movs	r6, #0
 800aa96:	42a6      	cmp	r6, r4
 800aa98:	d105      	bne.n	800aaa6 <__libc_init_array+0x2e>
 800aa9a:	bd70      	pop	{r4, r5, r6, pc}
 800aa9c:	f855 3b04 	ldr.w	r3, [r5], #4
 800aaa0:	4798      	blx	r3
 800aaa2:	3601      	adds	r6, #1
 800aaa4:	e7ee      	b.n	800aa84 <__libc_init_array+0xc>
 800aaa6:	f855 3b04 	ldr.w	r3, [r5], #4
 800aaaa:	4798      	blx	r3
 800aaac:	3601      	adds	r6, #1
 800aaae:	e7f2      	b.n	800aa96 <__libc_init_array+0x1e>
 800aab0:	0800c2e0 	.word	0x0800c2e0
 800aab4:	0800c2e0 	.word	0x0800c2e0
 800aab8:	0800c2e0 	.word	0x0800c2e0
 800aabc:	0800c2e4 	.word	0x0800c2e4

0800aac0 <__retarget_lock_acquire_recursive>:
 800aac0:	4770      	bx	lr

0800aac2 <__retarget_lock_release_recursive>:
 800aac2:	4770      	bx	lr

0800aac4 <memcpy>:
 800aac4:	440a      	add	r2, r1
 800aac6:	4291      	cmp	r1, r2
 800aac8:	f100 33ff 	add.w	r3, r0, #4294967295
 800aacc:	d100      	bne.n	800aad0 <memcpy+0xc>
 800aace:	4770      	bx	lr
 800aad0:	b510      	push	{r4, lr}
 800aad2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800aad6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800aada:	4291      	cmp	r1, r2
 800aadc:	d1f9      	bne.n	800aad2 <memcpy+0xe>
 800aade:	bd10      	pop	{r4, pc}

0800aae0 <_free_r>:
 800aae0:	b538      	push	{r3, r4, r5, lr}
 800aae2:	4605      	mov	r5, r0
 800aae4:	2900      	cmp	r1, #0
 800aae6:	d041      	beq.n	800ab6c <_free_r+0x8c>
 800aae8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800aaec:	1f0c      	subs	r4, r1, #4
 800aaee:	2b00      	cmp	r3, #0
 800aaf0:	bfb8      	it	lt
 800aaf2:	18e4      	addlt	r4, r4, r3
 800aaf4:	f000 f8e0 	bl	800acb8 <__malloc_lock>
 800aaf8:	4a1d      	ldr	r2, [pc, #116]	@ (800ab70 <_free_r+0x90>)
 800aafa:	6813      	ldr	r3, [r2, #0]
 800aafc:	b933      	cbnz	r3, 800ab0c <_free_r+0x2c>
 800aafe:	6063      	str	r3, [r4, #4]
 800ab00:	6014      	str	r4, [r2, #0]
 800ab02:	4628      	mov	r0, r5
 800ab04:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ab08:	f000 b8dc 	b.w	800acc4 <__malloc_unlock>
 800ab0c:	42a3      	cmp	r3, r4
 800ab0e:	d908      	bls.n	800ab22 <_free_r+0x42>
 800ab10:	6820      	ldr	r0, [r4, #0]
 800ab12:	1821      	adds	r1, r4, r0
 800ab14:	428b      	cmp	r3, r1
 800ab16:	bf01      	itttt	eq
 800ab18:	6819      	ldreq	r1, [r3, #0]
 800ab1a:	685b      	ldreq	r3, [r3, #4]
 800ab1c:	1809      	addeq	r1, r1, r0
 800ab1e:	6021      	streq	r1, [r4, #0]
 800ab20:	e7ed      	b.n	800aafe <_free_r+0x1e>
 800ab22:	461a      	mov	r2, r3
 800ab24:	685b      	ldr	r3, [r3, #4]
 800ab26:	b10b      	cbz	r3, 800ab2c <_free_r+0x4c>
 800ab28:	42a3      	cmp	r3, r4
 800ab2a:	d9fa      	bls.n	800ab22 <_free_r+0x42>
 800ab2c:	6811      	ldr	r1, [r2, #0]
 800ab2e:	1850      	adds	r0, r2, r1
 800ab30:	42a0      	cmp	r0, r4
 800ab32:	d10b      	bne.n	800ab4c <_free_r+0x6c>
 800ab34:	6820      	ldr	r0, [r4, #0]
 800ab36:	4401      	add	r1, r0
 800ab38:	1850      	adds	r0, r2, r1
 800ab3a:	4283      	cmp	r3, r0
 800ab3c:	6011      	str	r1, [r2, #0]
 800ab3e:	d1e0      	bne.n	800ab02 <_free_r+0x22>
 800ab40:	6818      	ldr	r0, [r3, #0]
 800ab42:	685b      	ldr	r3, [r3, #4]
 800ab44:	6053      	str	r3, [r2, #4]
 800ab46:	4408      	add	r0, r1
 800ab48:	6010      	str	r0, [r2, #0]
 800ab4a:	e7da      	b.n	800ab02 <_free_r+0x22>
 800ab4c:	d902      	bls.n	800ab54 <_free_r+0x74>
 800ab4e:	230c      	movs	r3, #12
 800ab50:	602b      	str	r3, [r5, #0]
 800ab52:	e7d6      	b.n	800ab02 <_free_r+0x22>
 800ab54:	6820      	ldr	r0, [r4, #0]
 800ab56:	1821      	adds	r1, r4, r0
 800ab58:	428b      	cmp	r3, r1
 800ab5a:	bf04      	itt	eq
 800ab5c:	6819      	ldreq	r1, [r3, #0]
 800ab5e:	685b      	ldreq	r3, [r3, #4]
 800ab60:	6063      	str	r3, [r4, #4]
 800ab62:	bf04      	itt	eq
 800ab64:	1809      	addeq	r1, r1, r0
 800ab66:	6021      	streq	r1, [r4, #0]
 800ab68:	6054      	str	r4, [r2, #4]
 800ab6a:	e7ca      	b.n	800ab02 <_free_r+0x22>
 800ab6c:	bd38      	pop	{r3, r4, r5, pc}
 800ab6e:	bf00      	nop
 800ab70:	200088ac 	.word	0x200088ac

0800ab74 <sbrk_aligned>:
 800ab74:	b570      	push	{r4, r5, r6, lr}
 800ab76:	4e0f      	ldr	r6, [pc, #60]	@ (800abb4 <sbrk_aligned+0x40>)
 800ab78:	460c      	mov	r4, r1
 800ab7a:	6831      	ldr	r1, [r6, #0]
 800ab7c:	4605      	mov	r5, r0
 800ab7e:	b911      	cbnz	r1, 800ab86 <sbrk_aligned+0x12>
 800ab80:	f000 fbaa 	bl	800b2d8 <_sbrk_r>
 800ab84:	6030      	str	r0, [r6, #0]
 800ab86:	4621      	mov	r1, r4
 800ab88:	4628      	mov	r0, r5
 800ab8a:	f000 fba5 	bl	800b2d8 <_sbrk_r>
 800ab8e:	1c43      	adds	r3, r0, #1
 800ab90:	d103      	bne.n	800ab9a <sbrk_aligned+0x26>
 800ab92:	f04f 34ff 	mov.w	r4, #4294967295
 800ab96:	4620      	mov	r0, r4
 800ab98:	bd70      	pop	{r4, r5, r6, pc}
 800ab9a:	1cc4      	adds	r4, r0, #3
 800ab9c:	f024 0403 	bic.w	r4, r4, #3
 800aba0:	42a0      	cmp	r0, r4
 800aba2:	d0f8      	beq.n	800ab96 <sbrk_aligned+0x22>
 800aba4:	1a21      	subs	r1, r4, r0
 800aba6:	4628      	mov	r0, r5
 800aba8:	f000 fb96 	bl	800b2d8 <_sbrk_r>
 800abac:	3001      	adds	r0, #1
 800abae:	d1f2      	bne.n	800ab96 <sbrk_aligned+0x22>
 800abb0:	e7ef      	b.n	800ab92 <sbrk_aligned+0x1e>
 800abb2:	bf00      	nop
 800abb4:	200088a8 	.word	0x200088a8

0800abb8 <_malloc_r>:
 800abb8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800abbc:	1ccd      	adds	r5, r1, #3
 800abbe:	f025 0503 	bic.w	r5, r5, #3
 800abc2:	3508      	adds	r5, #8
 800abc4:	2d0c      	cmp	r5, #12
 800abc6:	bf38      	it	cc
 800abc8:	250c      	movcc	r5, #12
 800abca:	2d00      	cmp	r5, #0
 800abcc:	4606      	mov	r6, r0
 800abce:	db01      	blt.n	800abd4 <_malloc_r+0x1c>
 800abd0:	42a9      	cmp	r1, r5
 800abd2:	d904      	bls.n	800abde <_malloc_r+0x26>
 800abd4:	230c      	movs	r3, #12
 800abd6:	6033      	str	r3, [r6, #0]
 800abd8:	2000      	movs	r0, #0
 800abda:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800abde:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800acb4 <_malloc_r+0xfc>
 800abe2:	f000 f869 	bl	800acb8 <__malloc_lock>
 800abe6:	f8d8 3000 	ldr.w	r3, [r8]
 800abea:	461c      	mov	r4, r3
 800abec:	bb44      	cbnz	r4, 800ac40 <_malloc_r+0x88>
 800abee:	4629      	mov	r1, r5
 800abf0:	4630      	mov	r0, r6
 800abf2:	f7ff ffbf 	bl	800ab74 <sbrk_aligned>
 800abf6:	1c43      	adds	r3, r0, #1
 800abf8:	4604      	mov	r4, r0
 800abfa:	d158      	bne.n	800acae <_malloc_r+0xf6>
 800abfc:	f8d8 4000 	ldr.w	r4, [r8]
 800ac00:	4627      	mov	r7, r4
 800ac02:	2f00      	cmp	r7, #0
 800ac04:	d143      	bne.n	800ac8e <_malloc_r+0xd6>
 800ac06:	2c00      	cmp	r4, #0
 800ac08:	d04b      	beq.n	800aca2 <_malloc_r+0xea>
 800ac0a:	6823      	ldr	r3, [r4, #0]
 800ac0c:	4639      	mov	r1, r7
 800ac0e:	4630      	mov	r0, r6
 800ac10:	eb04 0903 	add.w	r9, r4, r3
 800ac14:	f000 fb60 	bl	800b2d8 <_sbrk_r>
 800ac18:	4581      	cmp	r9, r0
 800ac1a:	d142      	bne.n	800aca2 <_malloc_r+0xea>
 800ac1c:	6821      	ldr	r1, [r4, #0]
 800ac1e:	1a6d      	subs	r5, r5, r1
 800ac20:	4629      	mov	r1, r5
 800ac22:	4630      	mov	r0, r6
 800ac24:	f7ff ffa6 	bl	800ab74 <sbrk_aligned>
 800ac28:	3001      	adds	r0, #1
 800ac2a:	d03a      	beq.n	800aca2 <_malloc_r+0xea>
 800ac2c:	6823      	ldr	r3, [r4, #0]
 800ac2e:	442b      	add	r3, r5
 800ac30:	6023      	str	r3, [r4, #0]
 800ac32:	f8d8 3000 	ldr.w	r3, [r8]
 800ac36:	685a      	ldr	r2, [r3, #4]
 800ac38:	bb62      	cbnz	r2, 800ac94 <_malloc_r+0xdc>
 800ac3a:	f8c8 7000 	str.w	r7, [r8]
 800ac3e:	e00f      	b.n	800ac60 <_malloc_r+0xa8>
 800ac40:	6822      	ldr	r2, [r4, #0]
 800ac42:	1b52      	subs	r2, r2, r5
 800ac44:	d420      	bmi.n	800ac88 <_malloc_r+0xd0>
 800ac46:	2a0b      	cmp	r2, #11
 800ac48:	d917      	bls.n	800ac7a <_malloc_r+0xc2>
 800ac4a:	1961      	adds	r1, r4, r5
 800ac4c:	42a3      	cmp	r3, r4
 800ac4e:	6025      	str	r5, [r4, #0]
 800ac50:	bf18      	it	ne
 800ac52:	6059      	strne	r1, [r3, #4]
 800ac54:	6863      	ldr	r3, [r4, #4]
 800ac56:	bf08      	it	eq
 800ac58:	f8c8 1000 	streq.w	r1, [r8]
 800ac5c:	5162      	str	r2, [r4, r5]
 800ac5e:	604b      	str	r3, [r1, #4]
 800ac60:	4630      	mov	r0, r6
 800ac62:	f000 f82f 	bl	800acc4 <__malloc_unlock>
 800ac66:	f104 000b 	add.w	r0, r4, #11
 800ac6a:	1d23      	adds	r3, r4, #4
 800ac6c:	f020 0007 	bic.w	r0, r0, #7
 800ac70:	1ac2      	subs	r2, r0, r3
 800ac72:	bf1c      	itt	ne
 800ac74:	1a1b      	subne	r3, r3, r0
 800ac76:	50a3      	strne	r3, [r4, r2]
 800ac78:	e7af      	b.n	800abda <_malloc_r+0x22>
 800ac7a:	6862      	ldr	r2, [r4, #4]
 800ac7c:	42a3      	cmp	r3, r4
 800ac7e:	bf0c      	ite	eq
 800ac80:	f8c8 2000 	streq.w	r2, [r8]
 800ac84:	605a      	strne	r2, [r3, #4]
 800ac86:	e7eb      	b.n	800ac60 <_malloc_r+0xa8>
 800ac88:	4623      	mov	r3, r4
 800ac8a:	6864      	ldr	r4, [r4, #4]
 800ac8c:	e7ae      	b.n	800abec <_malloc_r+0x34>
 800ac8e:	463c      	mov	r4, r7
 800ac90:	687f      	ldr	r7, [r7, #4]
 800ac92:	e7b6      	b.n	800ac02 <_malloc_r+0x4a>
 800ac94:	461a      	mov	r2, r3
 800ac96:	685b      	ldr	r3, [r3, #4]
 800ac98:	42a3      	cmp	r3, r4
 800ac9a:	d1fb      	bne.n	800ac94 <_malloc_r+0xdc>
 800ac9c:	2300      	movs	r3, #0
 800ac9e:	6053      	str	r3, [r2, #4]
 800aca0:	e7de      	b.n	800ac60 <_malloc_r+0xa8>
 800aca2:	230c      	movs	r3, #12
 800aca4:	6033      	str	r3, [r6, #0]
 800aca6:	4630      	mov	r0, r6
 800aca8:	f000 f80c 	bl	800acc4 <__malloc_unlock>
 800acac:	e794      	b.n	800abd8 <_malloc_r+0x20>
 800acae:	6005      	str	r5, [r0, #0]
 800acb0:	e7d6      	b.n	800ac60 <_malloc_r+0xa8>
 800acb2:	bf00      	nop
 800acb4:	200088ac 	.word	0x200088ac

0800acb8 <__malloc_lock>:
 800acb8:	4801      	ldr	r0, [pc, #4]	@ (800acc0 <__malloc_lock+0x8>)
 800acba:	f7ff bf01 	b.w	800aac0 <__retarget_lock_acquire_recursive>
 800acbe:	bf00      	nop
 800acc0:	200088a4 	.word	0x200088a4

0800acc4 <__malloc_unlock>:
 800acc4:	4801      	ldr	r0, [pc, #4]	@ (800accc <__malloc_unlock+0x8>)
 800acc6:	f7ff befc 	b.w	800aac2 <__retarget_lock_release_recursive>
 800acca:	bf00      	nop
 800accc:	200088a4 	.word	0x200088a4

0800acd0 <__ssputs_r>:
 800acd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800acd4:	688e      	ldr	r6, [r1, #8]
 800acd6:	461f      	mov	r7, r3
 800acd8:	42be      	cmp	r6, r7
 800acda:	4682      	mov	sl, r0
 800acdc:	460c      	mov	r4, r1
 800acde:	4690      	mov	r8, r2
 800ace0:	4633      	mov	r3, r6
 800ace2:	d853      	bhi.n	800ad8c <__ssputs_r+0xbc>
 800ace4:	f9b1 000c 	ldrsh.w	r0, [r1, #12]
 800ace8:	f410 6f90 	tst.w	r0, #1152	@ 0x480
 800acec:	d02b      	beq.n	800ad46 <__ssputs_r+0x76>
 800acee:	6965      	ldr	r5, [r4, #20]
 800acf0:	6823      	ldr	r3, [r4, #0]
 800acf2:	6909      	ldr	r1, [r1, #16]
 800acf4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800acf8:	eba3 0901 	sub.w	r9, r3, r1
 800acfc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ad00:	1c7b      	adds	r3, r7, #1
 800ad02:	106d      	asrs	r5, r5, #1
 800ad04:	444b      	add	r3, r9
 800ad06:	42ab      	cmp	r3, r5
 800ad08:	462a      	mov	r2, r5
 800ad0a:	bf84      	itt	hi
 800ad0c:	461d      	movhi	r5, r3
 800ad0e:	462a      	movhi	r2, r5
 800ad10:	0543      	lsls	r3, r0, #21
 800ad12:	d527      	bpl.n	800ad64 <__ssputs_r+0x94>
 800ad14:	4611      	mov	r1, r2
 800ad16:	4650      	mov	r0, sl
 800ad18:	f7ff ff4e 	bl	800abb8 <_malloc_r>
 800ad1c:	4606      	mov	r6, r0
 800ad1e:	b358      	cbz	r0, 800ad78 <__ssputs_r+0xa8>
 800ad20:	6921      	ldr	r1, [r4, #16]
 800ad22:	464a      	mov	r2, r9
 800ad24:	f7ff fece 	bl	800aac4 <memcpy>
 800ad28:	89a3      	ldrh	r3, [r4, #12]
 800ad2a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800ad2e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ad32:	81a3      	strh	r3, [r4, #12]
 800ad34:	6126      	str	r6, [r4, #16]
 800ad36:	6165      	str	r5, [r4, #20]
 800ad38:	444e      	add	r6, r9
 800ad3a:	eba5 0509 	sub.w	r5, r5, r9
 800ad3e:	6026      	str	r6, [r4, #0]
 800ad40:	60a5      	str	r5, [r4, #8]
 800ad42:	463e      	mov	r6, r7
 800ad44:	463b      	mov	r3, r7
 800ad46:	461f      	mov	r7, r3
 800ad48:	6820      	ldr	r0, [r4, #0]
 800ad4a:	463a      	mov	r2, r7
 800ad4c:	4641      	mov	r1, r8
 800ad4e:	f000 faa9 	bl	800b2a4 <memmove>
 800ad52:	68a3      	ldr	r3, [r4, #8]
 800ad54:	1b9b      	subs	r3, r3, r6
 800ad56:	60a3      	str	r3, [r4, #8]
 800ad58:	6823      	ldr	r3, [r4, #0]
 800ad5a:	443b      	add	r3, r7
 800ad5c:	6023      	str	r3, [r4, #0]
 800ad5e:	2000      	movs	r0, #0
 800ad60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ad64:	4650      	mov	r0, sl
 800ad66:	f000 fac7 	bl	800b2f8 <_realloc_r>
 800ad6a:	4606      	mov	r6, r0
 800ad6c:	2800      	cmp	r0, #0
 800ad6e:	d1e1      	bne.n	800ad34 <__ssputs_r+0x64>
 800ad70:	6921      	ldr	r1, [r4, #16]
 800ad72:	4650      	mov	r0, sl
 800ad74:	f7ff feb4 	bl	800aae0 <_free_r>
 800ad78:	230c      	movs	r3, #12
 800ad7a:	f8ca 3000 	str.w	r3, [sl]
 800ad7e:	89a3      	ldrh	r3, [r4, #12]
 800ad80:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ad84:	81a3      	strh	r3, [r4, #12]
 800ad86:	f04f 30ff 	mov.w	r0, #4294967295
 800ad8a:	e7e9      	b.n	800ad60 <__ssputs_r+0x90>
 800ad8c:	463e      	mov	r6, r7
 800ad8e:	e7db      	b.n	800ad48 <__ssputs_r+0x78>

0800ad90 <_svfiprintf_r>:
 800ad90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad94:	4698      	mov	r8, r3
 800ad96:	898b      	ldrh	r3, [r1, #12]
 800ad98:	061b      	lsls	r3, r3, #24
 800ad9a:	b09d      	sub	sp, #116	@ 0x74
 800ad9c:	4607      	mov	r7, r0
 800ad9e:	460d      	mov	r5, r1
 800ada0:	4614      	mov	r4, r2
 800ada2:	d510      	bpl.n	800adc6 <_svfiprintf_r+0x36>
 800ada4:	690b      	ldr	r3, [r1, #16]
 800ada6:	b973      	cbnz	r3, 800adc6 <_svfiprintf_r+0x36>
 800ada8:	2140      	movs	r1, #64	@ 0x40
 800adaa:	f7ff ff05 	bl	800abb8 <_malloc_r>
 800adae:	6028      	str	r0, [r5, #0]
 800adb0:	6128      	str	r0, [r5, #16]
 800adb2:	b930      	cbnz	r0, 800adc2 <_svfiprintf_r+0x32>
 800adb4:	230c      	movs	r3, #12
 800adb6:	603b      	str	r3, [r7, #0]
 800adb8:	f04f 30ff 	mov.w	r0, #4294967295
 800adbc:	b01d      	add	sp, #116	@ 0x74
 800adbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800adc2:	2340      	movs	r3, #64	@ 0x40
 800adc4:	616b      	str	r3, [r5, #20]
 800adc6:	2300      	movs	r3, #0
 800adc8:	9309      	str	r3, [sp, #36]	@ 0x24
 800adca:	2320      	movs	r3, #32
 800adcc:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800add0:	f8cd 800c 	str.w	r8, [sp, #12]
 800add4:	2330      	movs	r3, #48	@ 0x30
 800add6:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800af74 <_svfiprintf_r+0x1e4>
 800adda:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800adde:	f04f 0901 	mov.w	r9, #1
 800ade2:	4623      	mov	r3, r4
 800ade4:	469a      	mov	sl, r3
 800ade6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800adea:	b10a      	cbz	r2, 800adf0 <_svfiprintf_r+0x60>
 800adec:	2a25      	cmp	r2, #37	@ 0x25
 800adee:	d1f9      	bne.n	800ade4 <_svfiprintf_r+0x54>
 800adf0:	ebba 0b04 	subs.w	fp, sl, r4
 800adf4:	d00b      	beq.n	800ae0e <_svfiprintf_r+0x7e>
 800adf6:	465b      	mov	r3, fp
 800adf8:	4622      	mov	r2, r4
 800adfa:	4629      	mov	r1, r5
 800adfc:	4638      	mov	r0, r7
 800adfe:	f7ff ff67 	bl	800acd0 <__ssputs_r>
 800ae02:	3001      	adds	r0, #1
 800ae04:	f000 80a7 	beq.w	800af56 <_svfiprintf_r+0x1c6>
 800ae08:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ae0a:	445a      	add	r2, fp
 800ae0c:	9209      	str	r2, [sp, #36]	@ 0x24
 800ae0e:	f89a 3000 	ldrb.w	r3, [sl]
 800ae12:	2b00      	cmp	r3, #0
 800ae14:	f000 809f 	beq.w	800af56 <_svfiprintf_r+0x1c6>
 800ae18:	2300      	movs	r3, #0
 800ae1a:	f04f 32ff 	mov.w	r2, #4294967295
 800ae1e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ae22:	f10a 0a01 	add.w	sl, sl, #1
 800ae26:	9304      	str	r3, [sp, #16]
 800ae28:	9307      	str	r3, [sp, #28]
 800ae2a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800ae2e:	931a      	str	r3, [sp, #104]	@ 0x68
 800ae30:	4654      	mov	r4, sl
 800ae32:	2205      	movs	r2, #5
 800ae34:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ae38:	484e      	ldr	r0, [pc, #312]	@ (800af74 <_svfiprintf_r+0x1e4>)
 800ae3a:	f7f5 f9b9 	bl	80001b0 <memchr>
 800ae3e:	9a04      	ldr	r2, [sp, #16]
 800ae40:	b9d8      	cbnz	r0, 800ae7a <_svfiprintf_r+0xea>
 800ae42:	06d0      	lsls	r0, r2, #27
 800ae44:	bf44      	itt	mi
 800ae46:	2320      	movmi	r3, #32
 800ae48:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ae4c:	0711      	lsls	r1, r2, #28
 800ae4e:	bf44      	itt	mi
 800ae50:	232b      	movmi	r3, #43	@ 0x2b
 800ae52:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ae56:	f89a 3000 	ldrb.w	r3, [sl]
 800ae5a:	2b2a      	cmp	r3, #42	@ 0x2a
 800ae5c:	d015      	beq.n	800ae8a <_svfiprintf_r+0xfa>
 800ae5e:	9a07      	ldr	r2, [sp, #28]
 800ae60:	4654      	mov	r4, sl
 800ae62:	2000      	movs	r0, #0
 800ae64:	f04f 0c0a 	mov.w	ip, #10
 800ae68:	4621      	mov	r1, r4
 800ae6a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ae6e:	3b30      	subs	r3, #48	@ 0x30
 800ae70:	2b09      	cmp	r3, #9
 800ae72:	d94b      	bls.n	800af0c <_svfiprintf_r+0x17c>
 800ae74:	b1b0      	cbz	r0, 800aea4 <_svfiprintf_r+0x114>
 800ae76:	9207      	str	r2, [sp, #28]
 800ae78:	e014      	b.n	800aea4 <_svfiprintf_r+0x114>
 800ae7a:	eba0 0308 	sub.w	r3, r0, r8
 800ae7e:	fa09 f303 	lsl.w	r3, r9, r3
 800ae82:	4313      	orrs	r3, r2
 800ae84:	9304      	str	r3, [sp, #16]
 800ae86:	46a2      	mov	sl, r4
 800ae88:	e7d2      	b.n	800ae30 <_svfiprintf_r+0xa0>
 800ae8a:	9b03      	ldr	r3, [sp, #12]
 800ae8c:	1d19      	adds	r1, r3, #4
 800ae8e:	681b      	ldr	r3, [r3, #0]
 800ae90:	9103      	str	r1, [sp, #12]
 800ae92:	2b00      	cmp	r3, #0
 800ae94:	bfbb      	ittet	lt
 800ae96:	425b      	neglt	r3, r3
 800ae98:	f042 0202 	orrlt.w	r2, r2, #2
 800ae9c:	9307      	strge	r3, [sp, #28]
 800ae9e:	9307      	strlt	r3, [sp, #28]
 800aea0:	bfb8      	it	lt
 800aea2:	9204      	strlt	r2, [sp, #16]
 800aea4:	7823      	ldrb	r3, [r4, #0]
 800aea6:	2b2e      	cmp	r3, #46	@ 0x2e
 800aea8:	d10a      	bne.n	800aec0 <_svfiprintf_r+0x130>
 800aeaa:	7863      	ldrb	r3, [r4, #1]
 800aeac:	2b2a      	cmp	r3, #42	@ 0x2a
 800aeae:	d132      	bne.n	800af16 <_svfiprintf_r+0x186>
 800aeb0:	9b03      	ldr	r3, [sp, #12]
 800aeb2:	1d1a      	adds	r2, r3, #4
 800aeb4:	681b      	ldr	r3, [r3, #0]
 800aeb6:	9203      	str	r2, [sp, #12]
 800aeb8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800aebc:	3402      	adds	r4, #2
 800aebe:	9305      	str	r3, [sp, #20]
 800aec0:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800af84 <_svfiprintf_r+0x1f4>
 800aec4:	7821      	ldrb	r1, [r4, #0]
 800aec6:	2203      	movs	r2, #3
 800aec8:	4650      	mov	r0, sl
 800aeca:	f7f5 f971 	bl	80001b0 <memchr>
 800aece:	b138      	cbz	r0, 800aee0 <_svfiprintf_r+0x150>
 800aed0:	9b04      	ldr	r3, [sp, #16]
 800aed2:	eba0 000a 	sub.w	r0, r0, sl
 800aed6:	2240      	movs	r2, #64	@ 0x40
 800aed8:	4082      	lsls	r2, r0
 800aeda:	4313      	orrs	r3, r2
 800aedc:	3401      	adds	r4, #1
 800aede:	9304      	str	r3, [sp, #16]
 800aee0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aee4:	4824      	ldr	r0, [pc, #144]	@ (800af78 <_svfiprintf_r+0x1e8>)
 800aee6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800aeea:	2206      	movs	r2, #6
 800aeec:	f7f5 f960 	bl	80001b0 <memchr>
 800aef0:	2800      	cmp	r0, #0
 800aef2:	d036      	beq.n	800af62 <_svfiprintf_r+0x1d2>
 800aef4:	4b21      	ldr	r3, [pc, #132]	@ (800af7c <_svfiprintf_r+0x1ec>)
 800aef6:	bb1b      	cbnz	r3, 800af40 <_svfiprintf_r+0x1b0>
 800aef8:	9b03      	ldr	r3, [sp, #12]
 800aefa:	3307      	adds	r3, #7
 800aefc:	f023 0307 	bic.w	r3, r3, #7
 800af00:	3308      	adds	r3, #8
 800af02:	9303      	str	r3, [sp, #12]
 800af04:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800af06:	4433      	add	r3, r6
 800af08:	9309      	str	r3, [sp, #36]	@ 0x24
 800af0a:	e76a      	b.n	800ade2 <_svfiprintf_r+0x52>
 800af0c:	fb0c 3202 	mla	r2, ip, r2, r3
 800af10:	460c      	mov	r4, r1
 800af12:	2001      	movs	r0, #1
 800af14:	e7a8      	b.n	800ae68 <_svfiprintf_r+0xd8>
 800af16:	2300      	movs	r3, #0
 800af18:	3401      	adds	r4, #1
 800af1a:	9305      	str	r3, [sp, #20]
 800af1c:	4619      	mov	r1, r3
 800af1e:	f04f 0c0a 	mov.w	ip, #10
 800af22:	4620      	mov	r0, r4
 800af24:	f810 2b01 	ldrb.w	r2, [r0], #1
 800af28:	3a30      	subs	r2, #48	@ 0x30
 800af2a:	2a09      	cmp	r2, #9
 800af2c:	d903      	bls.n	800af36 <_svfiprintf_r+0x1a6>
 800af2e:	2b00      	cmp	r3, #0
 800af30:	d0c6      	beq.n	800aec0 <_svfiprintf_r+0x130>
 800af32:	9105      	str	r1, [sp, #20]
 800af34:	e7c4      	b.n	800aec0 <_svfiprintf_r+0x130>
 800af36:	fb0c 2101 	mla	r1, ip, r1, r2
 800af3a:	4604      	mov	r4, r0
 800af3c:	2301      	movs	r3, #1
 800af3e:	e7f0      	b.n	800af22 <_svfiprintf_r+0x192>
 800af40:	ab03      	add	r3, sp, #12
 800af42:	9300      	str	r3, [sp, #0]
 800af44:	462a      	mov	r2, r5
 800af46:	4b0e      	ldr	r3, [pc, #56]	@ (800af80 <_svfiprintf_r+0x1f0>)
 800af48:	a904      	add	r1, sp, #16
 800af4a:	4638      	mov	r0, r7
 800af4c:	f3af 8000 	nop.w
 800af50:	1c42      	adds	r2, r0, #1
 800af52:	4606      	mov	r6, r0
 800af54:	d1d6      	bne.n	800af04 <_svfiprintf_r+0x174>
 800af56:	89ab      	ldrh	r3, [r5, #12]
 800af58:	065b      	lsls	r3, r3, #25
 800af5a:	f53f af2d 	bmi.w	800adb8 <_svfiprintf_r+0x28>
 800af5e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800af60:	e72c      	b.n	800adbc <_svfiprintf_r+0x2c>
 800af62:	ab03      	add	r3, sp, #12
 800af64:	9300      	str	r3, [sp, #0]
 800af66:	462a      	mov	r2, r5
 800af68:	4b05      	ldr	r3, [pc, #20]	@ (800af80 <_svfiprintf_r+0x1f0>)
 800af6a:	a904      	add	r1, sp, #16
 800af6c:	4638      	mov	r0, r7
 800af6e:	f000 f879 	bl	800b064 <_printf_i>
 800af72:	e7ed      	b.n	800af50 <_svfiprintf_r+0x1c0>
 800af74:	0800c2a4 	.word	0x0800c2a4
 800af78:	0800c2ae 	.word	0x0800c2ae
 800af7c:	00000000 	.word	0x00000000
 800af80:	0800acd1 	.word	0x0800acd1
 800af84:	0800c2aa 	.word	0x0800c2aa

0800af88 <_printf_common>:
 800af88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800af8c:	4616      	mov	r6, r2
 800af8e:	4698      	mov	r8, r3
 800af90:	688a      	ldr	r2, [r1, #8]
 800af92:	690b      	ldr	r3, [r1, #16]
 800af94:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800af98:	4293      	cmp	r3, r2
 800af9a:	bfb8      	it	lt
 800af9c:	4613      	movlt	r3, r2
 800af9e:	6033      	str	r3, [r6, #0]
 800afa0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800afa4:	4607      	mov	r7, r0
 800afa6:	460c      	mov	r4, r1
 800afa8:	b10a      	cbz	r2, 800afae <_printf_common+0x26>
 800afaa:	3301      	adds	r3, #1
 800afac:	6033      	str	r3, [r6, #0]
 800afae:	6823      	ldr	r3, [r4, #0]
 800afb0:	0699      	lsls	r1, r3, #26
 800afb2:	bf42      	ittt	mi
 800afb4:	6833      	ldrmi	r3, [r6, #0]
 800afb6:	3302      	addmi	r3, #2
 800afb8:	6033      	strmi	r3, [r6, #0]
 800afba:	6825      	ldr	r5, [r4, #0]
 800afbc:	f015 0506 	ands.w	r5, r5, #6
 800afc0:	d106      	bne.n	800afd0 <_printf_common+0x48>
 800afc2:	f104 0a19 	add.w	sl, r4, #25
 800afc6:	68e3      	ldr	r3, [r4, #12]
 800afc8:	6832      	ldr	r2, [r6, #0]
 800afca:	1a9b      	subs	r3, r3, r2
 800afcc:	42ab      	cmp	r3, r5
 800afce:	dc26      	bgt.n	800b01e <_printf_common+0x96>
 800afd0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800afd4:	6822      	ldr	r2, [r4, #0]
 800afd6:	3b00      	subs	r3, #0
 800afd8:	bf18      	it	ne
 800afda:	2301      	movne	r3, #1
 800afdc:	0692      	lsls	r2, r2, #26
 800afde:	d42b      	bmi.n	800b038 <_printf_common+0xb0>
 800afe0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800afe4:	4641      	mov	r1, r8
 800afe6:	4638      	mov	r0, r7
 800afe8:	47c8      	blx	r9
 800afea:	3001      	adds	r0, #1
 800afec:	d01e      	beq.n	800b02c <_printf_common+0xa4>
 800afee:	6823      	ldr	r3, [r4, #0]
 800aff0:	6922      	ldr	r2, [r4, #16]
 800aff2:	f003 0306 	and.w	r3, r3, #6
 800aff6:	2b04      	cmp	r3, #4
 800aff8:	bf02      	ittt	eq
 800affa:	68e5      	ldreq	r5, [r4, #12]
 800affc:	6833      	ldreq	r3, [r6, #0]
 800affe:	1aed      	subeq	r5, r5, r3
 800b000:	68a3      	ldr	r3, [r4, #8]
 800b002:	bf0c      	ite	eq
 800b004:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b008:	2500      	movne	r5, #0
 800b00a:	4293      	cmp	r3, r2
 800b00c:	bfc4      	itt	gt
 800b00e:	1a9b      	subgt	r3, r3, r2
 800b010:	18ed      	addgt	r5, r5, r3
 800b012:	2600      	movs	r6, #0
 800b014:	341a      	adds	r4, #26
 800b016:	42b5      	cmp	r5, r6
 800b018:	d11a      	bne.n	800b050 <_printf_common+0xc8>
 800b01a:	2000      	movs	r0, #0
 800b01c:	e008      	b.n	800b030 <_printf_common+0xa8>
 800b01e:	2301      	movs	r3, #1
 800b020:	4652      	mov	r2, sl
 800b022:	4641      	mov	r1, r8
 800b024:	4638      	mov	r0, r7
 800b026:	47c8      	blx	r9
 800b028:	3001      	adds	r0, #1
 800b02a:	d103      	bne.n	800b034 <_printf_common+0xac>
 800b02c:	f04f 30ff 	mov.w	r0, #4294967295
 800b030:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b034:	3501      	adds	r5, #1
 800b036:	e7c6      	b.n	800afc6 <_printf_common+0x3e>
 800b038:	18e1      	adds	r1, r4, r3
 800b03a:	1c5a      	adds	r2, r3, #1
 800b03c:	2030      	movs	r0, #48	@ 0x30
 800b03e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800b042:	4422      	add	r2, r4
 800b044:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800b048:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800b04c:	3302      	adds	r3, #2
 800b04e:	e7c7      	b.n	800afe0 <_printf_common+0x58>
 800b050:	2301      	movs	r3, #1
 800b052:	4622      	mov	r2, r4
 800b054:	4641      	mov	r1, r8
 800b056:	4638      	mov	r0, r7
 800b058:	47c8      	blx	r9
 800b05a:	3001      	adds	r0, #1
 800b05c:	d0e6      	beq.n	800b02c <_printf_common+0xa4>
 800b05e:	3601      	adds	r6, #1
 800b060:	e7d9      	b.n	800b016 <_printf_common+0x8e>
	...

0800b064 <_printf_i>:
 800b064:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b068:	7e0f      	ldrb	r7, [r1, #24]
 800b06a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800b06c:	2f78      	cmp	r7, #120	@ 0x78
 800b06e:	4691      	mov	r9, r2
 800b070:	4680      	mov	r8, r0
 800b072:	460c      	mov	r4, r1
 800b074:	469a      	mov	sl, r3
 800b076:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800b07a:	d807      	bhi.n	800b08c <_printf_i+0x28>
 800b07c:	2f62      	cmp	r7, #98	@ 0x62
 800b07e:	d80a      	bhi.n	800b096 <_printf_i+0x32>
 800b080:	2f00      	cmp	r7, #0
 800b082:	f000 80d2 	beq.w	800b22a <_printf_i+0x1c6>
 800b086:	2f58      	cmp	r7, #88	@ 0x58
 800b088:	f000 80b7 	beq.w	800b1fa <_printf_i+0x196>
 800b08c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b090:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800b094:	e03a      	b.n	800b10c <_printf_i+0xa8>
 800b096:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800b09a:	2b15      	cmp	r3, #21
 800b09c:	d8f6      	bhi.n	800b08c <_printf_i+0x28>
 800b09e:	a101      	add	r1, pc, #4	@ (adr r1, 800b0a4 <_printf_i+0x40>)
 800b0a0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b0a4:	0800b0fd 	.word	0x0800b0fd
 800b0a8:	0800b111 	.word	0x0800b111
 800b0ac:	0800b08d 	.word	0x0800b08d
 800b0b0:	0800b08d 	.word	0x0800b08d
 800b0b4:	0800b08d 	.word	0x0800b08d
 800b0b8:	0800b08d 	.word	0x0800b08d
 800b0bc:	0800b111 	.word	0x0800b111
 800b0c0:	0800b08d 	.word	0x0800b08d
 800b0c4:	0800b08d 	.word	0x0800b08d
 800b0c8:	0800b08d 	.word	0x0800b08d
 800b0cc:	0800b08d 	.word	0x0800b08d
 800b0d0:	0800b211 	.word	0x0800b211
 800b0d4:	0800b13b 	.word	0x0800b13b
 800b0d8:	0800b1c7 	.word	0x0800b1c7
 800b0dc:	0800b08d 	.word	0x0800b08d
 800b0e0:	0800b08d 	.word	0x0800b08d
 800b0e4:	0800b233 	.word	0x0800b233
 800b0e8:	0800b08d 	.word	0x0800b08d
 800b0ec:	0800b13b 	.word	0x0800b13b
 800b0f0:	0800b08d 	.word	0x0800b08d
 800b0f4:	0800b08d 	.word	0x0800b08d
 800b0f8:	0800b1cf 	.word	0x0800b1cf
 800b0fc:	6833      	ldr	r3, [r6, #0]
 800b0fe:	1d1a      	adds	r2, r3, #4
 800b100:	681b      	ldr	r3, [r3, #0]
 800b102:	6032      	str	r2, [r6, #0]
 800b104:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b108:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800b10c:	2301      	movs	r3, #1
 800b10e:	e09d      	b.n	800b24c <_printf_i+0x1e8>
 800b110:	6833      	ldr	r3, [r6, #0]
 800b112:	6820      	ldr	r0, [r4, #0]
 800b114:	1d19      	adds	r1, r3, #4
 800b116:	6031      	str	r1, [r6, #0]
 800b118:	0606      	lsls	r6, r0, #24
 800b11a:	d501      	bpl.n	800b120 <_printf_i+0xbc>
 800b11c:	681d      	ldr	r5, [r3, #0]
 800b11e:	e003      	b.n	800b128 <_printf_i+0xc4>
 800b120:	0645      	lsls	r5, r0, #25
 800b122:	d5fb      	bpl.n	800b11c <_printf_i+0xb8>
 800b124:	f9b3 5000 	ldrsh.w	r5, [r3]
 800b128:	2d00      	cmp	r5, #0
 800b12a:	da03      	bge.n	800b134 <_printf_i+0xd0>
 800b12c:	232d      	movs	r3, #45	@ 0x2d
 800b12e:	426d      	negs	r5, r5
 800b130:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b134:	4859      	ldr	r0, [pc, #356]	@ (800b29c <_printf_i+0x238>)
 800b136:	230a      	movs	r3, #10
 800b138:	e010      	b.n	800b15c <_printf_i+0xf8>
 800b13a:	6821      	ldr	r1, [r4, #0]
 800b13c:	6833      	ldr	r3, [r6, #0]
 800b13e:	0608      	lsls	r0, r1, #24
 800b140:	f853 5b04 	ldr.w	r5, [r3], #4
 800b144:	d402      	bmi.n	800b14c <_printf_i+0xe8>
 800b146:	0649      	lsls	r1, r1, #25
 800b148:	bf48      	it	mi
 800b14a:	b2ad      	uxthmi	r5, r5
 800b14c:	2f6f      	cmp	r7, #111	@ 0x6f
 800b14e:	4853      	ldr	r0, [pc, #332]	@ (800b29c <_printf_i+0x238>)
 800b150:	6033      	str	r3, [r6, #0]
 800b152:	d159      	bne.n	800b208 <_printf_i+0x1a4>
 800b154:	2308      	movs	r3, #8
 800b156:	2100      	movs	r1, #0
 800b158:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800b15c:	6866      	ldr	r6, [r4, #4]
 800b15e:	60a6      	str	r6, [r4, #8]
 800b160:	2e00      	cmp	r6, #0
 800b162:	db05      	blt.n	800b170 <_printf_i+0x10c>
 800b164:	6821      	ldr	r1, [r4, #0]
 800b166:	432e      	orrs	r6, r5
 800b168:	f021 0104 	bic.w	r1, r1, #4
 800b16c:	6021      	str	r1, [r4, #0]
 800b16e:	d04d      	beq.n	800b20c <_printf_i+0x1a8>
 800b170:	4616      	mov	r6, r2
 800b172:	fbb5 f1f3 	udiv	r1, r5, r3
 800b176:	fb03 5711 	mls	r7, r3, r1, r5
 800b17a:	5dc7      	ldrb	r7, [r0, r7]
 800b17c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b180:	462f      	mov	r7, r5
 800b182:	42bb      	cmp	r3, r7
 800b184:	460d      	mov	r5, r1
 800b186:	d9f4      	bls.n	800b172 <_printf_i+0x10e>
 800b188:	2b08      	cmp	r3, #8
 800b18a:	d10b      	bne.n	800b1a4 <_printf_i+0x140>
 800b18c:	6823      	ldr	r3, [r4, #0]
 800b18e:	07df      	lsls	r7, r3, #31
 800b190:	d508      	bpl.n	800b1a4 <_printf_i+0x140>
 800b192:	6923      	ldr	r3, [r4, #16]
 800b194:	6861      	ldr	r1, [r4, #4]
 800b196:	4299      	cmp	r1, r3
 800b198:	bfde      	ittt	le
 800b19a:	2330      	movle	r3, #48	@ 0x30
 800b19c:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b1a0:	f106 36ff 	addle.w	r6, r6, #4294967295
 800b1a4:	1b92      	subs	r2, r2, r6
 800b1a6:	6122      	str	r2, [r4, #16]
 800b1a8:	f8cd a000 	str.w	sl, [sp]
 800b1ac:	464b      	mov	r3, r9
 800b1ae:	aa03      	add	r2, sp, #12
 800b1b0:	4621      	mov	r1, r4
 800b1b2:	4640      	mov	r0, r8
 800b1b4:	f7ff fee8 	bl	800af88 <_printf_common>
 800b1b8:	3001      	adds	r0, #1
 800b1ba:	d14c      	bne.n	800b256 <_printf_i+0x1f2>
 800b1bc:	f04f 30ff 	mov.w	r0, #4294967295
 800b1c0:	b004      	add	sp, #16
 800b1c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b1c6:	6823      	ldr	r3, [r4, #0]
 800b1c8:	f043 0320 	orr.w	r3, r3, #32
 800b1cc:	6023      	str	r3, [r4, #0]
 800b1ce:	4834      	ldr	r0, [pc, #208]	@ (800b2a0 <_printf_i+0x23c>)
 800b1d0:	2778      	movs	r7, #120	@ 0x78
 800b1d2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800b1d6:	6823      	ldr	r3, [r4, #0]
 800b1d8:	6831      	ldr	r1, [r6, #0]
 800b1da:	061f      	lsls	r7, r3, #24
 800b1dc:	f851 5b04 	ldr.w	r5, [r1], #4
 800b1e0:	d402      	bmi.n	800b1e8 <_printf_i+0x184>
 800b1e2:	065f      	lsls	r7, r3, #25
 800b1e4:	bf48      	it	mi
 800b1e6:	b2ad      	uxthmi	r5, r5
 800b1e8:	6031      	str	r1, [r6, #0]
 800b1ea:	07d9      	lsls	r1, r3, #31
 800b1ec:	bf44      	itt	mi
 800b1ee:	f043 0320 	orrmi.w	r3, r3, #32
 800b1f2:	6023      	strmi	r3, [r4, #0]
 800b1f4:	b11d      	cbz	r5, 800b1fe <_printf_i+0x19a>
 800b1f6:	2310      	movs	r3, #16
 800b1f8:	e7ad      	b.n	800b156 <_printf_i+0xf2>
 800b1fa:	4828      	ldr	r0, [pc, #160]	@ (800b29c <_printf_i+0x238>)
 800b1fc:	e7e9      	b.n	800b1d2 <_printf_i+0x16e>
 800b1fe:	6823      	ldr	r3, [r4, #0]
 800b200:	f023 0320 	bic.w	r3, r3, #32
 800b204:	6023      	str	r3, [r4, #0]
 800b206:	e7f6      	b.n	800b1f6 <_printf_i+0x192>
 800b208:	230a      	movs	r3, #10
 800b20a:	e7a4      	b.n	800b156 <_printf_i+0xf2>
 800b20c:	4616      	mov	r6, r2
 800b20e:	e7bb      	b.n	800b188 <_printf_i+0x124>
 800b210:	6833      	ldr	r3, [r6, #0]
 800b212:	6825      	ldr	r5, [r4, #0]
 800b214:	6961      	ldr	r1, [r4, #20]
 800b216:	1d18      	adds	r0, r3, #4
 800b218:	6030      	str	r0, [r6, #0]
 800b21a:	062e      	lsls	r6, r5, #24
 800b21c:	681b      	ldr	r3, [r3, #0]
 800b21e:	d501      	bpl.n	800b224 <_printf_i+0x1c0>
 800b220:	6019      	str	r1, [r3, #0]
 800b222:	e002      	b.n	800b22a <_printf_i+0x1c6>
 800b224:	0668      	lsls	r0, r5, #25
 800b226:	d5fb      	bpl.n	800b220 <_printf_i+0x1bc>
 800b228:	8019      	strh	r1, [r3, #0]
 800b22a:	2300      	movs	r3, #0
 800b22c:	6123      	str	r3, [r4, #16]
 800b22e:	4616      	mov	r6, r2
 800b230:	e7ba      	b.n	800b1a8 <_printf_i+0x144>
 800b232:	6833      	ldr	r3, [r6, #0]
 800b234:	1d1a      	adds	r2, r3, #4
 800b236:	6032      	str	r2, [r6, #0]
 800b238:	681e      	ldr	r6, [r3, #0]
 800b23a:	6862      	ldr	r2, [r4, #4]
 800b23c:	2100      	movs	r1, #0
 800b23e:	4630      	mov	r0, r6
 800b240:	f7f4 ffb6 	bl	80001b0 <memchr>
 800b244:	b108      	cbz	r0, 800b24a <_printf_i+0x1e6>
 800b246:	1b80      	subs	r0, r0, r6
 800b248:	6060      	str	r0, [r4, #4]
 800b24a:	6863      	ldr	r3, [r4, #4]
 800b24c:	6123      	str	r3, [r4, #16]
 800b24e:	2300      	movs	r3, #0
 800b250:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b254:	e7a8      	b.n	800b1a8 <_printf_i+0x144>
 800b256:	6923      	ldr	r3, [r4, #16]
 800b258:	4632      	mov	r2, r6
 800b25a:	4649      	mov	r1, r9
 800b25c:	4640      	mov	r0, r8
 800b25e:	47d0      	blx	sl
 800b260:	3001      	adds	r0, #1
 800b262:	d0ab      	beq.n	800b1bc <_printf_i+0x158>
 800b264:	6823      	ldr	r3, [r4, #0]
 800b266:	079b      	lsls	r3, r3, #30
 800b268:	d413      	bmi.n	800b292 <_printf_i+0x22e>
 800b26a:	68e0      	ldr	r0, [r4, #12]
 800b26c:	9b03      	ldr	r3, [sp, #12]
 800b26e:	4298      	cmp	r0, r3
 800b270:	bfb8      	it	lt
 800b272:	4618      	movlt	r0, r3
 800b274:	e7a4      	b.n	800b1c0 <_printf_i+0x15c>
 800b276:	2301      	movs	r3, #1
 800b278:	4632      	mov	r2, r6
 800b27a:	4649      	mov	r1, r9
 800b27c:	4640      	mov	r0, r8
 800b27e:	47d0      	blx	sl
 800b280:	3001      	adds	r0, #1
 800b282:	d09b      	beq.n	800b1bc <_printf_i+0x158>
 800b284:	3501      	adds	r5, #1
 800b286:	68e3      	ldr	r3, [r4, #12]
 800b288:	9903      	ldr	r1, [sp, #12]
 800b28a:	1a5b      	subs	r3, r3, r1
 800b28c:	42ab      	cmp	r3, r5
 800b28e:	dcf2      	bgt.n	800b276 <_printf_i+0x212>
 800b290:	e7eb      	b.n	800b26a <_printf_i+0x206>
 800b292:	2500      	movs	r5, #0
 800b294:	f104 0619 	add.w	r6, r4, #25
 800b298:	e7f5      	b.n	800b286 <_printf_i+0x222>
 800b29a:	bf00      	nop
 800b29c:	0800c2b5 	.word	0x0800c2b5
 800b2a0:	0800c2c6 	.word	0x0800c2c6

0800b2a4 <memmove>:
 800b2a4:	4288      	cmp	r0, r1
 800b2a6:	b510      	push	{r4, lr}
 800b2a8:	eb01 0402 	add.w	r4, r1, r2
 800b2ac:	d902      	bls.n	800b2b4 <memmove+0x10>
 800b2ae:	4284      	cmp	r4, r0
 800b2b0:	4623      	mov	r3, r4
 800b2b2:	d807      	bhi.n	800b2c4 <memmove+0x20>
 800b2b4:	1e43      	subs	r3, r0, #1
 800b2b6:	42a1      	cmp	r1, r4
 800b2b8:	d007      	beq.n	800b2ca <memmove+0x26>
 800b2ba:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b2be:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b2c2:	e7f8      	b.n	800b2b6 <memmove+0x12>
 800b2c4:	4402      	add	r2, r0
 800b2c6:	4282      	cmp	r2, r0
 800b2c8:	d100      	bne.n	800b2cc <memmove+0x28>
 800b2ca:	bd10      	pop	{r4, pc}
 800b2cc:	f813 1d01 	ldrb.w	r1, [r3, #-1]!
 800b2d0:	f802 1d01 	strb.w	r1, [r2, #-1]!
 800b2d4:	e7f7      	b.n	800b2c6 <memmove+0x22>
	...

0800b2d8 <_sbrk_r>:
 800b2d8:	b538      	push	{r3, r4, r5, lr}
 800b2da:	4d06      	ldr	r5, [pc, #24]	@ (800b2f4 <_sbrk_r+0x1c>)
 800b2dc:	2300      	movs	r3, #0
 800b2de:	4604      	mov	r4, r0
 800b2e0:	4608      	mov	r0, r1
 800b2e2:	602b      	str	r3, [r5, #0]
 800b2e4:	f7fc faa4 	bl	8007830 <_sbrk>
 800b2e8:	1c43      	adds	r3, r0, #1
 800b2ea:	d102      	bne.n	800b2f2 <_sbrk_r+0x1a>
 800b2ec:	682b      	ldr	r3, [r5, #0]
 800b2ee:	b103      	cbz	r3, 800b2f2 <_sbrk_r+0x1a>
 800b2f0:	6023      	str	r3, [r4, #0]
 800b2f2:	bd38      	pop	{r3, r4, r5, pc}
 800b2f4:	200088a0 	.word	0x200088a0

0800b2f8 <_realloc_r>:
 800b2f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b2fc:	4607      	mov	r7, r0
 800b2fe:	4614      	mov	r4, r2
 800b300:	460d      	mov	r5, r1
 800b302:	b921      	cbnz	r1, 800b30e <_realloc_r+0x16>
 800b304:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b308:	4611      	mov	r1, r2
 800b30a:	f7ff bc55 	b.w	800abb8 <_malloc_r>
 800b30e:	b92a      	cbnz	r2, 800b31c <_realloc_r+0x24>
 800b310:	f7ff fbe6 	bl	800aae0 <_free_r>
 800b314:	4625      	mov	r5, r4
 800b316:	4628      	mov	r0, r5
 800b318:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b31c:	f000 f81a 	bl	800b354 <_malloc_usable_size_r>
 800b320:	4284      	cmp	r4, r0
 800b322:	4606      	mov	r6, r0
 800b324:	d802      	bhi.n	800b32c <_realloc_r+0x34>
 800b326:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b32a:	d8f4      	bhi.n	800b316 <_realloc_r+0x1e>
 800b32c:	4621      	mov	r1, r4
 800b32e:	4638      	mov	r0, r7
 800b330:	f7ff fc42 	bl	800abb8 <_malloc_r>
 800b334:	4680      	mov	r8, r0
 800b336:	b908      	cbnz	r0, 800b33c <_realloc_r+0x44>
 800b338:	4645      	mov	r5, r8
 800b33a:	e7ec      	b.n	800b316 <_realloc_r+0x1e>
 800b33c:	42b4      	cmp	r4, r6
 800b33e:	4622      	mov	r2, r4
 800b340:	4629      	mov	r1, r5
 800b342:	bf28      	it	cs
 800b344:	4632      	movcs	r2, r6
 800b346:	f7ff fbbd 	bl	800aac4 <memcpy>
 800b34a:	4629      	mov	r1, r5
 800b34c:	4638      	mov	r0, r7
 800b34e:	f7ff fbc7 	bl	800aae0 <_free_r>
 800b352:	e7f1      	b.n	800b338 <_realloc_r+0x40>

0800b354 <_malloc_usable_size_r>:
 800b354:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b358:	1f18      	subs	r0, r3, #4
 800b35a:	2b00      	cmp	r3, #0
 800b35c:	bfbc      	itt	lt
 800b35e:	580b      	ldrlt	r3, [r1, r0]
 800b360:	18c0      	addlt	r0, r0, r3
 800b362:	4770      	bx	lr

0800b364 <logf>:
 800b364:	b508      	push	{r3, lr}
 800b366:	ed2d 8b02 	vpush	{d8}
 800b36a:	eeb0 8a40 	vmov.f32	s16, s0
 800b36e:	f000 f82f 	bl	800b3d0 <__ieee754_logf>
 800b372:	eeb4 8a48 	vcmp.f32	s16, s16
 800b376:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b37a:	d60f      	bvs.n	800b39c <logf+0x38>
 800b37c:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800b380:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b384:	dc0a      	bgt.n	800b39c <logf+0x38>
 800b386:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800b38a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b38e:	d108      	bne.n	800b3a2 <logf+0x3e>
 800b390:	f7ff fb6c 	bl	800aa6c <__errno>
 800b394:	2322      	movs	r3, #34	@ 0x22
 800b396:	ed9f 0a09 	vldr	s0, [pc, #36]	@ 800b3bc <logf+0x58>
 800b39a:	6003      	str	r3, [r0, #0]
 800b39c:	ecbd 8b02 	vpop	{d8}
 800b3a0:	bd08      	pop	{r3, pc}
 800b3a2:	f7ff fb63 	bl	800aa6c <__errno>
 800b3a6:	ecbd 8b02 	vpop	{d8}
 800b3aa:	4603      	mov	r3, r0
 800b3ac:	2221      	movs	r2, #33	@ 0x21
 800b3ae:	601a      	str	r2, [r3, #0]
 800b3b0:	4803      	ldr	r0, [pc, #12]	@ (800b3c0 <logf+0x5c>)
 800b3b2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800b3b6:	f000 b805 	b.w	800b3c4 <nanf>
 800b3ba:	bf00      	nop
 800b3bc:	ff800000 	.word	0xff800000
 800b3c0:	0800b9f8 	.word	0x0800b9f8

0800b3c4 <nanf>:
 800b3c4:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800b3cc <nanf+0x8>
 800b3c8:	4770      	bx	lr
 800b3ca:	bf00      	nop
 800b3cc:	7fc00000 	.word	0x7fc00000

0800b3d0 <__ieee754_logf>:
 800b3d0:	ee10 2a10 	vmov	r2, s0
 800b3d4:	f032 4300 	bics.w	r3, r2, #2147483648	@ 0x80000000
 800b3d8:	d02f      	beq.n	800b43a <__ieee754_logf+0x6a>
 800b3da:	2a00      	cmp	r2, #0
 800b3dc:	4613      	mov	r3, r2
 800b3de:	db33      	blt.n	800b448 <__ieee754_logf+0x78>
 800b3e0:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 800b3e4:	da40      	bge.n	800b468 <__ieee754_logf+0x98>
 800b3e6:	f5b2 0f00 	cmp.w	r2, #8388608	@ 0x800000
 800b3ea:	db34      	blt.n	800b456 <__ieee754_logf+0x86>
 800b3ec:	f04f 0c00 	mov.w	ip, #0
 800b3f0:	4864      	ldr	r0, [pc, #400]	@ (800b584 <__ieee754_logf+0x1b4>)
 800b3f2:	f3c3 0116 	ubfx	r1, r3, #0, #23
 800b3f6:	4408      	add	r0, r1
 800b3f8:	f400 0200 	and.w	r2, r0, #8388608	@ 0x800000
 800b3fc:	f082 527e 	eor.w	r2, r2, #1065353216	@ 0x3f800000
 800b400:	430a      	orrs	r2, r1
 800b402:	15db      	asrs	r3, r3, #23
 800b404:	ee00 2a10 	vmov	s0, r2
 800b408:	3b7f      	subs	r3, #127	@ 0x7f
 800b40a:	4a5f      	ldr	r2, [pc, #380]	@ (800b588 <__ieee754_logf+0x1b8>)
 800b40c:	4463      	add	r3, ip
 800b40e:	f101 0c0f 	add.w	ip, r1, #15
 800b412:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800b416:	ea0c 0202 	and.w	r2, ip, r2
 800b41a:	ee30 0a67 	vsub.f32	s0, s0, s15
 800b41e:	eb03 53d0 	add.w	r3, r3, r0, lsr #23
 800b422:	bb22      	cbnz	r2, 800b46e <__ieee754_logf+0x9e>
 800b424:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800b428:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b42c:	d162      	bne.n	800b4f4 <__ieee754_logf+0x124>
 800b42e:	2b00      	cmp	r3, #0
 800b430:	f040 8090 	bne.w	800b554 <__ieee754_logf+0x184>
 800b434:	ed9f 0a55 	vldr	s0, [pc, #340]	@ 800b58c <__ieee754_logf+0x1bc>
 800b438:	4770      	bx	lr
 800b43a:	ed9f 7a55 	vldr	s14, [pc, #340]	@ 800b590 <__ieee754_logf+0x1c0>
 800b43e:	eddf 7a53 	vldr	s15, [pc, #332]	@ 800b58c <__ieee754_logf+0x1bc>
 800b442:	ee87 0a27 	vdiv.f32	s0, s14, s15
 800b446:	4770      	bx	lr
 800b448:	ee70 7a40 	vsub.f32	s15, s0, s0
 800b44c:	ed9f 7a4f 	vldr	s14, [pc, #316]	@ 800b58c <__ieee754_logf+0x1bc>
 800b450:	ee87 0a87 	vdiv.f32	s0, s15, s14
 800b454:	4770      	bx	lr
 800b456:	eddf 7a4f 	vldr	s15, [pc, #316]	@ 800b594 <__ieee754_logf+0x1c4>
 800b45a:	ee60 7a27 	vmul.f32	s15, s0, s15
 800b45e:	f06f 0c18 	mvn.w	ip, #24
 800b462:	ee17 3a90 	vmov	r3, s15
 800b466:	e7c3      	b.n	800b3f0 <__ieee754_logf+0x20>
 800b468:	ee30 0a00 	vadd.f32	s0, s0, s0
 800b46c:	4770      	bx	lr
 800b46e:	eef0 7a00 	vmov.f32	s15, #0	@ 0x40000000  2.0
 800b472:	ee70 7a27 	vadd.f32	s15, s0, s15
 800b476:	ee07 3a10 	vmov	s14, r3
 800b47a:	ee80 4a27 	vdiv.f32	s8, s0, s15
 800b47e:	4846      	ldr	r0, [pc, #280]	@ (800b598 <__ieee754_logf+0x1c8>)
 800b480:	f5c1 1257 	rsb	r2, r1, #3522560	@ 0x35c000
 800b484:	4408      	add	r0, r1
 800b486:	f502 7222 	add.w	r2, r2, #648	@ 0x288
 800b48a:	4302      	orrs	r2, r0
 800b48c:	2a00      	cmp	r2, #0
 800b48e:	ed9f 3a43 	vldr	s6, [pc, #268]	@ 800b59c <__ieee754_logf+0x1cc>
 800b492:	eddf 4a43 	vldr	s9, [pc, #268]	@ 800b5a0 <__ieee754_logf+0x1d0>
 800b496:	eddf 5a43 	vldr	s11, [pc, #268]	@ 800b5a4 <__ieee754_logf+0x1d4>
 800b49a:	eddf 3a43 	vldr	s7, [pc, #268]	@ 800b5a8 <__ieee754_logf+0x1d8>
 800b49e:	ed9f 5a43 	vldr	s10, [pc, #268]	@ 800b5ac <__ieee754_logf+0x1dc>
 800b4a2:	eddf 7a43 	vldr	s15, [pc, #268]	@ 800b5b0 <__ieee754_logf+0x1e0>
 800b4a6:	eddf 6a43 	vldr	s13, [pc, #268]	@ 800b5b4 <__ieee754_logf+0x1e4>
 800b4aa:	ee24 6a04 	vmul.f32	s12, s8, s8
 800b4ae:	eef8 2ac7 	vcvt.f32.s32	s5, s14
 800b4b2:	ee26 7a06 	vmul.f32	s14, s12, s12
 800b4b6:	eee7 4a03 	vfma.f32	s9, s14, s6
 800b4ba:	eea7 5a23 	vfma.f32	s10, s14, s7
 800b4be:	eee4 5a87 	vfma.f32	s11, s9, s14
 800b4c2:	eee5 6a07 	vfma.f32	s13, s10, s14
 800b4c6:	eee5 7a87 	vfma.f32	s15, s11, s14
 800b4ca:	ee67 7a86 	vmul.f32	s15, s15, s12
 800b4ce:	eee6 7a87 	vfma.f32	s15, s13, s14
 800b4d2:	dd2a      	ble.n	800b52a <__ieee754_logf+0x15a>
 800b4d4:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800b4d8:	ee20 7a07 	vmul.f32	s14, s0, s14
 800b4dc:	ee27 7a00 	vmul.f32	s14, s14, s0
 800b4e0:	ee77 7a87 	vadd.f32	s15, s15, s14
 800b4e4:	ee67 7a84 	vmul.f32	s15, s15, s8
 800b4e8:	bb3b      	cbnz	r3, 800b53a <__ieee754_logf+0x16a>
 800b4ea:	ee37 7a67 	vsub.f32	s14, s14, s15
 800b4ee:	ee30 0a47 	vsub.f32	s0, s0, s14
 800b4f2:	4770      	bx	lr
 800b4f4:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 800b5b8 <__ieee754_logf+0x1e8>
 800b4f8:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800b4fc:	eee0 7a47 	vfms.f32	s15, s0, s14
 800b500:	ee20 7a00 	vmul.f32	s14, s0, s0
 800b504:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b508:	2b00      	cmp	r3, #0
 800b50a:	d0f0      	beq.n	800b4ee <__ieee754_logf+0x11e>
 800b50c:	ee07 3a90 	vmov	s15, r3
 800b510:	ed9f 6a2a 	vldr	s12, [pc, #168]	@ 800b5bc <__ieee754_logf+0x1ec>
 800b514:	eddf 6a2a 	vldr	s13, [pc, #168]	@ 800b5c0 <__ieee754_logf+0x1f0>
 800b518:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b51c:	eea7 7ac6 	vfms.f32	s14, s15, s12
 800b520:	ee37 0a40 	vsub.f32	s0, s14, s0
 800b524:	ee97 0aa6 	vfnms.f32	s0, s15, s13
 800b528:	4770      	bx	lr
 800b52a:	ee70 7a67 	vsub.f32	s15, s0, s15
 800b52e:	ee67 7a84 	vmul.f32	s15, s15, s8
 800b532:	b9e3      	cbnz	r3, 800b56e <__ieee754_logf+0x19e>
 800b534:	ee30 0a67 	vsub.f32	s0, s0, s15
 800b538:	4770      	bx	lr
 800b53a:	ed9f 6a20 	vldr	s12, [pc, #128]	@ 800b5bc <__ieee754_logf+0x1ec>
 800b53e:	eddf 6a20 	vldr	s13, [pc, #128]	@ 800b5c0 <__ieee754_logf+0x1f0>
 800b542:	eee2 7a86 	vfma.f32	s15, s5, s12
 800b546:	ee37 7a67 	vsub.f32	s14, s14, s15
 800b54a:	ee37 0a40 	vsub.f32	s0, s14, s0
 800b54e:	ee92 0aa6 	vfnms.f32	s0, s5, s13
 800b552:	4770      	bx	lr
 800b554:	ee07 3a90 	vmov	s15, r3
 800b558:	ed9f 0a18 	vldr	s0, [pc, #96]	@ 800b5bc <__ieee754_logf+0x1ec>
 800b55c:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 800b5c0 <__ieee754_logf+0x1f0>
 800b560:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b564:	ee27 0a80 	vmul.f32	s0, s15, s0
 800b568:	eea7 0a87 	vfma.f32	s0, s15, s14
 800b56c:	4770      	bx	lr
 800b56e:	eddf 6a13 	vldr	s13, [pc, #76]	@ 800b5bc <__ieee754_logf+0x1ec>
 800b572:	ed9f 7a13 	vldr	s14, [pc, #76]	@ 800b5c0 <__ieee754_logf+0x1f0>
 800b576:	eee2 7ae6 	vfms.f32	s15, s5, s13
 800b57a:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800b57e:	ee92 0a87 	vfnms.f32	s0, s5, s14
 800b582:	4770      	bx	lr
 800b584:	004afb20 	.word	0x004afb20
 800b588:	007ffff0 	.word	0x007ffff0
 800b58c:	00000000 	.word	0x00000000
 800b590:	cc000000 	.word	0xcc000000
 800b594:	4c000000 	.word	0x4c000000
 800b598:	ffcf5c30 	.word	0xffcf5c30
 800b59c:	3e178897 	.word	0x3e178897
 800b5a0:	3e3a3325 	.word	0x3e3a3325
 800b5a4:	3e924925 	.word	0x3e924925
 800b5a8:	3e1cd04f 	.word	0x3e1cd04f
 800b5ac:	3e638e29 	.word	0x3e638e29
 800b5b0:	3f2aaaab 	.word	0x3f2aaaab
 800b5b4:	3ecccccd 	.word	0x3ecccccd
 800b5b8:	3eaaaaab 	.word	0x3eaaaaab
 800b5bc:	3717f7d1 	.word	0x3717f7d1
 800b5c0:	3f317180 	.word	0x3f317180

0800b5c4 <__udivmoddi4>:
 800b5c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b5c8:	9d08      	ldr	r5, [sp, #32]
 800b5ca:	460f      	mov	r7, r1
 800b5cc:	4604      	mov	r4, r0
 800b5ce:	468c      	mov	ip, r1
 800b5d0:	2b00      	cmp	r3, #0
 800b5d2:	d148      	bne.n	800b666 <__udivmoddi4+0xa2>
 800b5d4:	428a      	cmp	r2, r1
 800b5d6:	4616      	mov	r6, r2
 800b5d8:	d961      	bls.n	800b69e <__udivmoddi4+0xda>
 800b5da:	fab2 f382 	clz	r3, r2
 800b5de:	b14b      	cbz	r3, 800b5f4 <__udivmoddi4+0x30>
 800b5e0:	f1c3 0220 	rsb	r2, r3, #32
 800b5e4:	fa01 fc03 	lsl.w	ip, r1, r3
 800b5e8:	fa20 f202 	lsr.w	r2, r0, r2
 800b5ec:	409e      	lsls	r6, r3
 800b5ee:	ea42 0c0c 	orr.w	ip, r2, ip
 800b5f2:	409c      	lsls	r4, r3
 800b5f4:	ea4f 4e16 	mov.w	lr, r6, lsr #16
 800b5f8:	b2b7      	uxth	r7, r6
 800b5fa:	fbbc f1fe 	udiv	r1, ip, lr
 800b5fe:	0c22      	lsrs	r2, r4, #16
 800b600:	fb0e cc11 	mls	ip, lr, r1, ip
 800b604:	ea42 420c 	orr.w	r2, r2, ip, lsl #16
 800b608:	fb01 f007 	mul.w	r0, r1, r7
 800b60c:	4290      	cmp	r0, r2
 800b60e:	d909      	bls.n	800b624 <__udivmoddi4+0x60>
 800b610:	18b2      	adds	r2, r6, r2
 800b612:	f101 3cff 	add.w	ip, r1, #4294967295
 800b616:	f080 80ee 	bcs.w	800b7f6 <__udivmoddi4+0x232>
 800b61a:	4290      	cmp	r0, r2
 800b61c:	f240 80eb 	bls.w	800b7f6 <__udivmoddi4+0x232>
 800b620:	3902      	subs	r1, #2
 800b622:	4432      	add	r2, r6
 800b624:	1a12      	subs	r2, r2, r0
 800b626:	b2a4      	uxth	r4, r4
 800b628:	fbb2 f0fe 	udiv	r0, r2, lr
 800b62c:	fb0e 2210 	mls	r2, lr, r0, r2
 800b630:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800b634:	fb00 f707 	mul.w	r7, r0, r7
 800b638:	42a7      	cmp	r7, r4
 800b63a:	d909      	bls.n	800b650 <__udivmoddi4+0x8c>
 800b63c:	1934      	adds	r4, r6, r4
 800b63e:	f100 32ff 	add.w	r2, r0, #4294967295
 800b642:	f080 80da 	bcs.w	800b7fa <__udivmoddi4+0x236>
 800b646:	42a7      	cmp	r7, r4
 800b648:	f240 80d7 	bls.w	800b7fa <__udivmoddi4+0x236>
 800b64c:	4434      	add	r4, r6
 800b64e:	3802      	subs	r0, #2
 800b650:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800b654:	1be4      	subs	r4, r4, r7
 800b656:	2100      	movs	r1, #0
 800b658:	b11d      	cbz	r5, 800b662 <__udivmoddi4+0x9e>
 800b65a:	40dc      	lsrs	r4, r3
 800b65c:	2300      	movs	r3, #0
 800b65e:	e9c5 4300 	strd	r4, r3, [r5]
 800b662:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b666:	428b      	cmp	r3, r1
 800b668:	d906      	bls.n	800b678 <__udivmoddi4+0xb4>
 800b66a:	b10d      	cbz	r5, 800b670 <__udivmoddi4+0xac>
 800b66c:	e9c5 0100 	strd	r0, r1, [r5]
 800b670:	2100      	movs	r1, #0
 800b672:	4608      	mov	r0, r1
 800b674:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b678:	fab3 f183 	clz	r1, r3
 800b67c:	2900      	cmp	r1, #0
 800b67e:	d148      	bne.n	800b712 <__udivmoddi4+0x14e>
 800b680:	42bb      	cmp	r3, r7
 800b682:	d302      	bcc.n	800b68a <__udivmoddi4+0xc6>
 800b684:	4282      	cmp	r2, r0
 800b686:	f200 8107 	bhi.w	800b898 <__udivmoddi4+0x2d4>
 800b68a:	1a84      	subs	r4, r0, r2
 800b68c:	eb67 0203 	sbc.w	r2, r7, r3
 800b690:	2001      	movs	r0, #1
 800b692:	4694      	mov	ip, r2
 800b694:	2d00      	cmp	r5, #0
 800b696:	d0e4      	beq.n	800b662 <__udivmoddi4+0x9e>
 800b698:	e9c5 4c00 	strd	r4, ip, [r5]
 800b69c:	e7e1      	b.n	800b662 <__udivmoddi4+0x9e>
 800b69e:	2a00      	cmp	r2, #0
 800b6a0:	f000 8092 	beq.w	800b7c8 <__udivmoddi4+0x204>
 800b6a4:	fab2 f382 	clz	r3, r2
 800b6a8:	2b00      	cmp	r3, #0
 800b6aa:	f040 80a8 	bne.w	800b7fe <__udivmoddi4+0x23a>
 800b6ae:	1a8a      	subs	r2, r1, r2
 800b6b0:	ea4f 4e16 	mov.w	lr, r6, lsr #16
 800b6b4:	fa1f fc86 	uxth.w	ip, r6
 800b6b8:	2101      	movs	r1, #1
 800b6ba:	0c20      	lsrs	r0, r4, #16
 800b6bc:	fbb2 f7fe 	udiv	r7, r2, lr
 800b6c0:	fb0e 2217 	mls	r2, lr, r7, r2
 800b6c4:	ea40 4202 	orr.w	r2, r0, r2, lsl #16
 800b6c8:	fb0c f007 	mul.w	r0, ip, r7
 800b6cc:	4290      	cmp	r0, r2
 800b6ce:	d907      	bls.n	800b6e0 <__udivmoddi4+0x11c>
 800b6d0:	18b2      	adds	r2, r6, r2
 800b6d2:	f107 38ff 	add.w	r8, r7, #4294967295
 800b6d6:	d202      	bcs.n	800b6de <__udivmoddi4+0x11a>
 800b6d8:	4290      	cmp	r0, r2
 800b6da:	f200 80e2 	bhi.w	800b8a2 <__udivmoddi4+0x2de>
 800b6de:	4647      	mov	r7, r8
 800b6e0:	1a12      	subs	r2, r2, r0
 800b6e2:	b2a4      	uxth	r4, r4
 800b6e4:	fbb2 f0fe 	udiv	r0, r2, lr
 800b6e8:	fb0e 2210 	mls	r2, lr, r0, r2
 800b6ec:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800b6f0:	fb0c fc00 	mul.w	ip, ip, r0
 800b6f4:	45a4      	cmp	ip, r4
 800b6f6:	d907      	bls.n	800b708 <__udivmoddi4+0x144>
 800b6f8:	1934      	adds	r4, r6, r4
 800b6fa:	f100 32ff 	add.w	r2, r0, #4294967295
 800b6fe:	d202      	bcs.n	800b706 <__udivmoddi4+0x142>
 800b700:	45a4      	cmp	ip, r4
 800b702:	f200 80cb 	bhi.w	800b89c <__udivmoddi4+0x2d8>
 800b706:	4610      	mov	r0, r2
 800b708:	eba4 040c 	sub.w	r4, r4, ip
 800b70c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 800b710:	e7a2      	b.n	800b658 <__udivmoddi4+0x94>
 800b712:	f1c1 0620 	rsb	r6, r1, #32
 800b716:	408b      	lsls	r3, r1
 800b718:	fa22 fc06 	lsr.w	ip, r2, r6
 800b71c:	ea4c 0c03 	orr.w	ip, ip, r3
 800b720:	fa07 f401 	lsl.w	r4, r7, r1
 800b724:	fa20 f306 	lsr.w	r3, r0, r6
 800b728:	40f7      	lsrs	r7, r6
 800b72a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800b72e:	4323      	orrs	r3, r4
 800b730:	fa00 f801 	lsl.w	r8, r0, r1
 800b734:	fa1f fe8c 	uxth.w	lr, ip
 800b738:	fbb7 f0f9 	udiv	r0, r7, r9
 800b73c:	0c1c      	lsrs	r4, r3, #16
 800b73e:	fb09 7710 	mls	r7, r9, r0, r7
 800b742:	ea44 4407 	orr.w	r4, r4, r7, lsl #16
 800b746:	fb00 f70e 	mul.w	r7, r0, lr
 800b74a:	42a7      	cmp	r7, r4
 800b74c:	fa02 f201 	lsl.w	r2, r2, r1
 800b750:	d90a      	bls.n	800b768 <__udivmoddi4+0x1a4>
 800b752:	eb1c 0404 	adds.w	r4, ip, r4
 800b756:	f100 3aff 	add.w	sl, r0, #4294967295
 800b75a:	f080 809b 	bcs.w	800b894 <__udivmoddi4+0x2d0>
 800b75e:	42a7      	cmp	r7, r4
 800b760:	f240 8098 	bls.w	800b894 <__udivmoddi4+0x2d0>
 800b764:	3802      	subs	r0, #2
 800b766:	4464      	add	r4, ip
 800b768:	1be4      	subs	r4, r4, r7
 800b76a:	b29f      	uxth	r7, r3
 800b76c:	fbb4 f3f9 	udiv	r3, r4, r9
 800b770:	fb09 4413 	mls	r4, r9, r3, r4
 800b774:	ea47 4404 	orr.w	r4, r7, r4, lsl #16
 800b778:	fb03 fe0e 	mul.w	lr, r3, lr
 800b77c:	45a6      	cmp	lr, r4
 800b77e:	d909      	bls.n	800b794 <__udivmoddi4+0x1d0>
 800b780:	eb1c 0404 	adds.w	r4, ip, r4
 800b784:	f103 37ff 	add.w	r7, r3, #4294967295
 800b788:	f080 8082 	bcs.w	800b890 <__udivmoddi4+0x2cc>
 800b78c:	45a6      	cmp	lr, r4
 800b78e:	d97f      	bls.n	800b890 <__udivmoddi4+0x2cc>
 800b790:	3b02      	subs	r3, #2
 800b792:	4464      	add	r4, ip
 800b794:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 800b798:	eba4 040e 	sub.w	r4, r4, lr
 800b79c:	fba0 e702 	umull	lr, r7, r0, r2
 800b7a0:	42bc      	cmp	r4, r7
 800b7a2:	4673      	mov	r3, lr
 800b7a4:	46b9      	mov	r9, r7
 800b7a6:	d363      	bcc.n	800b870 <__udivmoddi4+0x2ac>
 800b7a8:	d060      	beq.n	800b86c <__udivmoddi4+0x2a8>
 800b7aa:	b15d      	cbz	r5, 800b7c4 <__udivmoddi4+0x200>
 800b7ac:	ebb8 0203 	subs.w	r2, r8, r3
 800b7b0:	eb64 0409 	sbc.w	r4, r4, r9
 800b7b4:	fa04 f606 	lsl.w	r6, r4, r6
 800b7b8:	fa22 f301 	lsr.w	r3, r2, r1
 800b7bc:	431e      	orrs	r6, r3
 800b7be:	40cc      	lsrs	r4, r1
 800b7c0:	e9c5 6400 	strd	r6, r4, [r5]
 800b7c4:	2100      	movs	r1, #0
 800b7c6:	e74c      	b.n	800b662 <__udivmoddi4+0x9e>
 800b7c8:	0862      	lsrs	r2, r4, #1
 800b7ca:	0848      	lsrs	r0, r1, #1
 800b7cc:	ea42 71c1 	orr.w	r1, r2, r1, lsl #31
 800b7d0:	0c0b      	lsrs	r3, r1, #16
 800b7d2:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800b7d6:	b28a      	uxth	r2, r1
 800b7d8:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800b7dc:	fbb3 f1f6 	udiv	r1, r3, r6
 800b7e0:	07e4      	lsls	r4, r4, #31
 800b7e2:	46b4      	mov	ip, r6
 800b7e4:	4637      	mov	r7, r6
 800b7e6:	46b6      	mov	lr, r6
 800b7e8:	231f      	movs	r3, #31
 800b7ea:	fbb0 f0f6 	udiv	r0, r0, r6
 800b7ee:	1bd2      	subs	r2, r2, r7
 800b7f0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800b7f4:	e761      	b.n	800b6ba <__udivmoddi4+0xf6>
 800b7f6:	4661      	mov	r1, ip
 800b7f8:	e714      	b.n	800b624 <__udivmoddi4+0x60>
 800b7fa:	4610      	mov	r0, r2
 800b7fc:	e728      	b.n	800b650 <__udivmoddi4+0x8c>
 800b7fe:	f1c3 0120 	rsb	r1, r3, #32
 800b802:	fa20 f201 	lsr.w	r2, r0, r1
 800b806:	409e      	lsls	r6, r3
 800b808:	fa27 f101 	lsr.w	r1, r7, r1
 800b80c:	409f      	lsls	r7, r3
 800b80e:	433a      	orrs	r2, r7
 800b810:	ea4f 4e16 	mov.w	lr, r6, lsr #16
 800b814:	fa1f fc86 	uxth.w	ip, r6
 800b818:	fbb1 f7fe 	udiv	r7, r1, lr
 800b81c:	fb0e 1017 	mls	r0, lr, r7, r1
 800b820:	0c11      	lsrs	r1, r2, #16
 800b822:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800b826:	fb07 f80c 	mul.w	r8, r7, ip
 800b82a:	4588      	cmp	r8, r1
 800b82c:	fa04 f403 	lsl.w	r4, r4, r3
 800b830:	d93a      	bls.n	800b8a8 <__udivmoddi4+0x2e4>
 800b832:	1871      	adds	r1, r6, r1
 800b834:	f107 30ff 	add.w	r0, r7, #4294967295
 800b838:	d201      	bcs.n	800b83e <__udivmoddi4+0x27a>
 800b83a:	4588      	cmp	r8, r1
 800b83c:	d81f      	bhi.n	800b87e <__udivmoddi4+0x2ba>
 800b83e:	eba1 0108 	sub.w	r1, r1, r8
 800b842:	fbb1 f8fe 	udiv	r8, r1, lr
 800b846:	fb08 f70c 	mul.w	r7, r8, ip
 800b84a:	fb0e 1118 	mls	r1, lr, r8, r1
 800b84e:	b292      	uxth	r2, r2
 800b850:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800b854:	42ba      	cmp	r2, r7
 800b856:	d22f      	bcs.n	800b8b8 <__udivmoddi4+0x2f4>
 800b858:	18b2      	adds	r2, r6, r2
 800b85a:	f108 31ff 	add.w	r1, r8, #4294967295
 800b85e:	d2c6      	bcs.n	800b7ee <__udivmoddi4+0x22a>
 800b860:	42ba      	cmp	r2, r7
 800b862:	d2c4      	bcs.n	800b7ee <__udivmoddi4+0x22a>
 800b864:	f1a8 0102 	sub.w	r1, r8, #2
 800b868:	4432      	add	r2, r6
 800b86a:	e7c0      	b.n	800b7ee <__udivmoddi4+0x22a>
 800b86c:	45f0      	cmp	r8, lr
 800b86e:	d29c      	bcs.n	800b7aa <__udivmoddi4+0x1e6>
 800b870:	ebbe 0302 	subs.w	r3, lr, r2
 800b874:	eb67 070c 	sbc.w	r7, r7, ip
 800b878:	3801      	subs	r0, #1
 800b87a:	46b9      	mov	r9, r7
 800b87c:	e795      	b.n	800b7aa <__udivmoddi4+0x1e6>
 800b87e:	eba6 0808 	sub.w	r8, r6, r8
 800b882:	4441      	add	r1, r8
 800b884:	1eb8      	subs	r0, r7, #2
 800b886:	fbb1 f8fe 	udiv	r8, r1, lr
 800b88a:	fb08 f70c 	mul.w	r7, r8, ip
 800b88e:	e7dc      	b.n	800b84a <__udivmoddi4+0x286>
 800b890:	463b      	mov	r3, r7
 800b892:	e77f      	b.n	800b794 <__udivmoddi4+0x1d0>
 800b894:	4650      	mov	r0, sl
 800b896:	e767      	b.n	800b768 <__udivmoddi4+0x1a4>
 800b898:	4608      	mov	r0, r1
 800b89a:	e6fb      	b.n	800b694 <__udivmoddi4+0xd0>
 800b89c:	4434      	add	r4, r6
 800b89e:	3802      	subs	r0, #2
 800b8a0:	e732      	b.n	800b708 <__udivmoddi4+0x144>
 800b8a2:	3f02      	subs	r7, #2
 800b8a4:	4432      	add	r2, r6
 800b8a6:	e71b      	b.n	800b6e0 <__udivmoddi4+0x11c>
 800b8a8:	eba1 0108 	sub.w	r1, r1, r8
 800b8ac:	4638      	mov	r0, r7
 800b8ae:	fbb1 f8fe 	udiv	r8, r1, lr
 800b8b2:	fb08 f70c 	mul.w	r7, r8, ip
 800b8b6:	e7c8      	b.n	800b84a <__udivmoddi4+0x286>
 800b8b8:	4641      	mov	r1, r8
 800b8ba:	e798      	b.n	800b7ee <__udivmoddi4+0x22a>

0800b8bc <_init>:
 800b8bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b8be:	bf00      	nop
 800b8c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b8c2:	bc08      	pop	{r3}
 800b8c4:	469e      	mov	lr, r3
 800b8c6:	4770      	bx	lr

0800b8c8 <_fini>:
 800b8c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b8ca:	bf00      	nop
 800b8cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b8ce:	bc08      	pop	{r3}
 800b8d0:	469e      	mov	lr, r3
 800b8d2:	4770      	bx	lr
